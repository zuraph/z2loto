{"ast":null,"code":"import _classCallCheck from\"C:\\\\Users\\\\zura.ph\\\\WebstormProjects\\\\zz-regul\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";import _createClass from\"C:\\\\Users\\\\zura.ph\\\\WebstormProjects\\\\zz-regul\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";import _assertThisInitialized from\"C:\\\\Users\\\\zura.ph\\\\WebstormProjects\\\\zz-regul\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/assertThisInitialized\";import _inherits from\"C:\\\\Users\\\\zura.ph\\\\WebstormProjects\\\\zz-regul\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";import _createSuper from\"C:\\\\Users\\\\zura.ph\\\\WebstormProjects\\\\zz-regul\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createSuper\";import React,{Component}from'react';import{TreeTable}from'../../components/treetable/TreeTable';import{Column}from'../../components/column/Column';import{NodeService}from'../service/NodeService';import{TabView}from'../../components/tabview/TabView';import{useLiveEditorTabs}from'../liveeditor/LiveEditor';import{AppInlineHeader}from'../../AppInlineHeader';export var TreeTableStyleDemo=/*#__PURE__*/function(_Component){_inherits(TreeTableStyleDemo,_Component);var _super=_createSuper(TreeTableStyleDemo);function TreeTableStyleDemo(props){var _this;_classCallCheck(this,TreeTableStyleDemo);_this=_super.call(this,props);_this.state={nodes:[]};_this.nodeservice=new NodeService();_this.sizeTemplate=_this.sizeTemplate.bind(_assertThisInitialized(_this));_this.rowClassName=_this.rowClassName.bind(_assertThisInitialized(_this));return _this;}_createClass(TreeTableStyleDemo,[{key:\"componentDidMount\",value:function componentDidMount(){var _this2=this;this.nodeservice.getTreeTableNodes().then(function(data){return _this2.setState({nodes:data});});}},{key:\"sizeTemplate\",value:function sizeTemplate(node){var size=node.data.size;var fontWeight=parseInt(size,10)>75?'bold':'normal';return/*#__PURE__*/React.createElement(\"span\",{style:{fontWeight:fontWeight}},size);}},{key:\"rowClassName\",value:function rowClassName(node){return{'p-highlight':node.children&&node.children.length===3};}},{key:\"render\",value:function render(){return/*#__PURE__*/React.createElement(\"div\",null,/*#__PURE__*/React.createElement(\"div\",{className:\"content-section introduction\"},/*#__PURE__*/React.createElement(AppInlineHeader,{changelogText:\"treeTable\"},/*#__PURE__*/React.createElement(\"h1\",null,\"TreeTable \",/*#__PURE__*/React.createElement(\"span\",null,\"Styling\")),/*#__PURE__*/React.createElement(\"p\",null,\"Particular rows and cells can be styled based on data.\"))),/*#__PURE__*/React.createElement(\"div\",{className:\"content-section implementation\"},/*#__PURE__*/React.createElement(\"div\",{className:\"card\"},/*#__PURE__*/React.createElement(\"p\",null,\"This treetable highlights cells with a bolder font weight whose size value is greater than 75kb and highlights rows who has at 3 child rows.\"),/*#__PURE__*/React.createElement(TreeTable,{value:this.state.nodes,rowClassName:this.rowClassName},/*#__PURE__*/React.createElement(Column,{field:\"name\",header:\"Name\",expander:true}),/*#__PURE__*/React.createElement(Column,{field:\"size\",header:\"Size\",body:this.sizeTemplate}),/*#__PURE__*/React.createElement(Column,{field:\"type\",header:\"Type\"})))),/*#__PURE__*/React.createElement(TreeTableStyleDemoDoc,null));}}]);return TreeTableStyleDemo;}(Component);var TreeTableStyleDemoDoc=/*#__PURE__*/function(_Component2){_inherits(TreeTableStyleDemoDoc,_Component2);var _super2=_createSuper(TreeTableStyleDemoDoc);function TreeTableStyleDemoDoc(props){var _this3;_classCallCheck(this,TreeTableStyleDemoDoc);_this3=_super2.call(this,props);_this3.sources={'class':{tabName:'Class Source',content:\"\\nimport React, { Component } from 'react';\\nimport { TreeTable } from 'primereact/treetable';\\nimport { Column } from 'primereact/column';\\nimport { NodeService } from '../service/NodeService';\\n\\nexport class TreeTableStyleDemo extends Component {\\n\\n    constructor(props) {\\n        super(props);\\n        this.state = {\\n            nodes: []\\n        };\\n        this.nodeservice = new NodeService();\\n        this.sizeTemplate = this.sizeTemplate.bind(this);\\n        this.rowClassName = this.rowClassName.bind(this);\\n    }\\n\\n    componentDidMount() {\\n        this.nodeservice.getTreeTableNodes().then(data => this.setState({ nodes: data }));\\n    }\\n\\n    sizeTemplate(node) {\\n        let size = node.data.size;\\n        let fontWeight = parseInt(size, 10) > 75 ? 'bold' : 'normal';\\n\\n        return <span style={{ fontWeight: fontWeight }}>{size}</span>;\\n    }\\n\\n    rowClassName(node) {\\n        return { 'p-highlight': (node.children && node.children.length === 3) };\\n    }\\n\\n    render() {\\n        return (\\n            <div>\\n                <div className=\\\"card\\\">\\n                    <p>This treetable highlights cells with a bolder font weight whose size value is greater than 75kb and highlights rows who has at 3 child rows.</p>\\n                    <TreeTable value={this.state.nodes} rowClassName={this.rowClassName}>\\n                        <Column field=\\\"name\\\" header=\\\"Name\\\" expander></Column>\\n                        <Column field=\\\"size\\\" header=\\\"Size\\\" body={this.sizeTemplate}></Column>\\n                        <Column field=\\\"type\\\" header=\\\"Type\\\"></Column>\\n                    </TreeTable>\\n                </div>\\n            </div>\\n        )\\n    }\\n}\\n                \"},'hooks':{tabName:'Hooks Source',content:\"\\nimport React, { useState, useEffect } from 'react';\\nimport { TreeTable } from 'primereact/treetable';\\nimport { Column } from 'primereact/column';\\nimport { NodeService } from '../service/NodeService';\\n\\nconst TreeTableStyleDemo = () => {\\n    const [nodes, setNodes] = useState([]);\\n    const nodeservice = new NodeService();\\n\\n    useEffect(() => {\\n        nodeservice.getTreeTableNodes().then(data => setNodes(data));\\n    }, []); // eslint-disable-line react-hooks/exhaustive-deps\\n\\n    const sizeTemplate = (node) => {\\n        let size = node.data.size;\\n        let fontWeight = parseInt(size, 10) > 75 ? 'bold' : 'normal';\\n\\n        return <span style={{ fontWeight: fontWeight }}>{size}</span>;\\n    }\\n\\n    const rowClassName = (node) => {\\n        return { 'p-highlight': (node.children && node.children.length === 3) };\\n    }\\n\\n    return (\\n        <div>\\n            <div className=\\\"card\\\">\\n                <p>This treetable highlights cells with a bolder font weight whose size value is greater than 75kb and highlights rows who has at 3 child rows.</p>\\n                <TreeTable value={nodes} rowClassName={rowClassName}>\\n                    <Column field=\\\"name\\\" header=\\\"Name\\\" expander></Column>\\n                    <Column field=\\\"size\\\" header=\\\"Size\\\" body={sizeTemplate}></Column>\\n                    <Column field=\\\"type\\\" header=\\\"Type\\\"></Column>\\n                </TreeTable>\\n            </div>\\n        </div>\\n    );\\n}\\n                \"},'ts':{tabName:'TS Source',content:\"\\nimport React, { useState, useEffect } from 'react';\\nimport { TreeTable } from 'primereact/treetable';\\nimport { Column } from 'primereact/column';\\nimport { NodeService } from '../service/NodeService';\\n\\nconst TreeTableStyleDemo = () => {\\n    const [nodes, setNodes] = useState([]);\\n    const nodeservice = new NodeService();\\n\\n    useEffect(() => {\\n        nodeservice.getTreeTableNodes().then(data => setNodes(data));\\n    }, []); // eslint-disable-line react-hooks/exhaustive-deps\\n\\n    const sizeTemplate = (node) => {\\n        let size = node.data.size;\\n        let fontWeight = parseInt(size, 10) > 75 ? 'bold' : 'normal';\\n\\n        return <span style={{ fontWeight: fontWeight }}>{size}</span>;\\n    }\\n\\n    const rowClassName = (node) => {\\n        return { 'p-highlight': (node.children && node.children.length === 3) };\\n    }\\n\\n    return (\\n        <div>\\n            <div className=\\\"card\\\">\\n                <p>This treetable highlights cells with a bolder font weight whose size value is greater than 75kb and highlights rows who has at 3 child rows.</p>\\n                <TreeTable value={nodes} rowClassName={rowClassName}>\\n                    <Column field=\\\"name\\\" header=\\\"Name\\\" expander></Column>\\n                    <Column field=\\\"size\\\" header=\\\"Size\\\" body={sizeTemplate}></Column>\\n                    <Column field=\\\"type\\\" header=\\\"Type\\\"></Column>\\n                </TreeTable>\\n            </div>\\n        </div>\\n    );\\n}\\n                \"}};return _this3;}_createClass(TreeTableStyleDemoDoc,[{key:\"shouldComponentUpdate\",value:function shouldComponentUpdate(){return false;}},{key:\"render\",value:function render(){return/*#__PURE__*/React.createElement(\"div\",{className:\"content-section documentation\"},/*#__PURE__*/React.createElement(TabView,null,useLiveEditorTabs({name:'TreeTableStyleDemo',sources:this.sources,service:'NodeService',data:'treetablenodes'})));}}]);return TreeTableStyleDemoDoc;}(Component);","map":{"version":3,"sources":["C:/Users/zura.ph/WebstormProjects/zz-regul/src/showcase/treetable/TreeTableStyleDemo.js"],"names":["React","Component","TreeTable","Column","NodeService","TabView","useLiveEditorTabs","AppInlineHeader","TreeTableStyleDemo","props","state","nodes","nodeservice","sizeTemplate","bind","rowClassName","getTreeTableNodes","then","data","setState","node","size","fontWeight","parseInt","children","length","TreeTableStyleDemoDoc","sources","tabName","content","name","service"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { TreeTable } from '../../components/treetable/TreeTable';\r\nimport { Column } from '../../components/column/Column';\r\nimport { NodeService } from '../service/NodeService';\r\nimport { TabView } from '../../components/tabview/TabView';\r\nimport { useLiveEditorTabs }from '../liveeditor/LiveEditor';\r\nimport { AppInlineHeader } from '../../AppInlineHeader';\r\n\r\nexport class TreeTableStyleDemo extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            nodes: []\r\n        };\r\n        this.nodeservice = new NodeService();\r\n        this.sizeTemplate = this.sizeTemplate.bind(this);\r\n        this.rowClassName = this.rowClassName.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.nodeservice.getTreeTableNodes().then(data => this.setState({ nodes: data }));\r\n    }\r\n\r\n    sizeTemplate(node) {\r\n        let size = node.data.size;\r\n        let fontWeight = parseInt(size, 10) > 75 ? 'bold' : 'normal';\r\n\r\n        return <span style={{ fontWeight: fontWeight }}>{size}</span>;\r\n    }\r\n\r\n    rowClassName(node) {\r\n        return { 'p-highlight': (node.children && node.children.length === 3) };\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div className=\"content-section introduction\">\r\n                    <AppInlineHeader changelogText=\"treeTable\">\r\n                        <h1>TreeTable <span>Styling</span></h1>\r\n                        <p>Particular rows and cells can be styled based on data.</p>\r\n                    </AppInlineHeader>\r\n                </div>\r\n\r\n                <div className=\"content-section implementation\">\r\n                    <div className=\"card\">\r\n                        <p>This treetable highlights cells with a bolder font weight whose size value is greater than 75kb and highlights rows who has at 3 child rows.</p>\r\n                        <TreeTable value={this.state.nodes} rowClassName={this.rowClassName}>\r\n                            <Column field=\"name\" header=\"Name\" expander></Column>\r\n                            <Column field=\"size\" header=\"Size\" body={this.sizeTemplate}></Column>\r\n                            <Column field=\"type\" header=\"Type\"></Column>\r\n                        </TreeTable>\r\n                    </div>\r\n                </div>\r\n\r\n                <TreeTableStyleDemoDoc />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nclass TreeTableStyleDemoDoc extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.sources = {\r\n            'class': {\r\n                tabName: 'Class Source',\r\n                content: `\r\nimport React, { Component } from 'react';\r\nimport { TreeTable } from 'primereact/treetable';\r\nimport { Column } from 'primereact/column';\r\nimport { NodeService } from '../service/NodeService';\r\n\r\nexport class TreeTableStyleDemo extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            nodes: []\r\n        };\r\n        this.nodeservice = new NodeService();\r\n        this.sizeTemplate = this.sizeTemplate.bind(this);\r\n        this.rowClassName = this.rowClassName.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.nodeservice.getTreeTableNodes().then(data => this.setState({ nodes: data }));\r\n    }\r\n\r\n    sizeTemplate(node) {\r\n        let size = node.data.size;\r\n        let fontWeight = parseInt(size, 10) > 75 ? 'bold' : 'normal';\r\n\r\n        return <span style={{ fontWeight: fontWeight }}>{size}</span>;\r\n    }\r\n\r\n    rowClassName(node) {\r\n        return { 'p-highlight': (node.children && node.children.length === 3) };\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div className=\"card\">\r\n                    <p>This treetable highlights cells with a bolder font weight whose size value is greater than 75kb and highlights rows who has at 3 child rows.</p>\r\n                    <TreeTable value={this.state.nodes} rowClassName={this.rowClassName}>\r\n                        <Column field=\"name\" header=\"Name\" expander></Column>\r\n                        <Column field=\"size\" header=\"Size\" body={this.sizeTemplate}></Column>\r\n                        <Column field=\"type\" header=\"Type\"></Column>\r\n                    </TreeTable>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n                `\r\n            },\r\n            'hooks': {\r\n                tabName: 'Hooks Source',\r\n                content: `\r\nimport React, { useState, useEffect } from 'react';\r\nimport { TreeTable } from 'primereact/treetable';\r\nimport { Column } from 'primereact/column';\r\nimport { NodeService } from '../service/NodeService';\r\n\r\nconst TreeTableStyleDemo = () => {\r\n    const [nodes, setNodes] = useState([]);\r\n    const nodeservice = new NodeService();\r\n\r\n    useEffect(() => {\r\n        nodeservice.getTreeTableNodes().then(data => setNodes(data));\r\n    }, []); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n    const sizeTemplate = (node) => {\r\n        let size = node.data.size;\r\n        let fontWeight = parseInt(size, 10) > 75 ? 'bold' : 'normal';\r\n\r\n        return <span style={{ fontWeight: fontWeight }}>{size}</span>;\r\n    }\r\n\r\n    const rowClassName = (node) => {\r\n        return { 'p-highlight': (node.children && node.children.length === 3) };\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"card\">\r\n                <p>This treetable highlights cells with a bolder font weight whose size value is greater than 75kb and highlights rows who has at 3 child rows.</p>\r\n                <TreeTable value={nodes} rowClassName={rowClassName}>\r\n                    <Column field=\"name\" header=\"Name\" expander></Column>\r\n                    <Column field=\"size\" header=\"Size\" body={sizeTemplate}></Column>\r\n                    <Column field=\"type\" header=\"Type\"></Column>\r\n                </TreeTable>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n                `\r\n            },\r\n            'ts': {\r\n                tabName: 'TS Source',\r\n                content: `\r\nimport React, { useState, useEffect } from 'react';\r\nimport { TreeTable } from 'primereact/treetable';\r\nimport { Column } from 'primereact/column';\r\nimport { NodeService } from '../service/NodeService';\r\n\r\nconst TreeTableStyleDemo = () => {\r\n    const [nodes, setNodes] = useState([]);\r\n    const nodeservice = new NodeService();\r\n\r\n    useEffect(() => {\r\n        nodeservice.getTreeTableNodes().then(data => setNodes(data));\r\n    }, []); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n    const sizeTemplate = (node) => {\r\n        let size = node.data.size;\r\n        let fontWeight = parseInt(size, 10) > 75 ? 'bold' : 'normal';\r\n\r\n        return <span style={{ fontWeight: fontWeight }}>{size}</span>;\r\n    }\r\n\r\n    const rowClassName = (node) => {\r\n        return { 'p-highlight': (node.children && node.children.length === 3) };\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"card\">\r\n                <p>This treetable highlights cells with a bolder font weight whose size value is greater than 75kb and highlights rows who has at 3 child rows.</p>\r\n                <TreeTable value={nodes} rowClassName={rowClassName}>\r\n                    <Column field=\"name\" header=\"Name\" expander></Column>\r\n                    <Column field=\"size\" header=\"Size\" body={sizeTemplate}></Column>\r\n                    <Column field=\"type\" header=\"Type\"></Column>\r\n                </TreeTable>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n                `\r\n            }\r\n        }\r\n    }\r\n\r\n    shouldComponentUpdate() {\r\n        return false;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"content-section documentation\">\r\n                <TabView>\r\n                    {\r\n                        useLiveEditorTabs({ name: 'TreeTableStyleDemo', sources: this.sources, service: 'NodeService', data: 'treetablenodes' })\r\n                    }\r\n                </TabView>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}