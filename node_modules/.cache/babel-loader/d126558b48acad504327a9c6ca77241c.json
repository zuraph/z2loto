{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\zura.ph\\\\WebstormProjects\\\\zloto\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\zura.ph\\\\WebstormProjects\\\\zloto\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"C:\\\\Users\\\\zura.ph\\\\WebstormProjects\\\\zloto\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"C:\\\\Users\\\\zura.ph\\\\WebstormProjects\\\\zloto\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _createSuper from \"C:\\\\Users\\\\zura.ph\\\\WebstormProjects\\\\zloto\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"C:\\\\Users\\\\zura.ph\\\\WebstormProjects\\\\zloto\\\\src\\\\showcase\\\\treetable\\\\TreeTableEditDemo.js\";\nimport React, { Component } from 'react';\nimport { TreeTable } from '../../components/treetable/TreeTable';\nimport { Column } from '../../components/column/Column';\nimport { InputText } from '../../components/inputtext/InputText';\nimport { NodeService } from '../service/NodeService';\nimport { TabView } from '../../components/tabview/TabView';\nimport { useLiveEditorTabs } from '../liveeditor/LiveEditor';\nimport { AppInlineHeader } from '../../AppInlineHeader';\nimport './TreeTableDemo.scss';\nexport var TreeTableEditDemo = /*#__PURE__*/function (_Component) {\n  _inherits(TreeTableEditDemo, _Component);\n\n  var _super = _createSuper(TreeTableEditDemo);\n\n  function TreeTableEditDemo(props) {\n    var _this;\n\n    _classCallCheck(this, TreeTableEditDemo);\n\n    _this = _super.call(this, props);\n    _this.state = {\n      nodes: []\n    };\n    _this.nodeservice = new NodeService();\n    _this.sizeEditor = _this.sizeEditor.bind(_assertThisInitialized(_this));\n    _this.typeEditor = _this.typeEditor.bind(_assertThisInitialized(_this));\n    _this.requiredValidator = _this.requiredValidator.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(TreeTableEditDemo, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      this.nodeservice.getTreeTableNodes().then(function (data) {\n        return _this2.setState({\n          nodes: data\n        });\n      });\n    }\n  }, {\n    key: \"onEditorValueChange\",\n    value: function onEditorValueChange(props, value) {\n      var newNodes = JSON.parse(JSON.stringify(this.state.nodes));\n      var editedNode = this.findNodeByKey(newNodes, props.node.key);\n      editedNode.data[props.field] = value;\n      this.setState({\n        nodes: newNodes\n      });\n    }\n  }, {\n    key: \"findNodeByKey\",\n    value: function findNodeByKey(nodes, key) {\n      var path = key.split('-');\n      var node;\n\n      while (path.length) {\n        var list = node ? node.children : nodes;\n        node = list[parseInt(path[0], 10)];\n        path.shift();\n      }\n\n      return node;\n    }\n  }, {\n    key: \"inputTextEditor\",\n    value: function inputTextEditor(props, field) {\n      var _this3 = this;\n\n      return /*#__PURE__*/React.createElement(InputText, {\n        type: \"text\",\n        value: props.node.data[field],\n        onChange: function onChange(e) {\n          return _this3.onEditorValueChange(props, e.target.value);\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 13\n        }\n      });\n    }\n  }, {\n    key: \"sizeEditor\",\n    value: function sizeEditor(props) {\n      return this.inputTextEditor(props, 'size');\n    }\n  }, {\n    key: \"typeEditor\",\n    value: function typeEditor(props) {\n      return this.inputTextEditor(props, 'type');\n    }\n  }, {\n    key: \"requiredValidator\",\n    value: function requiredValidator(e) {\n      var props = e.columnProps;\n      var value = props.node.data[props.field];\n      return value && value.length > 0;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"content-section introduction\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(AppInlineHeader, {\n        changelogText: \"treeTable\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(\"h1\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 25\n        }\n      }, \"TreeTable \", /*#__PURE__*/React.createElement(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 39\n        }\n      }, \"Edit\")), /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 25\n        }\n      }, \"Incell editing provides a quick and user friendly way to manipulate data.\"))), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"content-section implementation treetable-editing-demo\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"card\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(TreeTable, {\n        value: this.state.nodes,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(Column, {\n        field: \"name\",\n        header: \"Name\",\n        expander: true,\n        style: {\n          height: '3.5em'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 29\n        }\n      }), /*#__PURE__*/React.createElement(Column, {\n        field: \"size\",\n        header: \"Size\",\n        editor: this.sizeEditor,\n        editorValidator: this.requiredValidator,\n        style: {\n          height: '3.5em'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 29\n        }\n      }), /*#__PURE__*/React.createElement(Column, {\n        field: \"type\",\n        header: \"Type\",\n        editor: this.typeEditor,\n        style: {\n          height: '3.5em'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 29\n        }\n      })))), /*#__PURE__*/React.createElement(TreeTableEditDemoDoc, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 17\n        }\n      }));\n    }\n  }]);\n\n  return TreeTableEditDemo;\n}(Component);\n\nvar TreeTableEditDemoDoc = /*#__PURE__*/function (_Component2) {\n  _inherits(TreeTableEditDemoDoc, _Component2);\n\n  var _super2 = _createSuper(TreeTableEditDemoDoc);\n\n  function TreeTableEditDemoDoc(props) {\n    var _this4;\n\n    _classCallCheck(this, TreeTableEditDemoDoc);\n\n    _this4 = _super2.call(this, props);\n    _this4.sources = {\n      'class': {\n        tabName: 'Class Source',\n        content: \"\\nimport React, { Component } from 'react';\\nimport { TreeTable } from 'primereact/treetable';\\nimport { Column } from 'primereact/column';\\nimport { InputText } from 'primereact/inputtext';\\nimport { NodeService } from '../service/NodeService';\\nimport './TreeTableDemo.css';\\n\\nexport class TreeTableEditDemo extends Component {\\n\\n    constructor(props) {\\n        super(props);\\n        this.state = {\\n            nodes: []\\n        };\\n        this.nodeservice = new NodeService();\\n\\n        this.sizeEditor = this.sizeEditor.bind(this);\\n        this.typeEditor = this.typeEditor.bind(this);\\n        this.requiredValidator = this.requiredValidator.bind(this);\\n    }\\n\\n    componentDidMount() {\\n        this.nodeservice.getTreeTableNodes().then(data => this.setState({ nodes: data }));\\n    }\\n\\n    onEditorValueChange(props, value) {\\n        let newNodes = JSON.parse(JSON.stringify(this.state.nodes));\\n        let editedNode = this.findNodeByKey(newNodes, props.node.key);\\n        editedNode.data[props.field] = value;\\n\\n        this.setState({\\n            nodes: newNodes\\n        });\\n    }\\n\\n    findNodeByKey(nodes, key) {\\n        let path = key.split('-');\\n        let node;\\n\\n        while (path.length) {\\n            let list = node ? node.children : nodes;\\n            node = list[parseInt(path[0], 10)];\\n            path.shift();\\n        }\\n\\n        return node;\\n    }\\n\\n    inputTextEditor(props, field) {\\n        return (\\n            <InputText type=\\\"text\\\" value={props.node.data[field]}\\n                onChange={(e) => this.onEditorValueChange(props, e.target.value)} />\\n        );\\n    }\\n\\n    sizeEditor(props) {\\n        return this.inputTextEditor(props, 'size');\\n    }\\n\\n    typeEditor(props) {\\n        return this.inputTextEditor(props, 'type');\\n    }\\n\\n    requiredValidator(e) {\\n        let props = e.columnProps;\\n        let value = props.node.data[props.field];\\n\\n        return value && value.length > 0;\\n    }\\n\\n    render() {\\n        return (\\n            <div>\\n                <div className=\\\"card\\\">\\n                    <TreeTable value={this.state.nodes}>\\n                        <Column field=\\\"name\\\" header=\\\"Name\\\" expander style={{ height: '3.5em' }}></Column>\\n                        <Column field=\\\"size\\\" header=\\\"Size\\\" editor={this.sizeEditor} editorValidator={this.requiredValidator} style={{ height: '3.5em' }}></Column>\\n                        <Column field=\\\"type\\\" header=\\\"Type\\\" editor={this.typeEditor} style={{ height: '3.5em' }}></Column>\\n                    </TreeTable>\\n                </div>\\n            </div>\\n        )\\n    }\\n}\\n                \"\n      },\n      'hooks': {\n        tabName: 'Hooks Source',\n        content: \"\\nimport React, { useState, useEffect } from 'react';\\nimport { TreeTable } from 'primereact/treetable';\\nimport { Column } from 'primereact/column';\\nimport { InputText } from 'primereact/inputtext';\\nimport { NodeService } from '../service/NodeService';\\nimport './TreeTableDemo.css';\\n\\nconst TreeTableEditDemo = () => {\\n    const [nodes, setNodes] = useState([]);\\n    const nodeservice = new NodeService();\\n\\n    useEffect(() => {\\n        nodeservice.getTreeTableNodes().then(data => setNodes(data));\\n    }, []); // eslint-disable-line react-hooks/exhaustive-deps\\n\\n    const onEditorValueChange = (props, value) => {\\n        let newNodes = JSON.parse(JSON.stringify(nodes));\\n        let editedNode = findNodeByKey(newNodes, props.node.key);\\n        editedNode.data[props.field] = value;\\n\\n        setNodes(newNodes);\\n    }\\n\\n    const findNodeByKey = (nodes, key) => {\\n        let path = key.split('-');\\n        let node;\\n\\n        while (path.length) {\\n            let list = node ? node.children : nodes;\\n            node = list[parseInt(path[0], 10)];\\n            path.shift();\\n        }\\n\\n        return node;\\n    }\\n\\n    const inputTextEditor = (props, field) => {\\n        return (\\n            <InputText type=\\\"text\\\" value={props.node.data[field]}\\n                onChange={(e) => onEditorValueChange(props, e.target.value)} />\\n        );\\n    }\\n\\n    const sizeEditor = (props) => {\\n        return inputTextEditor(props, 'size');\\n    }\\n\\n    const typeEditor = (props) => {\\n        return inputTextEditor(props, 'type');\\n    }\\n\\n    const requiredValidator = (e) => {\\n        let props = e.columnProps;\\n        let value = props.node.data[props.field];\\n\\n        return value && value.length > 0;\\n    }\\n\\n    return (\\n        <div>\\n            <div className=\\\"card\\\">\\n                <TreeTable value={nodes}>\\n                    <Column field=\\\"name\\\" header=\\\"Name\\\" expander style={{ height: '3.5em' }}></Column>\\n                    <Column field=\\\"size\\\" header=\\\"Size\\\" editor={sizeEditor} editorValidator={requiredValidator} style={{ height: '3.5em' }}></Column>\\n                    <Column field=\\\"type\\\" header=\\\"Type\\\" editor={typeEditor} style={{ height: '3.5em' }}></Column>\\n                </TreeTable>\\n            </div>\\n        </div>\\n    );\\n}\\n                \"\n      },\n      'ts': {\n        tabName: 'TS Source',\n        content: \"\\nimport React, { useState, useEffect } from 'react';\\nimport { TreeTable } from 'primereact/treetable';\\nimport { Column } from 'primereact/column';\\nimport { InputText } from 'primereact/inputtext';\\nimport { NodeService } from '../service/NodeService';\\nimport './TreeTableDemo.css';\\n\\nconst TreeTableEditDemo = () => {\\n    const [nodes, setNodes] = useState([]);\\n    const nodeservice = new NodeService();\\n\\n    useEffect(() => {\\n        nodeservice.getTreeTableNodes().then(data => setNodes(data));\\n    }, []); // eslint-disable-line react-hooks/exhaustive-deps\\n\\n    const onEditorValueChange = (props, value) => {\\n        let newNodes = JSON.parse(JSON.stringify(nodes));\\n        let editedNode = findNodeByKey(newNodes, props.node.key);\\n        editedNode.data[props.field] = value;\\n\\n        setNodes(newNodes);\\n    }\\n\\n    const findNodeByKey = (nodes, key) => {\\n        let path = key.split('-');\\n        let node;\\n\\n        while (path.length) {\\n            let list = node ? node.children : nodes;\\n            node = list[parseInt(path[0], 10)];\\n            path.shift();\\n        }\\n\\n        return node;\\n    }\\n\\n    const inputTextEditor = (props, field) => {\\n        return (\\n            <InputText type=\\\"text\\\" value={props.node.data[field]}\\n                onChange={(e) => onEditorValueChange(props, e.target.value)} />\\n        );\\n    }\\n\\n    const sizeEditor = (props) => {\\n        return inputTextEditor(props, 'size');\\n    }\\n\\n    const typeEditor = (props) => {\\n        return inputTextEditor(props, 'type');\\n    }\\n\\n    const requiredValidator = (e) => {\\n        let props = e.columnProps;\\n        let value = props.node.data[props.field];\\n\\n        return value && value.length > 0;\\n    }\\n\\n    return (\\n        <div>\\n            <div className=\\\"card\\\">\\n                <TreeTable value={nodes}>\\n                    <Column field=\\\"name\\\" header=\\\"Name\\\" expander style={{ height: '3.5em' }}></Column>\\n                    <Column field=\\\"size\\\" header=\\\"Size\\\" editor={sizeEditor} editorValidator={requiredValidator} style={{ height: '3.5em' }}></Column>\\n                    <Column field=\\\"type\\\" header=\\\"Type\\\" editor={typeEditor} style={{ height: '3.5em' }}></Column>\\n                </TreeTable>\\n            </div>\\n        </div>\\n    );\\n}\\n                \"\n      }\n    };\n    _this4.extFiles = {\n      'src/demo/TreeTableDemo.css': {\n        content: \"\\n.treetable-editing-demo .p-treetable .p-treetable-tbody > tr > td.p-cell-editing {\\n    padding-top: 0;\\n    padding-bottom: 0;\\n}\\n                \"\n      }\n    };\n    return _this4;\n  }\n\n  _createClass(TreeTableEditDemoDoc, [{\n    key: \"shouldComponentUpdate\",\n    value: function shouldComponentUpdate() {\n      return false;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"content-section documentation\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 365,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(TabView, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 366,\n          columnNumber: 17\n        }\n      }, useLiveEditorTabs({\n        name: 'TreeTableEditDemo',\n        sources: this.sources,\n        service: 'NodeService',\n        data: 'treetablenodes',\n        extFiles: this.extFiles\n      })));\n    }\n  }]);\n\n  return TreeTableEditDemoDoc;\n}(Component);","map":{"version":3,"sources":["C:/Users/zura.ph/WebstormProjects/zloto/src/showcase/treetable/TreeTableEditDemo.js"],"names":["React","Component","TreeTable","Column","InputText","NodeService","TabView","useLiveEditorTabs","AppInlineHeader","TreeTableEditDemo","props","state","nodes","nodeservice","sizeEditor","bind","typeEditor","requiredValidator","getTreeTableNodes","then","data","setState","value","newNodes","JSON","parse","stringify","editedNode","findNodeByKey","node","key","field","path","split","length","list","children","parseInt","shift","e","onEditorValueChange","target","inputTextEditor","columnProps","height","TreeTableEditDemoDoc","sources","tabName","content","extFiles","name","service"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { TreeTable } from '../../components/treetable/TreeTable';\r\nimport { Column } from '../../components/column/Column';\r\nimport { InputText } from '../../components/inputtext/InputText';\r\nimport { NodeService } from '../service/NodeService';\r\nimport { TabView } from '../../components/tabview/TabView';\r\nimport { useLiveEditorTabs }from '../liveeditor/LiveEditor';\r\nimport { AppInlineHeader } from '../../AppInlineHeader';\r\nimport './TreeTableDemo.scss';\r\n\r\nexport class TreeTableEditDemo extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            nodes: []\r\n        };\r\n        this.nodeservice = new NodeService();\r\n\r\n        this.sizeEditor = this.sizeEditor.bind(this);\r\n        this.typeEditor = this.typeEditor.bind(this);\r\n        this.requiredValidator = this.requiredValidator.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.nodeservice.getTreeTableNodes().then(data => this.setState({ nodes: data }));\r\n    }\r\n\r\n    onEditorValueChange(props, value) {\r\n        let newNodes = JSON.parse(JSON.stringify(this.state.nodes));\r\n        let editedNode = this.findNodeByKey(newNodes, props.node.key);\r\n        editedNode.data[props.field] = value;\r\n\r\n        this.setState({\r\n            nodes: newNodes\r\n        });\r\n    }\r\n\r\n    findNodeByKey(nodes, key) {\r\n        let path = key.split('-');\r\n        let node;\r\n\r\n        while (path.length) {\r\n            let list = node ? node.children : nodes;\r\n            node = list[parseInt(path[0], 10)];\r\n            path.shift();\r\n        }\r\n\r\n        return node;\r\n    }\r\n\r\n    inputTextEditor(props, field) {\r\n        return (\r\n            <InputText type=\"text\" value={props.node.data[field]}\r\n                onChange={(e) => this.onEditorValueChange(props, e.target.value)} />\r\n        );\r\n    }\r\n\r\n    sizeEditor(props) {\r\n        return this.inputTextEditor(props, 'size');\r\n    }\r\n\r\n    typeEditor(props) {\r\n        return this.inputTextEditor(props, 'type');\r\n    }\r\n\r\n    requiredValidator(e) {\r\n        let props = e.columnProps;\r\n        let value = props.node.data[props.field];\r\n\r\n        return value && value.length > 0;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div className=\"content-section introduction\">\r\n                    <AppInlineHeader changelogText=\"treeTable\">\r\n                        <h1>TreeTable <span>Edit</span></h1>\r\n                        <p>Incell editing provides a quick and user friendly way to manipulate data.</p>\r\n                    </AppInlineHeader>\r\n                </div>\r\n\r\n                <div className=\"content-section implementation treetable-editing-demo\">\r\n                    <div className=\"card\">\r\n                        <TreeTable value={this.state.nodes}>\r\n                            <Column field=\"name\" header=\"Name\" expander style={{ height: '3.5em' }}></Column>\r\n                            <Column field=\"size\" header=\"Size\" editor={this.sizeEditor} editorValidator={this.requiredValidator} style={{ height: '3.5em' }}></Column>\r\n                            <Column field=\"type\" header=\"Type\" editor={this.typeEditor} style={{ height: '3.5em' }}></Column>\r\n                        </TreeTable>\r\n                    </div>\r\n                </div>\r\n\r\n                <TreeTableEditDemoDoc />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nclass TreeTableEditDemoDoc extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.sources = {\r\n            'class': {\r\n                tabName: 'Class Source',\r\n                content: `\r\nimport React, { Component } from 'react';\r\nimport { TreeTable } from 'primereact/treetable';\r\nimport { Column } from 'primereact/column';\r\nimport { InputText } from 'primereact/inputtext';\r\nimport { NodeService } from '../service/NodeService';\r\nimport './TreeTableDemo.css';\r\n\r\nexport class TreeTableEditDemo extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            nodes: []\r\n        };\r\n        this.nodeservice = new NodeService();\r\n\r\n        this.sizeEditor = this.sizeEditor.bind(this);\r\n        this.typeEditor = this.typeEditor.bind(this);\r\n        this.requiredValidator = this.requiredValidator.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.nodeservice.getTreeTableNodes().then(data => this.setState({ nodes: data }));\r\n    }\r\n\r\n    onEditorValueChange(props, value) {\r\n        let newNodes = JSON.parse(JSON.stringify(this.state.nodes));\r\n        let editedNode = this.findNodeByKey(newNodes, props.node.key);\r\n        editedNode.data[props.field] = value;\r\n\r\n        this.setState({\r\n            nodes: newNodes\r\n        });\r\n    }\r\n\r\n    findNodeByKey(nodes, key) {\r\n        let path = key.split('-');\r\n        let node;\r\n\r\n        while (path.length) {\r\n            let list = node ? node.children : nodes;\r\n            node = list[parseInt(path[0], 10)];\r\n            path.shift();\r\n        }\r\n\r\n        return node;\r\n    }\r\n\r\n    inputTextEditor(props, field) {\r\n        return (\r\n            <InputText type=\"text\" value={props.node.data[field]}\r\n                onChange={(e) => this.onEditorValueChange(props, e.target.value)} />\r\n        );\r\n    }\r\n\r\n    sizeEditor(props) {\r\n        return this.inputTextEditor(props, 'size');\r\n    }\r\n\r\n    typeEditor(props) {\r\n        return this.inputTextEditor(props, 'type');\r\n    }\r\n\r\n    requiredValidator(e) {\r\n        let props = e.columnProps;\r\n        let value = props.node.data[props.field];\r\n\r\n        return value && value.length > 0;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div className=\"card\">\r\n                    <TreeTable value={this.state.nodes}>\r\n                        <Column field=\"name\" header=\"Name\" expander style={{ height: '3.5em' }}></Column>\r\n                        <Column field=\"size\" header=\"Size\" editor={this.sizeEditor} editorValidator={this.requiredValidator} style={{ height: '3.5em' }}></Column>\r\n                        <Column field=\"type\" header=\"Type\" editor={this.typeEditor} style={{ height: '3.5em' }}></Column>\r\n                    </TreeTable>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n                `\r\n            },\r\n            'hooks': {\r\n                tabName: 'Hooks Source',\r\n                content: `\r\nimport React, { useState, useEffect } from 'react';\r\nimport { TreeTable } from 'primereact/treetable';\r\nimport { Column } from 'primereact/column';\r\nimport { InputText } from 'primereact/inputtext';\r\nimport { NodeService } from '../service/NodeService';\r\nimport './TreeTableDemo.css';\r\n\r\nconst TreeTableEditDemo = () => {\r\n    const [nodes, setNodes] = useState([]);\r\n    const nodeservice = new NodeService();\r\n\r\n    useEffect(() => {\r\n        nodeservice.getTreeTableNodes().then(data => setNodes(data));\r\n    }, []); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n    const onEditorValueChange = (props, value) => {\r\n        let newNodes = JSON.parse(JSON.stringify(nodes));\r\n        let editedNode = findNodeByKey(newNodes, props.node.key);\r\n        editedNode.data[props.field] = value;\r\n\r\n        setNodes(newNodes);\r\n    }\r\n\r\n    const findNodeByKey = (nodes, key) => {\r\n        let path = key.split('-');\r\n        let node;\r\n\r\n        while (path.length) {\r\n            let list = node ? node.children : nodes;\r\n            node = list[parseInt(path[0], 10)];\r\n            path.shift();\r\n        }\r\n\r\n        return node;\r\n    }\r\n\r\n    const inputTextEditor = (props, field) => {\r\n        return (\r\n            <InputText type=\"text\" value={props.node.data[field]}\r\n                onChange={(e) => onEditorValueChange(props, e.target.value)} />\r\n        );\r\n    }\r\n\r\n    const sizeEditor = (props) => {\r\n        return inputTextEditor(props, 'size');\r\n    }\r\n\r\n    const typeEditor = (props) => {\r\n        return inputTextEditor(props, 'type');\r\n    }\r\n\r\n    const requiredValidator = (e) => {\r\n        let props = e.columnProps;\r\n        let value = props.node.data[props.field];\r\n\r\n        return value && value.length > 0;\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"card\">\r\n                <TreeTable value={nodes}>\r\n                    <Column field=\"name\" header=\"Name\" expander style={{ height: '3.5em' }}></Column>\r\n                    <Column field=\"size\" header=\"Size\" editor={sizeEditor} editorValidator={requiredValidator} style={{ height: '3.5em' }}></Column>\r\n                    <Column field=\"type\" header=\"Type\" editor={typeEditor} style={{ height: '3.5em' }}></Column>\r\n                </TreeTable>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n                `\r\n            },\r\n            'ts': {\r\n                tabName: 'TS Source',\r\n                content: `\r\nimport React, { useState, useEffect } from 'react';\r\nimport { TreeTable } from 'primereact/treetable';\r\nimport { Column } from 'primereact/column';\r\nimport { InputText } from 'primereact/inputtext';\r\nimport { NodeService } from '../service/NodeService';\r\nimport './TreeTableDemo.css';\r\n\r\nconst TreeTableEditDemo = () => {\r\n    const [nodes, setNodes] = useState([]);\r\n    const nodeservice = new NodeService();\r\n\r\n    useEffect(() => {\r\n        nodeservice.getTreeTableNodes().then(data => setNodes(data));\r\n    }, []); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n    const onEditorValueChange = (props, value) => {\r\n        let newNodes = JSON.parse(JSON.stringify(nodes));\r\n        let editedNode = findNodeByKey(newNodes, props.node.key);\r\n        editedNode.data[props.field] = value;\r\n\r\n        setNodes(newNodes);\r\n    }\r\n\r\n    const findNodeByKey = (nodes, key) => {\r\n        let path = key.split('-');\r\n        let node;\r\n\r\n        while (path.length) {\r\n            let list = node ? node.children : nodes;\r\n            node = list[parseInt(path[0], 10)];\r\n            path.shift();\r\n        }\r\n\r\n        return node;\r\n    }\r\n\r\n    const inputTextEditor = (props, field) => {\r\n        return (\r\n            <InputText type=\"text\" value={props.node.data[field]}\r\n                onChange={(e) => onEditorValueChange(props, e.target.value)} />\r\n        );\r\n    }\r\n\r\n    const sizeEditor = (props) => {\r\n        return inputTextEditor(props, 'size');\r\n    }\r\n\r\n    const typeEditor = (props) => {\r\n        return inputTextEditor(props, 'type');\r\n    }\r\n\r\n    const requiredValidator = (e) => {\r\n        let props = e.columnProps;\r\n        let value = props.node.data[props.field];\r\n\r\n        return value && value.length > 0;\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"card\">\r\n                <TreeTable value={nodes}>\r\n                    <Column field=\"name\" header=\"Name\" expander style={{ height: '3.5em' }}></Column>\r\n                    <Column field=\"size\" header=\"Size\" editor={sizeEditor} editorValidator={requiredValidator} style={{ height: '3.5em' }}></Column>\r\n                    <Column field=\"type\" header=\"Type\" editor={typeEditor} style={{ height: '3.5em' }}></Column>\r\n                </TreeTable>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n                `\r\n            }\r\n        }\r\n\r\n        this.extFiles = {\r\n            'src/demo/TreeTableDemo.css': {\r\n                content: `\r\n.treetable-editing-demo .p-treetable .p-treetable-tbody > tr > td.p-cell-editing {\r\n    padding-top: 0;\r\n    padding-bottom: 0;\r\n}\r\n                `\r\n            }\r\n        }\r\n    }\r\n\r\n    shouldComponentUpdate() {\r\n        return false;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"content-section documentation\">\r\n                <TabView>\r\n                    {\r\n                        useLiveEditorTabs({ name: 'TreeTableEditDemo', sources: this.sources, service: 'NodeService', data: 'treetablenodes', extFiles: this.extFiles })\r\n                    }\r\n                </TabView>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}