{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\zura.ph\\\\WebstormProjects\\\\zloto\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\zura.ph\\\\WebstormProjects\\\\zloto\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"C:\\\\Users\\\\zura.ph\\\\WebstormProjects\\\\zloto\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"C:\\\\Users\\\\zura.ph\\\\WebstormProjects\\\\zloto\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _createSuper from \"C:\\\\Users\\\\zura.ph\\\\WebstormProjects\\\\zloto\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"C:\\\\Users\\\\zura.ph\\\\WebstormProjects\\\\zloto\\\\src\\\\showcase\\\\treetable\\\\TreeTableSelectionDemo.js\";\nimport React, { Component } from 'react';\nimport { TreeTable } from '../../components/treetable/TreeTable';\nimport { Toast } from '../../components/toast/Toast';\nimport { Column } from '../../components/column/Column';\nimport { NodeService } from '../service/NodeService';\nimport { TabView } from '../../components/tabview/TabView';\nimport { useLiveEditorTabs } from '../liveeditor/LiveEditor';\nimport { AppInlineHeader } from '../../AppInlineHeader';\nexport var TreeTableSelectionDemo = /*#__PURE__*/function (_Component) {\n  _inherits(TreeTableSelectionDemo, _Component);\n\n  var _super = _createSuper(TreeTableSelectionDemo);\n\n  function TreeTableSelectionDemo(props) {\n    var _this;\n\n    _classCallCheck(this, TreeTableSelectionDemo);\n\n    _this = _super.call(this, props);\n    _this.state = {\n      nodes: [],\n      selectedNodeKey1: null,\n      selectedNodeKey2: null,\n      selectedNodeKeys1: [],\n      selectedNodeKeys2: [],\n      selectedNodeKeys3: []\n    };\n    _this.nodeservice = new NodeService();\n    _this.onSelect = _this.onSelect.bind(_assertThisInitialized(_this));\n    _this.onUnselect = _this.onUnselect.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(TreeTableSelectionDemo, [{\n    key: \"onSelect\",\n    value: function onSelect(event) {\n      this.toast.show({\n        severity: 'info',\n        summary: 'Node Selected',\n        detail: event.node.data.name\n      });\n    }\n  }, {\n    key: \"onUnselect\",\n    value: function onUnselect(event) {\n      this.toast.show({\n        severity: 'info',\n        summary: 'Node Unselected',\n        detail: event.node.data.name\n      });\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      this.nodeservice.getTreeTableNodes().then(function (data) {\n        return _this2.setState({\n          nodes: data\n        });\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"content-section introduction\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(AppInlineHeader, {\n        changelogText: \"treeTable\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(\"h1\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 25\n        }\n      }, \"TreeTable \", /*#__PURE__*/React.createElement(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 39\n        }\n      }, \"Selection\")), /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 25\n        }\n      }, \"TreeTable supports single, multiple and checkbox based selection modes.\"))), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"content-section implementation\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(Toast, {\n        ref: function ref(el) {\n          return _this3.toast = el;\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 21\n        }\n      }), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"card\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(\"h5\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 25\n        }\n      }, \"Single\"), /*#__PURE__*/React.createElement(TreeTable, {\n        value: this.state.nodes,\n        selectionMode: \"single\",\n        selectionKeys: this.state.selectedNodeKey1,\n        onSelectionChange: function onSelectionChange(e) {\n          return _this3.setState({\n            selectedNodeKey1: e.value\n          });\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(Column, {\n        field: \"name\",\n        header: \"Name\",\n        expander: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 29\n        }\n      }), /*#__PURE__*/React.createElement(Column, {\n        field: \"size\",\n        header: \"Size\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 29\n        }\n      }), /*#__PURE__*/React.createElement(Column, {\n        field: \"type\",\n        header: \"Type\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 29\n        }\n      }))), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"card\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(\"h5\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 25\n        }\n      }, \"Multiple\"), /*#__PURE__*/React.createElement(TreeTable, {\n        value: this.state.nodes,\n        selectionMode: \"multiple\",\n        selectionKeys: this.state.selectedNodeKeys1,\n        onSelectionChange: function onSelectionChange(e) {\n          return _this3.setState({\n            selectedNodeKeys1: e.value\n          });\n        },\n        metaKeySelection: false,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(Column, {\n        field: \"name\",\n        header: \"Name\",\n        expander: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 29\n        }\n      }), /*#__PURE__*/React.createElement(Column, {\n        field: \"size\",\n        header: \"Size\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 29\n        }\n      }), /*#__PURE__*/React.createElement(Column, {\n        field: \"type\",\n        header: \"Type\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 29\n        }\n      }))), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"card\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(\"h5\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 25\n        }\n      }, \"Multiple with MetaKey\"), /*#__PURE__*/React.createElement(TreeTable, {\n        value: this.state.nodes,\n        selectionMode: \"multiple\",\n        selectionKeys: this.state.selectedNodeKeys2,\n        onSelectionChange: function onSelectionChange(e) {\n          return _this3.setState({\n            selectedNodeKeys2: e.value\n          });\n        },\n        metaKeySelection: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(Column, {\n        field: \"name\",\n        header: \"Name\",\n        expander: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 29\n        }\n      }), /*#__PURE__*/React.createElement(Column, {\n        field: \"size\",\n        header: \"Size\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 29\n        }\n      }), /*#__PURE__*/React.createElement(Column, {\n        field: \"type\",\n        header: \"Type\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 29\n        }\n      }))), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"card\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(\"h5\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 25\n        }\n      }, \"Events\"), /*#__PURE__*/React.createElement(TreeTable, {\n        value: this.state.nodes,\n        selectionMode: \"single\",\n        selectionKeys: this.state.selectedNodeKey2,\n        onSelectionChange: function onSelectionChange(e) {\n          return _this3.setState({\n            selectedNodeKey2: e.value\n          });\n        },\n        onSelect: this.onSelect,\n        onUnselect: this.onUnselect,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(Column, {\n        field: \"name\",\n        header: \"Name\",\n        expander: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 29\n        }\n      }), /*#__PURE__*/React.createElement(Column, {\n        field: \"size\",\n        header: \"Size\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 29\n        }\n      }), /*#__PURE__*/React.createElement(Column, {\n        field: \"type\",\n        header: \"Type\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 29\n        }\n      }))), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"card\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(\"h5\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 25\n        }\n      }, \"Checkbox\"), /*#__PURE__*/React.createElement(TreeTable, {\n        value: this.state.nodes,\n        selectionMode: \"checkbox\",\n        selectionKeys: this.state.selectedNodeKeys3,\n        onSelectionChange: function onSelectionChange(e) {\n          return _this3.setState({\n            selectedNodeKeys3: e.value\n          });\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(Column, {\n        field: \"name\",\n        header: \"Name\",\n        expander: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 29\n        }\n      }), /*#__PURE__*/React.createElement(Column, {\n        field: \"size\",\n        header: \"Size\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 29\n        }\n      }), /*#__PURE__*/React.createElement(Column, {\n        field: \"type\",\n        header: \"Type\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 29\n        }\n      })))), /*#__PURE__*/React.createElement(TreeTableSelectionDemoDoc, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 17\n        }\n      }));\n    }\n  }]);\n\n  return TreeTableSelectionDemo;\n}(Component);\n\nvar TreeTableSelectionDemoDoc = /*#__PURE__*/function (_Component2) {\n  _inherits(TreeTableSelectionDemoDoc, _Component2);\n\n  var _super2 = _createSuper(TreeTableSelectionDemoDoc);\n\n  function TreeTableSelectionDemoDoc(props) {\n    var _this4;\n\n    _classCallCheck(this, TreeTableSelectionDemoDoc);\n\n    _this4 = _super2.call(this, props);\n    _this4.sources = {\n      'class': {\n        tabName: 'Class Source',\n        content: \"\\nimport React, { Component } from 'react';\\nimport { TreeTable } from 'primereact/treetable';\\nimport { Toast } from 'primereact/toast';\\nimport { Column } from 'primereact/column';\\nimport { NodeService } from '../service/NodeService';\\n\\nexport class TreeTableSelectionDemo extends Component {\\n\\n    constructor(props) {\\n        super(props);\\n        this.state = {\\n            nodes: [],\\n            selectedNodeKey1: null,\\n            selectedNodeKey2: null,\\n            selectedNodeKeys1: [],\\n            selectedNodeKeys2: [],\\n            selectedNodeKeys3: []\\n        };\\n\\n        this.nodeservice = new NodeService();\\n        this.onSelect = this.onSelect.bind(this);\\n        this.onUnselect = this.onUnselect.bind(this);\\n    }\\n\\n    onSelect(event) {\\n        this.toast.show({ severity: 'info', summary: 'Node Selected', detail: event.node.data.name });\\n    }\\n\\n    onUnselect(event) {\\n        this.toast.show({ severity: 'info', summary: 'Node Unselected', detail: event.node.data.name });\\n    }\\n\\n    componentDidMount() {\\n        this.nodeservice.getTreeTableNodes().then(data => this.setState({ nodes: data }));\\n    }\\n\\n    render() {\\n        return (\\n            <div>\\n                <Toast ref={(el) => this.toast = el} />\\n\\n                <div className=\\\"card\\\">\\n                    <h5>Single</h5>\\n                    <TreeTable value={this.state.nodes} selectionMode=\\\"single\\\" selectionKeys={this.state.selectedNodeKey1} onSelectionChange={e => this.setState({ selectedNodeKey1: e.value })}>\\n                        <Column field=\\\"name\\\" header=\\\"Name\\\" expander></Column>\\n                        <Column field=\\\"size\\\" header=\\\"Size\\\"></Column>\\n                        <Column field=\\\"type\\\" header=\\\"Type\\\"></Column>\\n                    </TreeTable>\\n                </div>\\n\\n                <div className=\\\"card\\\">\\n                    <h5>Multiple</h5>\\n                    <TreeTable value={this.state.nodes} selectionMode=\\\"multiple\\\" selectionKeys={this.state.selectedNodeKeys1} onSelectionChange={e => this.setState({ selectedNodeKeys1: e.value })} metaKeySelection={false}>\\n                        <Column field=\\\"name\\\" header=\\\"Name\\\" expander></Column>\\n                        <Column field=\\\"size\\\" header=\\\"Size\\\"></Column>\\n                        <Column field=\\\"type\\\" header=\\\"Type\\\"></Column>\\n                    </TreeTable>\\n                </div>\\n\\n                <div className=\\\"card\\\">\\n                    <h5>Multiple with MetaKey</h5>\\n                    <TreeTable value={this.state.nodes} selectionMode=\\\"multiple\\\" selectionKeys={this.state.selectedNodeKeys2} onSelectionChange={e => this.setState({ selectedNodeKeys2: e.value })} metaKeySelection>\\n                        <Column field=\\\"name\\\" header=\\\"Name\\\" expander></Column>\\n                        <Column field=\\\"size\\\" header=\\\"Size\\\"></Column>\\n                        <Column field=\\\"type\\\" header=\\\"Type\\\"></Column>\\n                    </TreeTable>\\n                </div>\\n\\n                <div className=\\\"card\\\">\\n                    <h5>Events</h5>\\n                    <TreeTable value={this.state.nodes} selectionMode=\\\"single\\\" selectionKeys={this.state.selectedNodeKey2} onSelectionChange={e => this.setState({ selectedNodeKey2: e.value })}\\n                        onSelect={this.onSelect} onUnselect={this.onUnselect}>\\n                        <Column field=\\\"name\\\" header=\\\"Name\\\" expander></Column>\\n                        <Column field=\\\"size\\\" header=\\\"Size\\\"></Column>\\n                        <Column field=\\\"type\\\" header=\\\"Type\\\"></Column>\\n                    </TreeTable>\\n                </div>\\n\\n                <div className=\\\"card\\\">\\n                    <h5>Checkbox</h5>\\n                    <TreeTable value={this.state.nodes} selectionMode=\\\"checkbox\\\" selectionKeys={this.state.selectedNodeKeys3} onSelectionChange={e => this.setState({ selectedNodeKeys3: e.value })}>\\n                        <Column field=\\\"name\\\" header=\\\"Name\\\" expander></Column>\\n                        <Column field=\\\"size\\\" header=\\\"Size\\\"></Column>\\n                        <Column field=\\\"type\\\" header=\\\"Type\\\"></Column>\\n                    </TreeTable>\\n                </div>\\n            </div>\\n        )\\n    }\\n}\\n                \"\n      },\n      'hooks': {\n        tabName: 'Hooks Source',\n        content: \"\\nimport React, { useState, useEffect, useRef } from 'react';\\nimport { TreeTable } from 'primereact/treetable';\\nimport { Toast } from 'primereact/toast';\\nimport { Column } from 'primereact/column';\\nimport { NodeService } from '../service/NodeService';\\n\\nconst TreeTableSelectionDemo = () => {\\n    const [nodes, setNodes] = useState([]);\\n    const [selectedNodeKey1, setSelectedNodeKey1] = useState(null);\\n    const [selectedNodeKey2, setSelectedNodeKey2] = useState(null);\\n    const [selectedNodeKeys1, setSelectedNodeKeys1] = useState([]);\\n    const [selectedNodeKeys2, setSelectedNodeKeys2] = useState([]);\\n    const [selectedNodeKeys3, setSelectedNodeKeys3] = useState([]);\\n    const toast = useRef(null);\\n    const nodeservice = new NodeService();\\n\\n    const onSelect = (event) => {\\n        toast.current.show({ severity: 'info', summary: 'Node Selected', detail: event.node.data.name });\\n    }\\n\\n    const onUnselect = (event) => {\\n        toast.current.show({ severity: 'info', summary: 'Node Unselected', detail: event.node.data.name });\\n    }\\n\\n    useEffect(() => {\\n        nodeservice.getTreeTableNodes().then(data => setNodes(data));\\n    }, []); // eslint-disable-line react-hooks/exhaustive-deps\\n\\n    return (\\n        <div>\\n            <Toast ref={toast} />\\n\\n            <div className=\\\"card\\\">\\n                <h5>Single</h5>\\n                <TreeTable value={nodes} selectionMode=\\\"single\\\" selectionKeys={selectedNodeKey1} onSelectionChange={e => setSelectedNodeKey1(e.value)}>\\n                    <Column field=\\\"name\\\" header=\\\"Name\\\" expander></Column>\\n                    <Column field=\\\"size\\\" header=\\\"Size\\\"></Column>\\n                    <Column field=\\\"type\\\" header=\\\"Type\\\"></Column>\\n                </TreeTable>\\n            </div>\\n\\n            <div className=\\\"card\\\">\\n                <h5>Multiple</h5>\\n                <TreeTable value={nodes} selectionMode=\\\"multiple\\\" selectionKeys={selectedNodeKeys1} onSelectionChange={e => setSelectedNodeKeys1(e.value)} metaKeySelection={false}>\\n                    <Column field=\\\"name\\\" header=\\\"Name\\\" expander></Column>\\n                    <Column field=\\\"size\\\" header=\\\"Size\\\"></Column>\\n                    <Column field=\\\"type\\\" header=\\\"Type\\\"></Column>\\n                </TreeTable>\\n            </div>\\n\\n            <div className=\\\"card\\\">\\n                <h5>Multiple with MetaKey</h5>\\n                <TreeTable value={nodes} selectionMode=\\\"multiple\\\" selectionKeys={selectedNodeKeys2} onSelectionChange={e => setSelectedNodeKeys2(e.value)} metaKeySelection>\\n                    <Column field=\\\"name\\\" header=\\\"Name\\\" expander></Column>\\n                    <Column field=\\\"size\\\" header=\\\"Size\\\"></Column>\\n                    <Column field=\\\"type\\\" header=\\\"Type\\\"></Column>\\n                </TreeTable>\\n            </div>\\n\\n            <div className=\\\"card\\\">\\n                <h5>Events</h5>\\n                <TreeTable value={nodes} selectionMode=\\\"single\\\" selectionKeys={selectedNodeKey2} onSelectionChange={e => setSelectedNodeKey2(e.value)}\\n                    onSelect={onSelect} onUnselect={onUnselect}>\\n                    <Column field=\\\"name\\\" header=\\\"Name\\\" expander></Column>\\n                    <Column field=\\\"size\\\" header=\\\"Size\\\"></Column>\\n                    <Column field=\\\"type\\\" header=\\\"Type\\\"></Column>\\n                </TreeTable>\\n            </div>\\n\\n            <div className=\\\"card\\\">\\n                <h5>Checkbox</h5>\\n                <TreeTable value={nodes} selectionMode=\\\"checkbox\\\" selectionKeys={selectedNodeKeys3} onSelectionChange={e => setSelectedNodeKeys3(e.value)}>\\n                    <Column field=\\\"name\\\" header=\\\"Name\\\" expander></Column>\\n                    <Column field=\\\"size\\\" header=\\\"Size\\\"></Column>\\n                    <Column field=\\\"type\\\" header=\\\"Type\\\"></Column>\\n                </TreeTable>\\n            </div>\\n        </div>\\n    )\\n}\\n                \"\n      },\n      'ts': {\n        tabName: 'TS Source',\n        content: \"\\nimport React, { useState, useEffect, useRef } from 'react';\\nimport { TreeTable } from 'primereact/treetable';\\nimport { Toast } from 'primereact/toast';\\nimport { Column } from 'primereact/column';\\nimport { NodeService } from '../service/NodeService';\\n\\nconst TreeTableSelectionDemo = () => {\\n    const [nodes, setNodes] = useState([]);\\n    const [selectedNodeKey1, setSelectedNodeKey1] = useState(null);\\n    const [selectedNodeKey2, setSelectedNodeKey2] = useState(null);\\n    const [selectedNodeKeys1, setSelectedNodeKeys1] = useState([]);\\n    const [selectedNodeKeys2, setSelectedNodeKeys2] = useState([]);\\n    const [selectedNodeKeys3, setSelectedNodeKeys3] = useState([]);\\n    const toast = useRef(null);\\n    const nodeservice = new NodeService();\\n\\n    const onSelect = (event) => {\\n        toast.current.show({ severity: 'info', summary: 'Node Selected', detail: event.node.data.name });\\n    }\\n\\n    const onUnselect = (event) => {\\n        toast.current.show({ severity: 'info', summary: 'Node Unselected', detail: event.node.data.name });\\n    }\\n\\n    useEffect(() => {\\n        nodeservice.getTreeTableNodes().then(data => setNodes(data));\\n    }, []); // eslint-disable-line react-hooks/exhaustive-deps\\n\\n    return (\\n        <div>\\n            <Toast ref={toast} />\\n\\n            <div className=\\\"card\\\">\\n                <h5>Single</h5>\\n                <TreeTable value={nodes} selectionMode=\\\"single\\\" selectionKeys={selectedNodeKey1} onSelectionChange={e => setSelectedNodeKey1(e.value)}>\\n                    <Column field=\\\"name\\\" header=\\\"Name\\\" expander></Column>\\n                    <Column field=\\\"size\\\" header=\\\"Size\\\"></Column>\\n                    <Column field=\\\"type\\\" header=\\\"Type\\\"></Column>\\n                </TreeTable>\\n            </div>\\n\\n            <div className=\\\"card\\\">\\n                <h5>Multiple</h5>\\n                <TreeTable value={nodes} selectionMode=\\\"multiple\\\" selectionKeys={selectedNodeKeys1} onSelectionChange={e => setSelectedNodeKeys1(e.value)} metaKeySelection={false}>\\n                    <Column field=\\\"name\\\" header=\\\"Name\\\" expander></Column>\\n                    <Column field=\\\"size\\\" header=\\\"Size\\\"></Column>\\n                    <Column field=\\\"type\\\" header=\\\"Type\\\"></Column>\\n                </TreeTable>\\n            </div>\\n\\n            <div className=\\\"card\\\">\\n                <h5>Multiple with MetaKey</h5>\\n                <TreeTable value={nodes} selectionMode=\\\"multiple\\\" selectionKeys={selectedNodeKeys2} onSelectionChange={e => setSelectedNodeKeys2(e.value)} metaKeySelection>\\n                    <Column field=\\\"name\\\" header=\\\"Name\\\" expander></Column>\\n                    <Column field=\\\"size\\\" header=\\\"Size\\\"></Column>\\n                    <Column field=\\\"type\\\" header=\\\"Type\\\"></Column>\\n                </TreeTable>\\n            </div>\\n\\n            <div className=\\\"card\\\">\\n                <h5>Events</h5>\\n                <TreeTable value={nodes} selectionMode=\\\"single\\\" selectionKeys={selectedNodeKey2} onSelectionChange={e => setSelectedNodeKey2(e.value)}\\n                    onSelect={onSelect} onUnselect={onUnselect}>\\n                    <Column field=\\\"name\\\" header=\\\"Name\\\" expander></Column>\\n                    <Column field=\\\"size\\\" header=\\\"Size\\\"></Column>\\n                    <Column field=\\\"type\\\" header=\\\"Type\\\"></Column>\\n                </TreeTable>\\n            </div>\\n\\n            <div className=\\\"card\\\">\\n                <h5>Checkbox</h5>\\n                <TreeTable value={nodes} selectionMode=\\\"checkbox\\\" selectionKeys={selectedNodeKeys3} onSelectionChange={e => setSelectedNodeKeys3(e.value)}>\\n                    <Column field=\\\"name\\\" header=\\\"Name\\\" expander></Column>\\n                    <Column field=\\\"size\\\" header=\\\"Size\\\"></Column>\\n                    <Column field=\\\"type\\\" header=\\\"Type\\\"></Column>\\n                </TreeTable>\\n            </div>\\n        </div>\\n    )\\n}\\n                \"\n      }\n    };\n    return _this4;\n  }\n\n  _createClass(TreeTableSelectionDemoDoc, [{\n    key: \"shouldComponentUpdate\",\n    value: function shouldComponentUpdate() {\n      return false;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"content-section documentation\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 386,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(TabView, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 387,\n          columnNumber: 17\n        }\n      }, useLiveEditorTabs({\n        name: 'TreeTableSelectionDemo',\n        sources: this.sources,\n        service: 'NodeService',\n        data: 'treetablenodes'\n      })));\n    }\n  }]);\n\n  return TreeTableSelectionDemoDoc;\n}(Component);","map":{"version":3,"sources":["C:/Users/zura.ph/WebstormProjects/zloto/src/showcase/treetable/TreeTableSelectionDemo.js"],"names":["React","Component","TreeTable","Toast","Column","NodeService","TabView","useLiveEditorTabs","AppInlineHeader","TreeTableSelectionDemo","props","state","nodes","selectedNodeKey1","selectedNodeKey2","selectedNodeKeys1","selectedNodeKeys2","selectedNodeKeys3","nodeservice","onSelect","bind","onUnselect","event","toast","show","severity","summary","detail","node","data","name","getTreeTableNodes","then","setState","el","e","value","TreeTableSelectionDemoDoc","sources","tabName","content","service"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { TreeTable } from '../../components/treetable/TreeTable';\r\nimport { Toast } from '../../components/toast/Toast';\r\nimport { Column } from '../../components/column/Column';\r\nimport { NodeService } from '../service/NodeService';\r\nimport { TabView } from '../../components/tabview/TabView';\r\nimport { useLiveEditorTabs }from '../liveeditor/LiveEditor';\r\nimport { AppInlineHeader } from '../../AppInlineHeader';\r\n\r\nexport class TreeTableSelectionDemo extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            nodes: [],\r\n            selectedNodeKey1: null,\r\n            selectedNodeKey2: null,\r\n            selectedNodeKeys1: [],\r\n            selectedNodeKeys2: [],\r\n            selectedNodeKeys3: []\r\n        };\r\n\r\n        this.nodeservice = new NodeService();\r\n        this.onSelect = this.onSelect.bind(this);\r\n        this.onUnselect = this.onUnselect.bind(this);\r\n    }\r\n\r\n    onSelect(event) {\r\n        this.toast.show({ severity: 'info', summary: 'Node Selected', detail: event.node.data.name });\r\n    }\r\n\r\n    onUnselect(event) {\r\n        this.toast.show({ severity: 'info', summary: 'Node Unselected', detail: event.node.data.name });\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.nodeservice.getTreeTableNodes().then(data => this.setState({ nodes: data }));\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div className=\"content-section introduction\">\r\n                    <AppInlineHeader changelogText=\"treeTable\">\r\n                        <h1>TreeTable <span>Selection</span></h1>\r\n                        <p>TreeTable supports single, multiple and checkbox based selection modes.</p>\r\n                    </AppInlineHeader>\r\n                </div>\r\n\r\n                <div className=\"content-section implementation\">\r\n                    <Toast ref={(el) => this.toast = el} />\r\n\r\n                    <div className=\"card\">\r\n                        <h5>Single</h5>\r\n                        <TreeTable value={this.state.nodes} selectionMode=\"single\" selectionKeys={this.state.selectedNodeKey1} onSelectionChange={e => this.setState({ selectedNodeKey1: e.value })}>\r\n                            <Column field=\"name\" header=\"Name\" expander></Column>\r\n                            <Column field=\"size\" header=\"Size\"></Column>\r\n                            <Column field=\"type\" header=\"Type\"></Column>\r\n                        </TreeTable>\r\n                    </div>\r\n\r\n                    <div className=\"card\">\r\n                        <h5>Multiple</h5>\r\n                        <TreeTable value={this.state.nodes} selectionMode=\"multiple\" selectionKeys={this.state.selectedNodeKeys1} onSelectionChange={e => this.setState({ selectedNodeKeys1: e.value })} metaKeySelection={false}>\r\n                            <Column field=\"name\" header=\"Name\" expander></Column>\r\n                            <Column field=\"size\" header=\"Size\"></Column>\r\n                            <Column field=\"type\" header=\"Type\"></Column>\r\n                        </TreeTable>\r\n                    </div>\r\n\r\n                    <div className=\"card\">\r\n                        <h5>Multiple with MetaKey</h5>\r\n                        <TreeTable value={this.state.nodes} selectionMode=\"multiple\" selectionKeys={this.state.selectedNodeKeys2} onSelectionChange={e => this.setState({ selectedNodeKeys2: e.value })} metaKeySelection>\r\n                            <Column field=\"name\" header=\"Name\" expander></Column>\r\n                            <Column field=\"size\" header=\"Size\"></Column>\r\n                            <Column field=\"type\" header=\"Type\"></Column>\r\n                        </TreeTable>\r\n                    </div>\r\n\r\n                    <div className=\"card\">\r\n                        <h5>Events</h5>\r\n                        <TreeTable value={this.state.nodes} selectionMode=\"single\" selectionKeys={this.state.selectedNodeKey2} onSelectionChange={e => this.setState({ selectedNodeKey2: e.value })}\r\n                            onSelect={this.onSelect} onUnselect={this.onUnselect}>\r\n                            <Column field=\"name\" header=\"Name\" expander></Column>\r\n                            <Column field=\"size\" header=\"Size\"></Column>\r\n                            <Column field=\"type\" header=\"Type\"></Column>\r\n                        </TreeTable>\r\n                    </div>\r\n\r\n                    <div className=\"card\">\r\n                        <h5>Checkbox</h5>\r\n                        <TreeTable value={this.state.nodes} selectionMode=\"checkbox\" selectionKeys={this.state.selectedNodeKeys3} onSelectionChange={e => this.setState({ selectedNodeKeys3: e.value })}>\r\n                            <Column field=\"name\" header=\"Name\" expander></Column>\r\n                            <Column field=\"size\" header=\"Size\"></Column>\r\n                            <Column field=\"type\" header=\"Type\"></Column>\r\n                        </TreeTable>\r\n                    </div>\r\n                </div>\r\n\r\n                <TreeTableSelectionDemoDoc />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nclass TreeTableSelectionDemoDoc extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.sources = {\r\n            'class': {\r\n                tabName: 'Class Source',\r\n                content: `\r\nimport React, { Component } from 'react';\r\nimport { TreeTable } from 'primereact/treetable';\r\nimport { Toast } from 'primereact/toast';\r\nimport { Column } from 'primereact/column';\r\nimport { NodeService } from '../service/NodeService';\r\n\r\nexport class TreeTableSelectionDemo extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            nodes: [],\r\n            selectedNodeKey1: null,\r\n            selectedNodeKey2: null,\r\n            selectedNodeKeys1: [],\r\n            selectedNodeKeys2: [],\r\n            selectedNodeKeys3: []\r\n        };\r\n\r\n        this.nodeservice = new NodeService();\r\n        this.onSelect = this.onSelect.bind(this);\r\n        this.onUnselect = this.onUnselect.bind(this);\r\n    }\r\n\r\n    onSelect(event) {\r\n        this.toast.show({ severity: 'info', summary: 'Node Selected', detail: event.node.data.name });\r\n    }\r\n\r\n    onUnselect(event) {\r\n        this.toast.show({ severity: 'info', summary: 'Node Unselected', detail: event.node.data.name });\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.nodeservice.getTreeTableNodes().then(data => this.setState({ nodes: data }));\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Toast ref={(el) => this.toast = el} />\r\n\r\n                <div className=\"card\">\r\n                    <h5>Single</h5>\r\n                    <TreeTable value={this.state.nodes} selectionMode=\"single\" selectionKeys={this.state.selectedNodeKey1} onSelectionChange={e => this.setState({ selectedNodeKey1: e.value })}>\r\n                        <Column field=\"name\" header=\"Name\" expander></Column>\r\n                        <Column field=\"size\" header=\"Size\"></Column>\r\n                        <Column field=\"type\" header=\"Type\"></Column>\r\n                    </TreeTable>\r\n                </div>\r\n\r\n                <div className=\"card\">\r\n                    <h5>Multiple</h5>\r\n                    <TreeTable value={this.state.nodes} selectionMode=\"multiple\" selectionKeys={this.state.selectedNodeKeys1} onSelectionChange={e => this.setState({ selectedNodeKeys1: e.value })} metaKeySelection={false}>\r\n                        <Column field=\"name\" header=\"Name\" expander></Column>\r\n                        <Column field=\"size\" header=\"Size\"></Column>\r\n                        <Column field=\"type\" header=\"Type\"></Column>\r\n                    </TreeTable>\r\n                </div>\r\n\r\n                <div className=\"card\">\r\n                    <h5>Multiple with MetaKey</h5>\r\n                    <TreeTable value={this.state.nodes} selectionMode=\"multiple\" selectionKeys={this.state.selectedNodeKeys2} onSelectionChange={e => this.setState({ selectedNodeKeys2: e.value })} metaKeySelection>\r\n                        <Column field=\"name\" header=\"Name\" expander></Column>\r\n                        <Column field=\"size\" header=\"Size\"></Column>\r\n                        <Column field=\"type\" header=\"Type\"></Column>\r\n                    </TreeTable>\r\n                </div>\r\n\r\n                <div className=\"card\">\r\n                    <h5>Events</h5>\r\n                    <TreeTable value={this.state.nodes} selectionMode=\"single\" selectionKeys={this.state.selectedNodeKey2} onSelectionChange={e => this.setState({ selectedNodeKey2: e.value })}\r\n                        onSelect={this.onSelect} onUnselect={this.onUnselect}>\r\n                        <Column field=\"name\" header=\"Name\" expander></Column>\r\n                        <Column field=\"size\" header=\"Size\"></Column>\r\n                        <Column field=\"type\" header=\"Type\"></Column>\r\n                    </TreeTable>\r\n                </div>\r\n\r\n                <div className=\"card\">\r\n                    <h5>Checkbox</h5>\r\n                    <TreeTable value={this.state.nodes} selectionMode=\"checkbox\" selectionKeys={this.state.selectedNodeKeys3} onSelectionChange={e => this.setState({ selectedNodeKeys3: e.value })}>\r\n                        <Column field=\"name\" header=\"Name\" expander></Column>\r\n                        <Column field=\"size\" header=\"Size\"></Column>\r\n                        <Column field=\"type\" header=\"Type\"></Column>\r\n                    </TreeTable>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n                `\r\n            },\r\n            'hooks': {\r\n                tabName: 'Hooks Source',\r\n                content: `\r\nimport React, { useState, useEffect, useRef } from 'react';\r\nimport { TreeTable } from 'primereact/treetable';\r\nimport { Toast } from 'primereact/toast';\r\nimport { Column } from 'primereact/column';\r\nimport { NodeService } from '../service/NodeService';\r\n\r\nconst TreeTableSelectionDemo = () => {\r\n    const [nodes, setNodes] = useState([]);\r\n    const [selectedNodeKey1, setSelectedNodeKey1] = useState(null);\r\n    const [selectedNodeKey2, setSelectedNodeKey2] = useState(null);\r\n    const [selectedNodeKeys1, setSelectedNodeKeys1] = useState([]);\r\n    const [selectedNodeKeys2, setSelectedNodeKeys2] = useState([]);\r\n    const [selectedNodeKeys3, setSelectedNodeKeys3] = useState([]);\r\n    const toast = useRef(null);\r\n    const nodeservice = new NodeService();\r\n\r\n    const onSelect = (event) => {\r\n        toast.current.show({ severity: 'info', summary: 'Node Selected', detail: event.node.data.name });\r\n    }\r\n\r\n    const onUnselect = (event) => {\r\n        toast.current.show({ severity: 'info', summary: 'Node Unselected', detail: event.node.data.name });\r\n    }\r\n\r\n    useEffect(() => {\r\n        nodeservice.getTreeTableNodes().then(data => setNodes(data));\r\n    }, []); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n    return (\r\n        <div>\r\n            <Toast ref={toast} />\r\n\r\n            <div className=\"card\">\r\n                <h5>Single</h5>\r\n                <TreeTable value={nodes} selectionMode=\"single\" selectionKeys={selectedNodeKey1} onSelectionChange={e => setSelectedNodeKey1(e.value)}>\r\n                    <Column field=\"name\" header=\"Name\" expander></Column>\r\n                    <Column field=\"size\" header=\"Size\"></Column>\r\n                    <Column field=\"type\" header=\"Type\"></Column>\r\n                </TreeTable>\r\n            </div>\r\n\r\n            <div className=\"card\">\r\n                <h5>Multiple</h5>\r\n                <TreeTable value={nodes} selectionMode=\"multiple\" selectionKeys={selectedNodeKeys1} onSelectionChange={e => setSelectedNodeKeys1(e.value)} metaKeySelection={false}>\r\n                    <Column field=\"name\" header=\"Name\" expander></Column>\r\n                    <Column field=\"size\" header=\"Size\"></Column>\r\n                    <Column field=\"type\" header=\"Type\"></Column>\r\n                </TreeTable>\r\n            </div>\r\n\r\n            <div className=\"card\">\r\n                <h5>Multiple with MetaKey</h5>\r\n                <TreeTable value={nodes} selectionMode=\"multiple\" selectionKeys={selectedNodeKeys2} onSelectionChange={e => setSelectedNodeKeys2(e.value)} metaKeySelection>\r\n                    <Column field=\"name\" header=\"Name\" expander></Column>\r\n                    <Column field=\"size\" header=\"Size\"></Column>\r\n                    <Column field=\"type\" header=\"Type\"></Column>\r\n                </TreeTable>\r\n            </div>\r\n\r\n            <div className=\"card\">\r\n                <h5>Events</h5>\r\n                <TreeTable value={nodes} selectionMode=\"single\" selectionKeys={selectedNodeKey2} onSelectionChange={e => setSelectedNodeKey2(e.value)}\r\n                    onSelect={onSelect} onUnselect={onUnselect}>\r\n                    <Column field=\"name\" header=\"Name\" expander></Column>\r\n                    <Column field=\"size\" header=\"Size\"></Column>\r\n                    <Column field=\"type\" header=\"Type\"></Column>\r\n                </TreeTable>\r\n            </div>\r\n\r\n            <div className=\"card\">\r\n                <h5>Checkbox</h5>\r\n                <TreeTable value={nodes} selectionMode=\"checkbox\" selectionKeys={selectedNodeKeys3} onSelectionChange={e => setSelectedNodeKeys3(e.value)}>\r\n                    <Column field=\"name\" header=\"Name\" expander></Column>\r\n                    <Column field=\"size\" header=\"Size\"></Column>\r\n                    <Column field=\"type\" header=\"Type\"></Column>\r\n                </TreeTable>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n                `\r\n            },\r\n            'ts': {\r\n                tabName: 'TS Source',\r\n                content: `\r\nimport React, { useState, useEffect, useRef } from 'react';\r\nimport { TreeTable } from 'primereact/treetable';\r\nimport { Toast } from 'primereact/toast';\r\nimport { Column } from 'primereact/column';\r\nimport { NodeService } from '../service/NodeService';\r\n\r\nconst TreeTableSelectionDemo = () => {\r\n    const [nodes, setNodes] = useState([]);\r\n    const [selectedNodeKey1, setSelectedNodeKey1] = useState(null);\r\n    const [selectedNodeKey2, setSelectedNodeKey2] = useState(null);\r\n    const [selectedNodeKeys1, setSelectedNodeKeys1] = useState([]);\r\n    const [selectedNodeKeys2, setSelectedNodeKeys2] = useState([]);\r\n    const [selectedNodeKeys3, setSelectedNodeKeys3] = useState([]);\r\n    const toast = useRef(null);\r\n    const nodeservice = new NodeService();\r\n\r\n    const onSelect = (event) => {\r\n        toast.current.show({ severity: 'info', summary: 'Node Selected', detail: event.node.data.name });\r\n    }\r\n\r\n    const onUnselect = (event) => {\r\n        toast.current.show({ severity: 'info', summary: 'Node Unselected', detail: event.node.data.name });\r\n    }\r\n\r\n    useEffect(() => {\r\n        nodeservice.getTreeTableNodes().then(data => setNodes(data));\r\n    }, []); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n    return (\r\n        <div>\r\n            <Toast ref={toast} />\r\n\r\n            <div className=\"card\">\r\n                <h5>Single</h5>\r\n                <TreeTable value={nodes} selectionMode=\"single\" selectionKeys={selectedNodeKey1} onSelectionChange={e => setSelectedNodeKey1(e.value)}>\r\n                    <Column field=\"name\" header=\"Name\" expander></Column>\r\n                    <Column field=\"size\" header=\"Size\"></Column>\r\n                    <Column field=\"type\" header=\"Type\"></Column>\r\n                </TreeTable>\r\n            </div>\r\n\r\n            <div className=\"card\">\r\n                <h5>Multiple</h5>\r\n                <TreeTable value={nodes} selectionMode=\"multiple\" selectionKeys={selectedNodeKeys1} onSelectionChange={e => setSelectedNodeKeys1(e.value)} metaKeySelection={false}>\r\n                    <Column field=\"name\" header=\"Name\" expander></Column>\r\n                    <Column field=\"size\" header=\"Size\"></Column>\r\n                    <Column field=\"type\" header=\"Type\"></Column>\r\n                </TreeTable>\r\n            </div>\r\n\r\n            <div className=\"card\">\r\n                <h5>Multiple with MetaKey</h5>\r\n                <TreeTable value={nodes} selectionMode=\"multiple\" selectionKeys={selectedNodeKeys2} onSelectionChange={e => setSelectedNodeKeys2(e.value)} metaKeySelection>\r\n                    <Column field=\"name\" header=\"Name\" expander></Column>\r\n                    <Column field=\"size\" header=\"Size\"></Column>\r\n                    <Column field=\"type\" header=\"Type\"></Column>\r\n                </TreeTable>\r\n            </div>\r\n\r\n            <div className=\"card\">\r\n                <h5>Events</h5>\r\n                <TreeTable value={nodes} selectionMode=\"single\" selectionKeys={selectedNodeKey2} onSelectionChange={e => setSelectedNodeKey2(e.value)}\r\n                    onSelect={onSelect} onUnselect={onUnselect}>\r\n                    <Column field=\"name\" header=\"Name\" expander></Column>\r\n                    <Column field=\"size\" header=\"Size\"></Column>\r\n                    <Column field=\"type\" header=\"Type\"></Column>\r\n                </TreeTable>\r\n            </div>\r\n\r\n            <div className=\"card\">\r\n                <h5>Checkbox</h5>\r\n                <TreeTable value={nodes} selectionMode=\"checkbox\" selectionKeys={selectedNodeKeys3} onSelectionChange={e => setSelectedNodeKeys3(e.value)}>\r\n                    <Column field=\"name\" header=\"Name\" expander></Column>\r\n                    <Column field=\"size\" header=\"Size\"></Column>\r\n                    <Column field=\"type\" header=\"Type\"></Column>\r\n                </TreeTable>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n                `\r\n            }\r\n        }\r\n    }\r\n\r\n    shouldComponentUpdate() {\r\n        return false;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"content-section documentation\">\r\n                <TabView>\r\n                    {\r\n                        useLiveEditorTabs({ name: 'TreeTableSelectionDemo', sources: this.sources, service: 'NodeService', data: 'treetablenodes' })\r\n                    }\r\n                </TabView>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}