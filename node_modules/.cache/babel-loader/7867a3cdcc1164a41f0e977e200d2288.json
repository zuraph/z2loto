{"ast":null,"code":"import _classCallCheck from\"C:\\\\Users\\\\zura.ph\\\\WebstormProjects\\\\slotmaster-dashboard\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";import _createClass from\"C:\\\\Users\\\\zura.ph\\\\WebstormProjects\\\\slotmaster-dashboard\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";import _inherits from\"C:\\\\Users\\\\zura.ph\\\\WebstormProjects\\\\slotmaster-dashboard\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";import _createSuper from\"C:\\\\Users\\\\zura.ph\\\\WebstormProjects\\\\slotmaster-dashboard\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createSuper\";import React,{Component}from'react';import{Tree}from'../../components/tree/Tree';import{NodeService}from'../service/NodeService';import{TabView}from'../../components/tabview/TabView';import{useLiveEditorTabs}from'../liveeditor/LiveEditor';import{AppInlineHeader}from'../../AppInlineHeader';export var TreeDragDropDemo=/*#__PURE__*/function(_Component){_inherits(TreeDragDropDemo,_Component);var _super=_createSuper(TreeDragDropDemo);function TreeDragDropDemo(props){var _this;_classCallCheck(this,TreeDragDropDemo);_this=_super.call(this,props);_this.state={nodes:null};_this.nodeService=new NodeService();return _this;}_createClass(TreeDragDropDemo,[{key:\"componentDidMount\",value:function componentDidMount(){var _this2=this;this.nodeService.getTreeNodes().then(function(data){return _this2.setState({nodes:data});});}},{key:\"render\",value:function render(){var _this3=this;return/*#__PURE__*/React.createElement(\"div\",null,/*#__PURE__*/React.createElement(\"div\",{className:\"content-section introduction\"},/*#__PURE__*/React.createElement(AppInlineHeader,{changelogText:\"tree\"},/*#__PURE__*/React.createElement(\"h1\",null,\"Tree \",/*#__PURE__*/React.createElement(\"span\",null,\"DragDrop\")),/*#__PURE__*/React.createElement(\"p\",null,\"Nodes can be reordered using drag and drop.\"))),/*#__PURE__*/React.createElement(\"div\",{className:\"content-section implementation\"},/*#__PURE__*/React.createElement(\"div\",{className:\"card\"},/*#__PURE__*/React.createElement(Tree,{value:this.state.nodes,dragdropScope:\"demo\",onDragDrop:function onDragDrop(event){return _this3.setState({nodes:event.value});}}))),/*#__PURE__*/React.createElement(TreeDragDropDemoDoc,null));}}]);return TreeDragDropDemo;}(Component);export var TreeDragDropDemoDoc=/*#__PURE__*/function(_Component2){_inherits(TreeDragDropDemoDoc,_Component2);var _super2=_createSuper(TreeDragDropDemoDoc);function TreeDragDropDemoDoc(props){var _this4;_classCallCheck(this,TreeDragDropDemoDoc);_this4=_super2.call(this,props);_this4.sources={'class':{tabName:'Class Source',content:\"\\nimport React, { Component } from 'react';\\nimport { Tree } from 'primereact/tree';\\nimport { NodeService } from '../service/NodeService';\\n\\nexport class TreeDragDropDemo extends Component {\\n\\n    constructor(props) {\\n        super(props);\\n        this.state = {\\n            nodes: null\\n        };\\n\\n        this.nodeService = new NodeService();\\n    }\\n\\n    componentDidMount() {\\n        this.nodeService.getTreeNodes().then(data => this.setState({ nodes: data }));\\n    }\\n\\n    render() {\\n        return (\\n            <div>\\n                <div className=\\\"card\\\">\\n                    <Tree value={this.state.nodes} dragdropScope=\\\"demo\\\" onDragDrop={event => this.setState({ nodes: event.value })} />\\n                </div>\\n            </div>\\n        )\\n    }\\n}\\n                \"},'hooks':{tabName:'Hooks Source',content:\"\\nimport React, { useState, useEffect } from 'react';\\nimport { Tree } from 'primereact/tree';\\nimport { NodeService } from '../service/NodeService';\\n\\nconst TreeDragDropDemo = () => {\\n    const [nodes, setNodes] = useState(null);\\n    const nodeService = new NodeService();\\n\\n    useEffect(() => {\\n        nodeService.getTreeNodes().then(data => setNodes(data));\\n    }, []); // eslint-disable-line react-hooks/exhaustive-deps\\n\\n    return (\\n        <div>\\n            <div className=\\\"card\\\">\\n                <Tree value={nodes} dragdropScope=\\\"demo\\\" onDragDrop={event => setNodes(event.value)} />\\n            </div>\\n        </div>\\n    )\\n}\\n                \"},'ts':{tabName:'TS Source',content:\"\\nimport React, { useState, useEffect } from 'react';\\nimport { Tree } from 'primereact/tree';\\nimport { NodeService } from '../service/NodeService';\\n\\nconst TreeDragDropDemo = () => {\\n    const [nodes, setNodes] = useState(null);\\n    const nodeService = new NodeService();\\n\\n    useEffect(() => {\\n        nodeService.getTreeNodes().then(data => setNodes(data));\\n    }, []); // eslint-disable-line react-hooks/exhaustive-deps\\n\\n    return (\\n        <div>\\n            <div className=\\\"card\\\">\\n                <Tree value={nodes} dragdropScope=\\\"demo\\\" onDragDrop={event => setNodes(event.value)} />\\n            </div>\\n        </div>\\n    )\\n}\\n                \"}};return _this4;}_createClass(TreeDragDropDemoDoc,[{key:\"shouldComponentUpdate\",value:function shouldComponentUpdate(){return false;}},{key:\"render\",value:function render(){return/*#__PURE__*/React.createElement(\"div\",{className:\"content-section documentation\"},/*#__PURE__*/React.createElement(TabView,null,useLiveEditorTabs({name:'TreeDragDropDemo',sources:this.sources,service:'NodeService',data:'treenodes'})));}}]);return TreeDragDropDemoDoc;}(Component);","map":{"version":3,"sources":["C:/Users/zura.ph/WebstormProjects/slotmaster-dashboard/src/showcase/tree/TreeDragDropDemo.js"],"names":["React","Component","Tree","NodeService","TabView","useLiveEditorTabs","AppInlineHeader","TreeDragDropDemo","props","state","nodes","nodeService","getTreeNodes","then","data","setState","event","value","TreeDragDropDemoDoc","sources","tabName","content","name","service"],"mappings":"wsBAAA,MAAOA,CAAAA,KAAP,EAAgBC,SAAhB,KAAiC,OAAjC,CACA,OAASC,IAAT,KAAqB,4BAArB,CACA,OAASC,WAAT,KAA4B,wBAA5B,CACA,OAASC,OAAT,KAAwB,kCAAxB,CACA,OAASC,iBAAT,KAAiC,0BAAjC,CACA,OAASC,eAAT,KAAgC,uBAAhC,CAEA,UAAaC,CAAAA,gBAAb,oHAEI,0BAAYC,KAAZ,CAAmB,kDACf,uBAAMA,KAAN,EACA,MAAKC,KAAL,CAAa,CACTC,KAAK,CAAE,IADE,CAAb,CAIA,MAAKC,WAAL,CAAmB,GAAIR,CAAAA,WAAJ,EAAnB,CANe,aAOlB,CATL,8DAWI,4BAAoB,iBAChB,KAAKQ,WAAL,CAAiBC,YAAjB,GAAgCC,IAAhC,CAAqC,SAAAC,IAAI,QAAI,CAAA,MAAI,CAACC,QAAL,CAAc,CAAEL,KAAK,CAAEI,IAAT,CAAd,CAAJ,EAAzC,EACH,CAbL,sBAeI,iBAAS,iBACL,mBACI,4CACI,2BAAK,SAAS,CAAC,8BAAf,eACI,oBAAC,eAAD,EAAiB,aAAa,CAAC,MAA/B,eACI,mDAAS,2CAAT,CADJ,cAEI,2EAFJ,CADJ,CADJ,cAQI,2BAAK,SAAS,CAAC,gCAAf,eACI,2BAAK,SAAS,CAAC,MAAf,eACI,oBAAC,IAAD,EAAM,KAAK,CAAE,KAAKL,KAAL,CAAWC,KAAxB,CAA+B,aAAa,CAAC,MAA7C,CAAoD,UAAU,CAAE,oBAAAM,KAAK,QAAI,CAAA,MAAI,CAACD,QAAL,CAAc,CAAEL,KAAK,CAAEM,KAAK,CAACC,KAAf,CAAd,CAAJ,EAArE,EADJ,CADJ,CARJ,cAcI,oBAAC,mBAAD,MAdJ,CADJ,CAkBH,CAlCL,8BAAsChB,SAAtC,EAqCA,UAAaiB,CAAAA,mBAAb,6HAEI,6BAAYV,KAAZ,CAAmB,sDACf,yBAAMA,KAAN,EAEA,OAAKW,OAAL,CAAe,CACX,QAAS,CACLC,OAAO,CAAE,cADJ,CAELC,OAAO,oyBAFF,CADE,CAmCX,QAAS,CACLD,OAAO,CAAE,cADJ,CAELC,OAAO,kqBAFF,CAnCE,CA4DX,KAAM,CACFD,OAAO,CAAE,WADP,CAEFC,OAAO,kqBAFL,CA5DK,CAAf,CAHe,cAyFlB,CA3FL,qEA6FI,gCAAwB,CACpB,MAAO,MAAP,CACH,CA/FL,sBAiGI,iBAAS,CACL,mBACI,2BAAK,SAAS,CAAC,+BAAf,eACI,oBAAC,OAAD,MAEQhB,iBAAiB,CAAC,CAAEiB,IAAI,CAAE,kBAAR,CAA4BH,OAAO,CAAE,KAAKA,OAA1C,CAAmDI,OAAO,CAAE,aAA5D,CAA2ET,IAAI,CAAE,WAAjF,CAAD,CAFzB,CADJ,CADJ,CASH,CA3GL,iCAAyCb,SAAzC","sourcesContent":["import React, { Component } from 'react';\r\nimport { Tree } from '../../components/tree/Tree';\r\nimport { NodeService } from '../service/NodeService';\r\nimport { TabView } from '../../components/tabview/TabView';\r\nimport { useLiveEditorTabs }from '../liveeditor/LiveEditor';\r\nimport { AppInlineHeader } from '../../AppInlineHeader';\r\n\r\nexport class TreeDragDropDemo extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            nodes: null\r\n        };\r\n\r\n        this.nodeService = new NodeService();\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.nodeService.getTreeNodes().then(data => this.setState({ nodes: data }));\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div className=\"content-section introduction\">\r\n                    <AppInlineHeader changelogText=\"tree\">\r\n                        <h1>Tree <span>DragDrop</span></h1>\r\n                        <p>Nodes can be reordered using drag and drop.</p>\r\n                    </AppInlineHeader>\r\n                </div>\r\n\r\n                <div className=\"content-section implementation\">\r\n                    <div className=\"card\">\r\n                        <Tree value={this.state.nodes} dragdropScope=\"demo\" onDragDrop={event => this.setState({ nodes: event.value })} />\r\n                    </div>\r\n                </div>\r\n\r\n                <TreeDragDropDemoDoc />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport class TreeDragDropDemoDoc extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.sources = {\r\n            'class': {\r\n                tabName: 'Class Source',\r\n                content: `\r\nimport React, { Component } from 'react';\r\nimport { Tree } from 'primereact/tree';\r\nimport { NodeService } from '../service/NodeService';\r\n\r\nexport class TreeDragDropDemo extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            nodes: null\r\n        };\r\n\r\n        this.nodeService = new NodeService();\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.nodeService.getTreeNodes().then(data => this.setState({ nodes: data }));\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div className=\"card\">\r\n                    <Tree value={this.state.nodes} dragdropScope=\"demo\" onDragDrop={event => this.setState({ nodes: event.value })} />\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n                `\r\n            },\r\n            'hooks': {\r\n                tabName: 'Hooks Source',\r\n                content: `\r\nimport React, { useState, useEffect } from 'react';\r\nimport { Tree } from 'primereact/tree';\r\nimport { NodeService } from '../service/NodeService';\r\n\r\nconst TreeDragDropDemo = () => {\r\n    const [nodes, setNodes] = useState(null);\r\n    const nodeService = new NodeService();\r\n\r\n    useEffect(() => {\r\n        nodeService.getTreeNodes().then(data => setNodes(data));\r\n    }, []); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"card\">\r\n                <Tree value={nodes} dragdropScope=\"demo\" onDragDrop={event => setNodes(event.value)} />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n                `\r\n            },\r\n            'ts': {\r\n                tabName: 'TS Source',\r\n                content: `\r\nimport React, { useState, useEffect } from 'react';\r\nimport { Tree } from 'primereact/tree';\r\nimport { NodeService } from '../service/NodeService';\r\n\r\nconst TreeDragDropDemo = () => {\r\n    const [nodes, setNodes] = useState(null);\r\n    const nodeService = new NodeService();\r\n\r\n    useEffect(() => {\r\n        nodeService.getTreeNodes().then(data => setNodes(data));\r\n    }, []); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"card\">\r\n                <Tree value={nodes} dragdropScope=\"demo\" onDragDrop={event => setNodes(event.value)} />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n                `\r\n            }\r\n        }\r\n    }\r\n\r\n    shouldComponentUpdate() {\r\n        return false;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"content-section documentation\">\r\n                <TabView>\r\n                    {\r\n                        useLiveEditorTabs({ name: 'TreeDragDropDemo', sources: this.sources, service: 'NodeService', data: 'treenodes' })\r\n                    }\r\n                </TabView>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}