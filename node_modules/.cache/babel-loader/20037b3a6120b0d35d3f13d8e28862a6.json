{"ast":null,"code":"import _objectSpread from \"C:\\\\Users\\\\zura.ph\\\\WebstormProjects\\\\zz-regul\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\nimport _classCallCheck from \"C:\\\\Users\\\\zura.ph\\\\WebstormProjects\\\\zz-regul\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\zura.ph\\\\WebstormProjects\\\\zz-regul\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"C:\\\\Users\\\\zura.ph\\\\WebstormProjects\\\\zz-regul\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"C:\\\\Users\\\\zura.ph\\\\WebstormProjects\\\\zz-regul\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _createSuper from \"C:\\\\Users\\\\zura.ph\\\\WebstormProjects\\\\zz-regul\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"C:\\\\Users\\\\zura.ph\\\\WebstormProjects\\\\zz-regul\\\\src\\\\components\\\\password\\\\Password.js\";\nimport React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport PropTypes from 'prop-types';\nimport DomHandler from '../utils/DomHandler';\nimport { tip } from '../tooltip/Tooltip';\nimport { InputText } from '../inputtext/InputText';\nimport ObjectUtils from '../utils/ObjectUtils';\nimport UniqueComponentId from '../utils/UniqueComponentId';\nimport { CSSTransition } from 'react-transition-group';\nimport { classNames } from '../utils/ClassNames';\nimport ConnectedOverlayScrollHandler from '../utils/ConnectedOverlayScrollHandler';\nimport { localeOption } from '../api/Locale';\nimport OverlayEventBus from '../overlayeventbus/OverlayEventBus';\nexport var Password = /*#__PURE__*/function (_Component) {\n  _inherits(Password, _Component);\n\n  var _super = _createSuper(Password);\n\n  function Password(props) {\n    var _this;\n\n    _classCallCheck(this, Password);\n\n    _this = _super.call(this, props);\n    _this.state = {\n      overlayVisible: false,\n      meter: null,\n      infoText: _this.promptLabel(),\n      focused: false,\n      unmasked: false\n    };\n    _this.onFocus = _this.onFocus.bind(_assertThisInitialized(_this));\n    _this.onBlur = _this.onBlur.bind(_assertThisInitialized(_this));\n    _this.onKeyup = _this.onKeyup.bind(_assertThisInitialized(_this));\n    _this.onMaskToggle = _this.onMaskToggle.bind(_assertThisInitialized(_this));\n    _this.onOverlayEnter = _this.onOverlayEnter.bind(_assertThisInitialized(_this));\n    _this.onOverlayEntered = _this.onOverlayEntered.bind(_assertThisInitialized(_this));\n    _this.onOverlayExit = _this.onOverlayExit.bind(_assertThisInitialized(_this));\n    _this.onPanelClick = _this.onPanelClick.bind(_assertThisInitialized(_this));\n    _this.id = _this.props.id || UniqueComponentId();\n    _this.overlayRef = React.createRef();\n    _this.mediumCheckRegExp = new RegExp(_this.props.mediumRegex);\n    _this.strongCheckRegExp = new RegExp(_this.props.strongRegex);\n    return _this;\n  }\n\n  _createClass(Password, [{\n    key: \"promptLabel\",\n    value: function promptLabel() {\n      return this.props.promptLabel || localeOption('passwordPrompt');\n    }\n  }, {\n    key: \"weakLabel\",\n    value: function weakLabel() {\n      return this.props.weakLabel || localeOption('weak');\n    }\n  }, {\n    key: \"mediumLabel\",\n    value: function mediumLabel() {\n      return this.props.mediumLabel || localeOption('medium');\n    }\n  }, {\n    key: \"strongLabel\",\n    value: function strongLabel() {\n      return this.props.strongLabel || localeOption('strong');\n    }\n  }, {\n    key: \"isFilled\",\n    value: function isFilled() {\n      return this.props.value != null && this.props.value.toString().length > 0;\n    }\n  }, {\n    key: \"getInputType\",\n    value: function getInputType() {\n      return this.state.unmasked ? 'text' : 'password';\n    }\n  }, {\n    key: \"updateLabels\",\n    value: function updateLabels() {\n      if (this.state.meter) {\n        var label = null;\n\n        switch (this.state.meter.strength) {\n          case 'weak':\n            label = this.weakLabel();\n            break;\n\n          case 'medium':\n            label = this.mediumLabel();\n            break;\n\n          case 'strong':\n            label = this.strongLabel();\n            break;\n\n          default:\n            break;\n        }\n\n        if (label && this.state.infoText !== label) {\n          this.setState({\n            infoText: label\n          });\n        }\n      } else {\n        var promptLabel = this.promptLabel();\n\n        if (this.state.infoText !== promptLabel) {\n          this.setState({\n            infoText: promptLabel\n          });\n        }\n      }\n    }\n  }, {\n    key: \"onPanelClick\",\n    value: function onPanelClick(event) {\n      if (this.props.feedback) {\n        OverlayEventBus.emit('overlay-click', {\n          originalEvent: event,\n          target: this.container\n        });\n      }\n    }\n  }, {\n    key: \"onMaskToggle\",\n    value: function onMaskToggle() {\n      this.setState(function (prevState) {\n        return {\n          unmasked: !prevState.unmasked\n        };\n      });\n    }\n  }, {\n    key: \"showOverlay\",\n    value: function showOverlay() {\n      this.updateLabels();\n      this.setState({\n        overlayVisible: true\n      });\n    }\n  }, {\n    key: \"hideOverlay\",\n    value: function hideOverlay() {\n      this.setState({\n        overlayVisible: false\n      });\n    }\n  }, {\n    key: \"alignOverlay\",\n    value: function alignOverlay() {\n      if (this.props.appendTo) {\n        this.overlayRef.current.style.minWidth = DomHandler.getOuterWidth(this.inputEl) + 'px';\n        DomHandler.absolutePosition(this.overlayRef.current, this.inputEl);\n      } else {\n        DomHandler.relativePosition(this.overlayRef.current, this.inputEl);\n      }\n    }\n  }, {\n    key: \"onOverlayEnter\",\n    value: function onOverlayEnter() {\n      this.overlayRef.current.style.zIndex = String(DomHandler.generateZIndex());\n      this.alignOverlay();\n    }\n  }, {\n    key: \"onOverlayEntered\",\n    value: function onOverlayEntered() {\n      this.bindScrollListener();\n      this.bindResizeListener();\n    }\n  }, {\n    key: \"onOverlayExit\",\n    value: function onOverlayExit() {\n      this.unbindScrollListener();\n      this.unbindResizeListener();\n    }\n  }, {\n    key: \"onFocus\",\n    value: function onFocus(event) {\n      var _this2 = this;\n\n      event.persist();\n      this.setState({\n        focused: true\n      }, function () {\n        if (_this2.props.feedback) {\n          _this2.showOverlay();\n        }\n\n        if (_this2.props.onFocus) {\n          _this2.props.onFocus(event);\n        }\n      });\n    }\n  }, {\n    key: \"onBlur\",\n    value: function onBlur(event) {\n      var _this3 = this;\n\n      event.persist();\n      this.setState({\n        focused: false\n      }, function () {\n        if (_this3.props.feedback) {\n          _this3.hideOverlay();\n        }\n\n        if (_this3.props.onBlur) {\n          _this3.props.onBlur(event);\n        }\n      });\n    }\n  }, {\n    key: \"onKeyup\",\n    value: function onKeyup(e) {\n      var _this4 = this;\n\n      if (this.props.feedback) {\n        var value = e.target.value;\n        var label = null;\n        var meter = null;\n\n        switch (this.testStrength(value)) {\n          case 1:\n            label = this.weakLabel();\n            meter = {\n              strength: 'weak',\n              width: '33.33%'\n            };\n            break;\n\n          case 2:\n            label = this.mediumLabel();\n            meter = {\n              strength: 'medium',\n              width: '66.66%'\n            };\n            break;\n\n          case 3:\n            label = this.strongLabel();\n            meter = {\n              strength: 'strong',\n              width: '100%'\n            };\n            break;\n\n          default:\n            label = this.promptLabel();\n            meter = null;\n            break;\n        }\n\n        this.setState({\n          meter: meter,\n          infoText: label\n        }, function () {\n          if (!_this4.state.overlayVisible) {\n            _this4.showOverlay();\n          }\n        });\n      }\n\n      if (this.props.onKeyUp) {\n        this.props.onKeyUp(e);\n      }\n    }\n  }, {\n    key: \"testStrength\",\n    value: function testStrength(str) {\n      var level = 0;\n      if (this.strongCheckRegExp.test(str)) level = 3;else if (this.mediumCheckRegExp.test(str)) level = 2;else if (str.length) level = 1;\n      return level;\n    }\n  }, {\n    key: \"bindScrollListener\",\n    value: function bindScrollListener() {\n      var _this5 = this;\n\n      if (!this.scrollHandler) {\n        this.scrollHandler = new ConnectedOverlayScrollHandler(this.inputEl, function () {\n          if (_this5.state.overlayVisible) {\n            _this5.hideOverlay();\n          }\n        });\n      }\n\n      this.scrollHandler.bindScrollListener();\n    }\n  }, {\n    key: \"unbindScrollListener\",\n    value: function unbindScrollListener() {\n      if (this.scrollHandler) {\n        this.scrollHandler.unbindScrollListener();\n      }\n    }\n  }, {\n    key: \"bindResizeListener\",\n    value: function bindResizeListener() {\n      var _this6 = this;\n\n      if (!this.resizeListener) {\n        this.resizeListener = function () {\n          if (_this6.state.overlayVisible) {\n            _this6.hideOverlay();\n          }\n        };\n\n        window.addEventListener('resize', this.resizeListener);\n      }\n    }\n  }, {\n    key: \"unbindResizeListener\",\n    value: function unbindResizeListener() {\n      if (this.resizeListener) {\n        window.removeEventListener('resize', this.resizeListener);\n        this.resizeListener = null;\n      }\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      if (this.props.tooltip) {\n        this.renderTooltip();\n      }\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      if (prevProps.tooltip !== this.props.tooltip || prevProps.tooltipOptions !== this.props.tooltipOptions) {\n        if (this.tooltip) this.tooltip.update(_objectSpread({\n          content: this.props.tooltip\n        }, this.props.tooltipOptions || {}));else this.renderTooltip();\n      }\n\n      if (prevProps.mediumRegex !== this.props.mediumRegex) {\n        this.mediumCheckRegExp = new RegExp(this.props.mediumRegex);\n      }\n\n      if (prevProps.strongRegex !== this.props.strongRegex) {\n        this.strongCheckRegExp = new RegExp(this.props.strongRegex);\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.unbindResizeListener();\n\n      if (this.scrollHandler) {\n        this.scrollHandler.destroy();\n        this.scrollHandler = null;\n      }\n\n      if (this.tooltip) {\n        this.tooltip.destroy();\n        this.tooltip = null;\n      }\n    }\n  }, {\n    key: \"renderTooltip\",\n    value: function renderTooltip() {\n      this.tooltip = tip({\n        target: this.inputEl,\n        content: this.props.tooltip,\n        options: this.props.tooltipOptions\n      });\n    }\n  }, {\n    key: \"renderIcon\",\n    value: function renderIcon() {\n      if (this.props.toggleMask) {\n        var iconClassName = this.state.unmasked ? 'pi pi-eye-slash' : 'pi pi-eye';\n        var content = /*#__PURE__*/React.createElement(\"i\", {\n          className: iconClassName,\n          onClick: this.onMaskToggle,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 376,\n            columnNumber: 27\n          }\n        });\n\n        if (this.props.icon) {\n          var defaultIconOptions = {\n            onClick: this.onMaskToggle,\n            className: iconClassName,\n            element: content,\n            props: this.props\n          };\n          content = ObjectUtils.getJSXElement(this.props.icon, defaultIconOptions);\n        }\n\n        return content;\n      }\n\n      return null;\n    }\n  }, {\n    key: \"renderPanel\",\n    value: function renderPanel() {\n      var panelClassName = classNames('p-password-panel p-component', this.props.panelClassName);\n\n      var _ref = this.state.meter || {\n        strength: '',\n        width: '0%'\n      },\n          strength = _ref.strength,\n          width = _ref.width;\n\n      var header = ObjectUtils.getJSXElement(this.props.header, this.props);\n      var footer = ObjectUtils.getJSXElement(this.props.footer, this.props);\n      var content = this.props.content ? ObjectUtils.getJSXElement(this.props.content, this.props) : /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"p-password-meter\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 402,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"p-password-strength \".concat(strength),\n        style: {\n          width: width\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 403,\n          columnNumber: 21\n        }\n      })), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"p-password-info\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 405,\n          columnNumber: 17\n        }\n      }, this.state.infoText));\n      var panel = /*#__PURE__*/React.createElement(CSSTransition, {\n        nodeRef: this.overlayRef,\n        classNames: \"p-connected-overlay\",\n        in: this.state.overlayVisible,\n        timeout: {\n          enter: 120,\n          exit: 100\n        },\n        unmountOnExit: true,\n        onEnter: this.onOverlayEnter,\n        onEntered: this.onOverlayEntered,\n        onExit: this.onOverlayExit,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 412,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        ref: this.overlayRef,\n        className: panelClassName,\n        style: this.props.panelStyle,\n        onClick: this.onPanelClick,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 414,\n          columnNumber: 17\n        }\n      }, header, content, footer));\n\n      if (this.props.appendTo) {\n        return ReactDOM.createPortal(panel, this.props.appendTo);\n      }\n\n      return panel;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this7 = this;\n\n      var containerClassName = classNames('p-password p-component p-inputwrapper', {\n        'p-inputwrapper-filled': this.isFilled(),\n        'p-inputwrapper-focus': this.state.focused,\n        'p-input-icon-right': this.props.toggleMask\n      }, this.props.className);\n      var inputClassName = classNames('p-password-input', this.props.inputClassName);\n      var type = this.getInputType();\n      var inputProps = ObjectUtils.findDiffKeys(this.props, Password.defaultProps);\n      var icon = this.renderIcon();\n      var panel = this.renderPanel();\n      return /*#__PURE__*/React.createElement(\"div\", {\n        ref: function ref(el) {\n          return _this7.container = el;\n        },\n        className: containerClassName,\n        style: this.props.style,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 443,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(InputText, Object.assign({\n        id: this.id,\n        ref: function ref(el) {\n          return _this7.inputEl = el;\n        }\n      }, inputProps, {\n        type: type,\n        className: inputClassName,\n        style: this.props.inputStyle,\n        onFocus: this.onFocus,\n        onBlur: this.onBlur,\n        onKeyUp: this.onKeyup,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 444,\n          columnNumber: 17\n        }\n      })), icon, panel);\n    }\n  }]);\n\n  return Password;\n}(Component);\nPassword.defaultProps = {\n  id: null,\n  value: null,\n  promptLabel: null,\n  weakLabel: null,\n  mediumLabel: null,\n  strongLabel: null,\n  mediumRegex: '^(((?=.*[a-z])(?=.*[A-Z]))|((?=.*[a-z])(?=.*[0-9]))|((?=.*[A-Z])(?=.*[0-9])))(?=.{6,})',\n  strongRegex: '^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.{8,})',\n  feedback: true,\n  toggleMask: false,\n  appendTo: null,\n  header: null,\n  content: null,\n  footer: null,\n  icon: null,\n  tooltip: null,\n  tooltipOptions: null,\n  style: null,\n  className: null,\n  inputStyle: null,\n  inputClassName: null,\n  panelStyle: null,\n  panelClassName: null\n};\nPassword.propTypes = {\n  id: PropTypes.string,\n  value: PropTypes.string,\n  promptLabel: PropTypes.string,\n  weakLabel: PropTypes.string,\n  mediumLabel: PropTypes.string,\n  strongLabel: PropTypes.string,\n  mediumRegex: PropTypes.string,\n  strongRegex: PropTypes.string,\n  feedback: PropTypes.bool,\n  toggleMask: PropTypes.bool,\n  appendTo: PropTypes.any,\n  header: PropTypes.any,\n  content: PropTypes.any,\n  footer: PropTypes.any,\n  icon: PropTypes.any,\n  tooltip: PropTypes.string,\n  tooltipOptions: PropTypes.object,\n  style: PropTypes.object,\n  className: PropTypes.string,\n  inputStyle: PropTypes.object,\n  inputClassName: PropTypes.string,\n  panelStyle: PropTypes.object,\n  panelClassName: PropTypes.string\n};","map":{"version":3,"sources":["C:/Users/zura.ph/WebstormProjects/zz-regul/src/components/password/Password.js"],"names":["React","Component","ReactDOM","PropTypes","DomHandler","tip","InputText","ObjectUtils","UniqueComponentId","CSSTransition","classNames","ConnectedOverlayScrollHandler","localeOption","OverlayEventBus","Password","props","state","overlayVisible","meter","infoText","promptLabel","focused","unmasked","onFocus","bind","onBlur","onKeyup","onMaskToggle","onOverlayEnter","onOverlayEntered","onOverlayExit","onPanelClick","id","overlayRef","createRef","mediumCheckRegExp","RegExp","mediumRegex","strongCheckRegExp","strongRegex","weakLabel","mediumLabel","strongLabel","value","toString","length","label","strength","setState","event","feedback","emit","originalEvent","target","container","prevState","updateLabels","appendTo","current","style","minWidth","getOuterWidth","inputEl","absolutePosition","relativePosition","zIndex","String","generateZIndex","alignOverlay","bindScrollListener","bindResizeListener","unbindScrollListener","unbindResizeListener","persist","showOverlay","hideOverlay","e","testStrength","width","onKeyUp","str","level","test","scrollHandler","resizeListener","window","addEventListener","removeEventListener","tooltip","renderTooltip","prevProps","tooltipOptions","update","content","destroy","options","toggleMask","iconClassName","icon","defaultIconOptions","onClick","className","element","getJSXElement","panelClassName","header","footer","panel","enter","exit","panelStyle","createPortal","containerClassName","isFilled","inputClassName","type","getInputType","inputProps","findDiffKeys","defaultProps","renderIcon","renderPanel","el","inputStyle","propTypes","string","bool","any","object"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,UAAP,MAAuB,qBAAvB;AACA,SAASC,GAAT,QAAoB,oBAApB;AACA,SAASC,SAAT,QAA0B,wBAA1B;AACA,OAAOC,WAAP,MAAwB,sBAAxB;AACA,OAAOC,iBAAP,MAA8B,4BAA9B;AACA,SAASC,aAAT,QAA8B,wBAA9B;AACA,SAASC,UAAT,QAA2B,qBAA3B;AACA,OAAOC,6BAAP,MAA0C,wCAA1C;AACA,SAASC,YAAT,QAA6B,eAA7B;AACA,OAAOC,eAAP,MAA4B,oCAA5B;AAEA,WAAaC,QAAb;AAAA;;AAAA;;AAsDI,oBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACf,8BAAMA,KAAN;AAEA,UAAKC,KAAL,GAAa;AACTC,MAAAA,cAAc,EAAE,KADP;AAETC,MAAAA,KAAK,EAAE,IAFE;AAGTC,MAAAA,QAAQ,EAAE,MAAKC,WAAL,EAHD;AAITC,MAAAA,OAAO,EAAE,KAJA;AAKTC,MAAAA,QAAQ,EAAE;AALD,KAAb;AAQA,UAAKC,OAAL,GAAe,MAAKA,OAAL,CAAaC,IAAb,+BAAf;AACA,UAAKC,MAAL,GAAc,MAAKA,MAAL,CAAYD,IAAZ,+BAAd;AACA,UAAKE,OAAL,GAAe,MAAKA,OAAL,CAAaF,IAAb,+BAAf;AACA,UAAKG,YAAL,GAAoB,MAAKA,YAAL,CAAkBH,IAAlB,+BAApB;AACA,UAAKI,cAAL,GAAsB,MAAKA,cAAL,CAAoBJ,IAApB,+BAAtB;AACA,UAAKK,gBAAL,GAAwB,MAAKA,gBAAL,CAAsBL,IAAtB,+BAAxB;AACA,UAAKM,aAAL,GAAqB,MAAKA,aAAL,CAAmBN,IAAnB,+BAArB;AACA,UAAKO,YAAL,GAAoB,MAAKA,YAAL,CAAkBP,IAAlB,+BAApB;AAEA,UAAKQ,EAAL,GAAU,MAAKjB,KAAL,CAAWiB,EAAX,IAAiBxB,iBAAiB,EAA5C;AACA,UAAKyB,UAAL,GAAkBjC,KAAK,CAACkC,SAAN,EAAlB;AACA,UAAKC,iBAAL,GAAyB,IAAIC,MAAJ,CAAW,MAAKrB,KAAL,CAAWsB,WAAtB,CAAzB;AACA,UAAKC,iBAAL,GAAyB,IAAIF,MAAJ,CAAW,MAAKrB,KAAL,CAAWwB,WAAtB,CAAzB;AAvBe;AAwBlB;;AA9EL;AAAA;AAAA,WAgFI,uBAAc;AACV,aAAO,KAAKxB,KAAL,CAAWK,WAAX,IAA0BR,YAAY,CAAC,gBAAD,CAA7C;AACH;AAlFL;AAAA;AAAA,WAoFI,qBAAY;AACR,aAAO,KAAKG,KAAL,CAAWyB,SAAX,IAAwB5B,YAAY,CAAC,MAAD,CAA3C;AACH;AAtFL;AAAA;AAAA,WAwFI,uBAAc;AACV,aAAO,KAAKG,KAAL,CAAW0B,WAAX,IAA0B7B,YAAY,CAAC,QAAD,CAA7C;AACH;AA1FL;AAAA;AAAA,WA4FI,uBAAc;AACV,aAAO,KAAKG,KAAL,CAAW2B,WAAX,IAA0B9B,YAAY,CAAC,QAAD,CAA7C;AACH;AA9FL;AAAA;AAAA,WAgGI,oBAAW;AACP,aAAO,KAAKG,KAAL,CAAW4B,KAAX,IAAoB,IAApB,IAA4B,KAAK5B,KAAL,CAAW4B,KAAX,CAAiBC,QAAjB,GAA4BC,MAA5B,GAAqC,CAAxE;AACH;AAlGL;AAAA;AAAA,WAoGI,wBAAe;AACX,aAAO,KAAK7B,KAAL,CAAWM,QAAX,GAAsB,MAAtB,GAA+B,UAAtC;AACH;AAtGL;AAAA;AAAA,WAwGI,wBAAe;AACX,UAAI,KAAKN,KAAL,CAAWE,KAAf,EAAsB;AAClB,YAAI4B,KAAK,GAAG,IAAZ;;AACA,gBAAQ,KAAK9B,KAAL,CAAWE,KAAX,CAAiB6B,QAAzB;AACI,eAAK,MAAL;AACID,YAAAA,KAAK,GAAG,KAAKN,SAAL,EAAR;AACA;;AAEJ,eAAK,QAAL;AACIM,YAAAA,KAAK,GAAG,KAAKL,WAAL,EAAR;AACA;;AAEJ,eAAK,QAAL;AACIK,YAAAA,KAAK,GAAG,KAAKJ,WAAL,EAAR;AACA;;AAEJ;AACI;AAdR;;AAiBA,YAAII,KAAK,IAAI,KAAK9B,KAAL,CAAWG,QAAX,KAAwB2B,KAArC,EAA4C;AACxC,eAAKE,QAAL,CAAc;AAAE7B,YAAAA,QAAQ,EAAE2B;AAAZ,WAAd;AACH;AACJ,OAtBD,MAuBK;AACD,YAAM1B,WAAW,GAAG,KAAKA,WAAL,EAApB;;AACA,YAAI,KAAKJ,KAAL,CAAWG,QAAX,KAAwBC,WAA5B,EAAyC;AACrC,eAAK4B,QAAL,CAAc;AAAE7B,YAAAA,QAAQ,EAAEC;AAAZ,WAAd;AACH;AACJ;AACJ;AAtIL;AAAA;AAAA,WAwII,sBAAa6B,KAAb,EAAoB;AAChB,UAAI,KAAKlC,KAAL,CAAWmC,QAAf,EAAyB;AACrBrC,QAAAA,eAAe,CAACsC,IAAhB,CAAqB,eAArB,EAAsC;AAClCC,UAAAA,aAAa,EAAEH,KADmB;AAElCI,UAAAA,MAAM,EAAE,KAAKC;AAFqB,SAAtC;AAIH;AACJ;AA/IL;AAAA;AAAA,WAiJI,wBAAe;AACX,WAAKN,QAAL,CAAc,UAACO,SAAD,EAAe;AACzB,eAAO;AACHjC,UAAAA,QAAQ,EAAE,CAACiC,SAAS,CAACjC;AADlB,SAAP;AAGH,OAJD;AAKH;AAvJL;AAAA;AAAA,WAyJI,uBAAc;AACV,WAAKkC,YAAL;AACA,WAAKR,QAAL,CAAc;AAAE/B,QAAAA,cAAc,EAAE;AAAlB,OAAd;AACH;AA5JL;AAAA;AAAA,WA8JI,uBAAc;AACV,WAAK+B,QAAL,CAAc;AAAE/B,QAAAA,cAAc,EAAE;AAAlB,OAAd;AACH;AAhKL;AAAA;AAAA,WAkKI,wBAAe;AACX,UAAI,KAAKF,KAAL,CAAW0C,QAAf,EAAyB;AACrB,aAAKxB,UAAL,CAAgByB,OAAhB,CAAwBC,KAAxB,CAA8BC,QAA9B,GAAyCxD,UAAU,CAACyD,aAAX,CAAyB,KAAKC,OAA9B,IAAyC,IAAlF;AACA1D,QAAAA,UAAU,CAAC2D,gBAAX,CAA4B,KAAK9B,UAAL,CAAgByB,OAA5C,EAAqD,KAAKI,OAA1D;AACH,OAHD,MAIK;AACD1D,QAAAA,UAAU,CAAC4D,gBAAX,CAA4B,KAAK/B,UAAL,CAAgByB,OAA5C,EAAqD,KAAKI,OAA1D;AACH;AACJ;AA1KL;AAAA;AAAA,WA4KI,0BAAiB;AACb,WAAK7B,UAAL,CAAgByB,OAAhB,CAAwBC,KAAxB,CAA8BM,MAA9B,GAAuCC,MAAM,CAAC9D,UAAU,CAAC+D,cAAX,EAAD,CAA7C;AACA,WAAKC,YAAL;AACH;AA/KL;AAAA;AAAA,WAiLI,4BAAmB;AACf,WAAKC,kBAAL;AACA,WAAKC,kBAAL;AACH;AApLL;AAAA;AAAA,WAsLI,yBAAgB;AACZ,WAAKC,oBAAL;AACA,WAAKC,oBAAL;AACH;AAzLL;AAAA;AAAA,WA2LI,iBAAQvB,KAAR,EAAe;AAAA;;AACXA,MAAAA,KAAK,CAACwB,OAAN;AACA,WAAKzB,QAAL,CAAc;AAAE3B,QAAAA,OAAO,EAAE;AAAX,OAAd,EAAiC,YAAM;AACnC,YAAI,MAAI,CAACN,KAAL,CAAWmC,QAAf,EAAyB;AACrB,UAAA,MAAI,CAACwB,WAAL;AACH;;AAED,YAAI,MAAI,CAAC3D,KAAL,CAAWQ,OAAf,EAAwB;AACpB,UAAA,MAAI,CAACR,KAAL,CAAWQ,OAAX,CAAmB0B,KAAnB;AACH;AACJ,OARD;AASH;AAtML;AAAA;AAAA,WAwMI,gBAAOA,KAAP,EAAc;AAAA;;AACVA,MAAAA,KAAK,CAACwB,OAAN;AACA,WAAKzB,QAAL,CAAc;AAAE3B,QAAAA,OAAO,EAAE;AAAX,OAAd,EAAkC,YAAM;AACpC,YAAI,MAAI,CAACN,KAAL,CAAWmC,QAAf,EAAyB;AACrB,UAAA,MAAI,CAACyB,WAAL;AACH;;AAED,YAAI,MAAI,CAAC5D,KAAL,CAAWU,MAAf,EAAuB;AACnB,UAAA,MAAI,CAACV,KAAL,CAAWU,MAAX,CAAkBwB,KAAlB;AACH;AACJ,OARD;AASH;AAnNL;AAAA;AAAA,WAqNI,iBAAQ2B,CAAR,EAAW;AAAA;;AACP,UAAG,KAAK7D,KAAL,CAAWmC,QAAd,EAAwB;AACpB,YAAIP,KAAK,GAAGiC,CAAC,CAACvB,MAAF,CAASV,KAArB;AACA,YAAIG,KAAK,GAAG,IAAZ;AACA,YAAI5B,KAAK,GAAG,IAAZ;;AAEA,gBAAQ,KAAK2D,YAAL,CAAkBlC,KAAlB,CAAR;AACI,eAAK,CAAL;AACIG,YAAAA,KAAK,GAAG,KAAKN,SAAL,EAAR;AACAtB,YAAAA,KAAK,GAAG;AACJ6B,cAAAA,QAAQ,EAAE,MADN;AAEJ+B,cAAAA,KAAK,EAAE;AAFH,aAAR;AAIA;;AAEJ,eAAK,CAAL;AACIhC,YAAAA,KAAK,GAAG,KAAKL,WAAL,EAAR;AACAvB,YAAAA,KAAK,GAAG;AACJ6B,cAAAA,QAAQ,EAAE,QADN;AAEJ+B,cAAAA,KAAK,EAAE;AAFH,aAAR;AAIA;;AAEJ,eAAK,CAAL;AACIhC,YAAAA,KAAK,GAAG,KAAKJ,WAAL,EAAR;AACAxB,YAAAA,KAAK,GAAG;AACJ6B,cAAAA,QAAQ,EAAE,QADN;AAEJ+B,cAAAA,KAAK,EAAE;AAFH,aAAR;AAIA;;AAEJ;AACIhC,YAAAA,KAAK,GAAG,KAAK1B,WAAL,EAAR;AACAF,YAAAA,KAAK,GAAG,IAAR;AACA;AA5BR;;AA+BA,aAAK8B,QAAL,CAAc;AACV9B,UAAAA,KAAK,EAALA,KADU;AAEVC,UAAAA,QAAQ,EAAE2B;AAFA,SAAd,EAGG,YAAM;AACL,cAAI,CAAC,MAAI,CAAC9B,KAAL,CAAWC,cAAhB,EAAgC;AAC5B,YAAA,MAAI,CAACyD,WAAL;AACH;AACJ,SAPD;AAQH;;AAED,UAAI,KAAK3D,KAAL,CAAWgE,OAAf,EAAwB;AACpB,aAAKhE,KAAL,CAAWgE,OAAX,CAAmBH,CAAnB;AACH;AACJ;AAvQL;AAAA;AAAA,WAyQI,sBAAaI,GAAb,EAAkB;AACd,UAAIC,KAAK,GAAG,CAAZ;AAEA,UAAI,KAAK3C,iBAAL,CAAuB4C,IAAvB,CAA4BF,GAA5B,CAAJ,EACIC,KAAK,GAAG,CAAR,CADJ,KAEK,IAAI,KAAK9C,iBAAL,CAAuB+C,IAAvB,CAA4BF,GAA5B,CAAJ,EACDC,KAAK,GAAG,CAAR,CADC,KAEA,IAAID,GAAG,CAACnC,MAAR,EACDoC,KAAK,GAAG,CAAR;AAEJ,aAAOA,KAAP;AACH;AApRL;AAAA;AAAA,WAsRI,8BAAqB;AAAA;;AACjB,UAAI,CAAC,KAAKE,aAAV,EAAyB;AACrB,aAAKA,aAAL,GAAqB,IAAIxE,6BAAJ,CAAkC,KAAKmD,OAAvC,EAAgD,YAAM;AACvE,cAAI,MAAI,CAAC9C,KAAL,CAAWC,cAAf,EAA+B;AAC3B,YAAA,MAAI,CAAC0D,WAAL;AACH;AACJ,SAJoB,CAArB;AAKH;;AAED,WAAKQ,aAAL,CAAmBd,kBAAnB;AACH;AAhSL;AAAA;AAAA,WAkSI,gCAAuB;AACnB,UAAI,KAAKc,aAAT,EAAwB;AACpB,aAAKA,aAAL,CAAmBZ,oBAAnB;AACH;AACJ;AAtSL;AAAA;AAAA,WAwSI,8BAAqB;AAAA;;AACjB,UAAI,CAAC,KAAKa,cAAV,EAA0B;AACtB,aAAKA,cAAL,GAAsB,YAAM;AACxB,cAAI,MAAI,CAACpE,KAAL,CAAWC,cAAf,EAA+B;AAC3B,YAAA,MAAI,CAAC0D,WAAL;AACH;AACJ,SAJD;;AAKAU,QAAAA,MAAM,CAACC,gBAAP,CAAwB,QAAxB,EAAkC,KAAKF,cAAvC;AACH;AACJ;AAjTL;AAAA;AAAA,WAmTI,gCAAuB;AACnB,UAAI,KAAKA,cAAT,EAAyB;AACrBC,QAAAA,MAAM,CAACE,mBAAP,CAA2B,QAA3B,EAAqC,KAAKH,cAA1C;AACA,aAAKA,cAAL,GAAsB,IAAtB;AACH;AACJ;AAxTL;AAAA;AAAA,WA0TI,6BAAoB;AAChB,UAAI,KAAKrE,KAAL,CAAWyE,OAAf,EAAwB;AACpB,aAAKC,aAAL;AACH;AACJ;AA9TL;AAAA;AAAA,WAgUI,4BAAmBC,SAAnB,EAA8B;AAC1B,UAAIA,SAAS,CAACF,OAAV,KAAsB,KAAKzE,KAAL,CAAWyE,OAAjC,IAA4CE,SAAS,CAACC,cAAV,KAA6B,KAAK5E,KAAL,CAAW4E,cAAxF,EAAwG;AACpG,YAAI,KAAKH,OAAT,EACI,KAAKA,OAAL,CAAaI,MAAb;AAAsBC,UAAAA,OAAO,EAAE,KAAK9E,KAAL,CAAWyE;AAA1C,WAAuD,KAAKzE,KAAL,CAAW4E,cAAX,IAA6B,EAApF,GADJ,KAGI,KAAKF,aAAL;AACP;;AAED,UAAIC,SAAS,CAACrD,WAAV,KAA0B,KAAKtB,KAAL,CAAWsB,WAAzC,EAAsD;AAClD,aAAKF,iBAAL,GAAyB,IAAIC,MAAJ,CAAW,KAAKrB,KAAL,CAAWsB,WAAtB,CAAzB;AACH;;AAED,UAAIqD,SAAS,CAACnD,WAAV,KAA0B,KAAKxB,KAAL,CAAWwB,WAAzC,EAAsD;AAClD,aAAKD,iBAAL,GAAyB,IAAIF,MAAJ,CAAW,KAAKrB,KAAL,CAAWwB,WAAtB,CAAzB;AACH;AACJ;AA/UL;AAAA;AAAA,WAiVI,gCAAuB;AACnB,WAAKiC,oBAAL;;AACA,UAAI,KAAKW,aAAT,EAAwB;AACpB,aAAKA,aAAL,CAAmBW,OAAnB;AACA,aAAKX,aAAL,GAAqB,IAArB;AACH;;AAED,UAAI,KAAKK,OAAT,EAAkB;AACd,aAAKA,OAAL,CAAaM,OAAb;AACA,aAAKN,OAAL,GAAe,IAAf;AACH;AACJ;AA5VL;AAAA;AAAA,WA8VI,yBAAgB;AACZ,WAAKA,OAAL,GAAenF,GAAG,CAAC;AACfgD,QAAAA,MAAM,EAAE,KAAKS,OADE;AAEf+B,QAAAA,OAAO,EAAE,KAAK9E,KAAL,CAAWyE,OAFL;AAGfO,QAAAA,OAAO,EAAE,KAAKhF,KAAL,CAAW4E;AAHL,OAAD,CAAlB;AAKH;AApWL;AAAA;AAAA,WAsWI,sBAAa;AACT,UAAI,KAAK5E,KAAL,CAAWiF,UAAf,EAA2B;AACvB,YAAMC,aAAa,GAAG,KAAKjF,KAAL,CAAWM,QAAX,GAAsB,iBAAtB,GAA0C,WAAhE;AACA,YAAIuE,OAAO,gBAAG;AAAG,UAAA,SAAS,EAAEI,aAAd;AAA6B,UAAA,OAAO,EAAE,KAAKtE,YAA3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAd;;AAEA,YAAI,KAAKZ,KAAL,CAAWmF,IAAf,EAAqB;AACjB,cAAMC,kBAAkB,GAAG;AACvBC,YAAAA,OAAO,EAAE,KAAKzE,YADS;AAEvB0E,YAAAA,SAAS,EAAEJ,aAFY;AAGvBK,YAAAA,OAAO,EAAET,OAHc;AAIvB9E,YAAAA,KAAK,EAAE,KAAKA;AAJW,WAA3B;AAOA8E,UAAAA,OAAO,GAAGtF,WAAW,CAACgG,aAAZ,CAA0B,KAAKxF,KAAL,CAAWmF,IAArC,EAA2CC,kBAA3C,CAAV;AACH;;AAED,eAAON,OAAP;AACH;;AAED,aAAO,IAAP;AACH;AA1XL;AAAA;AAAA,WA4XI,uBAAc;AACV,UAAMW,cAAc,GAAG9F,UAAU,CAAC,8BAAD,EAAiC,KAAKK,KAAL,CAAWyF,cAA5C,CAAjC;;AACA,iBAA4B,KAAKxF,KAAL,CAAWE,KAAX,IAAoB;AAAE6B,QAAAA,QAAQ,EAAE,EAAZ;AAAgB+B,QAAAA,KAAK,EAAE;AAAvB,OAAhD;AAAA,UAAQ/B,QAAR,QAAQA,QAAR;AAAA,UAAkB+B,KAAlB,QAAkBA,KAAlB;;AACA,UAAM2B,MAAM,GAAGlG,WAAW,CAACgG,aAAZ,CAA0B,KAAKxF,KAAL,CAAW0F,MAArC,EAA6C,KAAK1F,KAAlD,CAAf;AACA,UAAM2F,MAAM,GAAGnG,WAAW,CAACgG,aAAZ,CAA0B,KAAKxF,KAAL,CAAW2F,MAArC,EAA6C,KAAK3F,KAAlD,CAAf;AACA,UAAM8E,OAAO,GAAG,KAAK9E,KAAL,CAAW8E,OAAX,GAAqBtF,WAAW,CAACgG,aAAZ,CAA0B,KAAKxF,KAAL,CAAW8E,OAArC,EAA8C,KAAK9E,KAAnD,CAArB,gBACZ,uDACI;AAAK,QAAA,SAAS,EAAC,kBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI;AAAK,QAAA,SAAS,gCAAyBgC,QAAzB,CAAd;AAAmD,QAAA,KAAK,EAAE;AAAE+B,UAAAA,KAAK,EAAEA;AAAT,SAA1D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,CADJ,eAII;AAAK,QAAA,SAAS,EAAC,iBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACK,KAAK9D,KAAL,CAAWG,QADhB,CAJJ,CADJ;AAWA,UAAMwF,KAAK,gBACP,oBAAC,aAAD;AAAe,QAAA,OAAO,EAAE,KAAK1E,UAA7B;AAAyC,QAAA,UAAU,EAAC,qBAApD;AAA0E,QAAA,EAAE,EAAE,KAAKjB,KAAL,CAAWC,cAAzF;AAAyG,QAAA,OAAO,EAAE;AAAE2F,UAAAA,KAAK,EAAE,GAAT;AAAcC,UAAAA,IAAI,EAAE;AAApB,SAAlH;AACI,QAAA,aAAa,MADjB;AACkB,QAAA,OAAO,EAAE,KAAKjF,cADhC;AACgD,QAAA,SAAS,EAAE,KAAKC,gBADhE;AACkF,QAAA,MAAM,EAAE,KAAKC,aAD/F;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAEI;AAAK,QAAA,GAAG,EAAE,KAAKG,UAAf;AAA2B,QAAA,SAAS,EAAEuE,cAAtC;AAAsD,QAAA,KAAK,EAAE,KAAKzF,KAAL,CAAW+F,UAAxE;AAAoF,QAAA,OAAO,EAAE,KAAK/E,YAAlG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACK0E,MADL,EAEKZ,OAFL,EAGKa,MAHL,CAFJ,CADJ;;AAWA,UAAI,KAAK3F,KAAL,CAAW0C,QAAf,EAAyB;AACrB,eAAOvD,QAAQ,CAAC6G,YAAT,CAAsBJ,KAAtB,EAA6B,KAAK5F,KAAL,CAAW0C,QAAxC,CAAP;AACH;;AAED,aAAOkD,KAAP;AACH;AA5ZL;AAAA;AAAA,WA8ZI,kBAAS;AAAA;;AACL,UAAMK,kBAAkB,GAAGtG,UAAU,CAAC,uCAAD,EAA0C;AAC3E,iCAAyB,KAAKuG,QAAL,EADkD;AAE3E,gCAAwB,KAAKjG,KAAL,CAAWK,OAFwC;AAG3E,8BAAsB,KAAKN,KAAL,CAAWiF;AAH0C,OAA1C,EAIlC,KAAKjF,KAAL,CAAWsF,SAJuB,CAArC;AAKA,UAAMa,cAAc,GAAGxG,UAAU,CAAC,kBAAD,EAAqB,KAAKK,KAAL,CAAWmG,cAAhC,CAAjC;AAEA,UAAMC,IAAI,GAAG,KAAKC,YAAL,EAAb;AACA,UAAMC,UAAU,GAAG9G,WAAW,CAAC+G,YAAZ,CAAyB,KAAKvG,KAA9B,EAAqCD,QAAQ,CAACyG,YAA9C,CAAnB;AACA,UAAMrB,IAAI,GAAG,KAAKsB,UAAL,EAAb;AACA,UAAMb,KAAK,GAAG,KAAKc,WAAL,EAAd;AAEA,0BACI;AAAK,QAAA,GAAG,EAAE,aAAAC,EAAE;AAAA,iBAAI,MAAI,CAACpE,SAAL,GAAiBoE,EAArB;AAAA,SAAZ;AAAqC,QAAA,SAAS,EAAEV,kBAAhD;AAAoE,QAAA,KAAK,EAAE,KAAKjG,KAAL,CAAW4C,KAAtF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI,oBAAC,SAAD;AAAW,QAAA,EAAE,EAAE,KAAK3B,EAApB;AAAwB,QAAA,GAAG,EAAE,aAAC0F,EAAD;AAAA,iBAAQ,MAAI,CAAC5D,OAAL,GAAe4D,EAAvB;AAAA;AAA7B,SAA4DL,UAA5D;AAAwE,QAAA,IAAI,EAAEF,IAA9E;AAAoF,QAAA,SAAS,EAAED,cAA/F;AAA+G,QAAA,KAAK,EAAE,KAAKnG,KAAL,CAAW4G,UAAjI;AACI,QAAA,OAAO,EAAE,KAAKpG,OADlB;AAC2B,QAAA,MAAM,EAAE,KAAKE,MADxC;AACgD,QAAA,OAAO,EAAE,KAAKC,OAD9D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SADJ,EAGKwE,IAHL,EAIKS,KAJL,CADJ;AAQH;AAnbL;;AAAA;AAAA,EAA8B1G,SAA9B;AAAaa,Q,CAEFyG,Y,GAAe;AAClBvF,EAAAA,EAAE,EAAE,IADc;AAElBW,EAAAA,KAAK,EAAE,IAFW;AAGlBvB,EAAAA,WAAW,EAAE,IAHK;AAIlBoB,EAAAA,SAAS,EAAE,IAJO;AAKlBC,EAAAA,WAAW,EAAE,IALK;AAMlBC,EAAAA,WAAW,EAAE,IANK;AAOlBL,EAAAA,WAAW,EAAE,wFAPK;AAQlBE,EAAAA,WAAW,EAAE,6CARK;AASlBW,EAAAA,QAAQ,EAAE,IATQ;AAUlB8C,EAAAA,UAAU,EAAE,KAVM;AAWlBvC,EAAAA,QAAQ,EAAE,IAXQ;AAYlBgD,EAAAA,MAAM,EAAE,IAZU;AAalBZ,EAAAA,OAAO,EAAE,IAbS;AAclBa,EAAAA,MAAM,EAAE,IAdU;AAelBR,EAAAA,IAAI,EAAE,IAfY;AAgBlBV,EAAAA,OAAO,EAAE,IAhBS;AAiBlBG,EAAAA,cAAc,EAAE,IAjBE;AAkBlBhC,EAAAA,KAAK,EAAE,IAlBW;AAmBlB0C,EAAAA,SAAS,EAAE,IAnBO;AAoBlBsB,EAAAA,UAAU,EAAE,IApBM;AAqBlBT,EAAAA,cAAc,EAAE,IArBE;AAsBlBJ,EAAAA,UAAU,EAAE,IAtBM;AAuBlBN,EAAAA,cAAc,EAAE;AAvBE,C;AAFb1F,Q,CA4BF8G,S,GAAY;AACf5F,EAAAA,EAAE,EAAE7B,SAAS,CAAC0H,MADC;AAEflF,EAAAA,KAAK,EAAExC,SAAS,CAAC0H,MAFF;AAGfzG,EAAAA,WAAW,EAAEjB,SAAS,CAAC0H,MAHR;AAIfrF,EAAAA,SAAS,EAAErC,SAAS,CAAC0H,MAJN;AAKfpF,EAAAA,WAAW,EAAEtC,SAAS,CAAC0H,MALR;AAMfnF,EAAAA,WAAW,EAACvC,SAAS,CAAC0H,MANP;AAOfxF,EAAAA,WAAW,EAAElC,SAAS,CAAC0H,MAPR;AAQftF,EAAAA,WAAW,EAAEpC,SAAS,CAAC0H,MARR;AASf3E,EAAAA,QAAQ,EAAE/C,SAAS,CAAC2H,IATL;AAUf9B,EAAAA,UAAU,EAAE7F,SAAS,CAAC2H,IAVP;AAWfrE,EAAAA,QAAQ,EAAEtD,SAAS,CAAC4H,GAXL;AAYftB,EAAAA,MAAM,EAAEtG,SAAS,CAAC4H,GAZH;AAaflC,EAAAA,OAAO,EAAE1F,SAAS,CAAC4H,GAbJ;AAcfrB,EAAAA,MAAM,EAAEvG,SAAS,CAAC4H,GAdH;AAef7B,EAAAA,IAAI,EAAE/F,SAAS,CAAC4H,GAfD;AAgBfvC,EAAAA,OAAO,EAAErF,SAAS,CAAC0H,MAhBJ;AAiBflC,EAAAA,cAAc,EAAExF,SAAS,CAAC6H,MAjBX;AAkBfrE,EAAAA,KAAK,EAAExD,SAAS,CAAC6H,MAlBF;AAmBf3B,EAAAA,SAAS,EAAElG,SAAS,CAAC0H,MAnBN;AAoBfF,EAAAA,UAAU,EAAExH,SAAS,CAAC6H,MApBP;AAqBfd,EAAAA,cAAc,EAAE/G,SAAS,CAAC0H,MArBX;AAsBff,EAAAA,UAAU,EAAE3G,SAAS,CAAC6H,MAtBP;AAuBfxB,EAAAA,cAAc,EAAErG,SAAS,CAAC0H;AAvBX,C","sourcesContent":["import React, { Component } from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport PropTypes from 'prop-types';\r\nimport DomHandler from '../utils/DomHandler';\r\nimport { tip } from '../tooltip/Tooltip';\r\nimport { InputText } from '../inputtext/InputText';\r\nimport ObjectUtils from '../utils/ObjectUtils';\r\nimport UniqueComponentId from '../utils/UniqueComponentId';\r\nimport { CSSTransition } from 'react-transition-group';\r\nimport { classNames } from '../utils/ClassNames';\r\nimport ConnectedOverlayScrollHandler from '../utils/ConnectedOverlayScrollHandler';\r\nimport { localeOption } from '../api/Locale';\r\nimport OverlayEventBus from '../overlayeventbus/OverlayEventBus';\r\n\r\nexport class Password extends Component {\r\n\r\n    static defaultProps = {\r\n        id: null,\r\n        value: null,\r\n        promptLabel: null,\r\n        weakLabel: null,\r\n        mediumLabel: null,\r\n        strongLabel: null,\r\n        mediumRegex: '^(((?=.*[a-z])(?=.*[A-Z]))|((?=.*[a-z])(?=.*[0-9]))|((?=.*[A-Z])(?=.*[0-9])))(?=.{6,})',\r\n        strongRegex: '^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.{8,})',\r\n        feedback: true,\r\n        toggleMask: false,\r\n        appendTo: null,\r\n        header: null,\r\n        content: null,\r\n        footer: null,\r\n        icon: null,\r\n        tooltip: null,\r\n        tooltipOptions: null,\r\n        style: null,\r\n        className: null,\r\n        inputStyle: null,\r\n        inputClassName: null,\r\n        panelStyle: null,\r\n        panelClassName: null\r\n    };\r\n\r\n    static propTypes = {\r\n        id: PropTypes.string,\r\n        value: PropTypes.string,\r\n        promptLabel: PropTypes.string,\r\n        weakLabel: PropTypes.string,\r\n        mediumLabel: PropTypes.string,\r\n        strongLabel:PropTypes.string,\r\n        mediumRegex: PropTypes.string,\r\n        strongRegex: PropTypes.string,\r\n        feedback: PropTypes.bool,\r\n        toggleMask: PropTypes.bool,\r\n        appendTo: PropTypes.any,\r\n        header: PropTypes.any,\r\n        content: PropTypes.any,\r\n        footer: PropTypes.any,\r\n        icon: PropTypes.any,\r\n        tooltip: PropTypes.string,\r\n        tooltipOptions: PropTypes.object,\r\n        style: PropTypes.object,\r\n        className: PropTypes.string,\r\n        inputStyle: PropTypes.object,\r\n        inputClassName: PropTypes.string,\r\n        panelStyle: PropTypes.object,\r\n        panelClassName: PropTypes.string\r\n    };\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            overlayVisible: false,\r\n            meter: null,\r\n            infoText: this.promptLabel(),\r\n            focused: false,\r\n            unmasked: false\r\n        };\r\n\r\n        this.onFocus = this.onFocus.bind(this);\r\n        this.onBlur = this.onBlur.bind(this);\r\n        this.onKeyup = this.onKeyup.bind(this);\r\n        this.onMaskToggle = this.onMaskToggle.bind(this);\r\n        this.onOverlayEnter = this.onOverlayEnter.bind(this);\r\n        this.onOverlayEntered = this.onOverlayEntered.bind(this);\r\n        this.onOverlayExit = this.onOverlayExit.bind(this);\r\n        this.onPanelClick = this.onPanelClick.bind(this);\r\n\r\n        this.id = this.props.id || UniqueComponentId();\r\n        this.overlayRef = React.createRef();\r\n        this.mediumCheckRegExp = new RegExp(this.props.mediumRegex);\r\n        this.strongCheckRegExp = new RegExp(this.props.strongRegex);\r\n    }\r\n\r\n    promptLabel() {\r\n        return this.props.promptLabel || localeOption('passwordPrompt');\r\n    }\r\n\r\n    weakLabel() {\r\n        return this.props.weakLabel || localeOption('weak');\r\n    }\r\n\r\n    mediumLabel() {\r\n        return this.props.mediumLabel || localeOption('medium');\r\n    }\r\n\r\n    strongLabel() {\r\n        return this.props.strongLabel || localeOption('strong');\r\n    }\r\n\r\n    isFilled() {\r\n        return this.props.value != null && this.props.value.toString().length > 0;\r\n    }\r\n\r\n    getInputType() {\r\n        return this.state.unmasked ? 'text' : 'password';\r\n    }\r\n\r\n    updateLabels() {\r\n        if (this.state.meter) {\r\n            let label = null;\r\n            switch (this.state.meter.strength) {\r\n                case 'weak':\r\n                    label = this.weakLabel();\r\n                    break;\r\n\r\n                case 'medium':\r\n                    label = this.mediumLabel();\r\n                    break;\r\n\r\n                case 'strong':\r\n                    label = this.strongLabel();\r\n                    break;\r\n\r\n                default:\r\n                    break;\r\n            }\r\n\r\n            if (label && this.state.infoText !== label) {\r\n                this.setState({ infoText: label });\r\n            }\r\n        }\r\n        else {\r\n            const promptLabel = this.promptLabel();\r\n            if (this.state.infoText !== promptLabel) {\r\n                this.setState({ infoText: promptLabel });\r\n            }\r\n        }\r\n    }\r\n\r\n    onPanelClick(event) {\r\n        if (this.props.feedback) {\r\n            OverlayEventBus.emit('overlay-click', {\r\n                originalEvent: event,\r\n                target: this.container\r\n            });\r\n        }\r\n    }\r\n\r\n    onMaskToggle() {\r\n        this.setState((prevState) => {\r\n            return {\r\n                unmasked: !prevState.unmasked\r\n            }\r\n        });\r\n    }\r\n\r\n    showOverlay() {\r\n        this.updateLabels();\r\n        this.setState({ overlayVisible: true });\r\n    }\r\n\r\n    hideOverlay() {\r\n        this.setState({ overlayVisible: false });\r\n    }\r\n\r\n    alignOverlay() {\r\n        if (this.props.appendTo) {\r\n            this.overlayRef.current.style.minWidth = DomHandler.getOuterWidth(this.inputEl) + 'px';\r\n            DomHandler.absolutePosition(this.overlayRef.current, this.inputEl);\r\n        }\r\n        else {\r\n            DomHandler.relativePosition(this.overlayRef.current, this.inputEl);\r\n        }\r\n    }\r\n\r\n    onOverlayEnter() {\r\n        this.overlayRef.current.style.zIndex = String(DomHandler.generateZIndex());\r\n        this.alignOverlay();\r\n    }\r\n\r\n    onOverlayEntered() {\r\n        this.bindScrollListener();\r\n        this.bindResizeListener();\r\n    }\r\n\r\n    onOverlayExit() {\r\n        this.unbindScrollListener();\r\n        this.unbindResizeListener();\r\n    }\r\n\r\n    onFocus(event) {\r\n        event.persist();\r\n        this.setState({ focused: true }, () => {\r\n            if (this.props.feedback) {\r\n                this.showOverlay();\r\n            }\r\n\r\n            if (this.props.onFocus) {\r\n                this.props.onFocus(event);\r\n            }\r\n        });\r\n    }\r\n\r\n    onBlur(event) {\r\n        event.persist();\r\n        this.setState({ focused: false }, () => {\r\n            if (this.props.feedback) {\r\n                this.hideOverlay();\r\n            }\r\n\r\n            if (this.props.onBlur) {\r\n                this.props.onBlur(event);\r\n            }\r\n        });\r\n    }\r\n\r\n    onKeyup(e) {\r\n        if(this.props.feedback) {\r\n            let value = e.target.value;\r\n            let label = null;\r\n            let meter = null;\r\n\r\n            switch (this.testStrength(value)) {\r\n                case 1:\r\n                    label = this.weakLabel();\r\n                    meter = {\r\n                        strength: 'weak',\r\n                        width: '33.33%'\r\n                    };\r\n                    break;\r\n\r\n                case 2:\r\n                    label = this.mediumLabel();\r\n                    meter = {\r\n                        strength: 'medium',\r\n                        width: '66.66%'\r\n                    };\r\n                    break;\r\n\r\n                case 3:\r\n                    label = this.strongLabel();\r\n                    meter = {\r\n                        strength: 'strong',\r\n                        width: '100%'\r\n                    };\r\n                    break;\r\n\r\n                default:\r\n                    label = this.promptLabel();\r\n                    meter = null;\r\n                    break;\r\n            }\r\n\r\n            this.setState({\r\n                meter,\r\n                infoText: label\r\n            }, () => {\r\n                if (!this.state.overlayVisible) {\r\n                    this.showOverlay();\r\n                }\r\n            });\r\n        }\r\n\r\n        if (this.props.onKeyUp) {\r\n            this.props.onKeyUp(e);\r\n        }\r\n    }\r\n\r\n    testStrength(str) {\r\n        let level = 0;\r\n\r\n        if (this.strongCheckRegExp.test(str))\r\n            level = 3;\r\n        else if (this.mediumCheckRegExp.test(str))\r\n            level = 2;\r\n        else if (str.length)\r\n            level = 1;\r\n\r\n        return level;\r\n    }\r\n\r\n    bindScrollListener() {\r\n        if (!this.scrollHandler) {\r\n            this.scrollHandler = new ConnectedOverlayScrollHandler(this.inputEl, () => {\r\n                if (this.state.overlayVisible) {\r\n                    this.hideOverlay();\r\n                }\r\n            });\r\n        }\r\n\r\n        this.scrollHandler.bindScrollListener();\r\n    }\r\n\r\n    unbindScrollListener() {\r\n        if (this.scrollHandler) {\r\n            this.scrollHandler.unbindScrollListener();\r\n        }\r\n    }\r\n\r\n    bindResizeListener() {\r\n        if (!this.resizeListener) {\r\n            this.resizeListener = () => {\r\n                if (this.state.overlayVisible) {\r\n                    this.hideOverlay();\r\n                }\r\n            };\r\n            window.addEventListener('resize', this.resizeListener);\r\n        }\r\n    }\r\n\r\n    unbindResizeListener() {\r\n        if (this.resizeListener) {\r\n            window.removeEventListener('resize', this.resizeListener);\r\n            this.resizeListener = null;\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        if (this.props.tooltip) {\r\n            this.renderTooltip();\r\n        }\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if (prevProps.tooltip !== this.props.tooltip || prevProps.tooltipOptions !== this.props.tooltipOptions) {\r\n            if (this.tooltip)\r\n                this.tooltip.update({ content: this.props.tooltip, ...(this.props.tooltipOptions || {}) });\r\n            else\r\n                this.renderTooltip();\r\n        }\r\n\r\n        if (prevProps.mediumRegex !== this.props.mediumRegex) {\r\n            this.mediumCheckRegExp = new RegExp(this.props.mediumRegex);\r\n        }\r\n\r\n        if (prevProps.strongRegex !== this.props.strongRegex) {\r\n            this.strongCheckRegExp = new RegExp(this.props.strongRegex);\r\n        }\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this.unbindResizeListener();\r\n        if (this.scrollHandler) {\r\n            this.scrollHandler.destroy();\r\n            this.scrollHandler = null;\r\n        }\r\n\r\n        if (this.tooltip) {\r\n            this.tooltip.destroy();\r\n            this.tooltip = null;\r\n        }\r\n    }\r\n\r\n    renderTooltip() {\r\n        this.tooltip = tip({\r\n            target: this.inputEl,\r\n            content: this.props.tooltip,\r\n            options: this.props.tooltipOptions\r\n        });\r\n    }\r\n\r\n    renderIcon() {\r\n        if (this.props.toggleMask) {\r\n            const iconClassName = this.state.unmasked ? 'pi pi-eye-slash' : 'pi pi-eye';\r\n            let content = <i className={iconClassName} onClick={this.onMaskToggle} />\r\n\r\n            if (this.props.icon) {\r\n                const defaultIconOptions = {\r\n                    onClick: this.onMaskToggle,\r\n                    className: iconClassName,\r\n                    element: content,\r\n                    props: this.props\r\n                };\r\n\r\n                content = ObjectUtils.getJSXElement(this.props.icon, defaultIconOptions);\r\n            }\r\n\r\n            return content;\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    renderPanel() {\r\n        const panelClassName = classNames('p-password-panel p-component', this.props.panelClassName);\r\n        const { strength, width } = this.state.meter || { strength: '', width: '0%' };\r\n        const header = ObjectUtils.getJSXElement(this.props.header, this.props);\r\n        const footer = ObjectUtils.getJSXElement(this.props.footer, this.props);\r\n        const content = this.props.content ? ObjectUtils.getJSXElement(this.props.content, this.props) : (\r\n            <>\r\n                <div className=\"p-password-meter\">\r\n                    <div className={`p-password-strength ${strength}`} style={{ width: width }}></div>\r\n                </div>\r\n                <div className=\"p-password-info\">\r\n                    {this.state.infoText}\r\n                </div>\r\n            </>\r\n        );\r\n\r\n        const panel = (\r\n            <CSSTransition nodeRef={this.overlayRef} classNames=\"p-connected-overlay\" in={this.state.overlayVisible} timeout={{ enter: 120, exit: 100 }}\r\n                unmountOnExit onEnter={this.onOverlayEnter} onEntered={this.onOverlayEntered} onExit={this.onOverlayExit}>\r\n                <div ref={this.overlayRef} className={panelClassName} style={this.props.panelStyle} onClick={this.onPanelClick}>\r\n                    {header}\r\n                    {content}\r\n                    {footer}\r\n                </div>\r\n            </CSSTransition>\r\n        );\r\n\r\n        if (this.props.appendTo) {\r\n            return ReactDOM.createPortal(panel, this.props.appendTo);\r\n        }\r\n\r\n        return panel;\r\n    }\r\n\r\n    render() {\r\n        const containerClassName = classNames('p-password p-component p-inputwrapper', {\r\n            'p-inputwrapper-filled': this.isFilled(),\r\n            'p-inputwrapper-focus': this.state.focused,\r\n            'p-input-icon-right': this.props.toggleMask\r\n        }, this.props.className);\r\n        const inputClassName = classNames('p-password-input', this.props.inputClassName)\r\n\r\n        const type = this.getInputType();\r\n        const inputProps = ObjectUtils.findDiffKeys(this.props, Password.defaultProps);\r\n        const icon = this.renderIcon();\r\n        const panel = this.renderPanel();\r\n\r\n        return (\r\n            <div ref={el => this.container = el} className={containerClassName} style={this.props.style}>\r\n                <InputText id={this.id} ref={(el) => this.inputEl = el} {...inputProps} type={type} className={inputClassName} style={this.props.inputStyle}\r\n                    onFocus={this.onFocus} onBlur={this.onBlur} onKeyUp={this.onKeyup} />\r\n                {icon}\r\n                {panel}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}