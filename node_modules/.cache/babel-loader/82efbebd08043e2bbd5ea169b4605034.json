{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\zura.ph\\\\WebstormProjects\\\\zz-regul\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\zura.ph\\\\WebstormProjects\\\\zz-regul\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"C:\\\\Users\\\\zura.ph\\\\WebstormProjects\\\\zz-regul\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"C:\\\\Users\\\\zura.ph\\\\WebstormProjects\\\\zz-regul\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _createSuper from \"C:\\\\Users\\\\zura.ph\\\\WebstormProjects\\\\zz-regul\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"C:\\\\Users\\\\zura.ph\\\\WebstormProjects\\\\zz-regul\\\\src\\\\showcase\\\\treetable\\\\TreeTableColTogglerDemo.js\";\nimport React, { Component } from 'react';\nimport { TreeTable } from '../../components/treetable/TreeTable';\nimport { Column } from '../../components/column/Column';\nimport { NodeService } from '../service/NodeService';\nimport { MultiSelect } from '../../components/multiselect/MultiSelect';\nimport { TabView } from '../../components/tabview/TabView';\nimport { useLiveEditorTabs } from '../liveeditor/LiveEditor';\nimport { AppInlineHeader } from '../../AppInlineHeader';\nexport var TreeTableColTogglerDemo = /*#__PURE__*/function (_Component) {\n  _inherits(TreeTableColTogglerDemo, _Component);\n\n  var _super = _createSuper(TreeTableColTogglerDemo);\n\n  function TreeTableColTogglerDemo(props) {\n    var _this;\n\n    _classCallCheck(this, TreeTableColTogglerDemo);\n\n    _this = _super.call(this, props);\n    var columns = [{\n      field: 'size',\n      header: 'Size'\n    }, {\n      field: 'type',\n      header: 'Type'\n    }];\n    _this.colOptions = [];\n\n    for (var _i = 0, _columns = columns; _i < _columns.length; _i++) {\n      var col = _columns[_i];\n\n      _this.colOptions.push({\n        label: col.header,\n        value: col\n      });\n    }\n\n    _this.state = {\n      nodes: [],\n      cols: columns\n    };\n    _this.nodeservice = new NodeService();\n    _this.onColumnToggle = _this.onColumnToggle.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(TreeTableColTogglerDemo, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      this.nodeservice.getTreeTableNodes().then(function (data) {\n        return _this2.setState({\n          nodes: data\n        });\n      });\n    }\n  }, {\n    key: \"onColumnToggle\",\n    value: function onColumnToggle(event) {\n      this.setState({\n        cols: event.value\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      var header = /*#__PURE__*/React.createElement(\"div\", {\n        style: {\n          textAlign: 'left'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(MultiSelect, {\n        value: this.state.cols,\n        options: this.colOptions,\n        onChange: this.onColumnToggle,\n        style: {\n          width: '250px'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 17\n        }\n      }));\n      var columns = this.state.cols.map(function (col, i) {\n        return /*#__PURE__*/React.createElement(Column, {\n          key: col.field,\n          field: col.field,\n          header: col.header,\n          __self: _this3,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 50,\n            columnNumber: 20\n          }\n        });\n      });\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"content-section introduction\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(AppInlineHeader, {\n        changelogText: \"treeTable\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(\"h1\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 25\n        }\n      }, \"TreeTable \", /*#__PURE__*/React.createElement(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 39\n        }\n      }, \"Column Toggler\")), /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 25\n        }\n      }, \"MultiSelect component can be used to implement column toggler functionality.\"))), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"content-section implementation\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"card\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(TreeTable, {\n        value: this.state.nodes,\n        header: header,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(Column, {\n        key: \"name\",\n        field: \"name\",\n        header: \"Name\",\n        expander: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 29\n        }\n      }), columns))), /*#__PURE__*/React.createElement(TreeTableColTogglerDemoDoc, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 17\n        }\n      }));\n    }\n  }]);\n\n  return TreeTableColTogglerDemo;\n}(Component);\n\nvar TreeTableColTogglerDemoDoc = /*#__PURE__*/function (_Component2) {\n  _inherits(TreeTableColTogglerDemoDoc, _Component2);\n\n  var _super2 = _createSuper(TreeTableColTogglerDemoDoc);\n\n  function TreeTableColTogglerDemoDoc(props) {\n    var _this4;\n\n    _classCallCheck(this, TreeTableColTogglerDemoDoc);\n\n    _this4 = _super2.call(this, props);\n    _this4.sources = {\n      'class': {\n        tabName: 'Class Source',\n        content: \"\\nimport React, { Component } from 'react';\\nimport { TreeTable } from 'primereact/treetable';\\nimport { Column } from 'primereact/column';\\nimport { NodeService } from '../service/NodeService';\\nimport { MultiSelect } from 'primereact/multiselect';\\n\\nexport class TreeTableColTogglerDemo extends Component {\\n\\n    constructor(props) {\\n        super(props);\\n        let columns = [\\n            { field: 'size', header: 'Size' },\\n            { field: 'type', header: 'Type' }\\n        ];\\n\\n        this.colOptions = [];\\n        for (let col of columns) {\\n            this.colOptions.push({ label: col.header, value: col });\\n        }\\n\\n        this.state = {\\n            nodes: [],\\n            cols: columns\\n        };\\n\\n        this.nodeservice = new NodeService();\\n        this.onColumnToggle = this.onColumnToggle.bind(this);\\n    }\\n\\n    componentDidMount() {\\n        this.nodeservice.getTreeTableNodes().then(data => this.setState({ nodes: data }));\\n    }\\n\\n    onColumnToggle(event) {\\n        this.setState({ cols: event.value });\\n    }\\n\\n    render() {\\n        const header = (\\n            <div style={{ textAlign: 'left' }}>\\n                <MultiSelect value={this.state.cols} options={this.colOptions} onChange={this.onColumnToggle}\\n                    style={{ width: '250px' }} />\\n            </div>\\n        );\\n\\n        const columns = this.state.cols.map((col, i) => {\\n            return <Column key={col.field} field={col.field} header={col.header} />;\\n        });\\n\\n        return (\\n            <div>\\n                <div className=\\\"card\\\">\\n                    <TreeTable value={this.state.nodes} header={header}>\\n                        <Column key=\\\"name\\\" field=\\\"name\\\" header=\\\"Name\\\" expander />\\n                        {columns}\\n                    </TreeTable>\\n                </div>\\n            </div>\\n        )\\n    }\\n}\\n                \"\n      },\n      'hooks': {\n        tabName: 'Hooks Source',\n        content: \"\\nimport React, { useState, useEffect } from 'react';\\nimport { TreeTable } from 'primereact/treetable';\\nimport { Column } from 'primereact/column';\\nimport { NodeService } from '../service/NodeService';\\nimport { MultiSelect } from 'primereact/multiselect';\\n\\nconst TreeTableColTogglerDemo = () => {\\n    let columns = [\\n        { field: 'size', header: 'Size' },\\n        { field: 'type', header: 'Type' }\\n    ];\\n\\n    let colOptions = [];\\n    for (let col of columns) {\\n        colOptions.push({ label: col.header, value: col });\\n    }\\n\\n    const [nodes, setNodes] = useState([]);\\n    const [cols, setCols] = useState(columns);\\n\\n    const nodeservice = new NodeService();\\n\\n    useEffect(() => {\\n        nodeservice.getTreeTableNodes().then(data => setNodes(data));\\n    }, []); // eslint-disable-line react-hooks/exhaustive-deps\\n\\n    const onColumnToggle = (event) => {\\n        setCols(event.value);\\n    }\\n\\n    const header = (\\n        <div style={{ textAlign: 'left' }}>\\n            <MultiSelect value={cols} options={colOptions} onChange={onColumnToggle}\\n                style={{ width: '250px' }} />\\n        </div>\\n    );\\n\\n    const _columns = cols.map((col, i) => {\\n        return <Column key={col.field} field={col.field} header={col.header} />;\\n    });\\n\\n    return (\\n        <div>\\n            <div className=\\\"card\\\">\\n                <TreeTable value={nodes} header={header}>\\n                    <Column key=\\\"name\\\" field=\\\"name\\\" header=\\\"Name\\\" expander />\\n                    {_columns}\\n                </TreeTable>\\n            </div>\\n        </div>\\n    );\\n}\\n                \"\n      },\n      'ts': {\n        tabName: 'TS Source',\n        content: \"\\nimport React, { useState, useEffect } from 'react';\\nimport { TreeTable } from 'primereact/treetable';\\nimport { Column } from 'primereact/column';\\nimport { NodeService } from '../service/NodeService';\\nimport { MultiSelect } from 'primereact/multiselect';\\n\\nconst TreeTableColTogglerDemo = () => {\\n    let columns = [\\n        { field: 'size', header: 'Size' },\\n        { field: 'type', header: 'Type' }\\n    ];\\n\\n    let colOptions = [];\\n    for (let col of columns) {\\n        colOptions.push({ label: col.header, value: col });\\n    }\\n\\n    const [nodes, setNodes] = useState([]);\\n    const [cols, setCols] = useState(columns);\\n\\n    const nodeservice = new NodeService();\\n\\n    useEffect(() => {\\n        nodeservice.getTreeTableNodes().then(data => setNodes(data));\\n    }, []); // eslint-disable-line react-hooks/exhaustive-deps\\n\\n    const onColumnToggle = (event) => {\\n        setCols(event.value);\\n    }\\n\\n    const header = (\\n        <div style={{ textAlign: 'left' }}>\\n            <MultiSelect value={cols} options={colOptions} onChange={onColumnToggle}\\n                style={{ width: '250px' }} />\\n        </div>\\n    );\\n\\n    const _columns = cols.map((col, i) => {\\n        return <Column key={col.field} field={col.field} header={col.header} />;\\n    });\\n\\n    return (\\n        <div>\\n            <div className=\\\"card\\\">\\n                <TreeTable value={nodes} header={header}>\\n                    <Column key=\\\"name\\\" field=\\\"name\\\" header=\\\"Name\\\" expander />\\n                    {_columns}\\n                </TreeTable>\\n            </div>\\n        </div>\\n    );\\n}\\n                \"\n      }\n    };\n    return _this4;\n  }\n\n  _createClass(TreeTableColTogglerDemoDoc, [{\n    key: \"shouldComponentUpdate\",\n    value: function shouldComponentUpdate() {\n      return false;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"content-section documentation\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 272,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(TabView, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 273,\n          columnNumber: 17\n        }\n      }, useLiveEditorTabs({\n        name: 'TreeTableColTogglerDemo',\n        sources: this.sources,\n        service: 'NodeService',\n        data: 'treetablenodes'\n      })));\n    }\n  }]);\n\n  return TreeTableColTogglerDemoDoc;\n}(Component);","map":{"version":3,"sources":["C:/Users/zura.ph/WebstormProjects/zz-regul/src/showcase/treetable/TreeTableColTogglerDemo.js"],"names":["React","Component","TreeTable","Column","NodeService","MultiSelect","TabView","useLiveEditorTabs","AppInlineHeader","TreeTableColTogglerDemo","props","columns","field","header","colOptions","col","push","label","value","state","nodes","cols","nodeservice","onColumnToggle","bind","getTreeTableNodes","then","data","setState","event","textAlign","width","map","i","TreeTableColTogglerDemoDoc","sources","tabName","content","name","service"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { TreeTable } from '../../components/treetable/TreeTable';\r\nimport { Column } from '../../components/column/Column';\r\nimport { NodeService } from '../service/NodeService';\r\nimport { MultiSelect } from '../../components/multiselect/MultiSelect';\r\nimport { TabView } from '../../components/tabview/TabView';\r\nimport { useLiveEditorTabs }from '../liveeditor/LiveEditor';\r\nimport { AppInlineHeader } from '../../AppInlineHeader';\r\n\r\nexport class TreeTableColTogglerDemo extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        let columns = [\r\n            { field: 'size', header: 'Size' },\r\n            { field: 'type', header: 'Type' }\r\n        ];\r\n\r\n        this.colOptions = [];\r\n        for (let col of columns) {\r\n            this.colOptions.push({ label: col.header, value: col });\r\n        }\r\n\r\n        this.state = {\r\n            nodes: [],\r\n            cols: columns\r\n        };\r\n\r\n        this.nodeservice = new NodeService();\r\n        this.onColumnToggle = this.onColumnToggle.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.nodeservice.getTreeTableNodes().then(data => this.setState({ nodes: data }));\r\n    }\r\n\r\n    onColumnToggle(event) {\r\n        this.setState({ cols: event.value });\r\n    }\r\n\r\n    render() {\r\n        const header = (\r\n            <div style={{ textAlign: 'left' }}>\r\n                <MultiSelect value={this.state.cols} options={this.colOptions} onChange={this.onColumnToggle}\r\n                    style={{ width: '250px' }} />\r\n            </div>\r\n        );\r\n\r\n        const columns = this.state.cols.map((col, i) => {\r\n            return <Column key={col.field} field={col.field} header={col.header} />;\r\n        });\r\n\r\n        return (\r\n            <div>\r\n                <div className=\"content-section introduction\">\r\n                    <AppInlineHeader changelogText=\"treeTable\">\r\n                        <h1>TreeTable <span>Column Toggler</span></h1>\r\n                        <p>MultiSelect component can be used to implement column toggler functionality.</p>\r\n                    </AppInlineHeader>\r\n                </div>\r\n\r\n                <div className=\"content-section implementation\">\r\n                    <div className=\"card\">\r\n                        <TreeTable value={this.state.nodes} header={header}>\r\n                            <Column key=\"name\" field=\"name\" header=\"Name\" expander />\r\n                            {columns}\r\n                        </TreeTable>\r\n                    </div>\r\n                </div>\r\n\r\n                <TreeTableColTogglerDemoDoc />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nclass TreeTableColTogglerDemoDoc extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.sources = {\r\n            'class': {\r\n                tabName: 'Class Source',\r\n                content: `\r\nimport React, { Component } from 'react';\r\nimport { TreeTable } from 'primereact/treetable';\r\nimport { Column } from 'primereact/column';\r\nimport { NodeService } from '../service/NodeService';\r\nimport { MultiSelect } from 'primereact/multiselect';\r\n\r\nexport class TreeTableColTogglerDemo extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        let columns = [\r\n            { field: 'size', header: 'Size' },\r\n            { field: 'type', header: 'Type' }\r\n        ];\r\n\r\n        this.colOptions = [];\r\n        for (let col of columns) {\r\n            this.colOptions.push({ label: col.header, value: col });\r\n        }\r\n\r\n        this.state = {\r\n            nodes: [],\r\n            cols: columns\r\n        };\r\n\r\n        this.nodeservice = new NodeService();\r\n        this.onColumnToggle = this.onColumnToggle.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.nodeservice.getTreeTableNodes().then(data => this.setState({ nodes: data }));\r\n    }\r\n\r\n    onColumnToggle(event) {\r\n        this.setState({ cols: event.value });\r\n    }\r\n\r\n    render() {\r\n        const header = (\r\n            <div style={{ textAlign: 'left' }}>\r\n                <MultiSelect value={this.state.cols} options={this.colOptions} onChange={this.onColumnToggle}\r\n                    style={{ width: '250px' }} />\r\n            </div>\r\n        );\r\n\r\n        const columns = this.state.cols.map((col, i) => {\r\n            return <Column key={col.field} field={col.field} header={col.header} />;\r\n        });\r\n\r\n        return (\r\n            <div>\r\n                <div className=\"card\">\r\n                    <TreeTable value={this.state.nodes} header={header}>\r\n                        <Column key=\"name\" field=\"name\" header=\"Name\" expander />\r\n                        {columns}\r\n                    </TreeTable>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n                `\r\n            },\r\n            'hooks': {\r\n                tabName: 'Hooks Source',\r\n                content: `\r\nimport React, { useState, useEffect } from 'react';\r\nimport { TreeTable } from 'primereact/treetable';\r\nimport { Column } from 'primereact/column';\r\nimport { NodeService } from '../service/NodeService';\r\nimport { MultiSelect } from 'primereact/multiselect';\r\n\r\nconst TreeTableColTogglerDemo = () => {\r\n    let columns = [\r\n        { field: 'size', header: 'Size' },\r\n        { field: 'type', header: 'Type' }\r\n    ];\r\n\r\n    let colOptions = [];\r\n    for (let col of columns) {\r\n        colOptions.push({ label: col.header, value: col });\r\n    }\r\n\r\n    const [nodes, setNodes] = useState([]);\r\n    const [cols, setCols] = useState(columns);\r\n\r\n    const nodeservice = new NodeService();\r\n\r\n    useEffect(() => {\r\n        nodeservice.getTreeTableNodes().then(data => setNodes(data));\r\n    }, []); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n    const onColumnToggle = (event) => {\r\n        setCols(event.value);\r\n    }\r\n\r\n    const header = (\r\n        <div style={{ textAlign: 'left' }}>\r\n            <MultiSelect value={cols} options={colOptions} onChange={onColumnToggle}\r\n                style={{ width: '250px' }} />\r\n        </div>\r\n    );\r\n\r\n    const _columns = cols.map((col, i) => {\r\n        return <Column key={col.field} field={col.field} header={col.header} />;\r\n    });\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"card\">\r\n                <TreeTable value={nodes} header={header}>\r\n                    <Column key=\"name\" field=\"name\" header=\"Name\" expander />\r\n                    {_columns}\r\n                </TreeTable>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n                `\r\n            },\r\n            'ts': {\r\n                tabName: 'TS Source',\r\n                content: `\r\nimport React, { useState, useEffect } from 'react';\r\nimport { TreeTable } from 'primereact/treetable';\r\nimport { Column } from 'primereact/column';\r\nimport { NodeService } from '../service/NodeService';\r\nimport { MultiSelect } from 'primereact/multiselect';\r\n\r\nconst TreeTableColTogglerDemo = () => {\r\n    let columns = [\r\n        { field: 'size', header: 'Size' },\r\n        { field: 'type', header: 'Type' }\r\n    ];\r\n\r\n    let colOptions = [];\r\n    for (let col of columns) {\r\n        colOptions.push({ label: col.header, value: col });\r\n    }\r\n\r\n    const [nodes, setNodes] = useState([]);\r\n    const [cols, setCols] = useState(columns);\r\n\r\n    const nodeservice = new NodeService();\r\n\r\n    useEffect(() => {\r\n        nodeservice.getTreeTableNodes().then(data => setNodes(data));\r\n    }, []); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n    const onColumnToggle = (event) => {\r\n        setCols(event.value);\r\n    }\r\n\r\n    const header = (\r\n        <div style={{ textAlign: 'left' }}>\r\n            <MultiSelect value={cols} options={colOptions} onChange={onColumnToggle}\r\n                style={{ width: '250px' }} />\r\n        </div>\r\n    );\r\n\r\n    const _columns = cols.map((col, i) => {\r\n        return <Column key={col.field} field={col.field} header={col.header} />;\r\n    });\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"card\">\r\n                <TreeTable value={nodes} header={header}>\r\n                    <Column key=\"name\" field=\"name\" header=\"Name\" expander />\r\n                    {_columns}\r\n                </TreeTable>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n                `\r\n            }\r\n        }\r\n    }\r\n\r\n    shouldComponentUpdate() {\r\n        return false;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"content-section documentation\">\r\n                <TabView>\r\n                    {\r\n                        useLiveEditorTabs({ name: 'TreeTableColTogglerDemo', sources: this.sources, service: 'NodeService', data: 'treetablenodes' })\r\n                    }\r\n                </TabView>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}