{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\zura.ph\\\\WebstormProjects\\\\zloto\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\zura.ph\\\\WebstormProjects\\\\zloto\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"C:\\\\Users\\\\zura.ph\\\\WebstormProjects\\\\zloto\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"C:\\\\Users\\\\zura.ph\\\\WebstormProjects\\\\zloto\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _createSuper from \"C:\\\\Users\\\\zura.ph\\\\WebstormProjects\\\\zloto\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"C:\\\\Users\\\\zura.ph\\\\WebstormProjects\\\\zloto\\\\src\\\\showcase\\\\treetable\\\\TreeTableStyleDemo.js\";\nimport React, { Component } from 'react';\nimport { TreeTable } from '../../components/treetable/TreeTable';\nimport { Column } from '../../components/column/Column';\nimport { NodeService } from '../service/NodeService';\nimport { TabView } from '../../components/tabview/TabView';\nimport { useLiveEditorTabs } from '../liveeditor/LiveEditor';\nimport { AppInlineHeader } from '../../AppInlineHeader';\nexport var TreeTableStyleDemo = /*#__PURE__*/function (_Component) {\n  _inherits(TreeTableStyleDemo, _Component);\n\n  var _super = _createSuper(TreeTableStyleDemo);\n\n  function TreeTableStyleDemo(props) {\n    var _this;\n\n    _classCallCheck(this, TreeTableStyleDemo);\n\n    _this = _super.call(this, props);\n    _this.state = {\n      nodes: []\n    };\n    _this.nodeservice = new NodeService();\n    _this.sizeTemplate = _this.sizeTemplate.bind(_assertThisInitialized(_this));\n    _this.rowClassName = _this.rowClassName.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(TreeTableStyleDemo, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      this.nodeservice.getTreeTableNodes().then(function (data) {\n        return _this2.setState({\n          nodes: data\n        });\n      });\n    }\n  }, {\n    key: \"sizeTemplate\",\n    value: function sizeTemplate(node) {\n      var size = node.data.size;\n      var fontWeight = parseInt(size, 10) > 75 ? 'bold' : 'normal';\n      return /*#__PURE__*/React.createElement(\"span\", {\n        style: {\n          fontWeight: fontWeight\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 29,\n          columnNumber: 16\n        }\n      }, size);\n    }\n  }, {\n    key: \"rowClassName\",\n    value: function rowClassName(node) {\n      return {\n        'p-highlight': node.children && node.children.length === 3\n      };\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"content-section introduction\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(AppInlineHeader, {\n        changelogText: \"treeTable\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(\"h1\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 25\n        }\n      }, \"TreeTable \", /*#__PURE__*/React.createElement(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 39\n        }\n      }, \"Styling\")), /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 25\n        }\n      }, \"Particular rows and cells can be styled based on data.\"))), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"content-section implementation\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"card\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 25\n        }\n      }, \"This treetable highlights cells with a bolder font weight whose size value is greater than 75kb and highlights rows who has at 3 child rows.\"), /*#__PURE__*/React.createElement(TreeTable, {\n        value: this.state.nodes,\n        rowClassName: this.rowClassName,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(Column, {\n        field: \"name\",\n        header: \"Name\",\n        expander: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 29\n        }\n      }), /*#__PURE__*/React.createElement(Column, {\n        field: \"size\",\n        header: \"Size\",\n        body: this.sizeTemplate,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 29\n        }\n      }), /*#__PURE__*/React.createElement(Column, {\n        field: \"type\",\n        header: \"Type\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 29\n        }\n      })))), /*#__PURE__*/React.createElement(TreeTableStyleDemoDoc, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 17\n        }\n      }));\n    }\n  }]);\n\n  return TreeTableStyleDemo;\n}(Component);\n\nvar TreeTableStyleDemoDoc = /*#__PURE__*/function (_Component2) {\n  _inherits(TreeTableStyleDemoDoc, _Component2);\n\n  var _super2 = _createSuper(TreeTableStyleDemoDoc);\n\n  function TreeTableStyleDemoDoc(props) {\n    var _this3;\n\n    _classCallCheck(this, TreeTableStyleDemoDoc);\n\n    _this3 = _super2.call(this, props);\n    _this3.sources = {\n      'class': {\n        tabName: 'Class Source',\n        content: \"\\nimport React, { Component } from 'react';\\nimport { TreeTable } from 'primereact/treetable';\\nimport { Column } from 'primereact/column';\\nimport { NodeService } from '../service/NodeService';\\n\\nexport class TreeTableStyleDemo extends Component {\\n\\n    constructor(props) {\\n        super(props);\\n        this.state = {\\n            nodes: []\\n        };\\n        this.nodeservice = new NodeService();\\n        this.sizeTemplate = this.sizeTemplate.bind(this);\\n        this.rowClassName = this.rowClassName.bind(this);\\n    }\\n\\n    componentDidMount() {\\n        this.nodeservice.getTreeTableNodes().then(data => this.setState({ nodes: data }));\\n    }\\n\\n    sizeTemplate(node) {\\n        let size = node.data.size;\\n        let fontWeight = parseInt(size, 10) > 75 ? 'bold' : 'normal';\\n\\n        return <span style={{ fontWeight: fontWeight }}>{size}</span>;\\n    }\\n\\n    rowClassName(node) {\\n        return { 'p-highlight': (node.children && node.children.length === 3) };\\n    }\\n\\n    render() {\\n        return (\\n            <div>\\n                <div className=\\\"card\\\">\\n                    <p>This treetable highlights cells with a bolder font weight whose size value is greater than 75kb and highlights rows who has at 3 child rows.</p>\\n                    <TreeTable value={this.state.nodes} rowClassName={this.rowClassName}>\\n                        <Column field=\\\"name\\\" header=\\\"Name\\\" expander></Column>\\n                        <Column field=\\\"size\\\" header=\\\"Size\\\" body={this.sizeTemplate}></Column>\\n                        <Column field=\\\"type\\\" header=\\\"Type\\\"></Column>\\n                    </TreeTable>\\n                </div>\\n            </div>\\n        )\\n    }\\n}\\n                \"\n      },\n      'hooks': {\n        tabName: 'Hooks Source',\n        content: \"\\nimport React, { useState, useEffect } from 'react';\\nimport { TreeTable } from 'primereact/treetable';\\nimport { Column } from 'primereact/column';\\nimport { NodeService } from '../service/NodeService';\\n\\nconst TreeTableStyleDemo = () => {\\n    const [nodes, setNodes] = useState([]);\\n    const nodeservice = new NodeService();\\n\\n    useEffect(() => {\\n        nodeservice.getTreeTableNodes().then(data => setNodes(data));\\n    }, []); // eslint-disable-line react-hooks/exhaustive-deps\\n\\n    const sizeTemplate = (node) => {\\n        let size = node.data.size;\\n        let fontWeight = parseInt(size, 10) > 75 ? 'bold' : 'normal';\\n\\n        return <span style={{ fontWeight: fontWeight }}>{size}</span>;\\n    }\\n\\n    const rowClassName = (node) => {\\n        return { 'p-highlight': (node.children && node.children.length === 3) };\\n    }\\n\\n    return (\\n        <div>\\n            <div className=\\\"card\\\">\\n                <p>This treetable highlights cells with a bolder font weight whose size value is greater than 75kb and highlights rows who has at 3 child rows.</p>\\n                <TreeTable value={nodes} rowClassName={rowClassName}>\\n                    <Column field=\\\"name\\\" header=\\\"Name\\\" expander></Column>\\n                    <Column field=\\\"size\\\" header=\\\"Size\\\" body={sizeTemplate}></Column>\\n                    <Column field=\\\"type\\\" header=\\\"Type\\\"></Column>\\n                </TreeTable>\\n            </div>\\n        </div>\\n    );\\n}\\n                \"\n      },\n      'ts': {\n        tabName: 'TS Source',\n        content: \"\\nimport React, { useState, useEffect } from 'react';\\nimport { TreeTable } from 'primereact/treetable';\\nimport { Column } from 'primereact/column';\\nimport { NodeService } from '../service/NodeService';\\n\\nconst TreeTableStyleDemo = () => {\\n    const [nodes, setNodes] = useState([]);\\n    const nodeservice = new NodeService();\\n\\n    useEffect(() => {\\n        nodeservice.getTreeTableNodes().then(data => setNodes(data));\\n    }, []); // eslint-disable-line react-hooks/exhaustive-deps\\n\\n    const sizeTemplate = (node) => {\\n        let size = node.data.size;\\n        let fontWeight = parseInt(size, 10) > 75 ? 'bold' : 'normal';\\n\\n        return <span style={{ fontWeight: fontWeight }}>{size}</span>;\\n    }\\n\\n    const rowClassName = (node) => {\\n        return { 'p-highlight': (node.children && node.children.length === 3) };\\n    }\\n\\n    return (\\n        <div>\\n            <div className=\\\"card\\\">\\n                <p>This treetable highlights cells with a bolder font weight whose size value is greater than 75kb and highlights rows who has at 3 child rows.</p>\\n                <TreeTable value={nodes} rowClassName={rowClassName}>\\n                    <Column field=\\\"name\\\" header=\\\"Name\\\" expander></Column>\\n                    <Column field=\\\"size\\\" header=\\\"Size\\\" body={sizeTemplate}></Column>\\n                    <Column field=\\\"type\\\" header=\\\"Type\\\"></Column>\\n                </TreeTable>\\n            </div>\\n        </div>\\n    );\\n}\\n                \"\n      }\n    };\n    return _this3;\n  }\n\n  _createClass(TreeTableStyleDemoDoc, [{\n    key: \"shouldComponentUpdate\",\n    value: function shouldComponentUpdate() {\n      return false;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"content-section documentation\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 214,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(TabView, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 215,\n          columnNumber: 17\n        }\n      }, useLiveEditorTabs({\n        name: 'TreeTableStyleDemo',\n        sources: this.sources,\n        service: 'NodeService',\n        data: 'treetablenodes'\n      })));\n    }\n  }]);\n\n  return TreeTableStyleDemoDoc;\n}(Component);","map":{"version":3,"sources":["C:/Users/zura.ph/WebstormProjects/zloto/src/showcase/treetable/TreeTableStyleDemo.js"],"names":["React","Component","TreeTable","Column","NodeService","TabView","useLiveEditorTabs","AppInlineHeader","TreeTableStyleDemo","props","state","nodes","nodeservice","sizeTemplate","bind","rowClassName","getTreeTableNodes","then","data","setState","node","size","fontWeight","parseInt","children","length","TreeTableStyleDemoDoc","sources","tabName","content","name","service"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { TreeTable } from '../../components/treetable/TreeTable';\r\nimport { Column } from '../../components/column/Column';\r\nimport { NodeService } from '../service/NodeService';\r\nimport { TabView } from '../../components/tabview/TabView';\r\nimport { useLiveEditorTabs }from '../liveeditor/LiveEditor';\r\nimport { AppInlineHeader } from '../../AppInlineHeader';\r\n\r\nexport class TreeTableStyleDemo extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            nodes: []\r\n        };\r\n        this.nodeservice = new NodeService();\r\n        this.sizeTemplate = this.sizeTemplate.bind(this);\r\n        this.rowClassName = this.rowClassName.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.nodeservice.getTreeTableNodes().then(data => this.setState({ nodes: data }));\r\n    }\r\n\r\n    sizeTemplate(node) {\r\n        let size = node.data.size;\r\n        let fontWeight = parseInt(size, 10) > 75 ? 'bold' : 'normal';\r\n\r\n        return <span style={{ fontWeight: fontWeight }}>{size}</span>;\r\n    }\r\n\r\n    rowClassName(node) {\r\n        return { 'p-highlight': (node.children && node.children.length === 3) };\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div className=\"content-section introduction\">\r\n                    <AppInlineHeader changelogText=\"treeTable\">\r\n                        <h1>TreeTable <span>Styling</span></h1>\r\n                        <p>Particular rows and cells can be styled based on data.</p>\r\n                    </AppInlineHeader>\r\n                </div>\r\n\r\n                <div className=\"content-section implementation\">\r\n                    <div className=\"card\">\r\n                        <p>This treetable highlights cells with a bolder font weight whose size value is greater than 75kb and highlights rows who has at 3 child rows.</p>\r\n                        <TreeTable value={this.state.nodes} rowClassName={this.rowClassName}>\r\n                            <Column field=\"name\" header=\"Name\" expander></Column>\r\n                            <Column field=\"size\" header=\"Size\" body={this.sizeTemplate}></Column>\r\n                            <Column field=\"type\" header=\"Type\"></Column>\r\n                        </TreeTable>\r\n                    </div>\r\n                </div>\r\n\r\n                <TreeTableStyleDemoDoc />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nclass TreeTableStyleDemoDoc extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.sources = {\r\n            'class': {\r\n                tabName: 'Class Source',\r\n                content: `\r\nimport React, { Component } from 'react';\r\nimport { TreeTable } from 'primereact/treetable';\r\nimport { Column } from 'primereact/column';\r\nimport { NodeService } from '../service/NodeService';\r\n\r\nexport class TreeTableStyleDemo extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            nodes: []\r\n        };\r\n        this.nodeservice = new NodeService();\r\n        this.sizeTemplate = this.sizeTemplate.bind(this);\r\n        this.rowClassName = this.rowClassName.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.nodeservice.getTreeTableNodes().then(data => this.setState({ nodes: data }));\r\n    }\r\n\r\n    sizeTemplate(node) {\r\n        let size = node.data.size;\r\n        let fontWeight = parseInt(size, 10) > 75 ? 'bold' : 'normal';\r\n\r\n        return <span style={{ fontWeight: fontWeight }}>{size}</span>;\r\n    }\r\n\r\n    rowClassName(node) {\r\n        return { 'p-highlight': (node.children && node.children.length === 3) };\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div className=\"card\">\r\n                    <p>This treetable highlights cells with a bolder font weight whose size value is greater than 75kb and highlights rows who has at 3 child rows.</p>\r\n                    <TreeTable value={this.state.nodes} rowClassName={this.rowClassName}>\r\n                        <Column field=\"name\" header=\"Name\" expander></Column>\r\n                        <Column field=\"size\" header=\"Size\" body={this.sizeTemplate}></Column>\r\n                        <Column field=\"type\" header=\"Type\"></Column>\r\n                    </TreeTable>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n                `\r\n            },\r\n            'hooks': {\r\n                tabName: 'Hooks Source',\r\n                content: `\r\nimport React, { useState, useEffect } from 'react';\r\nimport { TreeTable } from 'primereact/treetable';\r\nimport { Column } from 'primereact/column';\r\nimport { NodeService } from '../service/NodeService';\r\n\r\nconst TreeTableStyleDemo = () => {\r\n    const [nodes, setNodes] = useState([]);\r\n    const nodeservice = new NodeService();\r\n\r\n    useEffect(() => {\r\n        nodeservice.getTreeTableNodes().then(data => setNodes(data));\r\n    }, []); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n    const sizeTemplate = (node) => {\r\n        let size = node.data.size;\r\n        let fontWeight = parseInt(size, 10) > 75 ? 'bold' : 'normal';\r\n\r\n        return <span style={{ fontWeight: fontWeight }}>{size}</span>;\r\n    }\r\n\r\n    const rowClassName = (node) => {\r\n        return { 'p-highlight': (node.children && node.children.length === 3) };\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"card\">\r\n                <p>This treetable highlights cells with a bolder font weight whose size value is greater than 75kb and highlights rows who has at 3 child rows.</p>\r\n                <TreeTable value={nodes} rowClassName={rowClassName}>\r\n                    <Column field=\"name\" header=\"Name\" expander></Column>\r\n                    <Column field=\"size\" header=\"Size\" body={sizeTemplate}></Column>\r\n                    <Column field=\"type\" header=\"Type\"></Column>\r\n                </TreeTable>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n                `\r\n            },\r\n            'ts': {\r\n                tabName: 'TS Source',\r\n                content: `\r\nimport React, { useState, useEffect } from 'react';\r\nimport { TreeTable } from 'primereact/treetable';\r\nimport { Column } from 'primereact/column';\r\nimport { NodeService } from '../service/NodeService';\r\n\r\nconst TreeTableStyleDemo = () => {\r\n    const [nodes, setNodes] = useState([]);\r\n    const nodeservice = new NodeService();\r\n\r\n    useEffect(() => {\r\n        nodeservice.getTreeTableNodes().then(data => setNodes(data));\r\n    }, []); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n    const sizeTemplate = (node) => {\r\n        let size = node.data.size;\r\n        let fontWeight = parseInt(size, 10) > 75 ? 'bold' : 'normal';\r\n\r\n        return <span style={{ fontWeight: fontWeight }}>{size}</span>;\r\n    }\r\n\r\n    const rowClassName = (node) => {\r\n        return { 'p-highlight': (node.children && node.children.length === 3) };\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"card\">\r\n                <p>This treetable highlights cells with a bolder font weight whose size value is greater than 75kb and highlights rows who has at 3 child rows.</p>\r\n                <TreeTable value={nodes} rowClassName={rowClassName}>\r\n                    <Column field=\"name\" header=\"Name\" expander></Column>\r\n                    <Column field=\"size\" header=\"Size\" body={sizeTemplate}></Column>\r\n                    <Column field=\"type\" header=\"Type\"></Column>\r\n                </TreeTable>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n                `\r\n            }\r\n        }\r\n    }\r\n\r\n    shouldComponentUpdate() {\r\n        return false;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"content-section documentation\">\r\n                <TabView>\r\n                    {\r\n                        useLiveEditorTabs({ name: 'TreeTableStyleDemo', sources: this.sources, service: 'NodeService', data: 'treetablenodes' })\r\n                    }\r\n                </TabView>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}