{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\zura.ph\\\\WebstormProjects\\\\zz-regul\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\zura.ph\\\\WebstormProjects\\\\zz-regul\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"C:\\\\Users\\\\zura.ph\\\\WebstormProjects\\\\zz-regul\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"C:\\\\Users\\\\zura.ph\\\\WebstormProjects\\\\zz-regul\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _createSuper from \"C:\\\\Users\\\\zura.ph\\\\WebstormProjects\\\\zz-regul\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"C:\\\\Users\\\\zura.ph\\\\WebstormProjects\\\\zz-regul\\\\src\\\\components\\\\treetable\\\\TreeTableScrollableView.js\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { classNames } from '../utils/ClassNames';\nimport DomHandler from '../utils/DomHandler';\nexport var TreeTableScrollableView = /*#__PURE__*/function (_Component) {\n  _inherits(TreeTableScrollableView, _Component);\n\n  var _super = _createSuper(TreeTableScrollableView);\n\n  function TreeTableScrollableView(props) {\n    var _this;\n\n    _classCallCheck(this, TreeTableScrollableView);\n\n    _this = _super.call(this, props);\n    _this.onHeaderScroll = _this.onHeaderScroll.bind(_assertThisInitialized(_this));\n    _this.onBodyScroll = _this.onBodyScroll.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(TreeTableScrollableView, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.setScrollHeight();\n\n      if (!this.props.frozen) {\n        var scrollBarWidth = DomHandler.calculateScrollbarWidth();\n        this.scrollHeaderBox.style.marginRight = scrollBarWidth + 'px';\n\n        if (this.scrollFooterBox) {\n          this.scrollFooterBox.style.marginRight = scrollBarWidth + 'px';\n        }\n      } else {\n        this.scrollBody.style.paddingBottom = DomHandler.calculateScrollbarWidth() + 'px';\n      }\n    }\n  }, {\n    key: \"setScrollHeight\",\n    value: function setScrollHeight() {\n      if (this.props.scrollHeight) {\n        if (this.props.scrollHeight.indexOf('%') !== -1) {\n          var datatableContainer = this.findDataTableContainer(this.container);\n          this.scrollBody.style.visibility = 'hidden';\n          this.scrollBody.style.height = '100px'; //temporary height to calculate static height\n\n          var containerHeight = DomHandler.getOuterHeight(datatableContainer);\n          var relativeHeight = DomHandler.getOuterHeight(datatableContainer.parentElement) * parseInt(this.props.scrollHeight, 10) / 100;\n          var staticHeight = containerHeight - 100; //total height of headers, footers, paginators\n\n          var scrollBodyHeight = relativeHeight - staticHeight;\n          this.scrollBody.style.height = 'auto';\n          this.scrollBody.style.maxHeight = scrollBodyHeight + 'px';\n          this.scrollBody.style.visibility = 'visible';\n        } else {\n          this.scrollBody.style.maxHeight = this.props.scrollHeight;\n        }\n      }\n    }\n  }, {\n    key: \"findDataTableContainer\",\n    value: function findDataTableContainer(element) {\n      if (element) {\n        var el = element;\n\n        while (el && !DomHandler.hasClass(el, 'p-treetable')) {\n          el = el.parentElement;\n        }\n\n        return el;\n      } else {\n        return null;\n      }\n    }\n  }, {\n    key: \"onHeaderScroll\",\n    value: function onHeaderScroll() {\n      this.scrollHeader.scrollLeft = 0;\n    }\n  }, {\n    key: \"onBodyScroll\",\n    value: function onBodyScroll() {\n      var frozenView = this.container.previousElementSibling;\n      var frozenScrollBody;\n\n      if (frozenView) {\n        frozenScrollBody = DomHandler.findSingle(frozenView, '.p-treetable-scrollable-body');\n      }\n\n      this.scrollHeaderBox.style.marginLeft = -1 * this.scrollBody.scrollLeft + 'px';\n\n      if (this.scrollFooterBox) {\n        this.scrollFooterBox.style.marginLeft = -1 * this.scrollBody.scrollLeft + 'px';\n      }\n\n      if (frozenScrollBody) {\n        frozenScrollBody.scrollTop = this.scrollBody.scrollTop;\n      }\n    }\n  }, {\n    key: \"calculateRowHeight\",\n    value: function calculateRowHeight() {\n      var row = DomHandler.findSingle(this.scrollTable, 'tr:not(.p-treetable-emptymessage-row)');\n\n      if (row) {\n        this.rowHeight = DomHandler.getOuterHeight(row);\n      }\n    }\n  }, {\n    key: \"renderColGroup\",\n    value: function renderColGroup() {\n      var _this2 = this;\n\n      if (this.props.columns && this.props.columns.length) {\n        return /*#__PURE__*/React.createElement(\"colgroup\", {\n          className: \"p-treetable-scrollable-colgroup\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 116,\n            columnNumber: 17\n          }\n        }, this.props.columns.map(function (col, i) {\n          return /*#__PURE__*/React.createElement(\"col\", {\n            key: col.field + '_' + i,\n            __self: _this2,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 117,\n              columnNumber: 57\n            }\n          });\n        }));\n      } else {\n        return null;\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      var className = classNames('p-treetable-scrollable-view', {\n        'p-treetable-frozen-view': this.props.frozen,\n        'p-treetable-unfrozen-view': !this.props.frozen && this.props.frozenWidth\n      });\n      var width = this.props.frozen ? this.props.frozenWidth : 'calc(100% - ' + this.props.frozenWidth + ')';\n      var left = this.props.frozen ? null : this.props.frozenWidth;\n      var colGroup = this.renderColGroup();\n      var scrollableBodyStyle = !this.props.frozen && this.props.scrollHeight ? {\n        overflowY: 'scroll'\n      } : null;\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: className,\n        style: {\n          width: width,\n          left: left\n        },\n        ref: function ref(el) {\n          _this3.container = el;\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"p-treetable-scrollable-header\",\n        ref: function ref(el) {\n          _this3.scrollHeader = el;\n        },\n        onScroll: this.onHeaderScroll,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"p-treetable-scrollable-header-box\",\n        ref: function ref(el) {\n          _this3.scrollHeaderBox = el;\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(\"table\", {\n        className: \"p-treetable-scrollable-header-table\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 25\n        }\n      }, colGroup, this.props.header))), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"p-treetable-scrollable-body\",\n        ref: function ref(el) {\n          _this3.scrollBody = el;\n        },\n        style: scrollableBodyStyle,\n        onScroll: this.onBodyScroll,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"table\", {\n        ref: function ref(el) {\n          _this3.scrollTable = el;\n        },\n        style: {\n          top: '0'\n        },\n        className: \"p-treetable-scrollable-body-table\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 21\n        }\n      }, colGroup, this.props.body)), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"p-treetable-scrollable-footer\",\n        ref: function ref(el) {\n          _this3.scrollFooter = el;\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"p-treetable-scrollable-footer-box\",\n        ref: function ref(el) {\n          _this3.scrollFooterBox = el;\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(\"table\", {\n        className: \"p-treetable-scrollable-footer-table\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 151,\n          columnNumber: 26\n        }\n      }, colGroup, this.props.footer))));\n    }\n  }]);\n\n  return TreeTableScrollableView;\n}(Component);\nTreeTableScrollableView.defaultProps = {\n  header: null,\n  body: null,\n  footer: null,\n  columns: null,\n  frozen: null,\n  frozenWidth: null,\n  frozenBody: null\n};\nTreeTableScrollableView.propTypes = {\n  header: PropTypes.any,\n  body: PropTypes.any,\n  footer: PropTypes.any,\n  columns: PropTypes.array,\n  frozen: PropTypes.bool,\n  frozenWidth: PropTypes.string,\n  frozenBody: PropTypes.any\n};","map":{"version":3,"sources":["C:/Users/zura.ph/WebstormProjects/zz-regul/src/components/treetable/TreeTableScrollableView.js"],"names":["React","Component","PropTypes","classNames","DomHandler","TreeTableScrollableView","props","onHeaderScroll","bind","onBodyScroll","setScrollHeight","frozen","scrollBarWidth","calculateScrollbarWidth","scrollHeaderBox","style","marginRight","scrollFooterBox","scrollBody","paddingBottom","scrollHeight","indexOf","datatableContainer","findDataTableContainer","container","visibility","height","containerHeight","getOuterHeight","relativeHeight","parentElement","parseInt","staticHeight","scrollBodyHeight","maxHeight","element","el","hasClass","scrollHeader","scrollLeft","frozenView","previousElementSibling","frozenScrollBody","findSingle","marginLeft","scrollTop","row","scrollTable","rowHeight","columns","length","map","col","i","field","className","frozenWidth","width","left","colGroup","renderColGroup","scrollableBodyStyle","overflowY","header","top","body","scrollFooter","footer","defaultProps","frozenBody","propTypes","any","array","bool","string"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { classNames } from '../utils/ClassNames';\r\nimport DomHandler from '../utils/DomHandler';\r\n\r\nexport class TreeTableScrollableView extends Component {\r\n\r\n     static defaultProps = {\r\n        header: null,\r\n        body: null,\r\n        footer: null,\r\n        columns: null,\r\n        frozen: null,\r\n        frozenWidth: null,\r\n        frozenBody: null\r\n     }\r\n\r\n    static propTypes = {\r\n        header: PropTypes.any,\r\n        body: PropTypes.any,\r\n        footer: PropTypes.any,\r\n        columns: PropTypes.array,\r\n        frozen: PropTypes.bool,\r\n        frozenWidth: PropTypes.string,\r\n        frozenBody: PropTypes.any\r\n    }\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.onHeaderScroll = this.onHeaderScroll.bind(this);\r\n        this.onBodyScroll = this.onBodyScroll.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.setScrollHeight();\r\n\r\n        if (!this.props.frozen) {\r\n            let scrollBarWidth = DomHandler.calculateScrollbarWidth();\r\n\r\n            this.scrollHeaderBox.style.marginRight = scrollBarWidth + 'px';\r\n            if(this.scrollFooterBox) {\r\n                this.scrollFooterBox.style.marginRight = scrollBarWidth + 'px';\r\n            }\r\n        }\r\n        else {\r\n            this.scrollBody.style.paddingBottom = DomHandler.calculateScrollbarWidth() + 'px';\r\n        }\r\n    }\r\n\r\n    setScrollHeight() {\r\n        if(this.props.scrollHeight) {\r\n            if(this.props.scrollHeight.indexOf('%') !== -1) {\r\n                let datatableContainer = this.findDataTableContainer(this.container);\r\n                this.scrollBody.style.visibility = 'hidden';\r\n                this.scrollBody.style.height = '100px';         //temporary height to calculate static height\r\n                let containerHeight = DomHandler.getOuterHeight(datatableContainer);\r\n                let relativeHeight = DomHandler.getOuterHeight(datatableContainer.parentElement) * parseInt(this.props.scrollHeight, 10) / 100;\r\n                let staticHeight = containerHeight - 100;       //total height of headers, footers, paginators\r\n                let scrollBodyHeight = (relativeHeight - staticHeight);\r\n\r\n                this.scrollBody.style.height = 'auto';\r\n                this.scrollBody.style.maxHeight = scrollBodyHeight + 'px';\r\n                this.scrollBody.style.visibility = 'visible';\r\n            }\r\n            else {\r\n                this.scrollBody.style.maxHeight = this.props.scrollHeight;\r\n            }\r\n        }\r\n    }\r\n\r\n    findDataTableContainer(element) {\r\n        if(element) {\r\n            let el = element;\r\n            while(el && !DomHandler.hasClass(el, 'p-treetable')) {\r\n                el = el.parentElement;\r\n            }\r\n\r\n            return el;\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    onHeaderScroll() {\r\n        this.scrollHeader.scrollLeft = 0;\r\n    }\r\n\r\n    onBodyScroll() {\r\n        let frozenView = this.container.previousElementSibling;\r\n        let frozenScrollBody;\r\n        if(frozenView) {\r\n            frozenScrollBody = DomHandler.findSingle(frozenView, '.p-treetable-scrollable-body');\r\n        }\r\n\r\n        this.scrollHeaderBox.style.marginLeft = -1 * this.scrollBody.scrollLeft + 'px';\r\n        if(this.scrollFooterBox) {\r\n            this.scrollFooterBox.style.marginLeft = -1 * this.scrollBody.scrollLeft + 'px';\r\n        }\r\n\r\n        if(frozenScrollBody) {\r\n            frozenScrollBody.scrollTop = this.scrollBody.scrollTop;\r\n        }\r\n    }\r\n\r\n    calculateRowHeight() {\r\n        let row = DomHandler.findSingle(this.scrollTable, 'tr:not(.p-treetable-emptymessage-row)');\r\n        if(row) {\r\n            this.rowHeight = DomHandler.getOuterHeight(row);\r\n        }\r\n    }\r\n\r\n    renderColGroup() {\r\n        if(this.props.columns && this.props.columns.length) {\r\n            return (\r\n                <colgroup className=\"p-treetable-scrollable-colgroup\">\r\n                    {this.props.columns.map((col, i) => <col key={col.field + '_' + i} />)}\r\n                </colgroup>\r\n            );\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    render() {\r\n        let className = classNames('p-treetable-scrollable-view', {'p-treetable-frozen-view': this.props.frozen, 'p-treetable-unfrozen-view': !this.props.frozen && this.props.frozenWidth});\r\n        let width = this.props.frozen ? this.props.frozenWidth : 'calc(100% - ' + this.props.frozenWidth + ')';\r\n        let left = this.props.frozen ? null : this.props.frozenWidth;\r\n        let colGroup = this.renderColGroup();\r\n        let scrollableBodyStyle = !this.props.frozen && this.props.scrollHeight ? { overflowY: 'scroll' } : null;\r\n\r\n        return (\r\n            <div className={className} style={{width: width, left: left}} ref={(el) => { this.container = el; }}>\r\n                <div className=\"p-treetable-scrollable-header\" ref={(el) => { this.scrollHeader= el; }} onScroll={this.onHeaderScroll}>\r\n                    <div className=\"p-treetable-scrollable-header-box\" ref={(el) => { this.scrollHeaderBox = el; }}>\r\n                        <table className=\"p-treetable-scrollable-header-table\">\r\n                            {colGroup}\r\n                            {this.props.header}\r\n                        </table>\r\n                    </div>\r\n                </div>\r\n                <div className=\"p-treetable-scrollable-body\" ref={(el) => { this.scrollBody = el; }} style={scrollableBodyStyle} onScroll={this.onBodyScroll}>\r\n                    <table ref={(el) => { this.scrollTable = el; }} style={{top:'0'}} className=\"p-treetable-scrollable-body-table\">\r\n                        {colGroup}\r\n                        {this.props.body}\r\n                    </table>\r\n                </div>\r\n                <div className=\"p-treetable-scrollable-footer\" ref={(el) => { this.scrollFooter = el; }}>\r\n                    <div className=\"p-treetable-scrollable-footer-box\" ref={(el) => { this.scrollFooterBox = el; }}>\r\n                         <table className=\"p-treetable-scrollable-footer-table\">\r\n                            {colGroup}\r\n                            {this.props.footer}\r\n                        </table>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}