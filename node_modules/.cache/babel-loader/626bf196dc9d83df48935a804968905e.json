{"ast":null,"code":"import _classCallCheck from\"C:\\\\Users\\\\zura.ph\\\\WebstormProjects\\\\slotmaster-dashboard\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";import _createClass from\"C:\\\\Users\\\\zura.ph\\\\WebstormProjects\\\\slotmaster-dashboard\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";import _inherits from\"C:\\\\Users\\\\zura.ph\\\\WebstormProjects\\\\slotmaster-dashboard\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";import _createSuper from\"C:\\\\Users\\\\zura.ph\\\\WebstormProjects\\\\slotmaster-dashboard\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createSuper\";import React,{Component}from'react';import{Link}from'react-router-dom';import{TabView,TabPanel}from'../../components/tabview/TabView';import{CodeHighlight}from'../codehighlight/CodeHighlight';import{useLiveEditorTabs}from'../liveeditor/LiveEditor';export var CheckboxDoc=/*#__PURE__*/function(_Component){_inherits(CheckboxDoc,_Component);var _super=_createSuper(CheckboxDoc);function CheckboxDoc(props){var _this;_classCallCheck(this,CheckboxDoc);_this=_super.call(this,props);_this.sources={'class':{tabName:'Class Source',content:\"\\nimport React, { Component } from 'react';\\nimport { Checkbox } from 'primereact/checkbox';\\n\\nexport class CheckboxDemo extends Component {\\n\\n    constructor(props) {\\n        super(props);\\n\\n        this.categories = [{name: 'Accounting', key: 'A'}, {name: 'Marketing', key: 'M'}, {name: 'Production', key: 'P'}, {name: 'Research', key: 'R'}];\\n\\n        this.state = {\\n            checked: false,\\n            cities: [],\\n            selectedCategories: this.categories.slice(1,3)\\n        };\\n\\n        this.onCityChange = this.onCityChange.bind(this);\\n        this.onCategoryChange = this.onCategoryChange.bind(this);\\n    }\\n\\n    onCategoryChange(e) {\\n        let selectedCategories = [...this.state.selectedCategories];\\n\\n        if (e.checked) {\\n            selectedCategories.push(e.value);\\n        }\\n        else {\\n            for (let i = 0; i < selectedCategories.length; i++) {\\n                const selectedCategory = selectedCategories[i];\\n\\n                if (selectedCategory.key === e.value.key) {\\n                    selectedCategories.splice(i, 1);\\n                    break;\\n                }\\n            }\\n        }\\n\\n        this.setState({ selectedCategories });\\n    }\\n\\n\\n    onCityChange(e) {\\n        let selectedCities = [...this.state.cities];\\n\\n        if (e.checked)\\n            selectedCities.push(e.value);\\n        else\\n            selectedCities.splice(selectedCities.indexOf(e.value), 1);\\n\\n        this.setState({ cities: selectedCities });\\n    }\\n\\n    render() {\\n        return (\\n            <div>\\n                <div className=\\\"card\\\">\\n                    <h5>Basic</h5>\\n                    <div className=\\\"p-field-checkbox\\\">\\n                        <Checkbox inputId=\\\"binary\\\" checked={this.state.checked} onChange={e => this.setState({ checked: e.checked })} />\\n                        <label htmlFor=\\\"binary\\\">{this.state.checked ? 'true' : 'false'}</label>\\n                    </div>\\n\\n                    <h5>Multiple</h5>\\n                    <div className=\\\"p-field-checkbox\\\">\\n                        <Checkbox inputId=\\\"city1\\\" name=\\\"city\\\" value=\\\"Chicago\\\" onChange={this.onCityChange} checked={this.state.cities.indexOf('Chicago') !== -1} />\\n                        <label htmlFor=\\\"city1\\\">Chicago</label>\\n                    </div>\\n                    <div className=\\\"p-field-checkbox\\\">\\n                        <Checkbox inputId=\\\"city2\\\" name=\\\"city\\\" value=\\\"Los Angeles\\\" onChange={this.onCityChange} checked={this.state.cities.indexOf('Los Angeles') !== -1} />\\n                        <label htmlFor=\\\"city2\\\">Los Angeles</label>\\n                    </div>\\n                    <div className=\\\"p-field-checkbox\\\">\\n                        <Checkbox inputId=\\\"city3\\\" name=\\\"city\\\" value=\\\"New York\\\" onChange={this.onCityChange} checked={this.state.cities.indexOf('New York') !== -1} />\\n                        <label htmlFor=\\\"city3\\\">New York</label>\\n                    </div>\\n                    <div className=\\\"p-field-checkbox\\\">\\n                        <Checkbox inputId=\\\"city4\\\" name=\\\"city\\\" value=\\\"San Francisco\\\" onChange={this.onCityChange} checked={this.state.cities.indexOf('San Francisco') !== -1} />\\n                        <label htmlFor=\\\"city4\\\">San Francisco</label>\\n                    </div>\\n\\n                    <h5>Dynamic Values, Preselection, Value Binding and Disabled Option</h5>\\n                    {\\n                        this.categories.map((category) => {\\n                            return (\\n                                <div key={category.key} className=\\\"p-field-checkbox\\\">\\n                                    <Checkbox inputId={category.key} name=\\\"category\\\" value={category} onChange={this.onCategoryChange} checked={this.state.selectedCategories.some((item) => item.key === category.key)} disabled={category.key === 'R'} />\\n                                    <label htmlFor={category.key}>{category.name}</label>\\n                                </div>\\n                            )\\n                        })\\n                    }\\n                </div>\\n            </div>\\n        )\\n    }\\n}\\n                \"},'hooks':{tabName:'Hooks Source',content:\"\\nimport React, { useState } from 'react';\\nimport { Checkbox } from 'primereact/checkbox';\\n\\nconst CheckboxDemo = () => {\\n    const categories = [{name: 'Accounting', key: 'A'}, {name: 'Marketing', key: 'M'}, {name: 'Production', key: 'P'}, {name: 'Research', key: 'R'}];\\n    const [checked, setChecked] = useState(false);\\n    const [cities, setCities] = useState([]);\\n    const [selectedCategories, setSelectedCategories] = useState(categories.slice(1,3));\\n\\n    const onCategoryChange = (e) => {\\n        let _selectedCategories = [...selectedCategories];\\n\\n        if (e.checked) {\\n            _selectedCategories.push(e.value);\\n        }\\n        else {\\n            for (let i = 0; i < _selectedCategories.length; i++) {\\n                const selectedCategory = _selectedCategories[i];\\n\\n                if (selectedCategory.key === e.value.key) {\\n                    _selectedCategories.splice(i, 1);\\n                    break;\\n                }\\n            }\\n        }\\n\\n        setSelectedCategories(_selectedCategories);\\n    }\\n\\n\\n    const onCityChange = (e) => {\\n        let selectedCities = [...cities];\\n\\n        if (e.checked)\\n            selectedCities.push(e.value);\\n        else\\n            selectedCities.splice(selectedCities.indexOf(e.value), 1);\\n\\n        setCities(selectedCities);\\n    }\\n\\n    return (\\n        <div>\\n            <div className=\\\"card\\\">\\n                <h5>Basic</h5>\\n                <div className=\\\"p-field-checkbox\\\">\\n                    <Checkbox inputId=\\\"binary\\\" checked={checked} onChange={e => setChecked(e.checked)} />\\n                    <label htmlFor=\\\"binary\\\">{checked ? 'true' : 'false'}</label>\\n                </div>\\n\\n                <h5>Multiple</h5>\\n                <div className=\\\"p-field-checkbox\\\">\\n                    <Checkbox inputId=\\\"city1\\\" name=\\\"city\\\" value=\\\"Chicago\\\" onChange={onCityChange} checked={cities.indexOf('Chicago') !== -1} />\\n                    <label htmlFor=\\\"city1\\\">Chicago</label>\\n                </div>\\n                <div className=\\\"p-field-checkbox\\\">\\n                    <Checkbox inputId=\\\"city2\\\" name=\\\"city\\\" value=\\\"Los Angeles\\\" onChange={onCityChange} checked={cities.indexOf('Los Angeles') !== -1} />\\n                    <label htmlFor=\\\"city2\\\">Los Angeles</label>\\n                </div>\\n                <div className=\\\"p-field-checkbox\\\">\\n                    <Checkbox inputId=\\\"city3\\\" name=\\\"city\\\" value=\\\"New York\\\" onChange={onCityChange} checked={cities.indexOf('New York') !== -1} />\\n                    <label htmlFor=\\\"city3\\\">New York</label>\\n                </div>\\n                <div className=\\\"p-field-checkbox\\\">\\n                    <Checkbox inputId=\\\"city4\\\" name=\\\"city\\\" value=\\\"San Francisco\\\" onChange={onCityChange} checked={cities.indexOf('San Francisco') !== -1} />\\n                    <label htmlFor=\\\"city4\\\">San Francisco</label>\\n                </div>\\n\\n                <h5>Dynamic Values, Preselection, Value Binding and Disabled Option</h5>\\n                {\\n                    categories.map((category) => {\\n                        return (\\n                            <div key={category.key} className=\\\"p-field-checkbox\\\">\\n                                <Checkbox inputId={category.key} name=\\\"category\\\" value={category} onChange={onCategoryChange} checked={selectedCategories.some((item) => item.key === category.key)} disabled={category.key === 'R'} />\\n                                <label htmlFor={category.key}>{category.name}</label>\\n                            </div>\\n                        )\\n                    })\\n                }\\n            </div>\\n        </div>\\n    )\\n}\\n                \"},'ts':{tabName:'TS Source',content:\"\\nimport React, { useState } from 'react';\\nimport { Checkbox } from 'primereact/checkbox';\\n\\nconst CheckboxDemo = () => {\\n    const categories = [{name: 'Accounting', key: 'A'}, {name: 'Marketing', key: 'M'}, {name: 'Production', key: 'P'}, {name: 'Research', key: 'R'}];\\n    const [checked, setChecked] = useState<boolean>(false);\\n    const [cities, setCities] = useState<any>([]);\\n    const [selectedCategories, setSelectedCategories] = useState<any>(categories.slice(1,3));\\n\\n    const onCategoryChange = (e: { value: any, checked: boolean }) => {\\n        let _selectedCategories = [...selectedCategories];\\n\\n        if (e.checked) {\\n            _selectedCategories.push(e.value);\\n        }\\n        else {\\n            for (let i = 0; i < _selectedCategories.length; i++) {\\n                const selectedCategory = _selectedCategories[i];\\n\\n                if (selectedCategory.key === e.value.key) {\\n                    _selectedCategories.splice(i, 1);\\n                    break;\\n                }\\n            }\\n        }\\n\\n        setSelectedCategories(_selectedCategories);\\n    }\\n\\n\\n    const onCityChange = (e: { value: any, checked: boolean }) => {\\n        let selectedCities = [...cities];\\n\\n        if (e.checked)\\n            selectedCities.push(e.value);\\n        else\\n            selectedCities.splice(selectedCities.indexOf(e.value), 1);\\n\\n        setCities(selectedCities);\\n    }\\n\\n    return (\\n        <div>\\n            <div className=\\\"card\\\">\\n                <h5>Basic</h5>\\n                <div className=\\\"p-field-checkbox\\\">\\n                    <Checkbox inputId=\\\"binary\\\" checked={checked} onChange={e => setChecked(e.checked)} />\\n                    <label htmlFor=\\\"binary\\\">{checked ? 'true' : 'false'}</label>\\n                </div>\\n\\n                <h5>Multiple</h5>\\n                <div className=\\\"p-field-checkbox\\\">\\n                    <Checkbox inputId=\\\"city1\\\" name=\\\"city\\\" value=\\\"Chicago\\\" onChange={onCityChange} checked={cities.indexOf('Chicago') !== -1} />\\n                    <label htmlFor=\\\"city1\\\">Chicago</label>\\n                </div>\\n                <div className=\\\"p-field-checkbox\\\">\\n                    <Checkbox inputId=\\\"city2\\\" name=\\\"city\\\" value=\\\"Los Angeles\\\" onChange={onCityChange} checked={cities.indexOf('Los Angeles') !== -1} />\\n                    <label htmlFor=\\\"city2\\\">Los Angeles</label>\\n                </div>\\n                <div className=\\\"p-field-checkbox\\\">\\n                    <Checkbox inputId=\\\"city3\\\" name=\\\"city\\\" value=\\\"New York\\\" onChange={onCityChange} checked={cities.indexOf('New York') !== -1} />\\n                    <label htmlFor=\\\"city3\\\">New York</label>\\n                </div>\\n                <div className=\\\"p-field-checkbox\\\">\\n                    <Checkbox inputId=\\\"city4\\\" name=\\\"city\\\" value=\\\"San Francisco\\\" onChange={onCityChange} checked={cities.indexOf('San Francisco') !== -1} />\\n                    <label htmlFor=\\\"city4\\\">San Francisco</label>\\n                </div>\\n\\n                <h5>Dynamic Values, Preselection, Value Binding and Disabled Option</h5>\\n                {\\n                    categories.map((category) => {\\n                        return (\\n                            <div key={category.key} className=\\\"p-field-checkbox\\\">\\n                                <Checkbox inputId={category.key} name=\\\"category\\\" value={category} onChange={onCategoryChange} checked={selectedCategories.some((item) => item.key === category.key)} disabled={category.key === 'R'} />\\n                                <label htmlFor={category.key}>{category.name}</label>\\n                            </div>\\n                        )\\n                    })\\n                }\\n            </div>\\n        </div>\\n    )\\n}\\n                \"}};return _this;}_createClass(CheckboxDoc,[{key:\"shouldComponentUpdate\",value:function shouldComponentUpdate(){return false;}},{key:\"render\",value:function render(){return/*#__PURE__*/React.createElement(\"div\",{className:\"content-section documentation\"},/*#__PURE__*/React.createElement(TabView,null,/*#__PURE__*/React.createElement(TabPanel,{header:\"Documentation\"},/*#__PURE__*/React.createElement(\"h5\",null,\"Import\"),/*#__PURE__*/React.createElement(CodeHighlight,{lang:\"js\"},\"\\nimport {Checkbox} from 'primereact/checkbox';\\n\"),/*#__PURE__*/React.createElement(\"h5\",null,\"Getting Started\"),/*#__PURE__*/React.createElement(\"p\",null,\"Checkbox is used as a controlled input with \",/*#__PURE__*/React.createElement(\"i\",null,\"checked\"),\" and \",/*#__PURE__*/React.createElement(\"i\",null,\"onChange\"),\" properties.\"),/*#__PURE__*/React.createElement(CodeHighlight,null,\"\\n<Checkbox onChange={e => setChecked(e.checked)} checked={checked}></Checkbox>\\n\"),/*#__PURE__*/React.createElement(\"h5\",null,\"Multiple Values\"),/*#__PURE__*/React.createElement(\"p\",null,\"Multiple checkboxes can be grouped using a list of values.\"),/*#__PURE__*/React.createElement(CodeHighlight,null,\"\\n<div className=\\\"p-col-12\\\">\\n    <Checkbox inputId=\\\"cb1\\\" value=\\\"New York\\\" onChange={onCityChange} checked={cities.includes('New York')}></Checkbox>\\n    <label htmlFor=\\\"cb1\\\" className=\\\"p-checkbox-label\\\">New York</label>\\n</div>\\n<div className=\\\"p-col-12\\\">\\n    <Checkbox inputId=\\\"cb2\\\" value=\\\"San Francisco\\\" onChange={onCityChange} checked={cities.includes('San Francisco')}></Checkbox>\\n    <label htmlFor=\\\"cb2\\\" className=\\\"p-checkbox-label\\\">San Francisco</label>\\n</div>\\n<div className=\\\"p-col-12\\\">\\n    <Checkbox inputId=\\\"cb3\\\" value=\\\"Los Angeles\\\" onChange={onCityChange} checked={cities.includes('Los Angeles')}></Checkbox>\\n    <label htmlFor=\\\"cb3\\\" className=\\\"p-checkbox-label\\\">Los Angeles</label>\\n</div>\\n\"),/*#__PURE__*/React.createElement(CodeHighlight,{lang:\"js\"},\"\\nconst [cities, setCities] = useState([]);\\n\\nconst onCityChange = (e) => {\\n    let selectedCities = [...cities];\\n    if(e.checked)\\n        selectedCities.push(e.value);\\n    else\\n        selectedCities.splice(selectedCities.indexOf(e.value), 1);\\n\\n    setCities(selectedCities);\\n}\\n\"),/*#__PURE__*/React.createElement(\"h5\",null,\"Properties\"),/*#__PURE__*/React.createElement(\"div\",{className:\"doc-tablewrapper\"},/*#__PURE__*/React.createElement(\"table\",{className:\"doc-table\"},/*#__PURE__*/React.createElement(\"thead\",null,/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"th\",null,\"Name\"),/*#__PURE__*/React.createElement(\"th\",null,\"Type\"),/*#__PURE__*/React.createElement(\"th\",null,\"Default\"),/*#__PURE__*/React.createElement(\"th\",null,\"Description\"))),/*#__PURE__*/React.createElement(\"tbody\",null,/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"td\",null,\"id\"),/*#__PURE__*/React.createElement(\"td\",null,\"string\"),/*#__PURE__*/React.createElement(\"td\",null,\"null\"),/*#__PURE__*/React.createElement(\"td\",null,\"Unique identifier of the element.\")),/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"td\",null,\"inputId\"),/*#__PURE__*/React.createElement(\"td\",null,\"string\"),/*#__PURE__*/React.createElement(\"td\",null,\"null\"),/*#__PURE__*/React.createElement(\"td\",null,\"Unique identifier of the inner native radiobutton.\")),/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"td\",null,\"value\"),/*#__PURE__*/React.createElement(\"td\",null,\"any\"),/*#__PURE__*/React.createElement(\"td\",null,\"null\"),/*#__PURE__*/React.createElement(\"td\",null,\"Value of the checkbox.\")),/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"td\",null,\"name\"),/*#__PURE__*/React.createElement(\"td\",null,\"string\"),/*#__PURE__*/React.createElement(\"td\",null,\"null\"),/*#__PURE__*/React.createElement(\"td\",null,\"Name of the checkbox element .\")),/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"td\",null,\"checked\"),/*#__PURE__*/React.createElement(\"td\",null,\"boolean\"),/*#__PURE__*/React.createElement(\"td\",null,\"false\"),/*#__PURE__*/React.createElement(\"td\",null,\"Specifies whether a checkbox should be checked or not.\")),/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"td\",null,\"style\"),/*#__PURE__*/React.createElement(\"td\",null,\"string\"),/*#__PURE__*/React.createElement(\"td\",null,\"null\"),/*#__PURE__*/React.createElement(\"td\",null,\"Inline style of the element.\")),/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"td\",null,\"className\"),/*#__PURE__*/React.createElement(\"td\",null,\"string\"),/*#__PURE__*/React.createElement(\"td\",null,\"null\"),/*#__PURE__*/React.createElement(\"td\",null,\"Style class of the element.\")),/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"td\",null,\"disabled\"),/*#__PURE__*/React.createElement(\"td\",null,\"boolean\"),/*#__PURE__*/React.createElement(\"td\",null,\"false\"),/*#__PURE__*/React.createElement(\"td\",null,\"When present, it specifies that the element value cannot be altered.\")),/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"td\",null,\"required\"),/*#__PURE__*/React.createElement(\"td\",null,\"boolean\"),/*#__PURE__*/React.createElement(\"td\",null,\"false\"),/*#__PURE__*/React.createElement(\"td\",null,\"When present, it specifies that an input field must be filled out before submitting the form.\")),/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"td\",null,\"readOnly\"),/*#__PURE__*/React.createElement(\"td\",null,\"boolean\"),/*#__PURE__*/React.createElement(\"td\",null,\"false\"),/*#__PURE__*/React.createElement(\"td\",null,\"When present, it specifies that the element cannot be typed.\")),/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"td\",null,\"tabIndex\"),/*#__PURE__*/React.createElement(\"td\",null,\"number\"),/*#__PURE__*/React.createElement(\"td\",null,\"null\"),/*#__PURE__*/React.createElement(\"td\",null,\"Index of the element in tabbing order.\")),/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"td\",null,\"tooltip\"),/*#__PURE__*/React.createElement(\"td\",null,\"any\"),/*#__PURE__*/React.createElement(\"td\",null,\"null\"),/*#__PURE__*/React.createElement(\"td\",null,\"Content of the tooltip.\")),/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"td\",null,\"tooltipOptions\"),/*#__PURE__*/React.createElement(\"td\",null,\"object\"),/*#__PURE__*/React.createElement(\"td\",null,\"null\"),/*#__PURE__*/React.createElement(\"td\",null,\"Configuration of the tooltip, refer to the tooltip documentation for more information.\")),/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"td\",null,\"ariaLabelledBy\"),/*#__PURE__*/React.createElement(\"td\",null,\"string\"),/*#__PURE__*/React.createElement(\"td\",null,\"null\"),/*#__PURE__*/React.createElement(\"td\",null,\"Establishes relationships between the component and label(s) where its value should be one or more element IDs.\"))))),/*#__PURE__*/React.createElement(\"h5\",null,\"Events\"),/*#__PURE__*/React.createElement(\"div\",{className:\"doc-tablewrapper\"},/*#__PURE__*/React.createElement(\"table\",{className:\"doc-table\"},/*#__PURE__*/React.createElement(\"thead\",null,/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"th\",null,\"Name\"),/*#__PURE__*/React.createElement(\"th\",null,\"Parameters\"),/*#__PURE__*/React.createElement(\"th\",null,\"Description\"))),/*#__PURE__*/React.createElement(\"tbody\",null,/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"td\",null,\"onChange\"),/*#__PURE__*/React.createElement(\"td\",null,\"event.originalEvent: Original event \",/*#__PURE__*/React.createElement(\"br\",null),\"event.value: Value of the checkbox \",/*#__PURE__*/React.createElement(\"br\",null),\"event.checked: Checked state as a boolean.\"),/*#__PURE__*/React.createElement(\"td\",null,\"Callback to invoke on value change\")),/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"td\",null,\"onMouseDown\"),/*#__PURE__*/React.createElement(\"td\",null,\"event: Browser event\"),/*#__PURE__*/React.createElement(\"td\",null,\"Callback to invoke to when a mouse button is pressed.\")),/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"td\",null,\"onContextMenu\"),/*#__PURE__*/React.createElement(\"td\",null,\"event: Browser event\"),/*#__PURE__*/React.createElement(\"td\",null,\"Callback to invoke on right-click.\"))))),/*#__PURE__*/React.createElement(\"h5\",null,\"Styling\"),/*#__PURE__*/React.createElement(\"p\",null,\"Following is the list of structural style classes, for theming classes visit \",/*#__PURE__*/React.createElement(Link,{to:\"/theming\"},\"theming\"),\" page.\"),/*#__PURE__*/React.createElement(\"div\",{className:\"doc-tablewrapper\"},/*#__PURE__*/React.createElement(\"table\",{className:\"doc-table\"},/*#__PURE__*/React.createElement(\"thead\",null,/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"th\",null,\"Name\"),/*#__PURE__*/React.createElement(\"th\",null,\"Element\"))),/*#__PURE__*/React.createElement(\"tbody\",null,/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"td\",null,\"p-checkbox\"),/*#__PURE__*/React.createElement(\"td\",null,\"Container element\")),/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"td\",null,\"p-checkbox-box\"),/*#__PURE__*/React.createElement(\"td\",null,\"Container of icon.\")),/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"td\",null,\"p-checkbox-icon\"),/*#__PURE__*/React.createElement(\"td\",null,\"Icon element.\")),/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"td\",null,\"p-checkbox-label\"),/*#__PURE__*/React.createElement(\"td\",null,\"Label element and it is an external CSS class.\"))))),/*#__PURE__*/React.createElement(\"h5\",null,\"Dependencies\"),/*#__PURE__*/React.createElement(\"p\",null,\"None.\")),useLiveEditorTabs({name:'CheckboxDemo',sources:this.sources})));}}]);return CheckboxDoc;}(Component);","map":{"version":3,"sources":["C:/Users/zura.ph/WebstormProjects/slotmaster-dashboard/src/showcase/checkbox/CheckboxDoc.js"],"names":["React","Component","Link","TabView","TabPanel","CodeHighlight","useLiveEditorTabs","CheckboxDoc","props","sources","tabName","content","name"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { TabView, TabPanel } from '../../components/tabview/TabView';\r\nimport { CodeHighlight } from '../codehighlight/CodeHighlight';\r\nimport { useLiveEditorTabs }from '../liveeditor/LiveEditor';\r\n\r\nexport class CheckboxDoc extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.sources = {\r\n            'class': {\r\n                tabName: 'Class Source',\r\n                content: `\r\nimport React, { Component } from 'react';\r\nimport { Checkbox } from 'primereact/checkbox';\r\n\r\nexport class CheckboxDemo extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.categories = [{name: 'Accounting', key: 'A'}, {name: 'Marketing', key: 'M'}, {name: 'Production', key: 'P'}, {name: 'Research', key: 'R'}];\r\n\r\n        this.state = {\r\n            checked: false,\r\n            cities: [],\r\n            selectedCategories: this.categories.slice(1,3)\r\n        };\r\n\r\n        this.onCityChange = this.onCityChange.bind(this);\r\n        this.onCategoryChange = this.onCategoryChange.bind(this);\r\n    }\r\n\r\n    onCategoryChange(e) {\r\n        let selectedCategories = [...this.state.selectedCategories];\r\n\r\n        if (e.checked) {\r\n            selectedCategories.push(e.value);\r\n        }\r\n        else {\r\n            for (let i = 0; i < selectedCategories.length; i++) {\r\n                const selectedCategory = selectedCategories[i];\r\n\r\n                if (selectedCategory.key === e.value.key) {\r\n                    selectedCategories.splice(i, 1);\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        this.setState({ selectedCategories });\r\n    }\r\n\r\n\r\n    onCityChange(e) {\r\n        let selectedCities = [...this.state.cities];\r\n\r\n        if (e.checked)\r\n            selectedCities.push(e.value);\r\n        else\r\n            selectedCities.splice(selectedCities.indexOf(e.value), 1);\r\n\r\n        this.setState({ cities: selectedCities });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div className=\"card\">\r\n                    <h5>Basic</h5>\r\n                    <div className=\"p-field-checkbox\">\r\n                        <Checkbox inputId=\"binary\" checked={this.state.checked} onChange={e => this.setState({ checked: e.checked })} />\r\n                        <label htmlFor=\"binary\">{this.state.checked ? 'true' : 'false'}</label>\r\n                    </div>\r\n\r\n                    <h5>Multiple</h5>\r\n                    <div className=\"p-field-checkbox\">\r\n                        <Checkbox inputId=\"city1\" name=\"city\" value=\"Chicago\" onChange={this.onCityChange} checked={this.state.cities.indexOf('Chicago') !== -1} />\r\n                        <label htmlFor=\"city1\">Chicago</label>\r\n                    </div>\r\n                    <div className=\"p-field-checkbox\">\r\n                        <Checkbox inputId=\"city2\" name=\"city\" value=\"Los Angeles\" onChange={this.onCityChange} checked={this.state.cities.indexOf('Los Angeles') !== -1} />\r\n                        <label htmlFor=\"city2\">Los Angeles</label>\r\n                    </div>\r\n                    <div className=\"p-field-checkbox\">\r\n                        <Checkbox inputId=\"city3\" name=\"city\" value=\"New York\" onChange={this.onCityChange} checked={this.state.cities.indexOf('New York') !== -1} />\r\n                        <label htmlFor=\"city3\">New York</label>\r\n                    </div>\r\n                    <div className=\"p-field-checkbox\">\r\n                        <Checkbox inputId=\"city4\" name=\"city\" value=\"San Francisco\" onChange={this.onCityChange} checked={this.state.cities.indexOf('San Francisco') !== -1} />\r\n                        <label htmlFor=\"city4\">San Francisco</label>\r\n                    </div>\r\n\r\n                    <h5>Dynamic Values, Preselection, Value Binding and Disabled Option</h5>\r\n                    {\r\n                        this.categories.map((category) => {\r\n                            return (\r\n                                <div key={category.key} className=\"p-field-checkbox\">\r\n                                    <Checkbox inputId={category.key} name=\"category\" value={category} onChange={this.onCategoryChange} checked={this.state.selectedCategories.some((item) => item.key === category.key)} disabled={category.key === 'R'} />\r\n                                    <label htmlFor={category.key}>{category.name}</label>\r\n                                </div>\r\n                            )\r\n                        })\r\n                    }\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n                `\r\n            },\r\n            'hooks': {\r\n                tabName: 'Hooks Source',\r\n                content: `\r\nimport React, { useState } from 'react';\r\nimport { Checkbox } from 'primereact/checkbox';\r\n\r\nconst CheckboxDemo = () => {\r\n    const categories = [{name: 'Accounting', key: 'A'}, {name: 'Marketing', key: 'M'}, {name: 'Production', key: 'P'}, {name: 'Research', key: 'R'}];\r\n    const [checked, setChecked] = useState(false);\r\n    const [cities, setCities] = useState([]);\r\n    const [selectedCategories, setSelectedCategories] = useState(categories.slice(1,3));\r\n\r\n    const onCategoryChange = (e) => {\r\n        let _selectedCategories = [...selectedCategories];\r\n\r\n        if (e.checked) {\r\n            _selectedCategories.push(e.value);\r\n        }\r\n        else {\r\n            for (let i = 0; i < _selectedCategories.length; i++) {\r\n                const selectedCategory = _selectedCategories[i];\r\n\r\n                if (selectedCategory.key === e.value.key) {\r\n                    _selectedCategories.splice(i, 1);\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        setSelectedCategories(_selectedCategories);\r\n    }\r\n\r\n\r\n    const onCityChange = (e) => {\r\n        let selectedCities = [...cities];\r\n\r\n        if (e.checked)\r\n            selectedCities.push(e.value);\r\n        else\r\n            selectedCities.splice(selectedCities.indexOf(e.value), 1);\r\n\r\n        setCities(selectedCities);\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"card\">\r\n                <h5>Basic</h5>\r\n                <div className=\"p-field-checkbox\">\r\n                    <Checkbox inputId=\"binary\" checked={checked} onChange={e => setChecked(e.checked)} />\r\n                    <label htmlFor=\"binary\">{checked ? 'true' : 'false'}</label>\r\n                </div>\r\n\r\n                <h5>Multiple</h5>\r\n                <div className=\"p-field-checkbox\">\r\n                    <Checkbox inputId=\"city1\" name=\"city\" value=\"Chicago\" onChange={onCityChange} checked={cities.indexOf('Chicago') !== -1} />\r\n                    <label htmlFor=\"city1\">Chicago</label>\r\n                </div>\r\n                <div className=\"p-field-checkbox\">\r\n                    <Checkbox inputId=\"city2\" name=\"city\" value=\"Los Angeles\" onChange={onCityChange} checked={cities.indexOf('Los Angeles') !== -1} />\r\n                    <label htmlFor=\"city2\">Los Angeles</label>\r\n                </div>\r\n                <div className=\"p-field-checkbox\">\r\n                    <Checkbox inputId=\"city3\" name=\"city\" value=\"New York\" onChange={onCityChange} checked={cities.indexOf('New York') !== -1} />\r\n                    <label htmlFor=\"city3\">New York</label>\r\n                </div>\r\n                <div className=\"p-field-checkbox\">\r\n                    <Checkbox inputId=\"city4\" name=\"city\" value=\"San Francisco\" onChange={onCityChange} checked={cities.indexOf('San Francisco') !== -1} />\r\n                    <label htmlFor=\"city4\">San Francisco</label>\r\n                </div>\r\n\r\n                <h5>Dynamic Values, Preselection, Value Binding and Disabled Option</h5>\r\n                {\r\n                    categories.map((category) => {\r\n                        return (\r\n                            <div key={category.key} className=\"p-field-checkbox\">\r\n                                <Checkbox inputId={category.key} name=\"category\" value={category} onChange={onCategoryChange} checked={selectedCategories.some((item) => item.key === category.key)} disabled={category.key === 'R'} />\r\n                                <label htmlFor={category.key}>{category.name}</label>\r\n                            </div>\r\n                        )\r\n                    })\r\n                }\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n                `\r\n            },\r\n            'ts': {\r\n                tabName: 'TS Source',\r\n                content: `\r\nimport React, { useState } from 'react';\r\nimport { Checkbox } from 'primereact/checkbox';\r\n\r\nconst CheckboxDemo = () => {\r\n    const categories = [{name: 'Accounting', key: 'A'}, {name: 'Marketing', key: 'M'}, {name: 'Production', key: 'P'}, {name: 'Research', key: 'R'}];\r\n    const [checked, setChecked] = useState<boolean>(false);\r\n    const [cities, setCities] = useState<any>([]);\r\n    const [selectedCategories, setSelectedCategories] = useState<any>(categories.slice(1,3));\r\n\r\n    const onCategoryChange = (e: { value: any, checked: boolean }) => {\r\n        let _selectedCategories = [...selectedCategories];\r\n\r\n        if (e.checked) {\r\n            _selectedCategories.push(e.value);\r\n        }\r\n        else {\r\n            for (let i = 0; i < _selectedCategories.length; i++) {\r\n                const selectedCategory = _selectedCategories[i];\r\n\r\n                if (selectedCategory.key === e.value.key) {\r\n                    _selectedCategories.splice(i, 1);\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        setSelectedCategories(_selectedCategories);\r\n    }\r\n\r\n\r\n    const onCityChange = (e: { value: any, checked: boolean }) => {\r\n        let selectedCities = [...cities];\r\n\r\n        if (e.checked)\r\n            selectedCities.push(e.value);\r\n        else\r\n            selectedCities.splice(selectedCities.indexOf(e.value), 1);\r\n\r\n        setCities(selectedCities);\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"card\">\r\n                <h5>Basic</h5>\r\n                <div className=\"p-field-checkbox\">\r\n                    <Checkbox inputId=\"binary\" checked={checked} onChange={e => setChecked(e.checked)} />\r\n                    <label htmlFor=\"binary\">{checked ? 'true' : 'false'}</label>\r\n                </div>\r\n\r\n                <h5>Multiple</h5>\r\n                <div className=\"p-field-checkbox\">\r\n                    <Checkbox inputId=\"city1\" name=\"city\" value=\"Chicago\" onChange={onCityChange} checked={cities.indexOf('Chicago') !== -1} />\r\n                    <label htmlFor=\"city1\">Chicago</label>\r\n                </div>\r\n                <div className=\"p-field-checkbox\">\r\n                    <Checkbox inputId=\"city2\" name=\"city\" value=\"Los Angeles\" onChange={onCityChange} checked={cities.indexOf('Los Angeles') !== -1} />\r\n                    <label htmlFor=\"city2\">Los Angeles</label>\r\n                </div>\r\n                <div className=\"p-field-checkbox\">\r\n                    <Checkbox inputId=\"city3\" name=\"city\" value=\"New York\" onChange={onCityChange} checked={cities.indexOf('New York') !== -1} />\r\n                    <label htmlFor=\"city3\">New York</label>\r\n                </div>\r\n                <div className=\"p-field-checkbox\">\r\n                    <Checkbox inputId=\"city4\" name=\"city\" value=\"San Francisco\" onChange={onCityChange} checked={cities.indexOf('San Francisco') !== -1} />\r\n                    <label htmlFor=\"city4\">San Francisco</label>\r\n                </div>\r\n\r\n                <h5>Dynamic Values, Preselection, Value Binding and Disabled Option</h5>\r\n                {\r\n                    categories.map((category) => {\r\n                        return (\r\n                            <div key={category.key} className=\"p-field-checkbox\">\r\n                                <Checkbox inputId={category.key} name=\"category\" value={category} onChange={onCategoryChange} checked={selectedCategories.some((item) => item.key === category.key)} disabled={category.key === 'R'} />\r\n                                <label htmlFor={category.key}>{category.name}</label>\r\n                            </div>\r\n                        )\r\n                    })\r\n                }\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n                `\r\n            }\r\n        }\r\n    }\r\n\r\n    shouldComponentUpdate() {\r\n        return false;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"content-section documentation\">\r\n                <TabView>\r\n                    <TabPanel header=\"Documentation\">\r\n                        <h5>Import</h5>\r\n<CodeHighlight lang=\"js\">\r\n{`\r\nimport {Checkbox} from 'primereact/checkbox';\r\n`}\r\n</CodeHighlight>\r\n\r\n                        <h5>Getting Started</h5>\r\n                        <p>Checkbox is used as a controlled input with <i>checked</i> and <i>onChange</i> properties.</p>\r\n<CodeHighlight>\r\n{`\r\n<Checkbox onChange={e => setChecked(e.checked)} checked={checked}></Checkbox>\r\n`}\r\n</CodeHighlight>\r\n\r\n                        <h5>Multiple Values</h5>\r\n                        <p>Multiple checkboxes can be grouped using a list of values.</p>\r\n<CodeHighlight>\r\n{`\r\n<div className=\"p-col-12\">\r\n    <Checkbox inputId=\"cb1\" value=\"New York\" onChange={onCityChange} checked={cities.includes('New York')}></Checkbox>\r\n    <label htmlFor=\"cb1\" className=\"p-checkbox-label\">New York</label>\r\n</div>\r\n<div className=\"p-col-12\">\r\n    <Checkbox inputId=\"cb2\" value=\"San Francisco\" onChange={onCityChange} checked={cities.includes('San Francisco')}></Checkbox>\r\n    <label htmlFor=\"cb2\" className=\"p-checkbox-label\">San Francisco</label>\r\n</div>\r\n<div className=\"p-col-12\">\r\n    <Checkbox inputId=\"cb3\" value=\"Los Angeles\" onChange={onCityChange} checked={cities.includes('Los Angeles')}></Checkbox>\r\n    <label htmlFor=\"cb3\" className=\"p-checkbox-label\">Los Angeles</label>\r\n</div>\r\n`}\r\n</CodeHighlight>\r\n\r\n<CodeHighlight lang=\"js\">\r\n{`\r\nconst [cities, setCities] = useState([]);\r\n\r\nconst onCityChange = (e) => {\r\n    let selectedCities = [...cities];\r\n    if(e.checked)\r\n        selectedCities.push(e.value);\r\n    else\r\n        selectedCities.splice(selectedCities.indexOf(e.value), 1);\r\n\r\n    setCities(selectedCities);\r\n}\r\n`}\r\n</CodeHighlight>\r\n\r\n                        <h5>Properties</h5>\r\n                        <div className=\"doc-tablewrapper\">\r\n                            <table className=\"doc-table\">\r\n                                <thead>\r\n                                    <tr>\r\n                                        <th>Name</th>\r\n                                        <th>Type</th>\r\n                                        <th>Default</th>\r\n                                        <th>Description</th>\r\n                                    </tr>\r\n                                </thead>\r\n                                <tbody>\r\n                                    <tr>\r\n                                        <td>id</td>\r\n                                        <td>string</td>\r\n                                        <td>null</td>\r\n                                        <td>Unique identifier of the element.</td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>inputId</td>\r\n                                        <td>string</td>\r\n                                        <td>null</td>\r\n                                        <td>Unique identifier of the inner native radiobutton.</td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>value</td>\r\n                                        <td>any</td>\r\n                                        <td>null</td>\r\n                                        <td>Value of the checkbox.</td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>name</td>\r\n                                        <td>string</td>\r\n                                        <td>null</td>\r\n                                        <td>Name of the checkbox element .</td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>checked</td>\r\n                                        <td>boolean</td>\r\n                                        <td>false</td>\r\n                                        <td>Specifies whether a checkbox should be checked or not.</td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>style</td>\r\n                                        <td>string</td>\r\n                                        <td>null</td>\r\n                                        <td>Inline style of the element.</td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>className</td>\r\n                                        <td>string</td>\r\n                                        <td>null</td>\r\n                                        <td>Style class of the element.</td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>disabled</td>\r\n                                        <td>boolean</td>\r\n                                        <td>false</td>\r\n                                        <td>When present, it specifies that the element value cannot be altered.</td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>required</td>\r\n                                        <td>boolean</td>\r\n                                        <td>false</td>\r\n                                        <td>When present, it specifies that an input field must be filled out before submitting the form.</td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>readOnly</td>\r\n                                        <td>boolean</td>\r\n                                        <td>false</td>\r\n                                        <td>When present, it specifies that the element cannot be typed.</td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>tabIndex</td>\r\n                                        <td>number</td>\r\n                                        <td>null</td>\r\n                                        <td>Index of the element in tabbing order.</td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>tooltip</td>\r\n                                        <td>any</td>\r\n                                        <td>null</td>\r\n                                        <td>Content of the tooltip.</td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>tooltipOptions</td>\r\n                                        <td>object</td>\r\n                                        <td>null</td>\r\n                                        <td>Configuration of the tooltip, refer to the tooltip documentation for more information.</td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>ariaLabelledBy</td>\r\n                                        <td>string</td>\r\n                                        <td>null</td>\r\n                                        <td>Establishes relationships between the component and label(s) where its value should be one or more element IDs.</td>\r\n                                    </tr>\r\n                                </tbody>\r\n                            </table>\r\n                        </div>\r\n\r\n                        <h5>Events</h5>\r\n                        <div className=\"doc-tablewrapper\">\r\n                            <table className=\"doc-table\">\r\n                                <thead>\r\n                                    <tr>\r\n                                        <th>Name</th>\r\n                                        <th>Parameters</th>\r\n                                        <th>Description</th>\r\n                                    </tr>\r\n                                </thead>\r\n                                <tbody>\r\n                                    <tr>\r\n                                        <td>onChange</td>\r\n                                        <td>event.originalEvent: Original event <br />\r\n                                        event.value: Value of the checkbox <br />\r\n                                        event.checked: Checked state as a boolean.</td>\r\n                                        <td>Callback to invoke on value change</td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>onMouseDown</td>\r\n                                        <td>event: Browser event</td>\r\n                                        <td>Callback to invoke to when a mouse button is pressed.</td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>onContextMenu</td>\r\n                                        <td>event: Browser event</td>\r\n                                        <td>Callback to invoke on right-click.</td>\r\n                                    </tr>\r\n                                </tbody>\r\n                            </table>\r\n                        </div>\r\n\r\n                        <h5>Styling</h5>\r\n                        <p>Following is the list of structural style classes, for theming classes visit <Link to=\"/theming\">theming</Link> page.</p>\r\n                        <div className=\"doc-tablewrapper\">\r\n                            <table className=\"doc-table\">\r\n                                <thead>\r\n                                    <tr>\r\n                                        <th>Name</th>\r\n                                        <th>Element</th>\r\n                                    </tr>\r\n                                </thead>\r\n                                <tbody>\r\n                                    <tr>\r\n                                        <td>p-checkbox</td>\r\n                                        <td>Container element</td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>p-checkbox-box</td>\r\n                                        <td>Container of icon.</td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>p-checkbox-icon</td>\r\n                                        <td>Icon element.</td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>p-checkbox-label</td>\r\n                                        <td>Label element and it is an external CSS class.</td>\r\n                                    </tr>\r\n                                </tbody>\r\n                            </table>\r\n                        </div>\r\n\r\n                        <h5>Dependencies</h5>\r\n                        <p>None.</p>\r\n                    </TabPanel>\r\n\r\n                    {\r\n                        useLiveEditorTabs({ name: 'CheckboxDemo', sources: this.sources })\r\n                    }\r\n                </TabView>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}