{"ast":null,"code":"import _classCallCheck from\"C:\\\\Users\\\\zura.ph\\\\WebstormProjects\\\\zz-regul\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";import _createClass from\"C:\\\\Users\\\\zura.ph\\\\WebstormProjects\\\\zz-regul\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";import _inherits from\"C:\\\\Users\\\\zura.ph\\\\WebstormProjects\\\\zz-regul\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";import _createSuper from\"C:\\\\Users\\\\zura.ph\\\\WebstormProjects\\\\zz-regul\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createSuper\";import React,{Component}from'react';import{TreeTable}from'../../components/treetable/TreeTable';import{Column}from'../../components/column/Column';import{TabView}from'../../components/tabview/TabView';import{useLiveEditorTabs}from'../liveeditor/LiveEditor';import{AppInlineHeader}from'../../AppInlineHeader';export var TreeTablePageDemo=/*#__PURE__*/function(_Component){_inherits(TreeTablePageDemo,_Component);var _super=_createSuper(TreeTablePageDemo);function TreeTablePageDemo(props){var _this;_classCallCheck(this,TreeTablePageDemo);_this=_super.call(this,props);_this.state={nodes:[]};return _this;}_createClass(TreeTablePageDemo,[{key:\"componentDidMount\",value:function componentDidMount(){var files=[];for(var i=0;i<50;i++){var node={key:i,data:{name:'Item '+i,size:Math.floor(Math.random()*1000)+1+'kb',type:'Type '+i},children:[{key:i+' - 0',data:{name:'Item '+i+' - 0',size:Math.floor(Math.random()*1000)+1+'kb',type:'Type '+i}}]};files.push(node);}this.setState({nodes:files});}},{key:\"render\",value:function render(){return/*#__PURE__*/React.createElement(\"div\",null,/*#__PURE__*/React.createElement(\"div\",{className:\"content-section introduction\"},/*#__PURE__*/React.createElement(AppInlineHeader,{changelogText:\"treeTable\"},/*#__PURE__*/React.createElement(\"h1\",null,\"TreeTable \",/*#__PURE__*/React.createElement(\"span\",null,\"Page\")),/*#__PURE__*/React.createElement(\"p\",null,\"Pagination is enabled by setting paginator property to true and defining a rows property to specify the number of rows per page.\"))),/*#__PURE__*/React.createElement(\"div\",{className:\"content-section implementation\"},/*#__PURE__*/React.createElement(\"div\",{className:\"card\"},/*#__PURE__*/React.createElement(TreeTable,{value:this.state.nodes,paginator:true,rows:10},/*#__PURE__*/React.createElement(Column,{field:\"name\",header:\"Name\",expander:true}),/*#__PURE__*/React.createElement(Column,{field:\"size\",header:\"Size\"}),/*#__PURE__*/React.createElement(Column,{field:\"type\",header:\"Type\"})))),/*#__PURE__*/React.createElement(TreeTablePageDemoDoc,null));}}]);return TreeTablePageDemo;}(Component);var TreeTablePageDemoDoc=/*#__PURE__*/function(_Component2){_inherits(TreeTablePageDemoDoc,_Component2);var _super2=_createSuper(TreeTablePageDemoDoc);function TreeTablePageDemoDoc(props){var _this2;_classCallCheck(this,TreeTablePageDemoDoc);_this2=_super2.call(this,props);_this2.sources={'class':{tabName:'Class Source',content:\"\\nimport React, { Component } from 'react';\\nimport { TreeTable } from 'primereact/treetable';\\nimport { Column } from 'primereact/column';\\n\\nexport class TreeTablePageDemo extends Component {\\n\\n    constructor(props) {\\n        super(props);\\n        this.state = {\\n            nodes: []\\n        };\\n    }\\n\\n    componentDidMount() {\\n        let files = [];\\n        for (let i = 0; i < 50; i++) {\\n            let node = {\\n                key: i,\\n                data: {\\n                    name: 'Item ' + i,\\n                    size: Math.floor(Math.random() * 1000) + 1 + 'kb',\\n                    type: 'Type ' + i\\n                },\\n                children: [\\n                    {\\n                        key: i + ' - 0',\\n                        data: {\\n                            name: 'Item ' + i + ' - 0',\\n                            size: Math.floor(Math.random() * 1000) + 1 + 'kb',\\n                            type: 'Type ' + i\\n                        }\\n                    }\\n                ]\\n            };\\n\\n            files.push(node);\\n        }\\n\\n        this.setState({\\n            nodes: files\\n        });\\n    }\\n\\n    render() {\\n        return (\\n            <div>\\n                <div className=\\\"card\\\">\\n                    <TreeTable value={this.state.nodes} paginator rows={10}>\\n                        <Column field=\\\"name\\\" header=\\\"Name\\\" expander></Column>\\n                        <Column field=\\\"size\\\" header=\\\"Size\\\"></Column>\\n                        <Column field=\\\"type\\\" header=\\\"Type\\\"></Column>\\n                    </TreeTable>\\n                </div>\\n            </div>\\n        )\\n    }\\n}\\n                \"},'hooks':{tabName:'Hooks Source',content:\"\\nimport React, { useState, useEffect } from 'react';\\nimport { TreeTable } from 'primereact/treetable';\\nimport { Column } from 'primereact/column';\\n\\nconst TreeTablePageDemo = () => {\\n    const [nodes, setNodes] = useState([]);\\n\\n    useEffect(() => {\\n        let files = [];\\n        for (let i = 0; i < 50; i++) {\\n            let node = {\\n                key: i,\\n                data: {\\n                    name: 'Item ' + i,\\n                    size: Math.floor(Math.random() * 1000) + 1 + 'kb',\\n                    type: 'Type ' + i\\n                },\\n                children: [\\n                    {\\n                        key: i + ' - 0',\\n                        data: {\\n                            name: 'Item ' + i + ' - 0',\\n                            size: Math.floor(Math.random() * 1000) + 1 + 'kb',\\n                            type: 'Type ' + i\\n                        }\\n                    }\\n                ]\\n            };\\n\\n            files.push(node);\\n        }\\n\\n        setNodes(files);\\n    }, []); // eslint-disable-line react-hooks/exhaustive-deps\\n\\n    return (\\n        <div>\\n            <div className=\\\"card\\\">\\n                <TreeTable value={nodes} paginator rows={10}>\\n                    <Column field=\\\"name\\\" header=\\\"Name\\\" expander></Column>\\n                    <Column field=\\\"size\\\" header=\\\"Size\\\"></Column>\\n                    <Column field=\\\"type\\\" header=\\\"Type\\\"></Column>\\n                </TreeTable>\\n            </div>\\n        </div>\\n    );\\n}\\n                \"},'ts':{tabName:'TS Source',content:\"\\nimport React, { useState, useEffect } from 'react';\\nimport { TreeTable } from 'primereact/treetable';\\nimport { Column } from 'primereact/column';\\n\\nconst TreeTablePageDemo = () => {\\n    const [nodes, setNodes] = useState([]);\\n\\n    useEffect(() => {\\n        let files = [];\\n        for (let i = 0; i < 50; i++) {\\n            let node = {\\n                key: i,\\n                data: {\\n                    name: 'Item ' + i,\\n                    size: Math.floor(Math.random() * 1000) + 1 + 'kb',\\n                    type: 'Type ' + i\\n                },\\n                children: [\\n                    {\\n                        key: i + ' - 0',\\n                        data: {\\n                            name: 'Item ' + i + ' - 0',\\n                            size: Math.floor(Math.random() * 1000) + 1 + 'kb',\\n                            type: 'Type ' + i\\n                        }\\n                    }\\n                ]\\n            };\\n\\n            files.push(node);\\n        }\\n\\n        setNodes(files);\\n    }, []); // eslint-disable-line react-hooks/exhaustive-deps\\n\\n    return (\\n        <div>\\n            <div className=\\\"card\\\">\\n                <TreeTable value={nodes} paginator rows={10}>\\n                    <Column field=\\\"name\\\" header=\\\"Name\\\" expander></Column>\\n                    <Column field=\\\"size\\\" header=\\\"Size\\\"></Column>\\n                    <Column field=\\\"type\\\" header=\\\"Type\\\"></Column>\\n                </TreeTable>\\n            </div>\\n        </div>\\n    );\\n}\\n                \"}};return _this2;}_createClass(TreeTablePageDemoDoc,[{key:\"shouldComponentUpdate\",value:function shouldComponentUpdate(){return false;}},{key:\"render\",value:function render(){return/*#__PURE__*/React.createElement(\"div\",{className:\"content-section documentation\"},/*#__PURE__*/React.createElement(TabView,null,useLiveEditorTabs({name:'TreeTablePageDemo',sources:this.sources})));}}]);return TreeTablePageDemoDoc;}(Component);","map":{"version":3,"sources":["C:/Users/zura.ph/WebstormProjects/zz-regul/src/showcase/treetable/TreeTablePageDemo.js"],"names":["React","Component","TreeTable","Column","TabView","useLiveEditorTabs","AppInlineHeader","TreeTablePageDemo","props","state","nodes","files","i","node","key","data","name","size","Math","floor","random","type","children","push","setState","TreeTablePageDemoDoc","sources","tabName","content"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { TreeTable } from '../../components/treetable/TreeTable';\r\nimport { Column } from '../../components/column/Column';\r\nimport { TabView } from '../../components/tabview/TabView';\r\nimport { useLiveEditorTabs }from '../liveeditor/LiveEditor';\r\nimport { AppInlineHeader } from '../../AppInlineHeader';\r\n\r\nexport class TreeTablePageDemo extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            nodes: []\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        let files = [];\r\n        for (let i = 0; i < 50; i++) {\r\n            let node = {\r\n                key: i,\r\n                data: {\r\n                    name: 'Item ' + i,\r\n                    size: Math.floor(Math.random() * 1000) + 1 + 'kb',\r\n                    type: 'Type ' + i\r\n                },\r\n                children: [\r\n                    {\r\n                        key: i + ' - 0',\r\n                        data: {\r\n                            name: 'Item ' + i + ' - 0',\r\n                            size: Math.floor(Math.random() * 1000) + 1 + 'kb',\r\n                            type: 'Type ' + i\r\n                        }\r\n                    }\r\n                ]\r\n            };\r\n\r\n            files.push(node);\r\n        }\r\n\r\n        this.setState({\r\n            nodes: files\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div className=\"content-section introduction\">\r\n                    <AppInlineHeader changelogText=\"treeTable\">\r\n                        <h1>TreeTable <span>Page</span></h1>\r\n                        <p>Pagination is enabled by setting paginator property to true and defining a rows property to specify the number of rows per page.</p>\r\n                    </AppInlineHeader>\r\n                </div>\r\n\r\n                <div className=\"content-section implementation\">\r\n                    <div className=\"card\">\r\n                        <TreeTable value={this.state.nodes} paginator rows={10}>\r\n                            <Column field=\"name\" header=\"Name\" expander></Column>\r\n                            <Column field=\"size\" header=\"Size\"></Column>\r\n                            <Column field=\"type\" header=\"Type\"></Column>\r\n                        </TreeTable>\r\n                    </div>\r\n                </div>\r\n\r\n                <TreeTablePageDemoDoc />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nclass TreeTablePageDemoDoc extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.sources = {\r\n            'class': {\r\n                tabName: 'Class Source',\r\n                content: `\r\nimport React, { Component } from 'react';\r\nimport { TreeTable } from 'primereact/treetable';\r\nimport { Column } from 'primereact/column';\r\n\r\nexport class TreeTablePageDemo extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            nodes: []\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        let files = [];\r\n        for (let i = 0; i < 50; i++) {\r\n            let node = {\r\n                key: i,\r\n                data: {\r\n                    name: 'Item ' + i,\r\n                    size: Math.floor(Math.random() * 1000) + 1 + 'kb',\r\n                    type: 'Type ' + i\r\n                },\r\n                children: [\r\n                    {\r\n                        key: i + ' - 0',\r\n                        data: {\r\n                            name: 'Item ' + i + ' - 0',\r\n                            size: Math.floor(Math.random() * 1000) + 1 + 'kb',\r\n                            type: 'Type ' + i\r\n                        }\r\n                    }\r\n                ]\r\n            };\r\n\r\n            files.push(node);\r\n        }\r\n\r\n        this.setState({\r\n            nodes: files\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div className=\"card\">\r\n                    <TreeTable value={this.state.nodes} paginator rows={10}>\r\n                        <Column field=\"name\" header=\"Name\" expander></Column>\r\n                        <Column field=\"size\" header=\"Size\"></Column>\r\n                        <Column field=\"type\" header=\"Type\"></Column>\r\n                    </TreeTable>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n                `\r\n            },\r\n            'hooks': {\r\n                tabName: 'Hooks Source',\r\n                content: `\r\nimport React, { useState, useEffect } from 'react';\r\nimport { TreeTable } from 'primereact/treetable';\r\nimport { Column } from 'primereact/column';\r\n\r\nconst TreeTablePageDemo = () => {\r\n    const [nodes, setNodes] = useState([]);\r\n\r\n    useEffect(() => {\r\n        let files = [];\r\n        for (let i = 0; i < 50; i++) {\r\n            let node = {\r\n                key: i,\r\n                data: {\r\n                    name: 'Item ' + i,\r\n                    size: Math.floor(Math.random() * 1000) + 1 + 'kb',\r\n                    type: 'Type ' + i\r\n                },\r\n                children: [\r\n                    {\r\n                        key: i + ' - 0',\r\n                        data: {\r\n                            name: 'Item ' + i + ' - 0',\r\n                            size: Math.floor(Math.random() * 1000) + 1 + 'kb',\r\n                            type: 'Type ' + i\r\n                        }\r\n                    }\r\n                ]\r\n            };\r\n\r\n            files.push(node);\r\n        }\r\n\r\n        setNodes(files);\r\n    }, []); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"card\">\r\n                <TreeTable value={nodes} paginator rows={10}>\r\n                    <Column field=\"name\" header=\"Name\" expander></Column>\r\n                    <Column field=\"size\" header=\"Size\"></Column>\r\n                    <Column field=\"type\" header=\"Type\"></Column>\r\n                </TreeTable>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n                `\r\n            },\r\n            'ts': {\r\n                tabName: 'TS Source',\r\n                content: `\r\nimport React, { useState, useEffect } from 'react';\r\nimport { TreeTable } from 'primereact/treetable';\r\nimport { Column } from 'primereact/column';\r\n\r\nconst TreeTablePageDemo = () => {\r\n    const [nodes, setNodes] = useState([]);\r\n\r\n    useEffect(() => {\r\n        let files = [];\r\n        for (let i = 0; i < 50; i++) {\r\n            let node = {\r\n                key: i,\r\n                data: {\r\n                    name: 'Item ' + i,\r\n                    size: Math.floor(Math.random() * 1000) + 1 + 'kb',\r\n                    type: 'Type ' + i\r\n                },\r\n                children: [\r\n                    {\r\n                        key: i + ' - 0',\r\n                        data: {\r\n                            name: 'Item ' + i + ' - 0',\r\n                            size: Math.floor(Math.random() * 1000) + 1 + 'kb',\r\n                            type: 'Type ' + i\r\n                        }\r\n                    }\r\n                ]\r\n            };\r\n\r\n            files.push(node);\r\n        }\r\n\r\n        setNodes(files);\r\n    }, []); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"card\">\r\n                <TreeTable value={nodes} paginator rows={10}>\r\n                    <Column field=\"name\" header=\"Name\" expander></Column>\r\n                    <Column field=\"size\" header=\"Size\"></Column>\r\n                    <Column field=\"type\" header=\"Type\"></Column>\r\n                </TreeTable>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n                `\r\n            }\r\n        }\r\n    }\r\n\r\n    shouldComponentUpdate() {\r\n        return false;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"content-section documentation\">\r\n                <TabView>\r\n                    {\r\n                        useLiveEditorTabs({ name: 'TreeTablePageDemo', sources: this.sources })\r\n                    }\r\n                </TabView>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}