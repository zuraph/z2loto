{"ast":null,"code":"import _createForOfIteratorHelper from \"C:\\\\Users\\\\zura.ph\\\\WebstormProjects\\\\zloto\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createForOfIteratorHelper\";\nimport _objectSpread from \"C:\\\\Users\\\\zura.ph\\\\WebstormProjects\\\\zloto\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\nimport _classCallCheck from \"C:\\\\Users\\\\zura.ph\\\\WebstormProjects\\\\zloto\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\zura.ph\\\\WebstormProjects\\\\zloto\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"C:\\\\Users\\\\zura.ph\\\\WebstormProjects\\\\zloto\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"C:\\\\Users\\\\zura.ph\\\\WebstormProjects\\\\zloto\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _createSuper from \"C:\\\\Users\\\\zura.ph\\\\WebstormProjects\\\\zloto\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"C:\\\\Users\\\\zura.ph\\\\WebstormProjects\\\\zloto\\\\src\\\\components\\\\treetable\\\\TreeTableRow.js\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { classNames } from '../utils/ClassNames';\nimport DomHandler from '../utils/DomHandler';\nimport { TreeTableBodyCell } from './TreeTableBodyCell';\nimport { Ripple } from '../ripple/Ripple';\nexport var TreeTableRow = /*#__PURE__*/function (_Component) {\n  _inherits(TreeTableRow, _Component);\n\n  var _super = _createSuper(TreeTableRow);\n\n  function TreeTableRow(props) {\n    var _this;\n\n    _classCallCheck(this, TreeTableRow);\n\n    _this = _super.call(this, props);\n    _this.onTogglerClick = _this.onTogglerClick.bind(_assertThisInitialized(_this));\n    _this.onClick = _this.onClick.bind(_assertThisInitialized(_this));\n    _this.onTouchEnd = _this.onTouchEnd.bind(_assertThisInitialized(_this));\n    _this.propagateUp = _this.propagateUp.bind(_assertThisInitialized(_this));\n    _this.onCheckboxChange = _this.onCheckboxChange.bind(_assertThisInitialized(_this));\n    _this.onCheckboxFocus = _this.onCheckboxFocus.bind(_assertThisInitialized(_this));\n    _this.onCheckboxBlur = _this.onCheckboxBlur.bind(_assertThisInitialized(_this));\n    _this.onRightClick = _this.onRightClick.bind(_assertThisInitialized(_this));\n    _this.onKeyDown = _this.onKeyDown.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(TreeTableRow, [{\n    key: \"isLeaf\",\n    value: function isLeaf() {\n      return this.props.node.leaf === false ? false : !(this.props.node.children && this.props.node.children.length);\n    }\n  }, {\n    key: \"onTogglerClick\",\n    value: function onTogglerClick(event) {\n      if (this.isExpanded()) this.collapse(event);else this.expand(event);\n      event.preventDefault();\n      event.stopPropagation();\n    }\n  }, {\n    key: \"expand\",\n    value: function expand(event) {\n      var expandedKeys = this.props.expandedKeys ? _objectSpread({}, this.props.expandedKeys) : {};\n      expandedKeys[this.props.node.key] = true;\n      this.props.onToggle({\n        originalEvent: event,\n        value: expandedKeys\n      });\n      this.invokeToggleEvents(event, true);\n    }\n  }, {\n    key: \"collapse\",\n    value: function collapse(event) {\n      var expandedKeys = _objectSpread({}, this.props.expandedKeys);\n\n      delete expandedKeys[this.props.node.key];\n      this.props.onToggle({\n        originalEvent: event,\n        value: expandedKeys\n      });\n      this.invokeToggleEvents(event, false);\n    }\n  }, {\n    key: \"invokeToggleEvents\",\n    value: function invokeToggleEvents(event, expanded) {\n      if (expanded) {\n        if (this.props.onExpand) {\n          this.props.onExpand({\n            originalEvent: event,\n            node: this.props.node\n          });\n        }\n      } else {\n        if (this.props.onCollapse) {\n          this.props.onCollapse({\n            originalEvent: event,\n            node: this.props.node\n          });\n        }\n      }\n    }\n  }, {\n    key: \"onClick\",\n    value: function onClick(event) {\n      if (this.props.onRowClick) {\n        this.props.onRowClick({\n          originalEvent: event,\n          node: this.props.node\n        });\n      }\n\n      var targetNode = event.target.nodeName;\n\n      if (targetNode === 'INPUT' || targetNode === 'BUTTON' || targetNode === 'A' || DomHandler.hasClass(event.target, 'p-clickable') || DomHandler.hasClass(event.target, 'p-treetable-toggler') || DomHandler.hasClass(event.target.parentElement, 'p-treetable-toggler')) {\n        return;\n      }\n\n      if ((this.isSingleSelectionMode() || this.isMultipleSelectionMode()) && this.props.node.selectable !== false) {\n        var selectionKeys;\n        var selected = this.isSelected();\n        var metaSelection = this.nodeTouched ? false : this.props.metaKeySelection;\n\n        if (metaSelection) {\n          var metaKey = event.metaKey || event.ctrlKey;\n\n          if (selected && metaKey) {\n            if (this.isSingleSelectionMode()) {\n              selectionKeys = null;\n            } else {\n              selectionKeys = _objectSpread({}, this.props.selectionKeys);\n              delete selectionKeys[this.props.node.key];\n            }\n\n            if (this.props.onUnselect) {\n              this.props.onUnselect({\n                originalEvent: event,\n                node: this.props.node\n              });\n            }\n          } else {\n            if (this.isSingleSelectionMode()) {\n              selectionKeys = this.props.node.key;\n            } else if (this.isMultipleSelectionMode()) {\n              selectionKeys = !metaKey ? {} : this.props.selectionKeys ? _objectSpread({}, this.props.selectionKeys) : {};\n              selectionKeys[this.props.node.key] = true;\n            }\n\n            if (this.props.onSelect) {\n              this.props.onSelect({\n                originalEvent: event,\n                node: this.props.node\n              });\n            }\n          }\n        } else {\n          if (this.isSingleSelectionMode()) {\n            if (selected) {\n              selectionKeys = null;\n\n              if (this.props.onUnselect) {\n                this.props.onUnselect({\n                  originalEvent: event,\n                  node: this.props.node\n                });\n              }\n            } else {\n              selectionKeys = this.props.node.key;\n\n              if (this.props.onSelect) {\n                this.props.onSelect({\n                  originalEvent: event,\n                  node: this.props.node\n                });\n              }\n            }\n          } else {\n            if (selected) {\n              selectionKeys = _objectSpread({}, this.props.selectionKeys);\n              delete selectionKeys[this.props.node.key];\n\n              if (this.props.onUnselect) {\n                this.props.onUnselect({\n                  originalEvent: event,\n                  node: this.props.node\n                });\n              }\n            } else {\n              selectionKeys = this.props.selectionKeys ? _objectSpread({}, this.props.selectionKeys) : {};\n              selectionKeys[this.props.node.key] = true;\n\n              if (this.props.onSelect) {\n                this.props.onSelect({\n                  originalEvent: event,\n                  node: this.props.node\n                });\n              }\n            }\n          }\n        }\n\n        if (this.props.onSelectionChange) {\n          this.props.onSelectionChange({\n            originalEvent: event,\n            value: selectionKeys\n          });\n        }\n      }\n\n      this.nodeTouched = false;\n    }\n  }, {\n    key: \"onTouchEnd\",\n    value: function onTouchEnd() {\n      this.nodeTouched = true;\n    }\n  }, {\n    key: \"onCheckboxChange\",\n    value: function onCheckboxChange(event) {\n      var checked = this.isChecked();\n      var selectionKeys = this.props.selectionKeys ? _objectSpread({}, this.props.selectionKeys) : {};\n\n      if (checked) {\n        if (this.props.propagateSelectionDown) this.propagateDown(this.props.node, false, selectionKeys);else delete selectionKeys[this.props.node.key];\n\n        if (this.props.propagateSelectionUp && this.props.onPropagateUp) {\n          this.props.onPropagateUp({\n            originalEvent: event,\n            check: false,\n            selectionKeys: selectionKeys\n          });\n        }\n\n        if (this.props.onUnselect) {\n          this.props.onUnselect({\n            originalEvent: event,\n            node: this.props.node\n          });\n        }\n      } else {\n        if (this.props.propagateSelectionDown) this.propagateDown(this.props.node, true, selectionKeys);else selectionKeys[this.props.node.key] = {\n          checked: true\n        };\n\n        if (this.props.propagateSelectionUp && this.props.onPropagateUp) {\n          this.props.onPropagateUp({\n            originalEvent: event,\n            check: true,\n            selectionKeys: selectionKeys\n          });\n        }\n\n        if (this.props.onSelect) {\n          this.props.onSelect({\n            originalEvent: event,\n            node: this.props.node\n          });\n        }\n      }\n\n      if (this.props.onSelectionChange) {\n        this.props.onSelectionChange({\n          originalEvent: event,\n          value: selectionKeys\n        });\n      }\n\n      DomHandler.clearSelection();\n    }\n  }, {\n    key: \"onCheckboxFocus\",\n    value: function onCheckboxFocus() {\n      DomHandler.addClass(this.checkboxBox, 'p-focus');\n    }\n  }, {\n    key: \"onCheckboxBlur\",\n    value: function onCheckboxBlur() {\n      DomHandler.removeClass(this.checkboxBox, 'p-focus');\n    }\n  }, {\n    key: \"propagateUp\",\n    value: function propagateUp(event) {\n      var check = event.check;\n      var selectionKeys = event.selectionKeys;\n      var checkedChildCount = 0;\n      var childPartialSelected = false;\n\n      var _iterator = _createForOfIteratorHelper(this.props.node.children),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var child = _step.value;\n          if (selectionKeys[child.key] && selectionKeys[child.key].checked) checkedChildCount++;else if (selectionKeys[child.key] && selectionKeys[child.key].partialChecked) childPartialSelected = true;\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      if (check && checkedChildCount === this.props.node.children.length) {\n        selectionKeys[this.props.node.key] = {\n          checked: true,\n          partialChecked: false\n        };\n      } else {\n        if (!check) {\n          delete selectionKeys[this.props.node.key];\n        }\n\n        if (childPartialSelected || checkedChildCount > 0 && checkedChildCount !== this.props.node.children.length) selectionKeys[this.props.node.key] = {\n          checked: false,\n          partialChecked: true\n        };else selectionKeys[this.props.node.key] = {\n          checked: false,\n          partialChecked: false\n        };\n      }\n\n      if (this.props.propagateSelectionUp && this.props.onPropagateUp) {\n        this.props.onPropagateUp(event);\n      }\n    }\n  }, {\n    key: \"propagateDown\",\n    value: function propagateDown(node, check, selectionKeys) {\n      if (check) selectionKeys[node.key] = {\n        checked: true,\n        partialChecked: false\n      };else delete selectionKeys[node.key];\n\n      if (node.children && node.children.length) {\n        for (var i = 0; i < node.children.length; i++) {\n          this.propagateDown(node.children[i], check, selectionKeys);\n        }\n      }\n    }\n  }, {\n    key: \"onRightClick\",\n    value: function onRightClick(event) {\n      DomHandler.clearSelection();\n\n      if (this.props.onContextMenuSelectionChange) {\n        this.props.onContextMenuSelectionChange({\n          originalEvent: event,\n          value: this.props.node.key\n        });\n      }\n\n      if (this.props.onContextMenu) {\n        this.props.onContextMenu({\n          originalEvent: event,\n          node: this.props.node\n        });\n      }\n    }\n  }, {\n    key: \"onKeyDown\",\n    value: function onKeyDown(event) {\n      if (event.target === this.container) {\n        var rowElement = event.currentTarget;\n\n        switch (event.which) {\n          //down arrow\n          case 40:\n            var nextRow = rowElement.nextElementSibling;\n\n            if (nextRow) {\n              nextRow.focus();\n            }\n\n            event.preventDefault();\n            break;\n          //up arrow\n\n          case 38:\n            var previousRow = rowElement.previousElementSibling;\n\n            if (previousRow) {\n              previousRow.focus();\n            }\n\n            event.preventDefault();\n            break;\n          //right arrow\n\n          case 39:\n            if (!this.isExpanded()) {\n              this.expand(event);\n            }\n\n            event.preventDefault();\n            break;\n          //left arrow\n\n          case 37:\n            if (this.isExpanded()) {\n              this.collapse(event);\n            }\n\n            event.preventDefault();\n            break;\n          //enter\n\n          case 13:\n            this.onClick(event);\n            event.preventDefault();\n            break;\n\n          default:\n            //no op\n            break;\n        }\n      }\n    }\n  }, {\n    key: \"isSingleSelectionMode\",\n    value: function isSingleSelectionMode() {\n      return this.props.selectionMode && this.props.selectionMode === 'single';\n    }\n  }, {\n    key: \"isMultipleSelectionMode\",\n    value: function isMultipleSelectionMode() {\n      return this.props.selectionMode && this.props.selectionMode === 'multiple';\n    }\n  }, {\n    key: \"isExpanded\",\n    value: function isExpanded() {\n      return this.props.expandedKeys ? this.props.expandedKeys[this.props.node.key] !== undefined : false;\n    }\n  }, {\n    key: \"isSelected\",\n    value: function isSelected() {\n      if ((this.props.selectionMode === 'single' || this.props.selectionMode === 'multiple') && this.props.selectionKeys) return this.props.selectionMode === 'single' ? this.props.selectionKeys === this.props.node.key : this.props.selectionKeys[this.props.node.key] !== undefined;else return false;\n    }\n  }, {\n    key: \"isChecked\",\n    value: function isChecked() {\n      return this.props.selectionKeys ? this.props.selectionKeys[this.props.node.key] && this.props.selectionKeys[this.props.node.key].checked : false;\n    }\n  }, {\n    key: \"isPartialChecked\",\n    value: function isPartialChecked() {\n      return this.props.selectionKeys ? this.props.selectionKeys[this.props.node.key] && this.props.selectionKeys[this.props.node.key].partialChecked : false;\n    }\n  }, {\n    key: \"renderToggler\",\n    value: function renderToggler() {\n      var expanded = this.isExpanded();\n      var iconClassName = classNames('\"p-treetable-toggler-icon pi pi-fw', {\n        'pi-chevron-right': !expanded,\n        'pi-chevron-down': expanded\n      });\n      var style = {\n        marginLeft: this.props.level * 16 + 'px',\n        visibility: this.props.node.leaf === false || this.props.node.children && this.props.node.children.length ? 'visible' : 'hidden'\n      };\n      return /*#__PURE__*/React.createElement(\"button\", {\n        type: \"button\",\n        className: \"p-treetable-toggler p-link p-unselectable-text\",\n        onClick: this.onTogglerClick,\n        tabIndex: -1,\n        style: style,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 465,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"i\", {\n        className: iconClassName,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 466,\n          columnNumber: 17\n        }\n      }), /*#__PURE__*/React.createElement(Ripple, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 467,\n          columnNumber: 17\n        }\n      }));\n    }\n  }, {\n    key: \"renderCheckbox\",\n    value: function renderCheckbox() {\n      var _this2 = this;\n\n      if (this.props.selectionMode === 'checkbox' && this.props.node.selectable !== false) {\n        var checked = this.isChecked();\n        var partialChecked = this.isPartialChecked();\n        var className = classNames('p-checkbox-box', {\n          'p-highlight': checked,\n          'p-indeterminate': partialChecked\n        });\n        var icon = classNames('p-checkbox-icon p-c', {\n          'pi pi-check': checked,\n          'pi pi-minus': partialChecked\n        });\n        return /*#__PURE__*/React.createElement(\"div\", {\n          className: \"p-checkbox p-treetable-checkbox p-component\",\n          onClick: this.onCheckboxChange,\n          role: \"checkbox\",\n          \"aria-checked\": checked,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 480,\n            columnNumber: 17\n          }\n        }, /*#__PURE__*/React.createElement(\"div\", {\n          className: \"p-hidden-accessible\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 481,\n            columnNumber: 21\n          }\n        }, /*#__PURE__*/React.createElement(\"input\", {\n          type: \"checkbox\",\n          onFocus: this.onCheckboxFocus,\n          onBlur: this.onCheckboxBlur,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 482,\n            columnNumber: 25\n          }\n        })), /*#__PURE__*/React.createElement(\"div\", {\n          className: className,\n          ref: function ref(el) {\n            return _this2.checkboxBox = el;\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 484,\n            columnNumber: 21\n          }\n        }, /*#__PURE__*/React.createElement(\"span\", {\n          className: icon,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 485,\n            columnNumber: 25\n          }\n        })));\n      } else {\n        return null;\n      }\n    }\n  }, {\n    key: \"renderCell\",\n    value: function renderCell(column) {\n      var toggler, checkbox;\n\n      if (column.props.expander) {\n        toggler = this.renderToggler();\n        checkbox = this.renderCheckbox();\n      }\n\n      return /*#__PURE__*/React.createElement(TreeTableBodyCell, Object.assign({\n        key: column.props.columnKey || column.props.field\n      }, column.props, {\n        node: this.props.node,\n        rowIndex: this.props.rowIndex,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 504,\n          columnNumber: 13\n        }\n      }), toggler, checkbox);\n    }\n  }, {\n    key: \"renderChildren\",\n    value: function renderChildren() {\n      var _this3 = this;\n\n      if (this.isExpanded() && this.props.node.children) {\n        return this.props.node.children.map(function (childNode, index) {\n          return /*#__PURE__*/React.createElement(TreeTableRow, {\n            key: childNode.key || JSON.stringify(childNode.data),\n            level: _this3.props.level + 1,\n            rowIndex: _this3.props.rowIndex + '_' + index,\n            node: childNode,\n            columns: _this3.props.columns,\n            expandedKeys: _this3.props.expandedKeys,\n            onToggle: _this3.props.onToggle,\n            onExpand: _this3.props.onExpand,\n            onCollapse: _this3.props.onCollapse,\n            selectionMode: _this3.props.selectionMode,\n            selectionKeys: _this3.props.selectionKeys,\n            onSelectionChange: _this3.props.onSelectionChange,\n            metaKeySelection: _this3.props.metaKeySelection,\n            onRowClick: _this3.props.onRowClick,\n            onSelect: _this3.props.onSelect,\n            onUnselect: _this3.props.onUnselect,\n            propagateSelectionUp: _this3.props.propagateSelectionUp,\n            propagateSelectionDown: _this3.props.propagateSelectionDown,\n            onPropagateUp: _this3.propagateUp,\n            rowClassName: _this3.props.rowClassName,\n            contextMenuSelectionKey: _this3.props.contextMenuSelectionKey,\n            onContextMenuSelectionChange: _this3.props.onContextMenuSelectionChange,\n            onContextMenu: _this3.props.onContextMenu,\n            __self: _this3,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 515,\n              columnNumber: 21\n            }\n          });\n        });\n      } else {\n        return null;\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this4 = this;\n\n      var cells = this.props.columns.map(function (col) {\n        return _this4.renderCell(col);\n      });\n      var children = this.renderChildren();\n      var className = {\n        'p-highlight': this.isSelected(),\n        'p-highlight-contextmenu': this.props.contextMenuSelectionKey && this.props.contextMenuSelectionKey === this.props.node.key\n      };\n\n      if (this.props.rowClassName) {\n        var rowClassName = this.props.rowClassName(this.props.node);\n        className = _objectSpread(_objectSpread({}, className), rowClassName);\n      }\n\n      className = classNames(className, this.props.node.className);\n      return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"tr\", {\n        ref: function ref(el) {\n          return _this4.container = el;\n        },\n        tabIndex: 0,\n        className: className,\n        style: this.props.node.style,\n        onClick: this.onClick,\n        onTouchEnd: this.onTouchEnd,\n        onContextMenu: this.onRightClick,\n        onKeyDown: this.onKeyDown,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 548,\n          columnNumber: 17\n        }\n      }, cells), children);\n    }\n  }]);\n\n  return TreeTableRow;\n}(Component);\nTreeTableRow.defaultProps = {\n  node: null,\n  level: null,\n  columns: null,\n  expandedKeys: null,\n  contextMenuSelectionKey: null,\n  selectionMode: null,\n  selectionKeys: null,\n  metaKeySelection: true,\n  propagateSelectionUp: true,\n  propagateSelectionDown: true,\n  rowClassName: null,\n  onExpand: null,\n  onCollapse: null,\n  onToggle: null,\n  onRowClick: null,\n  onSelect: null,\n  onUnselect: null,\n  onSelectionChange: null,\n  onPropagateUp: null,\n  onContextMenuSelectionChange: null,\n  onContextMenu: null\n};\nTreeTableRow.propTypes = {\n  node: PropTypes.any,\n  level: PropTypes.number,\n  columns: PropTypes.array,\n  expandedKeys: PropTypes.object,\n  contextMenuSelectionKey: PropTypes.any,\n  selectionMode: PropTypes.string,\n  selectionKeys: PropTypes.any,\n  metaKeySelection: PropTypes.bool,\n  propagateSelectionUp: PropTypes.bool,\n  propagateSelectionDown: PropTypes.bool,\n  rowClassName: PropTypes.func,\n  onExpand: PropTypes.func,\n  onCollapse: PropTypes.func,\n  onToggle: PropTypes.func,\n  onRowClick: PropTypes.func,\n  onSelect: PropTypes.func,\n  onUnselect: PropTypes.func,\n  onSelectionChange: PropTypes.func,\n  onPropagateUp: PropTypes.func,\n  onContextMenuSelectionChange: PropTypes.func,\n  onContextMenu: PropTypes.func\n};","map":{"version":3,"sources":["C:/Users/zura.ph/WebstormProjects/zloto/src/components/treetable/TreeTableRow.js"],"names":["React","Component","PropTypes","classNames","DomHandler","TreeTableBodyCell","Ripple","TreeTableRow","props","onTogglerClick","bind","onClick","onTouchEnd","propagateUp","onCheckboxChange","onCheckboxFocus","onCheckboxBlur","onRightClick","onKeyDown","node","leaf","children","length","event","isExpanded","collapse","expand","preventDefault","stopPropagation","expandedKeys","key","onToggle","originalEvent","value","invokeToggleEvents","expanded","onExpand","onCollapse","onRowClick","targetNode","target","nodeName","hasClass","parentElement","isSingleSelectionMode","isMultipleSelectionMode","selectable","selectionKeys","selected","isSelected","metaSelection","nodeTouched","metaKeySelection","metaKey","ctrlKey","onUnselect","onSelect","onSelectionChange","checked","isChecked","propagateSelectionDown","propagateDown","propagateSelectionUp","onPropagateUp","check","clearSelection","addClass","checkboxBox","removeClass","checkedChildCount","childPartialSelected","child","partialChecked","i","onContextMenuSelectionChange","onContextMenu","container","rowElement","currentTarget","which","nextRow","nextElementSibling","focus","previousRow","previousElementSibling","selectionMode","undefined","iconClassName","style","marginLeft","level","visibility","isPartialChecked","className","icon","el","column","toggler","checkbox","expander","renderToggler","renderCheckbox","columnKey","field","rowIndex","map","childNode","index","JSON","stringify","data","columns","rowClassName","contextMenuSelectionKey","cells","col","renderCell","renderChildren","defaultProps","propTypes","any","number","array","object","string","bool","func"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { classNames } from '../utils/ClassNames';\r\nimport DomHandler from '../utils/DomHandler';\r\nimport { TreeTableBodyCell } from './TreeTableBodyCell';\r\nimport { Ripple } from '../ripple/Ripple';\r\n\r\nexport class TreeTableRow extends Component {\r\n\r\n    static defaultProps = {\r\n        node: null,\r\n        level: null,\r\n        columns: null,\r\n        expandedKeys: null,\r\n        contextMenuSelectionKey: null,\r\n        selectionMode: null,\r\n        selectionKeys: null,\r\n        metaKeySelection: true,\r\n        propagateSelectionUp: true,\r\n        propagateSelectionDown: true,\r\n        rowClassName: null,\r\n        onExpand: null,\r\n        onCollapse: null,\r\n        onToggle: null,\r\n        onRowClick: null,\r\n        onSelect: null,\r\n        onUnselect: null,\r\n        onSelectionChange: null,\r\n        onPropagateUp: null,\r\n        onContextMenuSelectionChange: null,\r\n        onContextMenu: null\r\n    }\r\n\r\n    static propTypes = {\r\n        node: PropTypes.any,\r\n        level: PropTypes.number,\r\n        columns: PropTypes.array,\r\n        expandedKeys: PropTypes.object,\r\n        contextMenuSelectionKey: PropTypes.any,\r\n        selectionMode: PropTypes.string,\r\n        selectionKeys: PropTypes.any,\r\n        metaKeySelection: PropTypes.bool,\r\n        propagateSelectionUp: PropTypes.bool,\r\n        propagateSelectionDown: PropTypes.bool,\r\n        rowClassName: PropTypes.func,\r\n        onExpand: PropTypes.func,\r\n        onCollapse: PropTypes.func,\r\n        onToggle: PropTypes.func,\r\n        onRowClick: PropTypes.func,\r\n        onSelect: PropTypes.func,\r\n        onUnselect: PropTypes.func,\r\n        onSelectionChange: PropTypes.func,\r\n        onPropagateUp: PropTypes.func,\r\n        onContextMenuSelectionChange: PropTypes.func,\r\n        onContextMenu: PropTypes.func,\r\n    }\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.onTogglerClick = this.onTogglerClick.bind(this);\r\n        this.onClick = this.onClick.bind(this);\r\n        this.onTouchEnd = this.onTouchEnd.bind(this);\r\n        this.propagateUp = this.propagateUp.bind(this);\r\n        this.onCheckboxChange = this.onCheckboxChange.bind(this);\r\n        this.onCheckboxFocus = this.onCheckboxFocus.bind(this);\r\n        this.onCheckboxBlur = this.onCheckboxBlur.bind(this);\r\n        this.onRightClick = this.onRightClick.bind(this);\r\n        this.onKeyDown = this.onKeyDown.bind(this);\r\n    }\r\n\r\n    isLeaf() {\r\n        return this.props.node.leaf === false ? false : !(this.props.node.children && this.props.node.children.length);\r\n    }\r\n\r\n    onTogglerClick(event) {\r\n        if (this.isExpanded())\r\n            this.collapse(event);\r\n        else\r\n            this.expand(event);\r\n\r\n        event.preventDefault();\r\n        event.stopPropagation();\r\n    }\r\n\r\n    expand(event) {\r\n        let expandedKeys = this.props.expandedKeys ? {...this.props.expandedKeys} : {};\r\n        expandedKeys[this.props.node.key] = true;\r\n\r\n        this.props.onToggle({\r\n            originalEvent: event,\r\n            value: expandedKeys\r\n        });\r\n\r\n        this.invokeToggleEvents(event, true);\r\n    }\r\n\r\n    collapse(event) {\r\n        let expandedKeys = {...this.props.expandedKeys};\r\n        delete expandedKeys[this.props.node.key];\r\n\r\n        this.props.onToggle({\r\n            originalEvent: event,\r\n            value: expandedKeys\r\n        });\r\n\r\n        this.invokeToggleEvents(event, false);\r\n    }\r\n\r\n    invokeToggleEvents(event, expanded) {\r\n        if (expanded) {\r\n            if (this.props.onExpand) {\r\n                this.props.onExpand({\r\n                    originalEvent: event,\r\n                    node: this.props.node\r\n                });\r\n            }\r\n        }\r\n        else {\r\n            if (this.props.onCollapse) {\r\n                this.props.onCollapse({\r\n                    originalEvent: event,\r\n                    node: this.props.node\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    onClick(event) {\r\n        if (this.props.onRowClick) {\r\n            this.props.onRowClick({\r\n                originalEvent: event,\r\n                node: this.props.node\r\n            });\r\n        }\r\n\r\n        let targetNode = event.target.nodeName;\r\n        if (targetNode === 'INPUT' || targetNode === 'BUTTON' || targetNode === 'A' || DomHandler.hasClass(event.target, 'p-clickable')\r\n            || DomHandler.hasClass(event.target, 'p-treetable-toggler') || DomHandler.hasClass(event.target.parentElement, 'p-treetable-toggler')) {\r\n            return;\r\n        }\r\n\r\n        if ((this.isSingleSelectionMode() || this.isMultipleSelectionMode()) && this.props.node.selectable !== false) {\r\n            let selectionKeys;\r\n            const selected = this.isSelected();\r\n            const metaSelection = this.nodeTouched ? false : this.props.metaKeySelection;\r\n\r\n            if (metaSelection) {\r\n                let metaKey = (event.metaKey||event.ctrlKey);\r\n\r\n                if (selected && metaKey) {\r\n                    if (this.isSingleSelectionMode()) {\r\n                        selectionKeys = null;\r\n                    }\r\n                    else {\r\n                        selectionKeys = {...this.props.selectionKeys};\r\n                        delete selectionKeys[this.props.node.key];\r\n                    }\r\n\r\n                    if (this.props.onUnselect) {\r\n                        this.props.onUnselect({\r\n                            originalEvent: event,\r\n                            node: this.props.node\r\n                        });\r\n                    }\r\n                }\r\n                else {\r\n                    if (this.isSingleSelectionMode()) {\r\n                        selectionKeys = this.props.node.key;\r\n                    }\r\n                    else if (this.isMultipleSelectionMode()) {\r\n                        selectionKeys = !metaKey ? {} : (this.props.selectionKeys ? {...this.props.selectionKeys} : {});\r\n                        selectionKeys[this.props.node.key] = true;\r\n                    }\r\n\r\n                    if (this.props.onSelect) {\r\n                        this.props.onSelect({\r\n                            originalEvent: event,\r\n                            node: this.props.node\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                if (this.isSingleSelectionMode()) {\r\n                    if (selected) {\r\n                        selectionKeys = null;\r\n\r\n                        if (this.props.onUnselect) {\r\n                            this.props.onUnselect({\r\n                                originalEvent: event,\r\n                                node: this.props.node\r\n                            });\r\n                        }\r\n                    }\r\n                    else {\r\n                        selectionKeys = this.props.node.key;\r\n\r\n                        if (this.props.onSelect) {\r\n                            this.props.onSelect({\r\n                                originalEvent: event,\r\n                                node: this.props.node\r\n                            });\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    if (selected) {\r\n                        selectionKeys = {...this.props.selectionKeys};\r\n                        delete selectionKeys[this.props.node.key];\r\n\r\n                        if (this.props.onUnselect) {\r\n                            this.props.onUnselect({\r\n                                originalEvent: event,\r\n                                node: this.props.node\r\n                            });\r\n                        }\r\n                    }\r\n                    else {\r\n                        selectionKeys = this.props.selectionKeys ? {...this.props.selectionKeys} : {};\r\n                        selectionKeys[this.props.node.key] = true;\r\n\r\n                        if (this.props.onSelect) {\r\n                            this.props.onSelect({\r\n                                originalEvent: event,\r\n                                node: this.props.node\r\n                            });\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (this.props.onSelectionChange) {\r\n                this.props.onSelectionChange({\r\n                    originalEvent: event,\r\n                    value: selectionKeys\r\n                })\r\n            }\r\n        }\r\n\r\n        this.nodeTouched = false;\r\n    }\r\n\r\n    onTouchEnd() {\r\n        this.nodeTouched = true;\r\n    }\r\n\r\n    onCheckboxChange(event) {\r\n        const checked = this.isChecked();\r\n        let selectionKeys = this.props.selectionKeys ? {...this.props.selectionKeys} : {};\r\n\r\n        if (checked) {\r\n            if (this.props.propagateSelectionDown)\r\n                this.propagateDown(this.props.node, false, selectionKeys);\r\n            else\r\n                delete selectionKeys[this.props.node.key];\r\n\r\n            if (this.props.propagateSelectionUp && this.props.onPropagateUp) {\r\n                this.props.onPropagateUp({\r\n                    originalEvent: event,\r\n                    check: false,\r\n                    selectionKeys: selectionKeys\r\n                });\r\n            }\r\n\r\n            if (this.props.onUnselect) {\r\n                this.props.onUnselect({\r\n                    originalEvent: event,\r\n                    node: this.props.node\r\n                });\r\n            }\r\n        }\r\n        else {\r\n            if (this.props.propagateSelectionDown)\r\n                this.propagateDown(this.props.node, true, selectionKeys);\r\n            else\r\n                selectionKeys[this.props.node.key] = {checked: true};\r\n\r\n                if (this.props.propagateSelectionUp && this.props.onPropagateUp) {\r\n                    this.props.onPropagateUp({\r\n                        originalEvent: event,\r\n                        check: true,\r\n                        selectionKeys: selectionKeys\r\n                    });\r\n                }\r\n\r\n            if (this.props.onSelect) {\r\n                this.props.onSelect({\r\n                    originalEvent: event,\r\n                    node: this.props.node\r\n                });\r\n            }\r\n        }\r\n\r\n        if (this.props.onSelectionChange) {\r\n            this.props.onSelectionChange({\r\n                originalEvent: event,\r\n                value: selectionKeys\r\n            })\r\n        }\r\n\r\n        DomHandler.clearSelection();\r\n    }\r\n\r\n    onCheckboxFocus() {\r\n        DomHandler.addClass(this.checkboxBox, 'p-focus');\r\n    }\r\n\r\n    onCheckboxBlur() {\r\n        DomHandler.removeClass(this.checkboxBox, 'p-focus');\r\n    }\r\n\r\n    propagateUp(event) {\r\n        let check = event.check;\r\n        let selectionKeys = event.selectionKeys;\r\n        let checkedChildCount = 0;\r\n        let childPartialSelected = false;\r\n\r\n        for(let child of this.props.node.children) {\r\n            if(selectionKeys[child.key] && selectionKeys[child.key].checked)\r\n                checkedChildCount++;\r\n            else if(selectionKeys[child.key] && selectionKeys[child.key].partialChecked)\r\n                childPartialSelected = true;\r\n        }\r\n\r\n        if(check && checkedChildCount === this.props.node.children.length) {\r\n            selectionKeys[this.props.node.key] = {checked: true, partialChecked: false};\r\n        }\r\n        else {\r\n            if (!check) {\r\n                delete selectionKeys[this.props.node.key];\r\n            }\r\n\r\n            if(childPartialSelected || (checkedChildCount > 0 && checkedChildCount !== this.props.node.children.length))\r\n                selectionKeys[this.props.node.key] = {checked: false, partialChecked: true};\r\n            else\r\n                selectionKeys[this.props.node.key] = {checked: false, partialChecked: false};\r\n        }\r\n\r\n        if (this.props.propagateSelectionUp && this.props.onPropagateUp) {\r\n            this.props.onPropagateUp(event);\r\n        }\r\n    }\r\n\r\n    propagateDown(node, check, selectionKeys) {\r\n        if(check)\r\n            selectionKeys[node.key] = {checked: true, partialChecked: false};\r\n        else\r\n            delete selectionKeys[node.key];\r\n\r\n        if (node.children && node.children.length) {\r\n            for (let i = 0; i < node.children.length; i++) {\r\n                this.propagateDown(node.children[i], check, selectionKeys);\r\n            }\r\n        }\r\n    }\r\n\r\n    onRightClick(event) {\r\n        DomHandler.clearSelection();\r\n\r\n        if (this.props.onContextMenuSelectionChange) {\r\n            this.props.onContextMenuSelectionChange({\r\n                originalEvent: event,\r\n                value: this.props.node.key\r\n            });\r\n        }\r\n\r\n        if (this.props.onContextMenu) {\r\n            this.props.onContextMenu({\r\n                originalEvent: event,\r\n                node: this.props.node\r\n            });\r\n        }\r\n    }\r\n\r\n    onKeyDown(event) {\r\n        if (event.target === this.container) {\r\n            const rowElement = event.currentTarget;\r\n\r\n            switch (event.which) {\r\n                //down arrow\r\n                case 40:\r\n                    const nextRow = rowElement.nextElementSibling;\r\n                    if (nextRow) {\r\n                        nextRow.focus();\r\n                    }\r\n\r\n                    event.preventDefault();\r\n                break;\r\n\r\n                //up arrow\r\n                case 38:\r\n                    const previousRow = rowElement.previousElementSibling;\r\n                    if (previousRow) {\r\n                        previousRow.focus();\r\n                    }\r\n\r\n                    event.preventDefault();\r\n                break;\r\n\r\n                //right arrow\r\n                case 39:\r\n                    if (!this.isExpanded()) {\r\n                        this.expand(event);\r\n                    }\r\n\r\n                    event.preventDefault();\r\n                break;\r\n\r\n                //left arrow\r\n                case 37:\r\n                    if (this.isExpanded()) {\r\n                        this.collapse(event);\r\n                    }\r\n\r\n                    event.preventDefault();\r\n                break;\r\n\r\n                //enter\r\n                case 13:\r\n                    this.onClick(event);\r\n                    event.preventDefault();\r\n                break;\r\n\r\n                default:\r\n                    //no op\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    isSingleSelectionMode() {\r\n        return this.props.selectionMode && this.props.selectionMode === 'single';\r\n    }\r\n\r\n    isMultipleSelectionMode() {\r\n        return this.props.selectionMode && this.props.selectionMode === 'multiple';\r\n    }\r\n\r\n    isExpanded() {\r\n        return this.props.expandedKeys ? this.props.expandedKeys[this.props.node.key] !== undefined : false;\r\n    }\r\n\r\n    isSelected() {\r\n        if ((this.props.selectionMode === 'single' || this.props.selectionMode === 'multiple') && this.props.selectionKeys)\r\n            return (this.props.selectionMode === 'single') ? this.props.selectionKeys === this.props.node.key : this.props.selectionKeys[this.props.node.key] !== undefined;\r\n        else\r\n            return false;\r\n    }\r\n\r\n    isChecked() {\r\n        return this.props.selectionKeys ? this.props.selectionKeys[this.props.node.key] && this.props.selectionKeys[this.props.node.key].checked: false;\r\n    }\r\n\r\n    isPartialChecked() {\r\n        return this.props.selectionKeys ? this.props.selectionKeys[this.props.node.key] && this.props.selectionKeys[this.props.node.key].partialChecked: false;\r\n    }\r\n\r\n    renderToggler() {\r\n        const expanded = this.isExpanded();\r\n        const iconClassName = classNames('\"p-treetable-toggler-icon pi pi-fw', {'pi-chevron-right': !expanded, 'pi-chevron-down': expanded});\r\n        const style = {marginLeft: this.props.level * 16 + 'px', visibility: (this.props.node.leaf === false || (this.props.node.children && this.props.node.children.length)) ? 'visible' : 'hidden'};\r\n\r\n        return (\r\n            <button type=\"button\" className=\"p-treetable-toggler p-link p-unselectable-text\" onClick={this.onTogglerClick} tabIndex={-1} style={style}>\r\n                <i className={iconClassName}></i>\r\n                <Ripple />\r\n            </button>\r\n        );\r\n    }\r\n\r\n    renderCheckbox() {\r\n        if (this.props.selectionMode === 'checkbox' && this.props.node.selectable !== false) {\r\n            const checked = this.isChecked();\r\n            const partialChecked = this.isPartialChecked();\r\n            const className = classNames('p-checkbox-box', {'p-highlight': checked, 'p-indeterminate': partialChecked});\r\n            const icon = classNames('p-checkbox-icon p-c', {'pi pi-check': checked, 'pi pi-minus': partialChecked});\r\n\r\n            return (\r\n                <div className=\"p-checkbox p-treetable-checkbox p-component\" onClick={this.onCheckboxChange} role=\"checkbox\" aria-checked={checked}>\r\n                    <div className=\"p-hidden-accessible\">\r\n                        <input type=\"checkbox\" onFocus={this.onCheckboxFocus} onBlur={this.onCheckboxBlur} />\r\n                    </div>\r\n                    <div className={className} ref={el => this.checkboxBox = el}>\r\n                        <span className={icon}></span>\r\n                    </div>\r\n                </div>\r\n            )\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    renderCell(column) {\r\n        let toggler, checkbox;\r\n\r\n        if (column.props.expander) {\r\n            toggler = this.renderToggler();\r\n            checkbox = this.renderCheckbox();\r\n        }\r\n\r\n        return (\r\n            <TreeTableBodyCell key={column.props.columnKey||column.props.field} {...column.props} node={this.props.node} rowIndex={this.props.rowIndex}>\r\n                {toggler}\r\n                {checkbox}\r\n            </TreeTableBodyCell>\r\n        );\r\n    }\r\n\r\n    renderChildren() {\r\n        if (this.isExpanded() && this.props.node.children) {\r\n            return this.props.node.children.map((childNode, index) => {\r\n                return (\r\n                    <TreeTableRow key={childNode.key||JSON.stringify(childNode.data)} level={this.props.level + 1} rowIndex={this.props.rowIndex + '_' + index}\r\n                        node={childNode} columns={this.props.columns} expandedKeys={this.props.expandedKeys}\r\n                        onToggle={this.props.onToggle} onExpand={this.props.onExpand} onCollapse={this.props.onCollapse}\r\n                        selectionMode={this.props.selectionMode} selectionKeys={this.props.selectionKeys} onSelectionChange={this.props.onSelectionChange}\r\n                        metaKeySelection={this.props.metaKeySelection} onRowClick={this.props.onRowClick} onSelect={this.props.onSelect} onUnselect={this.props.onUnselect}\r\n                        propagateSelectionUp={this.props.propagateSelectionUp} propagateSelectionDown={this.props.propagateSelectionDown} onPropagateUp={this.propagateUp}\r\n                        rowClassName={this.props.rowClassName}\r\n                        contextMenuSelectionKey={this.props.contextMenuSelectionKey} onContextMenuSelectionChange={this.props.onContextMenuSelectionChange} onContextMenu={this.props.onContextMenu} />\r\n                );\r\n            });\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const cells = this.props.columns.map(col => this.renderCell(col));\r\n        const children =  this.renderChildren();\r\n        let className = {\r\n            'p-highlight': this.isSelected(),\r\n            'p-highlight-contextmenu': (this.props.contextMenuSelectionKey && this.props.contextMenuSelectionKey === this.props.node.key)\r\n        };\r\n\r\n        if (this.props.rowClassName) {\r\n            let rowClassName = this.props.rowClassName(this.props.node);\r\n            className = {...className, ...rowClassName};\r\n        }\r\n\r\n        className = classNames(className, this.props.node.className);\r\n\r\n        return (\r\n            <>\r\n                <tr ref={el => this.container = el} tabIndex={0} className={className} style={this.props.node.style} onClick={this.onClick} onTouchEnd={this.onTouchEnd} onContextMenu={this.onRightClick} onKeyDown={this.onKeyDown}>{cells}</tr>\r\n                {children}\r\n            </>\r\n        );\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}