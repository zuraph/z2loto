{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\zura.ph\\\\WebstormProjects\\\\zloto\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\zura.ph\\\\WebstormProjects\\\\zloto\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"C:\\\\Users\\\\zura.ph\\\\WebstormProjects\\\\zloto\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"C:\\\\Users\\\\zura.ph\\\\WebstormProjects\\\\zloto\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _createSuper from \"C:\\\\Users\\\\zura.ph\\\\WebstormProjects\\\\zloto\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"C:\\\\Users\\\\zura.ph\\\\WebstormProjects\\\\zloto\\\\src\\\\showcase\\\\datatable\\\\DataTablePaginatorDemo.js\";\nimport React, { Component } from 'react';\nimport { DataTable } from '../../components/datatable/DataTable';\nimport { Column } from '../../components/column/Column';\nimport { CustomerService } from '../service/CustomerService';\nimport { TabView } from '../../components/tabview/TabView';\nimport { Button } from '../../components/button/Button';\nimport { Ripple } from '../../components/ripple/Ripple';\nimport { Dropdown } from '../../components/dropdown/Dropdown';\nimport { InputText } from '../../components/inputtext/InputText';\nimport { useLiveEditorTabs } from '../liveeditor/LiveEditor';\nimport { AppInlineHeader } from '../../AppInlineHeader';\nimport classNames from 'classnames';\nexport var DataTablePaginatorDemo = /*#__PURE__*/function (_Component) {\n  _inherits(DataTablePaginatorDemo, _Component);\n\n  var _super = _createSuper(DataTablePaginatorDemo);\n\n  function DataTablePaginatorDemo(props) {\n    var _this;\n\n    _classCallCheck(this, DataTablePaginatorDemo);\n\n    _this = _super.call(this, props);\n    _this.state = {\n      customers1: [],\n      customers2: [],\n      customers3: [],\n      first1: 0,\n      rows1: 10,\n      first2: 0,\n      rows2: 10,\n      currentPage: 1,\n      pageInputTooltip: 'Press \\'Enter\\' key to go to this page.'\n    };\n    _this.customerService = new CustomerService();\n    _this.onCustomPage1 = _this.onCustomPage1.bind(_assertThisInitialized(_this));\n    _this.onCustomPage2 = _this.onCustomPage2.bind(_assertThisInitialized(_this));\n    _this.onPageInputKeyDown = _this.onPageInputKeyDown.bind(_assertThisInitialized(_this));\n    _this.onPageInputChange = _this.onPageInputChange.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(DataTablePaginatorDemo, [{\n    key: \"onCustomPage1\",\n    value: function onCustomPage1(event) {\n      this.setState({\n        first1: event.first,\n        rows1: event.rows,\n        currentPage: event.page + 1\n      });\n    }\n  }, {\n    key: \"onCustomPage2\",\n    value: function onCustomPage2(event) {\n      this.setState({\n        first2: event.first,\n        rows2: event.rows\n      });\n    }\n  }, {\n    key: \"onPageInputKeyDown\",\n    value: function onPageInputKeyDown(event, options) {\n      if (event.key === 'Enter') {\n        var page = parseInt(this.state.currentPage);\n\n        if (page < 0 || page > options.totalPages) {\n          this.setState({\n            pageInputTooltip: \"Value must be between 1 and \".concat(options.totalPages, \".\")\n          });\n        } else {\n          var first = this.state.currentPage ? options.rows * (page - 1) : 0;\n          this.setState({\n            first1: first,\n            pageInputTooltip: 'Press \\'Enter\\' key to go to this page.'\n          });\n        }\n      }\n    }\n  }, {\n    key: \"onPageInputChange\",\n    value: function onPageInputChange(event) {\n      this.setState({\n        currentPage: event.target.value\n      });\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      this.customerService.getCustomersLarge().then(function (data) {\n        return _this2.setState({\n          customers1: data\n        });\n      });\n      this.customerService.getCustomersLarge().then(function (data) {\n        return _this2.setState({\n          customers2: data\n        });\n      });\n      this.customerService.getCustomersLarge().then(function (data) {\n        return _this2.setState({\n          customers3: data\n        });\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      var paginatorLeft = /*#__PURE__*/React.createElement(Button, {\n        type: \"button\",\n        icon: \"pi pi-refresh\",\n        className: \"p-button-text\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 31\n        }\n      });\n      var paginatorRight = /*#__PURE__*/React.createElement(Button, {\n        type: \"button\",\n        icon: \"pi pi-cloud\",\n        className: \"p-button-text\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 32\n        }\n      });\n      var template1 = {\n        layout: 'PrevPageLink PageLinks NextPageLink RowsPerPageDropdown CurrentPageReport',\n        'PrevPageLink': function PrevPageLink(options) {\n          return /*#__PURE__*/React.createElement(\"button\", {\n            type: \"button\",\n            className: options.className,\n            onClick: options.onClick,\n            disabled: options.disabled,\n            __self: _this3,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 85,\n              columnNumber: 21\n            }\n          }, /*#__PURE__*/React.createElement(\"span\", {\n            className: \"p-p-3\",\n            __self: _this3,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 86,\n              columnNumber: 25\n            }\n          }, \"Previous\"), /*#__PURE__*/React.createElement(Ripple, {\n            __self: _this3,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 87,\n              columnNumber: 25\n            }\n          }));\n        },\n        'NextPageLink': function NextPageLink(options) {\n          return /*#__PURE__*/React.createElement(\"button\", {\n            type: \"button\",\n            className: options.className,\n            onClick: options.onClick,\n            disabled: options.disabled,\n            __self: _this3,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 93,\n              columnNumber: 21\n            }\n          }, /*#__PURE__*/React.createElement(\"span\", {\n            className: \"p-p-3\",\n            __self: _this3,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 94,\n              columnNumber: 25\n            }\n          }, \"Next\"), /*#__PURE__*/React.createElement(Ripple, {\n            __self: _this3,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 95,\n              columnNumber: 25\n            }\n          }));\n        },\n        'PageLinks': function PageLinks(options) {\n          if (options.view.startPage === options.page && options.view.startPage !== 0 || options.view.endPage === options.page && options.page + 1 !== options.totalPages) {\n            var className = classNames(options.className, {\n              'p-disabled': true\n            });\n            return /*#__PURE__*/React.createElement(\"span\", {\n              className: className,\n              style: {\n                userSelect: 'none'\n              },\n              __self: _this3,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 103,\n                columnNumber: 28\n              }\n            }, \"...\");\n          }\n\n          return /*#__PURE__*/React.createElement(\"button\", {\n            type: \"button\",\n            className: options.className,\n            onClick: options.onClick,\n            __self: _this3,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 107,\n              columnNumber: 21\n            }\n          }, options.page + 1, /*#__PURE__*/React.createElement(Ripple, {\n            __self: _this3,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 109,\n              columnNumber: 25\n            }\n          }));\n        },\n        'RowsPerPageDropdown': function RowsPerPageDropdown(options) {\n          var dropdownOptions = [{\n            label: 10,\n            value: 10\n          }, {\n            label: 20,\n            value: 20\n          }, {\n            label: 50,\n            value: 50\n          }, {\n            label: 'All',\n            value: options.totalRecords\n          }];\n          return /*#__PURE__*/React.createElement(Dropdown, {\n            value: options.value,\n            options: dropdownOptions,\n            onChange: options.onChange,\n            appendTo: document.body,\n            __self: _this3,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 121,\n              columnNumber: 24\n            }\n          });\n        },\n        'CurrentPageReport': function CurrentPageReport(options) {\n          return /*#__PURE__*/React.createElement(\"span\", {\n            className: \"p-mx-3\",\n            style: {\n              color: 'var(--text-color)',\n              userSelect: 'none'\n            },\n            __self: _this3,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 125,\n              columnNumber: 21\n            }\n          }, \"Go to \", /*#__PURE__*/React.createElement(InputText, {\n            size: \"2\",\n            className: \"p-ml-1\",\n            value: _this3.state.currentPage,\n            tooltip: _this3.state.pageInputTooltip,\n            onKeyDown: function onKeyDown(e) {\n              return _this3.onPageInputKeyDown(e, options);\n            },\n            onChange: _this3.onPageInputChange,\n            __self: _this3,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 126,\n              columnNumber: 31\n            }\n          }));\n        }\n      };\n      var template2 = {\n        layout: 'RowsPerPageDropdown CurrentPageReport PrevPageLink NextPageLink',\n        'RowsPerPageDropdown': function RowsPerPageDropdown(options) {\n          var dropdownOptions = [{\n            label: 10,\n            value: 10\n          }, {\n            label: 20,\n            value: 20\n          }, {\n            label: 50,\n            value: 50\n          }];\n          return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"span\", {\n            className: \"p-mx-1\",\n            style: {\n              color: 'var(--text-color)',\n              userSelect: 'none'\n            },\n            __self: _this3,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 143,\n              columnNumber: 25\n            }\n          }, \"Items per page: \"), /*#__PURE__*/React.createElement(Dropdown, {\n            value: options.value,\n            options: dropdownOptions,\n            onChange: options.onChange,\n            appendTo: document.body,\n            __self: _this3,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 144,\n              columnNumber: 25\n            }\n          }));\n        },\n        'CurrentPageReport': function CurrentPageReport(options) {\n          return /*#__PURE__*/React.createElement(\"span\", {\n            style: {\n              color: 'var(--text-color)',\n              userSelect: 'none',\n              width: '120px',\n              textAlign: 'center'\n            },\n            __self: _this3,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 150,\n              columnNumber: 21\n            }\n          }, options.first, \" - \", options.last, \" of \", options.totalRecords);\n        }\n      };\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 158,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"content-section introduction\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 159,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(AppInlineHeader, {\n        changelogText: \"dataTable\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 160,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(\"h1\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 161,\n          columnNumber: 25\n        }\n      }, \"DataTable \", /*#__PURE__*/React.createElement(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 161,\n          columnNumber: 39\n        }\n      }, \"Paginator\")), /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 162,\n          columnNumber: 25\n        }\n      }, \"Pagination is enabled by setting paginator property to true, rows attribute defines the number of rows per page and pageLinks specify the the number of page links to display.\"))), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"content-section implementation\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 166,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"card\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 167,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(\"h5\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 168,\n          columnNumber: 25\n        }\n      }, \"Basic\"), /*#__PURE__*/React.createElement(DataTable, {\n        value: this.state.customers1,\n        paginator: true,\n        paginatorTemplate: \"CurrentPageReport FirstPageLink PrevPageLink PageLinks NextPageLink LastPageLink RowsPerPageDropdown\",\n        currentPageReportTemplate: \"Showing {first} to {last} of {totalRecords}\",\n        rows: 10,\n        rowsPerPageOptions: [10, 20, 50],\n        paginatorLeft: paginatorLeft,\n        paginatorRight: paginatorRight,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 169,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(Column, {\n        field: \"name\",\n        header: \"Name\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 173,\n          columnNumber: 29\n        }\n      }), /*#__PURE__*/React.createElement(Column, {\n        field: \"country.name\",\n        header: \"Country\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 174,\n          columnNumber: 29\n        }\n      }), /*#__PURE__*/React.createElement(Column, {\n        field: \"company\",\n        header: \"Company\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 175,\n          columnNumber: 29\n        }\n      }), /*#__PURE__*/React.createElement(Column, {\n        field: \"representative.name\",\n        header: \"Representative\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 176,\n          columnNumber: 29\n        }\n      })), /*#__PURE__*/React.createElement(\"h5\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 179,\n          columnNumber: 25\n        }\n      }, \"Custom Paginator Template\"), /*#__PURE__*/React.createElement(DataTable, {\n        value: this.state.customers2,\n        paginator: true,\n        paginatorTemplate: template1,\n        first: this.state.first1,\n        rows: this.state.rows1,\n        onPage: this.onCustomPage1,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 180,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(Column, {\n        field: \"name\",\n        header: \"Name\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 181,\n          columnNumber: 29\n        }\n      }), /*#__PURE__*/React.createElement(Column, {\n        field: \"country.name\",\n        header: \"Country\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 182,\n          columnNumber: 29\n        }\n      }), /*#__PURE__*/React.createElement(Column, {\n        field: \"company\",\n        header: \"Company\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 183,\n          columnNumber: 29\n        }\n      }), /*#__PURE__*/React.createElement(Column, {\n        field: \"representative.name\",\n        header: \"Representative\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 184,\n          columnNumber: 29\n        }\n      })), /*#__PURE__*/React.createElement(DataTable, {\n        value: this.state.customers3,\n        paginator: true,\n        paginatorTemplate: template2,\n        first: this.state.first2,\n        rows: this.state.rows2,\n        onPage: this.onCustomPage2,\n        paginatorClassName: \"p-jc-end\",\n        className: \"p-mt-6\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 187,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(Column, {\n        field: \"name\",\n        header: \"Name\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 189,\n          columnNumber: 29\n        }\n      }), /*#__PURE__*/React.createElement(Column, {\n        field: \"country.name\",\n        header: \"Country\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 190,\n          columnNumber: 29\n        }\n      }), /*#__PURE__*/React.createElement(Column, {\n        field: \"company\",\n        header: \"Company\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 191,\n          columnNumber: 29\n        }\n      }), /*#__PURE__*/React.createElement(Column, {\n        field: \"representative.name\",\n        header: \"Representative\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 192,\n          columnNumber: 29\n        }\n      })))), /*#__PURE__*/React.createElement(DataTablePaginatorDemoDoc, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 197,\n          columnNumber: 17\n        }\n      }));\n    }\n  }]);\n\n  return DataTablePaginatorDemo;\n}(Component);\nexport var DataTablePaginatorDemoDoc = /*#__PURE__*/function (_Component2) {\n  _inherits(DataTablePaginatorDemoDoc, _Component2);\n\n  var _super2 = _createSuper(DataTablePaginatorDemoDoc);\n\n  function DataTablePaginatorDemoDoc(props) {\n    var _this4;\n\n    _classCallCheck(this, DataTablePaginatorDemoDoc);\n\n    _this4 = _super2.call(this, props);\n    _this4.sources = {\n      'class': {\n        tabName: 'Class Source',\n        content: \"\\nimport React, { Component } from 'react';\\nimport { DataTable } from 'primereact/datatable';\\nimport { Column } from 'primereact/column';\\nimport { Button } from 'primereact/button';\\nimport { Ripple } from 'primereact/ripple';\\nimport { Dropdown } from 'primereact/dropdown';\\nimport { InputText } from 'primereact/inputtext';\\nimport { CustomerService } from '../service/CustomerService';\\nimport { Button } from 'primereact/button';\\nimport classNames from 'classnames';\\n\\nexport class DataTablePaginatorDemo extends Component {\\n\\n    constructor(props) {\\n        super(props);\\n\\n        this.state = {\\n            customers1: [],\\n            customers2: [],\\n            customers3: [],\\n            first1: 0,\\n            rows1: 10,\\n            first2: 0,\\n            rows2: 10,\\n            currentPage: 1,\\n            pageInputTooltip: 'Press \\\\'Enter\\\\' key to go to this page.'\\n        };\\n\\n        this.customerService = new CustomerService();\\n\\n        this.onCustomPage1 = this.onCustomPage1.bind(this);\\n        this.onCustomPage2 = this.onCustomPage2.bind(this);\\n        this.onPageInputKeyDown = this.onPageInputKeyDown.bind(this);\\n        this.onPageInputChange = this.onPageInputChange.bind(this);\\n    }\\n\\n    onCustomPage1(event) {\\n        this.setState({\\n            first1: event.first,\\n            rows1: event.rows,\\n            currentPage: event.page + 1\\n        });\\n    }\\n\\n    onCustomPage2(event) {\\n        this.setState({\\n            first2: event.first,\\n            rows2: event.rows\\n        });\\n    }\\n\\n    onPageInputKeyDown(event, options) {\\n        if (event.key === 'Enter') {\\n            const page = parseInt(this.state.currentPage);\\n            if (page < 0 || page > options.totalPages) {\\n                this.setState({ pageInputTooltip: `Value must be between 1 and ${options.totalPages}.`})\\n            }\\n            else {\\n                const first = this.state.currentPage ? options.rows * (page - 1) : 0;\\n\\n                this.setState({ first1: first, pageInputTooltip: 'Press \\\\'Enter\\\\' key to go to this page.' });\\n            }\\n        }\\n    }\\n\\n    onPageInputChange(event) {\\n        this.setState({ currentPage: event.target.value });\\n    }\\n\\n    componentDidMount() {\\n        this.customerService.getCustomersLarge().then(data => this.setState({ customers1: data }));\\n        this.customerService.getCustomersLarge().then(data => this.setState({ customers2: data }));\\n        this.customerService.getCustomersLarge().then(data => this.setState({ customers3: data }));\\n    }\\n\\n    render() {\\n        const paginatorLeft = <Button type=\\\"button\\\" icon=\\\"pi pi-refresh\\\" className=\\\"p-button-text\\\" />;\\n        const paginatorRight = <Button type=\\\"button\\\" icon=\\\"pi pi-cloud\\\" className=\\\"p-button-text\\\" />;\\n        const template1 = {\\n            layout: 'PrevPageLink PageLinks NextPageLink RowsPerPageDropdown CurrentPageReport',\\n            'PrevPageLink': (options) => {\\n                return (\\n                    <button type=\\\"button\\\" className={options.className} onClick={options.onClick} disabled={options.disabled}>\\n                        <span className=\\\"p-p-3\\\">Previous</span>\\n                        <Ripple />\\n                    </button>\\n                )\\n            },\\n            'NextPageLink': (options) => {\\n                return (\\n                    <button type=\\\"button\\\" className={options.className} onClick={options.onClick} disabled={options.disabled}>\\n                        <span className=\\\"p-p-3\\\">Next</span>\\n                        <Ripple />\\n                    </button>\\n                )\\n            },\\n            'PageLinks': (options) => {\\n                if ((options.view.startPage === options.page && options.view.startPage !== 0) || (options.view.endPage === options.page && options.page + 1 !== options.totalPages)) {\\n                    const className = classNames(options.className, { 'p-disabled': true });\\n\\n                    return <span className={className} style={{ userSelect: 'none' }}>...</span>;\\n                }\\n\\n                return (\\n                    <button type=\\\"button\\\" className={options.className} onClick={options.onClick}>\\n                        {options.page + 1}\\n                        <Ripple />\\n                    </button>\\n                )\\n            },\\n            'RowsPerPageDropdown': (options) => {\\n                const dropdownOptions = [\\n                    { label: 10, value: 10 },\\n                    { label: 20, value: 20 },\\n                    { label: 50, value: 50 },\\n                    { label: 'All', value: options.totalRecords }\\n                ];\\n\\n                return <Dropdown value={options.value} options={dropdownOptions} onChange={options.onChange} appendTo={document.body} />;\\n            },\\n            'CurrentPageReport': (options) => {\\n                return (\\n                    <span className=\\\"p-mx-3\\\" style={{ color: 'var(--text-color)', userSelect: 'none' }}>\\n                        Go to <InputText size=\\\"2\\\" className=\\\"p-ml-1\\\" value={this.state.currentPage} tooltip={this.state.pageInputTooltip}\\n                            onKeyDown={(e) => this.onPageInputKeyDown(e, options)} onChange={this.onPageInputChange}/>\\n                    </span>\\n                )\\n            }\\n        };\\n        const template2 = {\\n            layout: 'RowsPerPageDropdown CurrentPageReport PrevPageLink NextPageLink',\\n            'RowsPerPageDropdown': (options) => {\\n                const dropdownOptions = [\\n                    { label: 10, value: 10 },\\n                    { label: 20, value: 20 },\\n                    { label: 50, value: 50 }\\n                ];\\n\\n                return (\\n                    <>\\n                        <span className=\\\"p-mx-1\\\" style={{ color: 'var(--text-color)', userSelect: 'none' }}>Items per page: </span>\\n                        <Dropdown value={options.value} options={dropdownOptions} onChange={options.onChange} appendTo={document.body} />\\n                    </>\\n                );\\n            },\\n            'CurrentPageReport': (options) => {\\n                return (\\n                    <span style={{ color: 'var(--text-color)', userSelect: 'none', width: '120px', textAlign: 'center' }}>\\n                        {options.first} - {options.last} of {options.totalRecords}\\n                    </span>\\n                )\\n            }\\n        };\\n\\n        return (\\n            <div>\\n                <div className=\\\"card\\\">\\n                    <h5>Basic</h5>\\n                    <DataTable value={this.state.customers1} paginator\\n                        paginatorTemplate=\\\"CurrentPageReport FirstPageLink PrevPageLink PageLinks NextPageLink LastPageLink RowsPerPageDropdown\\\"\\n                        currentPageReportTemplate=\\\"Showing {first} to {last} of {totalRecords}\\\" rows={10} rowsPerPageOptions={[10,20,50]}\\n                        paginatorLeft={paginatorLeft} paginatorRight={paginatorRight}>\\n                        <Column field=\\\"name\\\" header=\\\"Name\\\"></Column>\\n                        <Column field=\\\"country.name\\\" header=\\\"Country\\\"></Column>\\n                        <Column field=\\\"company\\\" header=\\\"Company\\\"></Column>\\n                        <Column field=\\\"representative.name\\\" header=\\\"Representative\\\"></Column>\\n                    </DataTable>\\n\\n                    <h5>Custom Paginator Template</h5>\\n                    <DataTable value={this.state.customers2} paginator paginatorTemplate={template1} first={this.state.first1} rows={this.state.rows1} onPage={this.onCustomPage1}>\\n                        <Column field=\\\"name\\\" header=\\\"Name\\\"></Column>\\n                        <Column field=\\\"country.name\\\" header=\\\"Country\\\"></Column>\\n                        <Column field=\\\"company\\\" header=\\\"Company\\\"></Column>\\n                        <Column field=\\\"representative.name\\\" header=\\\"Representative\\\"></Column>\\n                    </DataTable>\\n\\n                    <DataTable value={this.state.customers3} paginator paginatorTemplate={template2} first={this.state.first2} rows={this.state.rows2} onPage={this.onCustomPage2}\\n                        paginatorClassName=\\\"p-jc-end\\\" className=\\\"p-mt-6\\\">\\n                        <Column field=\\\"name\\\" header=\\\"Name\\\"></Column>\\n                        <Column field=\\\"country.name\\\" header=\\\"Country\\\"></Column>\\n                        <Column field=\\\"company\\\" header=\\\"Company\\\"></Column>\\n                        <Column field=\\\"representative.name\\\" header=\\\"Representative\\\"></Column>\\n                    </DataTable>\\n                </div>\\n            </div>\\n        );\\n    }\\n}\\n                \"\n      },\n      'hooks': {\n        tabName: 'Hooks Source',\n        content: \"\\nimport React, { useState, useEffect } from 'react';\\nimport { DataTable } from 'primereact/datatable';\\nimport { Column } from 'primereact/column';\\nimport { Button } from 'primereact/button';\\nimport { Ripple } from 'primereact/ripple';\\nimport { Dropdown } from 'primereact/dropdown';\\nimport { InputText } from 'primereact/inputtext';\\nimport { CustomerService } from '../service/CustomerService';\\nimport { Button } from 'primereact/button';\\nimport classNames from 'classnames';\\n\\nconst DataTablePaginatorDemo = () => {\\n    const [customers1, setCustomers1] = useState([]);\\n    const [customers2, setCustomers2] = useState([]);\\n    const [customers3, setCustomers3] = useState([]);\\n    const [first1, setFirst1] = useState(0);\\n    const [rows1, setRows1] = useState(10);\\n    const [first2, setFirst2] = useState(0);\\n    const [rows2, setRows2] = useState(10);\\n    const [currentPage, setCurrentPage] = useState(1);\\n    const [pageInputTooltip, setPageInputTooltip] = useState('Press \\\\'Enter\\\\' key to go to this page.');\\n\\n    const customerService = new CustomerService();\\n\\n    const onCustomPage1 = (event) => {\\n        setFirst1(event.first);\\n        setRows1(event.rows);\\n        setCurrentPage(event.page + 1);\\n    }\\n\\n    const onCustomPage2 = (event) => {\\n        setFirst2(event.first);\\n        setRows2(event.rows);\\n    }\\n\\n    const onPageInputKeyDown = (event, options) => {\\n        if (event.key === 'Enter') {\\n            const page = parseInt(currentPage);\\n            if (page < 0 || page > options.totalPages) {\\n                setPageInputTooltip(`Value must be between 1 and ${options.totalPages}.`);\\n            }\\n            else {\\n                const first = currentPage ? options.rows * (page - 1) : 0;\\n\\n                setFirst1(first);\\n                setPageInputTooltip('Press \\\\'Enter\\\\' key to go to this page.');\\n            }\\n        }\\n    }\\n\\n    const onPageInputChange = (event) => {\\n        setCurrentPage(event.target.value);\\n    }\\n\\n    useEffect(() => {\\n        customerService.getCustomersLarge().then(data => setCustomers1(data));\\n        customerService.getCustomersLarge().then(data => setCustomers2(data));\\n        customerService.getCustomersLarge().then(data => setCustomers3(data));\\n    }, []); // eslint-disable-line react-hooks/exhaustive-deps\\n\\n    const paginatorLeft = <Button type=\\\"button\\\" icon=\\\"pi pi-refresh\\\" className=\\\"p-button-text\\\" />;\\n    const paginatorRight = <Button type=\\\"button\\\" icon=\\\"pi pi-cloud\\\" className=\\\"p-button-text\\\" />;\\n    const template1 = {\\n        layout: 'PrevPageLink PageLinks NextPageLink RowsPerPageDropdown CurrentPageReport',\\n        'PrevPageLink': (options) => {\\n            return (\\n                <button type=\\\"button\\\" className={options.className} onClick={options.onClick} disabled={options.disabled}>\\n                    <span className=\\\"p-p-3\\\">Previous</span>\\n                    <Ripple />\\n                </button>\\n            )\\n        },\\n        'NextPageLink': (options) => {\\n            return (\\n                <button type=\\\"button\\\" className={options.className} onClick={options.onClick} disabled={options.disabled}>\\n                    <span className=\\\"p-p-3\\\">Next</span>\\n                    <Ripple />\\n                </button>\\n            )\\n        },\\n        'PageLinks': (options) => {\\n            if ((options.view.startPage === options.page && options.view.startPage !== 0) || (options.view.endPage === options.page && options.page + 1 !== options.totalPages)) {\\n                const className = classNames(options.className, { 'p-disabled': true });\\n\\n                return <span className={className} style={{ userSelect: 'none' }}>...</span>;\\n            }\\n\\n            return (\\n                <button type=\\\"button\\\" className={options.className} onClick={options.onClick}>\\n                    {options.page + 1}\\n                    <Ripple />\\n                </button>\\n            )\\n        },\\n        'RowsPerPageDropdown': (options) => {\\n            const dropdownOptions = [\\n                { label: 10, value: 10 },\\n                { label: 20, value: 20 },\\n                { label: 50, value: 50 },\\n                { label: 'All', value: options.totalRecords }\\n            ];\\n\\n            return <Dropdown value={options.value} options={dropdownOptions} onChange={options.onChange} appendTo={document.body} />;\\n        },\\n        'CurrentPageReport': (options) => {\\n            return (\\n                <span className=\\\"p-mx-3\\\" style={{ color: 'var(--text-color)', userSelect: 'none' }}>\\n                    Go to <InputText size=\\\"2\\\" className=\\\"p-ml-1\\\" value={currentPage} tooltip={pageInputTooltip}\\n                        onKeyDown={(e) => onPageInputKeyDown(e, options)} onChange={onPageInputChange}/>\\n                </span>\\n            )\\n        }\\n    };\\n    const template2 = {\\n        layout: 'RowsPerPageDropdown CurrentPageReport PrevPageLink NextPageLink',\\n        'RowsPerPageDropdown': (options) => {\\n            const dropdownOptions = [\\n                { label: 10, value: 10 },\\n                { label: 20, value: 20 },\\n                { label: 50, value: 50 }\\n            ];\\n\\n            return (\\n                <>\\n                    <span className=\\\"p-mx-1\\\" style={{ color: 'var(--text-color)', userSelect: 'none' }}>Items per page: </span>\\n                    <Dropdown value={options.value} options={dropdownOptions} onChange={options.onChange} appendTo={document.body} />\\n                </>\\n            );\\n        },\\n        'CurrentPageReport': (options) => {\\n            return (\\n                <span style={{ color: 'var(--text-color)', userSelect: 'none', width: '120px', textAlign: 'center' }}>\\n                    {options.first} - {options.last} of {options.totalRecords}\\n                </span>\\n            )\\n        }\\n    };\\n\\n    return (\\n        <div>\\n            <div className=\\\"card\\\">\\n                <h5>Basic</h5>\\n                <DataTable value={customers1} paginator\\n                    paginatorTemplate=\\\"CurrentPageReport FirstPageLink PrevPageLink PageLinks NextPageLink LastPageLink RowsPerPageDropdown\\\"\\n                    currentPageReportTemplate=\\\"Showing {first} to {last} of {totalRecords}\\\" rows={10} rowsPerPageOptions={[10,20,50]}\\n                    paginatorLeft={paginatorLeft} paginatorRight={paginatorRight}>\\n                    <Column field=\\\"name\\\" header=\\\"Name\\\"></Column>\\n                    <Column field=\\\"country.name\\\" header=\\\"Country\\\"></Column>\\n                    <Column field=\\\"company\\\" header=\\\"Company\\\"></Column>\\n                    <Column field=\\\"representative.name\\\" header=\\\"Representative\\\"></Column>\\n                </DataTable>\\n\\n                <h5>Custom Paginator Template</h5>\\n                <DataTable value={customers2} paginator paginatorTemplate={template1} first={first1} rows={rows1} onPage={onCustomPage1}>\\n                    <Column field=\\\"name\\\" header=\\\"Name\\\"></Column>\\n                    <Column field=\\\"country.name\\\" header=\\\"Country\\\"></Column>\\n                    <Column field=\\\"company\\\" header=\\\"Company\\\"></Column>\\n                    <Column field=\\\"representative.name\\\" header=\\\"Representative\\\"></Column>\\n                </DataTable>\\n\\n                <DataTable value={customers3} paginator paginatorTemplate={template2} first={first2} rows={rows2} onPage={onCustomPage2}\\n                    paginatorClassName=\\\"p-jc-end\\\" className=\\\"p-mt-6\\\">\\n                    <Column field=\\\"name\\\" header=\\\"Name\\\"></Column>\\n                    <Column field=\\\"country.name\\\" header=\\\"Country\\\"></Column>\\n                    <Column field=\\\"company\\\" header=\\\"Company\\\"></Column>\\n                    <Column field=\\\"representative.name\\\" header=\\\"Representative\\\"></Column>\\n                </DataTable>\\n            </div>\\n        </div>\\n    );\\n}\\n                \"\n      },\n      'ts': {\n        tabName: 'TS Source',\n        content: \"\\nimport React, { useState, useEffect } from 'react';\\nimport { DataTable } from 'primereact/datatable';\\nimport { Column } from 'primereact/column';\\nimport { Button } from 'primereact/button';\\nimport { Ripple } from 'primereact/ripple';\\nimport { Dropdown } from 'primereact/dropdown';\\nimport { InputText } from 'primereact/inputtext';\\nimport { CustomerService } from '../service/CustomerService';\\nimport { Button } from 'primereact/button';\\nimport classNames from 'classnames';\\n\\nconst DataTablePaginatorDemo = () => {\\n    const [customers1, setCustomers1] = useState([]);\\n    const [customers2, setCustomers2] = useState([]);\\n    const [customers3, setCustomers3] = useState([]);\\n    const [first1, setFirst1] = useState(0);\\n    const [rows1, setRows1] = useState(10);\\n    const [first2, setFirst2] = useState(0);\\n    const [rows2, setRows2] = useState(10);\\n    const [currentPage, setCurrentPage] = useState(1);\\n    const [pageInputTooltip, setPageInputTooltip] = useState('Press \\\\'Enter\\\\' key to go to this page.');\\n\\n    const customerService = new CustomerService();\\n\\n    const onCustomPage1 = (event) => {\\n        setFirst1(event.first);\\n        setRows1(event.rows);\\n        setCurrentPage(event.page + 1);\\n    }\\n\\n    const onCustomPage2 = (event) => {\\n        setFirst2(event.first);\\n        setRows2(event.rows);\\n    }\\n\\n    const onPageInputKeyDown = (event, options) => {\\n        if (event.key === 'Enter') {\\n            const page = parseInt(currentPage);\\n            if (page < 0 || page > options.totalPages) {\\n                setPageInputTooltip(`Value must be between 1 and ${options.totalPages}.`);\\n            }\\n            else {\\n                const first = currentPage ? options.rows * (page - 1) : 0;\\n\\n                setFirst1(first);\\n                setPageInputTooltip('Press \\\\'Enter\\\\' key to go to this page.');\\n            }\\n        }\\n    }\\n\\n    const onPageInputChange = (event) => {\\n        setCurrentPage(event.target.value);\\n    }\\n\\n    useEffect(() => {\\n        customerService.getCustomersLarge().then(data => setCustomers1(data));\\n        customerService.getCustomersLarge().then(data => setCustomers2(data));\\n        customerService.getCustomersLarge().then(data => setCustomers3(data));\\n    }, []); // eslint-disable-line react-hooks/exhaustive-deps\\n\\n    const paginatorLeft = <Button type=\\\"button\\\" icon=\\\"pi pi-refresh\\\" className=\\\"p-button-text\\\" />;\\n    const paginatorRight = <Button type=\\\"button\\\" icon=\\\"pi pi-cloud\\\" className=\\\"p-button-text\\\" />;\\n    const template1 = {\\n        layout: 'PrevPageLink PageLinks NextPageLink RowsPerPageDropdown CurrentPageReport',\\n        'PrevPageLink': (options) => {\\n            return (\\n                <button type=\\\"button\\\" className={options.className} onClick={options.onClick} disabled={options.disabled}>\\n                    <span className=\\\"p-p-3\\\">Previous</span>\\n                    <Ripple />\\n                </button>\\n            )\\n        },\\n        'NextPageLink': (options) => {\\n            return (\\n                <button type=\\\"button\\\" className={options.className} onClick={options.onClick} disabled={options.disabled}>\\n                    <span className=\\\"p-p-3\\\">Next</span>\\n                    <Ripple />\\n                </button>\\n            )\\n        },\\n        'PageLinks': (options) => {\\n            if ((options.view.startPage === options.page && options.view.startPage !== 0) || (options.view.endPage === options.page && options.page + 1 !== options.totalPages)) {\\n                const className = classNames(options.className, { 'p-disabled': true });\\n\\n                return <span className={className} style={{ userSelect: 'none' }}>...</span>;\\n            }\\n\\n            return (\\n                <button type=\\\"button\\\" className={options.className} onClick={options.onClick}>\\n                    {options.page + 1}\\n                    <Ripple />\\n                </button>\\n            )\\n        },\\n        'RowsPerPageDropdown': (options) => {\\n            const dropdownOptions = [\\n                { label: 10, value: 10 },\\n                { label: 20, value: 20 },\\n                { label: 50, value: 50 },\\n                { label: 'All', value: options.totalRecords }\\n            ];\\n\\n            return <Dropdown value={options.value} options={dropdownOptions} onChange={options.onChange} appendTo={document.body} />;\\n        },\\n        'CurrentPageReport': (options) => {\\n            return (\\n                <span className=\\\"p-mx-3\\\" style={{ color: 'var(--text-color)', userSelect: 'none' }}>\\n                    Go to <InputText size=\\\"2\\\" className=\\\"p-ml-1\\\" value={currentPage} tooltip={pageInputTooltip}\\n                        onKeyDown={(e) => onPageInputKeyDown(e, options)} onChange={onPageInputChange}/>\\n                </span>\\n            )\\n        }\\n    };\\n    const template2 = {\\n        layout: 'RowsPerPageDropdown CurrentPageReport PrevPageLink NextPageLink',\\n        'RowsPerPageDropdown': (options) => {\\n            const dropdownOptions = [\\n                { label: 10, value: 10 },\\n                { label: 20, value: 20 },\\n                { label: 50, value: 50 }\\n            ];\\n\\n            return (\\n                <>\\n                    <span className=\\\"p-mx-1\\\" style={{ color: 'var(--text-color)', userSelect: 'none' }}>Items per page: </span>\\n                    <Dropdown value={options.value} options={dropdownOptions} onChange={options.onChange} appendTo={document.body} />\\n                </>\\n            );\\n        },\\n        'CurrentPageReport': (options) => {\\n            return (\\n                <span style={{ color: 'var(--text-color)', userSelect: 'none', width: '120px', textAlign: 'center' }}>\\n                    {options.first} - {options.last} of {options.totalRecords}\\n                </span>\\n            )\\n        }\\n    };\\n\\n    return (\\n        <div>\\n            <div className=\\\"card\\\">\\n                <h5>Basic</h5>\\n                <DataTable value={customers1} paginator\\n                    paginatorTemplate=\\\"CurrentPageReport FirstPageLink PrevPageLink PageLinks NextPageLink LastPageLink RowsPerPageDropdown\\\"\\n                    currentPageReportTemplate=\\\"Showing {first} to {last} of {totalRecords}\\\" rows={10} rowsPerPageOptions={[10,20,50]}\\n                    paginatorLeft={paginatorLeft} paginatorRight={paginatorRight}>\\n                    <Column field=\\\"name\\\" header=\\\"Name\\\"></Column>\\n                    <Column field=\\\"country.name\\\" header=\\\"Country\\\"></Column>\\n                    <Column field=\\\"company\\\" header=\\\"Company\\\"></Column>\\n                    <Column field=\\\"representative.name\\\" header=\\\"Representative\\\"></Column>\\n                </DataTable>\\n\\n                <h5>Custom Paginator Template</h5>\\n                <DataTable value={customers2} paginator paginatorTemplate={template1} first={first1} rows={rows1} onPage={onCustomPage1}>\\n                    <Column field=\\\"name\\\" header=\\\"Name\\\"></Column>\\n                    <Column field=\\\"country.name\\\" header=\\\"Country\\\"></Column>\\n                    <Column field=\\\"company\\\" header=\\\"Company\\\"></Column>\\n                    <Column field=\\\"representative.name\\\" header=\\\"Representative\\\"></Column>\\n                </DataTable>\\n\\n                <DataTable value={customers3} paginator paginatorTemplate={template2} first={first2} rows={rows2} onPage={onCustomPage2}\\n                    paginatorClassName=\\\"p-jc-end\\\" className=\\\"p-mt-6\\\">\\n                    <Column field=\\\"name\\\" header=\\\"Name\\\"></Column>\\n                    <Column field=\\\"country.name\\\" header=\\\"Country\\\"></Column>\\n                    <Column field=\\\"company\\\" header=\\\"Company\\\"></Column>\\n                    <Column field=\\\"representative.name\\\" header=\\\"Representative\\\"></Column>\\n                </DataTable>\\n            </div>\\n        </div>\\n    );\\n}\\n                \"\n      }\n    };\n    return _this4;\n  }\n\n  _createClass(DataTablePaginatorDemoDoc, [{\n    key: \"shouldComponentUpdate\",\n    value: function shouldComponentUpdate() {\n      return false;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"content-section documentation\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 763,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(TabView, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 764,\n          columnNumber: 17\n        }\n      }, useLiveEditorTabs({\n        name: 'DataTablePaginatorDemo',\n        sources: this.sources,\n        service: 'CustomerService',\n        data: 'customers-large'\n      })));\n    }\n  }]);\n\n  return DataTablePaginatorDemoDoc;\n}(Component);","map":{"version":3,"sources":["C:/Users/zura.ph/WebstormProjects/zloto/src/showcase/datatable/DataTablePaginatorDemo.js"],"names":["React","Component","DataTable","Column","CustomerService","TabView","Button","Ripple","Dropdown","InputText","useLiveEditorTabs","AppInlineHeader","classNames","DataTablePaginatorDemo","props","state","customers1","customers2","customers3","first1","rows1","first2","rows2","currentPage","pageInputTooltip","customerService","onCustomPage1","bind","onCustomPage2","onPageInputKeyDown","onPageInputChange","event","setState","first","rows","page","options","key","parseInt","totalPages","target","value","getCustomersLarge","then","data","paginatorLeft","paginatorRight","template1","layout","className","onClick","disabled","view","startPage","endPage","userSelect","dropdownOptions","label","totalRecords","onChange","document","body","color","e","template2","width","textAlign","last","DataTablePaginatorDemoDoc","sources","tabName","content","name","service"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { DataTable } from '../../components/datatable/DataTable';\r\nimport { Column } from '../../components/column/Column';\r\nimport { CustomerService } from '../service/CustomerService';\r\nimport { TabView } from '../../components/tabview/TabView';\r\nimport { Button } from '../../components/button/Button';\r\nimport { Ripple } from '../../components/ripple/Ripple';\r\nimport { Dropdown } from '../../components/dropdown/Dropdown';\r\nimport { InputText } from '../../components/inputtext/InputText';\r\nimport { useLiveEditorTabs }from '../liveeditor/LiveEditor';\r\nimport { AppInlineHeader } from '../../AppInlineHeader';\r\nimport classNames from 'classnames';\r\n\r\nexport class DataTablePaginatorDemo extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            customers1: [],\r\n            customers2: [],\r\n            customers3: [],\r\n            first1: 0,\r\n            rows1: 10,\r\n            first2: 0,\r\n            rows2: 10,\r\n            currentPage: 1,\r\n            pageInputTooltip: 'Press \\'Enter\\' key to go to this page.'\r\n        };\r\n\r\n        this.customerService = new CustomerService();\r\n\r\n        this.onCustomPage1 = this.onCustomPage1.bind(this);\r\n        this.onCustomPage2 = this.onCustomPage2.bind(this);\r\n        this.onPageInputKeyDown = this.onPageInputKeyDown.bind(this);\r\n        this.onPageInputChange = this.onPageInputChange.bind(this);\r\n    }\r\n\r\n    onCustomPage1(event) {\r\n        this.setState({\r\n            first1: event.first,\r\n            rows1: event.rows,\r\n            currentPage: event.page + 1\r\n        });\r\n    }\r\n\r\n    onCustomPage2(event) {\r\n        this.setState({\r\n            first2: event.first,\r\n            rows2: event.rows\r\n        });\r\n    }\r\n\r\n    onPageInputKeyDown(event, options) {\r\n        if (event.key === 'Enter') {\r\n            const page = parseInt(this.state.currentPage);\r\n            if (page < 0 || page > options.totalPages) {\r\n                this.setState({ pageInputTooltip: `Value must be between 1 and ${options.totalPages}.`})\r\n            }\r\n            else {\r\n                const first = this.state.currentPage ? options.rows * (page - 1) : 0;\r\n\r\n                this.setState({ first1: first, pageInputTooltip: 'Press \\'Enter\\' key to go to this page.' });\r\n            }\r\n        }\r\n    }\r\n\r\n    onPageInputChange(event) {\r\n        this.setState({ currentPage: event.target.value });\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.customerService.getCustomersLarge().then(data => this.setState({ customers1: data }));\r\n        this.customerService.getCustomersLarge().then(data => this.setState({ customers2: data }));\r\n        this.customerService.getCustomersLarge().then(data => this.setState({ customers3: data }));\r\n    }\r\n\r\n    render() {\r\n        const paginatorLeft = <Button type=\"button\" icon=\"pi pi-refresh\" className=\"p-button-text\" />;\r\n        const paginatorRight = <Button type=\"button\" icon=\"pi pi-cloud\" className=\"p-button-text\" />;\r\n        const template1 = {\r\n            layout: 'PrevPageLink PageLinks NextPageLink RowsPerPageDropdown CurrentPageReport',\r\n            'PrevPageLink': (options) => {\r\n                return (\r\n                    <button type=\"button\" className={options.className} onClick={options.onClick} disabled={options.disabled}>\r\n                        <span className=\"p-p-3\">Previous</span>\r\n                        <Ripple />\r\n                    </button>\r\n                )\r\n            },\r\n            'NextPageLink': (options) => {\r\n                return (\r\n                    <button type=\"button\" className={options.className} onClick={options.onClick} disabled={options.disabled}>\r\n                        <span className=\"p-p-3\">Next</span>\r\n                        <Ripple />\r\n                    </button>\r\n                )\r\n            },\r\n            'PageLinks': (options) => {\r\n                if ((options.view.startPage === options.page && options.view.startPage !== 0) || (options.view.endPage === options.page && options.page + 1 !== options.totalPages)) {\r\n                    const className = classNames(options.className, { 'p-disabled': true });\r\n\r\n                    return <span className={className} style={{ userSelect: 'none' }}>...</span>;\r\n                }\r\n\r\n                return (\r\n                    <button type=\"button\" className={options.className} onClick={options.onClick}>\r\n                        {options.page + 1}\r\n                        <Ripple />\r\n                    </button>\r\n                )\r\n            },\r\n            'RowsPerPageDropdown': (options) => {\r\n                const dropdownOptions = [\r\n                    { label: 10, value: 10 },\r\n                    { label: 20, value: 20 },\r\n                    { label: 50, value: 50 },\r\n                    { label: 'All', value: options.totalRecords }\r\n                ];\r\n\r\n                return <Dropdown value={options.value} options={dropdownOptions} onChange={options.onChange} appendTo={document.body} />;\r\n            },\r\n            'CurrentPageReport': (options) => {\r\n                return (\r\n                    <span className=\"p-mx-3\" style={{ color: 'var(--text-color)', userSelect: 'none' }}>\r\n                        Go to <InputText size=\"2\" className=\"p-ml-1\" value={this.state.currentPage} tooltip={this.state.pageInputTooltip}\r\n                            onKeyDown={(e) => this.onPageInputKeyDown(e, options)} onChange={this.onPageInputChange}/>\r\n                    </span>\r\n                )\r\n            }\r\n        };\r\n        const template2 = {\r\n            layout: 'RowsPerPageDropdown CurrentPageReport PrevPageLink NextPageLink',\r\n            'RowsPerPageDropdown': (options) => {\r\n                const dropdownOptions = [\r\n                    { label: 10, value: 10 },\r\n                    { label: 20, value: 20 },\r\n                    { label: 50, value: 50 }\r\n                ];\r\n\r\n                return (\r\n                    <>\r\n                        <span className=\"p-mx-1\" style={{ color: 'var(--text-color)', userSelect: 'none' }}>Items per page: </span>\r\n                        <Dropdown value={options.value} options={dropdownOptions} onChange={options.onChange} appendTo={document.body} />\r\n                    </>\r\n                );\r\n            },\r\n            'CurrentPageReport': (options) => {\r\n                return (\r\n                    <span style={{ color: 'var(--text-color)', userSelect: 'none', width: '120px', textAlign: 'center' }}>\r\n                        {options.first} - {options.last} of {options.totalRecords}\r\n                    </span>\r\n                )\r\n            }\r\n        };\r\n\r\n        return (\r\n            <div>\r\n                <div className=\"content-section introduction\">\r\n                    <AppInlineHeader changelogText=\"dataTable\">\r\n                        <h1>DataTable <span>Paginator</span></h1>\r\n                        <p>Pagination is enabled by setting paginator property to true, rows attribute defines the number of rows per page and pageLinks specify the the number of page links to display.</p>\r\n                    </AppInlineHeader>\r\n                </div>\r\n\r\n                <div className=\"content-section implementation\">\r\n                    <div className=\"card\">\r\n                        <h5>Basic</h5>\r\n                        <DataTable value={this.state.customers1} paginator\r\n                            paginatorTemplate=\"CurrentPageReport FirstPageLink PrevPageLink PageLinks NextPageLink LastPageLink RowsPerPageDropdown\"\r\n                            currentPageReportTemplate=\"Showing {first} to {last} of {totalRecords}\" rows={10} rowsPerPageOptions={[10,20,50]}\r\n                            paginatorLeft={paginatorLeft} paginatorRight={paginatorRight}>\r\n                            <Column field=\"name\" header=\"Name\"></Column>\r\n                            <Column field=\"country.name\" header=\"Country\"></Column>\r\n                            <Column field=\"company\" header=\"Company\"></Column>\r\n                            <Column field=\"representative.name\" header=\"Representative\"></Column>\r\n                        </DataTable>\r\n\r\n                        <h5>Custom Paginator Template</h5>\r\n                        <DataTable value={this.state.customers2} paginator paginatorTemplate={template1} first={this.state.first1} rows={this.state.rows1} onPage={this.onCustomPage1}>\r\n                            <Column field=\"name\" header=\"Name\"></Column>\r\n                            <Column field=\"country.name\" header=\"Country\"></Column>\r\n                            <Column field=\"company\" header=\"Company\"></Column>\r\n                            <Column field=\"representative.name\" header=\"Representative\"></Column>\r\n                        </DataTable>\r\n\r\n                        <DataTable value={this.state.customers3} paginator paginatorTemplate={template2} first={this.state.first2} rows={this.state.rows2} onPage={this.onCustomPage2}\r\n                            paginatorClassName=\"p-jc-end\" className=\"p-mt-6\">\r\n                            <Column field=\"name\" header=\"Name\"></Column>\r\n                            <Column field=\"country.name\" header=\"Country\"></Column>\r\n                            <Column field=\"company\" header=\"Company\"></Column>\r\n                            <Column field=\"representative.name\" header=\"Representative\"></Column>\r\n                        </DataTable>\r\n                    </div>\r\n                </div>\r\n\r\n                <DataTablePaginatorDemoDoc></DataTablePaginatorDemoDoc>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport class DataTablePaginatorDemoDoc extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.sources = {\r\n            'class': {\r\n                tabName: 'Class Source',\r\n                content: `\r\nimport React, { Component } from 'react';\r\nimport { DataTable } from 'primereact/datatable';\r\nimport { Column } from 'primereact/column';\r\nimport { Button } from 'primereact/button';\r\nimport { Ripple } from 'primereact/ripple';\r\nimport { Dropdown } from 'primereact/dropdown';\r\nimport { InputText } from 'primereact/inputtext';\r\nimport { CustomerService } from '../service/CustomerService';\r\nimport { Button } from 'primereact/button';\r\nimport classNames from 'classnames';\r\n\r\nexport class DataTablePaginatorDemo extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            customers1: [],\r\n            customers2: [],\r\n            customers3: [],\r\n            first1: 0,\r\n            rows1: 10,\r\n            first2: 0,\r\n            rows2: 10,\r\n            currentPage: 1,\r\n            pageInputTooltip: 'Press \\\\'Enter\\\\' key to go to this page.'\r\n        };\r\n\r\n        this.customerService = new CustomerService();\r\n\r\n        this.onCustomPage1 = this.onCustomPage1.bind(this);\r\n        this.onCustomPage2 = this.onCustomPage2.bind(this);\r\n        this.onPageInputKeyDown = this.onPageInputKeyDown.bind(this);\r\n        this.onPageInputChange = this.onPageInputChange.bind(this);\r\n    }\r\n\r\n    onCustomPage1(event) {\r\n        this.setState({\r\n            first1: event.first,\r\n            rows1: event.rows,\r\n            currentPage: event.page + 1\r\n        });\r\n    }\r\n\r\n    onCustomPage2(event) {\r\n        this.setState({\r\n            first2: event.first,\r\n            rows2: event.rows\r\n        });\r\n    }\r\n\r\n    onPageInputKeyDown(event, options) {\r\n        if (event.key === 'Enter') {\r\n            const page = parseInt(this.state.currentPage);\r\n            if (page < 0 || page > options.totalPages) {\r\n                this.setState({ pageInputTooltip: \\`Value must be between 1 and \\${options.totalPages}.\\`})\r\n            }\r\n            else {\r\n                const first = this.state.currentPage ? options.rows * (page - 1) : 0;\r\n\r\n                this.setState({ first1: first, pageInputTooltip: 'Press \\\\'Enter\\\\' key to go to this page.' });\r\n            }\r\n        }\r\n    }\r\n\r\n    onPageInputChange(event) {\r\n        this.setState({ currentPage: event.target.value });\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.customerService.getCustomersLarge().then(data => this.setState({ customers1: data }));\r\n        this.customerService.getCustomersLarge().then(data => this.setState({ customers2: data }));\r\n        this.customerService.getCustomersLarge().then(data => this.setState({ customers3: data }));\r\n    }\r\n\r\n    render() {\r\n        const paginatorLeft = <Button type=\"button\" icon=\"pi pi-refresh\" className=\"p-button-text\" />;\r\n        const paginatorRight = <Button type=\"button\" icon=\"pi pi-cloud\" className=\"p-button-text\" />;\r\n        const template1 = {\r\n            layout: 'PrevPageLink PageLinks NextPageLink RowsPerPageDropdown CurrentPageReport',\r\n            'PrevPageLink': (options) => {\r\n                return (\r\n                    <button type=\"button\" className={options.className} onClick={options.onClick} disabled={options.disabled}>\r\n                        <span className=\"p-p-3\">Previous</span>\r\n                        <Ripple />\r\n                    </button>\r\n                )\r\n            },\r\n            'NextPageLink': (options) => {\r\n                return (\r\n                    <button type=\"button\" className={options.className} onClick={options.onClick} disabled={options.disabled}>\r\n                        <span className=\"p-p-3\">Next</span>\r\n                        <Ripple />\r\n                    </button>\r\n                )\r\n            },\r\n            'PageLinks': (options) => {\r\n                if ((options.view.startPage === options.page && options.view.startPage !== 0) || (options.view.endPage === options.page && options.page + 1 !== options.totalPages)) {\r\n                    const className = classNames(options.className, { 'p-disabled': true });\r\n\r\n                    return <span className={className} style={{ userSelect: 'none' }}>...</span>;\r\n                }\r\n\r\n                return (\r\n                    <button type=\"button\" className={options.className} onClick={options.onClick}>\r\n                        {options.page + 1}\r\n                        <Ripple />\r\n                    </button>\r\n                )\r\n            },\r\n            'RowsPerPageDropdown': (options) => {\r\n                const dropdownOptions = [\r\n                    { label: 10, value: 10 },\r\n                    { label: 20, value: 20 },\r\n                    { label: 50, value: 50 },\r\n                    { label: 'All', value: options.totalRecords }\r\n                ];\r\n\r\n                return <Dropdown value={options.value} options={dropdownOptions} onChange={options.onChange} appendTo={document.body} />;\r\n            },\r\n            'CurrentPageReport': (options) => {\r\n                return (\r\n                    <span className=\"p-mx-3\" style={{ color: 'var(--text-color)', userSelect: 'none' }}>\r\n                        Go to <InputText size=\"2\" className=\"p-ml-1\" value={this.state.currentPage} tooltip={this.state.pageInputTooltip}\r\n                            onKeyDown={(e) => this.onPageInputKeyDown(e, options)} onChange={this.onPageInputChange}/>\r\n                    </span>\r\n                )\r\n            }\r\n        };\r\n        const template2 = {\r\n            layout: 'RowsPerPageDropdown CurrentPageReport PrevPageLink NextPageLink',\r\n            'RowsPerPageDropdown': (options) => {\r\n                const dropdownOptions = [\r\n                    { label: 10, value: 10 },\r\n                    { label: 20, value: 20 },\r\n                    { label: 50, value: 50 }\r\n                ];\r\n\r\n                return (\r\n                    <>\r\n                        <span className=\"p-mx-1\" style={{ color: 'var(--text-color)', userSelect: 'none' }}>Items per page: </span>\r\n                        <Dropdown value={options.value} options={dropdownOptions} onChange={options.onChange} appendTo={document.body} />\r\n                    </>\r\n                );\r\n            },\r\n            'CurrentPageReport': (options) => {\r\n                return (\r\n                    <span style={{ color: 'var(--text-color)', userSelect: 'none', width: '120px', textAlign: 'center' }}>\r\n                        {options.first} - {options.last} of {options.totalRecords}\r\n                    </span>\r\n                )\r\n            }\r\n        };\r\n\r\n        return (\r\n            <div>\r\n                <div className=\"card\">\r\n                    <h5>Basic</h5>\r\n                    <DataTable value={this.state.customers1} paginator\r\n                        paginatorTemplate=\"CurrentPageReport FirstPageLink PrevPageLink PageLinks NextPageLink LastPageLink RowsPerPageDropdown\"\r\n                        currentPageReportTemplate=\"Showing {first} to {last} of {totalRecords}\" rows={10} rowsPerPageOptions={[10,20,50]}\r\n                        paginatorLeft={paginatorLeft} paginatorRight={paginatorRight}>\r\n                        <Column field=\"name\" header=\"Name\"></Column>\r\n                        <Column field=\"country.name\" header=\"Country\"></Column>\r\n                        <Column field=\"company\" header=\"Company\"></Column>\r\n                        <Column field=\"representative.name\" header=\"Representative\"></Column>\r\n                    </DataTable>\r\n\r\n                    <h5>Custom Paginator Template</h5>\r\n                    <DataTable value={this.state.customers2} paginator paginatorTemplate={template1} first={this.state.first1} rows={this.state.rows1} onPage={this.onCustomPage1}>\r\n                        <Column field=\"name\" header=\"Name\"></Column>\r\n                        <Column field=\"country.name\" header=\"Country\"></Column>\r\n                        <Column field=\"company\" header=\"Company\"></Column>\r\n                        <Column field=\"representative.name\" header=\"Representative\"></Column>\r\n                    </DataTable>\r\n\r\n                    <DataTable value={this.state.customers3} paginator paginatorTemplate={template2} first={this.state.first2} rows={this.state.rows2} onPage={this.onCustomPage2}\r\n                        paginatorClassName=\"p-jc-end\" className=\"p-mt-6\">\r\n                        <Column field=\"name\" header=\"Name\"></Column>\r\n                        <Column field=\"country.name\" header=\"Country\"></Column>\r\n                        <Column field=\"company\" header=\"Company\"></Column>\r\n                        <Column field=\"representative.name\" header=\"Representative\"></Column>\r\n                    </DataTable>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n                `\r\n            },\r\n            'hooks': {\r\n                tabName: 'Hooks Source',\r\n                content: `\r\nimport React, { useState, useEffect } from 'react';\r\nimport { DataTable } from 'primereact/datatable';\r\nimport { Column } from 'primereact/column';\r\nimport { Button } from 'primereact/button';\r\nimport { Ripple } from 'primereact/ripple';\r\nimport { Dropdown } from 'primereact/dropdown';\r\nimport { InputText } from 'primereact/inputtext';\r\nimport { CustomerService } from '../service/CustomerService';\r\nimport { Button } from 'primereact/button';\r\nimport classNames from 'classnames';\r\n\r\nconst DataTablePaginatorDemo = () => {\r\n    const [customers1, setCustomers1] = useState([]);\r\n    const [customers2, setCustomers2] = useState([]);\r\n    const [customers3, setCustomers3] = useState([]);\r\n    const [first1, setFirst1] = useState(0);\r\n    const [rows1, setRows1] = useState(10);\r\n    const [first2, setFirst2] = useState(0);\r\n    const [rows2, setRows2] = useState(10);\r\n    const [currentPage, setCurrentPage] = useState(1);\r\n    const [pageInputTooltip, setPageInputTooltip] = useState('Press \\\\'Enter\\\\' key to go to this page.');\r\n\r\n    const customerService = new CustomerService();\r\n\r\n    const onCustomPage1 = (event) => {\r\n        setFirst1(event.first);\r\n        setRows1(event.rows);\r\n        setCurrentPage(event.page + 1);\r\n    }\r\n\r\n    const onCustomPage2 = (event) => {\r\n        setFirst2(event.first);\r\n        setRows2(event.rows);\r\n    }\r\n\r\n    const onPageInputKeyDown = (event, options) => {\r\n        if (event.key === 'Enter') {\r\n            const page = parseInt(currentPage);\r\n            if (page < 0 || page > options.totalPages) {\r\n                setPageInputTooltip(\\`Value must be between 1 and \\${options.totalPages}.\\`);\r\n            }\r\n            else {\r\n                const first = currentPage ? options.rows * (page - 1) : 0;\r\n\r\n                setFirst1(first);\r\n                setPageInputTooltip('Press \\\\'Enter\\\\' key to go to this page.');\r\n            }\r\n        }\r\n    }\r\n\r\n    const onPageInputChange = (event) => {\r\n        setCurrentPage(event.target.value);\r\n    }\r\n\r\n    useEffect(() => {\r\n        customerService.getCustomersLarge().then(data => setCustomers1(data));\r\n        customerService.getCustomersLarge().then(data => setCustomers2(data));\r\n        customerService.getCustomersLarge().then(data => setCustomers3(data));\r\n    }, []); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n    const paginatorLeft = <Button type=\"button\" icon=\"pi pi-refresh\" className=\"p-button-text\" />;\r\n    const paginatorRight = <Button type=\"button\" icon=\"pi pi-cloud\" className=\"p-button-text\" />;\r\n    const template1 = {\r\n        layout: 'PrevPageLink PageLinks NextPageLink RowsPerPageDropdown CurrentPageReport',\r\n        'PrevPageLink': (options) => {\r\n            return (\r\n                <button type=\"button\" className={options.className} onClick={options.onClick} disabled={options.disabled}>\r\n                    <span className=\"p-p-3\">Previous</span>\r\n                    <Ripple />\r\n                </button>\r\n            )\r\n        },\r\n        'NextPageLink': (options) => {\r\n            return (\r\n                <button type=\"button\" className={options.className} onClick={options.onClick} disabled={options.disabled}>\r\n                    <span className=\"p-p-3\">Next</span>\r\n                    <Ripple />\r\n                </button>\r\n            )\r\n        },\r\n        'PageLinks': (options) => {\r\n            if ((options.view.startPage === options.page && options.view.startPage !== 0) || (options.view.endPage === options.page && options.page + 1 !== options.totalPages)) {\r\n                const className = classNames(options.className, { 'p-disabled': true });\r\n\r\n                return <span className={className} style={{ userSelect: 'none' }}>...</span>;\r\n            }\r\n\r\n            return (\r\n                <button type=\"button\" className={options.className} onClick={options.onClick}>\r\n                    {options.page + 1}\r\n                    <Ripple />\r\n                </button>\r\n            )\r\n        },\r\n        'RowsPerPageDropdown': (options) => {\r\n            const dropdownOptions = [\r\n                { label: 10, value: 10 },\r\n                { label: 20, value: 20 },\r\n                { label: 50, value: 50 },\r\n                { label: 'All', value: options.totalRecords }\r\n            ];\r\n\r\n            return <Dropdown value={options.value} options={dropdownOptions} onChange={options.onChange} appendTo={document.body} />;\r\n        },\r\n        'CurrentPageReport': (options) => {\r\n            return (\r\n                <span className=\"p-mx-3\" style={{ color: 'var(--text-color)', userSelect: 'none' }}>\r\n                    Go to <InputText size=\"2\" className=\"p-ml-1\" value={currentPage} tooltip={pageInputTooltip}\r\n                        onKeyDown={(e) => onPageInputKeyDown(e, options)} onChange={onPageInputChange}/>\r\n                </span>\r\n            )\r\n        }\r\n    };\r\n    const template2 = {\r\n        layout: 'RowsPerPageDropdown CurrentPageReport PrevPageLink NextPageLink',\r\n        'RowsPerPageDropdown': (options) => {\r\n            const dropdownOptions = [\r\n                { label: 10, value: 10 },\r\n                { label: 20, value: 20 },\r\n                { label: 50, value: 50 }\r\n            ];\r\n\r\n            return (\r\n                <>\r\n                    <span className=\"p-mx-1\" style={{ color: 'var(--text-color)', userSelect: 'none' }}>Items per page: </span>\r\n                    <Dropdown value={options.value} options={dropdownOptions} onChange={options.onChange} appendTo={document.body} />\r\n                </>\r\n            );\r\n        },\r\n        'CurrentPageReport': (options) => {\r\n            return (\r\n                <span style={{ color: 'var(--text-color)', userSelect: 'none', width: '120px', textAlign: 'center' }}>\r\n                    {options.first} - {options.last} of {options.totalRecords}\r\n                </span>\r\n            )\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"card\">\r\n                <h5>Basic</h5>\r\n                <DataTable value={customers1} paginator\r\n                    paginatorTemplate=\"CurrentPageReport FirstPageLink PrevPageLink PageLinks NextPageLink LastPageLink RowsPerPageDropdown\"\r\n                    currentPageReportTemplate=\"Showing {first} to {last} of {totalRecords}\" rows={10} rowsPerPageOptions={[10,20,50]}\r\n                    paginatorLeft={paginatorLeft} paginatorRight={paginatorRight}>\r\n                    <Column field=\"name\" header=\"Name\"></Column>\r\n                    <Column field=\"country.name\" header=\"Country\"></Column>\r\n                    <Column field=\"company\" header=\"Company\"></Column>\r\n                    <Column field=\"representative.name\" header=\"Representative\"></Column>\r\n                </DataTable>\r\n\r\n                <h5>Custom Paginator Template</h5>\r\n                <DataTable value={customers2} paginator paginatorTemplate={template1} first={first1} rows={rows1} onPage={onCustomPage1}>\r\n                    <Column field=\"name\" header=\"Name\"></Column>\r\n                    <Column field=\"country.name\" header=\"Country\"></Column>\r\n                    <Column field=\"company\" header=\"Company\"></Column>\r\n                    <Column field=\"representative.name\" header=\"Representative\"></Column>\r\n                </DataTable>\r\n\r\n                <DataTable value={customers3} paginator paginatorTemplate={template2} first={first2} rows={rows2} onPage={onCustomPage2}\r\n                    paginatorClassName=\"p-jc-end\" className=\"p-mt-6\">\r\n                    <Column field=\"name\" header=\"Name\"></Column>\r\n                    <Column field=\"country.name\" header=\"Country\"></Column>\r\n                    <Column field=\"company\" header=\"Company\"></Column>\r\n                    <Column field=\"representative.name\" header=\"Representative\"></Column>\r\n                </DataTable>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n                `\r\n            },\r\n            'ts': {\r\n                tabName: 'TS Source',\r\n                content: `\r\nimport React, { useState, useEffect } from 'react';\r\nimport { DataTable } from 'primereact/datatable';\r\nimport { Column } from 'primereact/column';\r\nimport { Button } from 'primereact/button';\r\nimport { Ripple } from 'primereact/ripple';\r\nimport { Dropdown } from 'primereact/dropdown';\r\nimport { InputText } from 'primereact/inputtext';\r\nimport { CustomerService } from '../service/CustomerService';\r\nimport { Button } from 'primereact/button';\r\nimport classNames from 'classnames';\r\n\r\nconst DataTablePaginatorDemo = () => {\r\n    const [customers1, setCustomers1] = useState([]);\r\n    const [customers2, setCustomers2] = useState([]);\r\n    const [customers3, setCustomers3] = useState([]);\r\n    const [first1, setFirst1] = useState(0);\r\n    const [rows1, setRows1] = useState(10);\r\n    const [first2, setFirst2] = useState(0);\r\n    const [rows2, setRows2] = useState(10);\r\n    const [currentPage, setCurrentPage] = useState(1);\r\n    const [pageInputTooltip, setPageInputTooltip] = useState('Press \\\\'Enter\\\\' key to go to this page.');\r\n\r\n    const customerService = new CustomerService();\r\n\r\n    const onCustomPage1 = (event) => {\r\n        setFirst1(event.first);\r\n        setRows1(event.rows);\r\n        setCurrentPage(event.page + 1);\r\n    }\r\n\r\n    const onCustomPage2 = (event) => {\r\n        setFirst2(event.first);\r\n        setRows2(event.rows);\r\n    }\r\n\r\n    const onPageInputKeyDown = (event, options) => {\r\n        if (event.key === 'Enter') {\r\n            const page = parseInt(currentPage);\r\n            if (page < 0 || page > options.totalPages) {\r\n                setPageInputTooltip(\\`Value must be between 1 and \\${options.totalPages}.\\`);\r\n            }\r\n            else {\r\n                const first = currentPage ? options.rows * (page - 1) : 0;\r\n\r\n                setFirst1(first);\r\n                setPageInputTooltip('Press \\\\'Enter\\\\' key to go to this page.');\r\n            }\r\n        }\r\n    }\r\n\r\n    const onPageInputChange = (event) => {\r\n        setCurrentPage(event.target.value);\r\n    }\r\n\r\n    useEffect(() => {\r\n        customerService.getCustomersLarge().then(data => setCustomers1(data));\r\n        customerService.getCustomersLarge().then(data => setCustomers2(data));\r\n        customerService.getCustomersLarge().then(data => setCustomers3(data));\r\n    }, []); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n    const paginatorLeft = <Button type=\"button\" icon=\"pi pi-refresh\" className=\"p-button-text\" />;\r\n    const paginatorRight = <Button type=\"button\" icon=\"pi pi-cloud\" className=\"p-button-text\" />;\r\n    const template1 = {\r\n        layout: 'PrevPageLink PageLinks NextPageLink RowsPerPageDropdown CurrentPageReport',\r\n        'PrevPageLink': (options) => {\r\n            return (\r\n                <button type=\"button\" className={options.className} onClick={options.onClick} disabled={options.disabled}>\r\n                    <span className=\"p-p-3\">Previous</span>\r\n                    <Ripple />\r\n                </button>\r\n            )\r\n        },\r\n        'NextPageLink': (options) => {\r\n            return (\r\n                <button type=\"button\" className={options.className} onClick={options.onClick} disabled={options.disabled}>\r\n                    <span className=\"p-p-3\">Next</span>\r\n                    <Ripple />\r\n                </button>\r\n            )\r\n        },\r\n        'PageLinks': (options) => {\r\n            if ((options.view.startPage === options.page && options.view.startPage !== 0) || (options.view.endPage === options.page && options.page + 1 !== options.totalPages)) {\r\n                const className = classNames(options.className, { 'p-disabled': true });\r\n\r\n                return <span className={className} style={{ userSelect: 'none' }}>...</span>;\r\n            }\r\n\r\n            return (\r\n                <button type=\"button\" className={options.className} onClick={options.onClick}>\r\n                    {options.page + 1}\r\n                    <Ripple />\r\n                </button>\r\n            )\r\n        },\r\n        'RowsPerPageDropdown': (options) => {\r\n            const dropdownOptions = [\r\n                { label: 10, value: 10 },\r\n                { label: 20, value: 20 },\r\n                { label: 50, value: 50 },\r\n                { label: 'All', value: options.totalRecords }\r\n            ];\r\n\r\n            return <Dropdown value={options.value} options={dropdownOptions} onChange={options.onChange} appendTo={document.body} />;\r\n        },\r\n        'CurrentPageReport': (options) => {\r\n            return (\r\n                <span className=\"p-mx-3\" style={{ color: 'var(--text-color)', userSelect: 'none' }}>\r\n                    Go to <InputText size=\"2\" className=\"p-ml-1\" value={currentPage} tooltip={pageInputTooltip}\r\n                        onKeyDown={(e) => onPageInputKeyDown(e, options)} onChange={onPageInputChange}/>\r\n                </span>\r\n            )\r\n        }\r\n    };\r\n    const template2 = {\r\n        layout: 'RowsPerPageDropdown CurrentPageReport PrevPageLink NextPageLink',\r\n        'RowsPerPageDropdown': (options) => {\r\n            const dropdownOptions = [\r\n                { label: 10, value: 10 },\r\n                { label: 20, value: 20 },\r\n                { label: 50, value: 50 }\r\n            ];\r\n\r\n            return (\r\n                <>\r\n                    <span className=\"p-mx-1\" style={{ color: 'var(--text-color)', userSelect: 'none' }}>Items per page: </span>\r\n                    <Dropdown value={options.value} options={dropdownOptions} onChange={options.onChange} appendTo={document.body} />\r\n                </>\r\n            );\r\n        },\r\n        'CurrentPageReport': (options) => {\r\n            return (\r\n                <span style={{ color: 'var(--text-color)', userSelect: 'none', width: '120px', textAlign: 'center' }}>\r\n                    {options.first} - {options.last} of {options.totalRecords}\r\n                </span>\r\n            )\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"card\">\r\n                <h5>Basic</h5>\r\n                <DataTable value={customers1} paginator\r\n                    paginatorTemplate=\"CurrentPageReport FirstPageLink PrevPageLink PageLinks NextPageLink LastPageLink RowsPerPageDropdown\"\r\n                    currentPageReportTemplate=\"Showing {first} to {last} of {totalRecords}\" rows={10} rowsPerPageOptions={[10,20,50]}\r\n                    paginatorLeft={paginatorLeft} paginatorRight={paginatorRight}>\r\n                    <Column field=\"name\" header=\"Name\"></Column>\r\n                    <Column field=\"country.name\" header=\"Country\"></Column>\r\n                    <Column field=\"company\" header=\"Company\"></Column>\r\n                    <Column field=\"representative.name\" header=\"Representative\"></Column>\r\n                </DataTable>\r\n\r\n                <h5>Custom Paginator Template</h5>\r\n                <DataTable value={customers2} paginator paginatorTemplate={template1} first={first1} rows={rows1} onPage={onCustomPage1}>\r\n                    <Column field=\"name\" header=\"Name\"></Column>\r\n                    <Column field=\"country.name\" header=\"Country\"></Column>\r\n                    <Column field=\"company\" header=\"Company\"></Column>\r\n                    <Column field=\"representative.name\" header=\"Representative\"></Column>\r\n                </DataTable>\r\n\r\n                <DataTable value={customers3} paginator paginatorTemplate={template2} first={first2} rows={rows2} onPage={onCustomPage2}\r\n                    paginatorClassName=\"p-jc-end\" className=\"p-mt-6\">\r\n                    <Column field=\"name\" header=\"Name\"></Column>\r\n                    <Column field=\"country.name\" header=\"Country\"></Column>\r\n                    <Column field=\"company\" header=\"Company\"></Column>\r\n                    <Column field=\"representative.name\" header=\"Representative\"></Column>\r\n                </DataTable>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n                `\r\n            }\r\n        }\r\n    }\r\n\r\n    shouldComponentUpdate() {\r\n        return false;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"content-section documentation\">\r\n                <TabView>\r\n                    {\r\n                        useLiveEditorTabs({ name: 'DataTablePaginatorDemo', sources: this.sources, service: 'CustomerService', data: 'customers-large' })\r\n                    }\r\n                </TabView>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}