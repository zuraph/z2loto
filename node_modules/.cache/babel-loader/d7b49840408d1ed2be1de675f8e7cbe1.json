{"ast":null,"code":"import _toConsumableArray from\"C:\\\\Users\\\\zura.ph\\\\WebstormProjects\\\\zz-regul\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";import _objectSpread from\"C:\\\\Users\\\\zura.ph\\\\WebstormProjects\\\\zz-regul\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";import _classCallCheck from\"C:\\\\Users\\\\zura.ph\\\\WebstormProjects\\\\zz-regul\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";import _createClass from\"C:\\\\Users\\\\zura.ph\\\\WebstormProjects\\\\zz-regul\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";import _assertThisInitialized from\"C:\\\\Users\\\\zura.ph\\\\WebstormProjects\\\\zz-regul\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/assertThisInitialized\";import _inherits from\"C:\\\\Users\\\\zura.ph\\\\WebstormProjects\\\\zz-regul\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";import _createSuper from\"C:\\\\Users\\\\zura.ph\\\\WebstormProjects\\\\zz-regul\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createSuper\";import React,{Component}from'react';import{Tree}from'../../components/tree/Tree';import{TabView}from'../../components/tabview/TabView';import{useLiveEditorTabs}from'../liveeditor/LiveEditor';import{AppInlineHeader}from'../../AppInlineHeader';export var TreeLazyDemo=/*#__PURE__*/function(_Component){_inherits(TreeLazyDemo,_Component);var _super=_createSuper(TreeLazyDemo);function TreeLazyDemo(props){var _this;_classCallCheck(this,TreeLazyDemo);_this=_super.call(this,props);_this.state={nodes:null,loading:true};_this.loadOnExpand=_this.loadOnExpand.bind(_assertThisInitialized(_this));return _this;}_createClass(TreeLazyDemo,[{key:\"createLazyNodes\",value:function createLazyNodes(){return[{key:'0',label:'Node 0',leaf:false},{key:'1',label:'Node 1',leaf:false},{key:'2',label:'Node 2',leaf:false}];}},{key:\"loadOnExpand\",value:function loadOnExpand(event){var _this2=this;if(!event.node.children){this.setState({loading:true});setTimeout(function(){var node=_objectSpread({},event.node);node.children=[];for(var i=0;i<3;i++){node.children.push({key:node.key+'-'+i,label:'Lazy '+node.label+'-'+i});}var value=_toConsumableArray(_this2.state.nodes);value[parseInt(event.node.key,10)]=node;_this2.setState({nodes:value,loading:false});},500);}}},{key:\"componentDidMount\",value:function componentDidMount(){var _this3=this;setTimeout(function(){_this3.setState({nodes:_this3.createLazyNodes(),loading:false});},2000);}},{key:\"render\",value:function render(){return/*#__PURE__*/React.createElement(\"div\",null,/*#__PURE__*/React.createElement(\"div\",{className:\"content-section introduction\"},/*#__PURE__*/React.createElement(AppInlineHeader,{changelogText:\"tree\"},/*#__PURE__*/React.createElement(\"h1\",null,\"Tree \",/*#__PURE__*/React.createElement(\"span\",null,\"Lazy\")),/*#__PURE__*/React.createElement(\"p\",null,\"Lazy loading is useful when dealing with huge datasets.\"))),/*#__PURE__*/React.createElement(\"div\",{className:\"content-section implementation\"},/*#__PURE__*/React.createElement(\"div\",{className:\"card\"},/*#__PURE__*/React.createElement(Tree,{value:this.state.nodes,onExpand:this.loadOnExpand,loading:this.state.loading}))),/*#__PURE__*/React.createElement(TreeLazyDemoDoc,null));}}]);return TreeLazyDemo;}(Component);export var TreeLazyDemoDoc=/*#__PURE__*/function(_Component2){_inherits(TreeLazyDemoDoc,_Component2);var _super2=_createSuper(TreeLazyDemoDoc);function TreeLazyDemoDoc(props){var _this4;_classCallCheck(this,TreeLazyDemoDoc);_this4=_super2.call(this,props);_this4.sources={'class':{tabName:'Class Source',content:\"\\nimport React, { Component } from 'react';\\nimport { Tree } from 'primereact/tree';\\n\\nexport class TreeLazyDemo extends Component {\\n\\n    constructor(props) {\\n        super(props);\\n        this.state = {\\n            nodes: null,\\n            loading: true,\\n        };\\n\\n        this.loadOnExpand = this.loadOnExpand.bind(this);\\n    }\\n\\n    createLazyNodes() {\\n        return [\\n            {\\n                key: '0',\\n                label: 'Node 0',\\n                leaf: false\\n            },\\n            {\\n                key: '1',\\n                label: 'Node 1',\\n                leaf: false\\n            },\\n            {\\n                key: '2',\\n                label: 'Node 2',\\n                leaf: false\\n            }\\n        ];\\n    }\\n\\n    loadOnExpand(event) {\\n        if (!event.node.children) {\\n            this.setState({\\n                loading: true\\n            });\\n\\n            setTimeout(() => {\\n                let node = { ...event.node };\\n                node.children = [];\\n\\n                for (let i = 0; i < 3; i++) {\\n                    node.children.push({\\n                        key: node.key + '-' + i,\\n                        label: 'Lazy ' + node.label + '-' + i\\n                    });\\n                }\\n\\n                let value = [...this.state.nodes];\\n                value[parseInt(event.node.key, 10)] = node;\\n                this.setState({\\n                    nodes: value,\\n                    loading: false\\n                });\\n            }, 500);\\n        }\\n    }\\n\\n    componentDidMount() {\\n        setTimeout(() => {\\n            this.setState({\\n                nodes: this.createLazyNodes(),\\n                loading: false\\n            });\\n        }, 2000);\\n    }\\n\\n    render() {\\n        return (\\n            <div>\\n                <div className=\\\"card\\\">\\n                    <Tree value={this.state.nodes} onExpand={this.loadOnExpand} loading={this.state.loading} />\\n                </div>\\n            </div>\\n        )\\n    }\\n}\\n                \"},'hooks':{tabName:'Hooks Source',content:\"\\nimport React, { useState, useEffect } from 'react';\\nimport { Tree } from 'primereact/tree';\\n\\nconst TreeLazyDemo = () => {\\n    const [nodes, setNodes] = useState(null);\\n    const [loading, setLoading] = useState(true);\\n\\n    const createLazyNodes = () => {\\n        return [\\n            {\\n                key: '0',\\n                label: 'Node 0',\\n                leaf: false\\n            },\\n            {\\n                key: '1',\\n                label: 'Node 1',\\n                leaf: false\\n            },\\n            {\\n                key: '2',\\n                label: 'Node 2',\\n                leaf: false\\n            }\\n        ];\\n    }\\n\\n    const loadOnExpand = (event) => {\\n        if (!event.node.children) {\\n            setLoading(true);\\n\\n            setTimeout(() => {\\n                let node = { ...event.node };\\n                node.children = [];\\n\\n                for (let i = 0; i < 3; i++) {\\n                    node.children.push({\\n                        key: node.key + '-' + i,\\n                        label: 'Lazy ' + node.label + '-' + i\\n                    });\\n                }\\n\\n                let value = [...nodes];\\n                value[parseInt(event.node.key, 10)] = node;\\n                setNodes(value);\\n                setLoading(false);\\n            }, 500);\\n        }\\n    }\\n\\n    useEffect(() => {\\n        setTimeout(() => {\\n            setNodes(createLazyNodes());\\n            setLoading(false);\\n        }, 2000);\\n    }, []); // eslint-disable-line react-hooks/exhaustive-deps\\n\\n    return (\\n        <div>\\n            <div className=\\\"card\\\">\\n                <Tree value={nodes} onExpand={loadOnExpand} loading={loading} />\\n            </div>\\n        </div>\\n    )\\n}\\n                \"},'ts':{tabName:'TS Source',content:\"\\nimport React, { useState, useEffect } from 'react';\\nimport { Tree } from 'primereact/tree';\\n\\nconst TreeLazyDemo = () => {\\n    const [nodes, setNodes] = useState(null);\\n    const [loading, setLoading] = useState(true);\\n\\n    const createLazyNodes = () => {\\n        return [\\n            {\\n                key: '0',\\n                label: 'Node 0',\\n                leaf: false\\n            },\\n            {\\n                key: '1',\\n                label: 'Node 1',\\n                leaf: false\\n            },\\n            {\\n                key: '2',\\n                label: 'Node 2',\\n                leaf: false\\n            }\\n        ];\\n    }\\n\\n    const loadOnExpand = (event) => {\\n        if (!event.node.children) {\\n            setLoading(true);\\n\\n            setTimeout(() => {\\n                let node = { ...event.node };\\n                node.children = [];\\n\\n                for (let i = 0; i < 3; i++) {\\n                    node.children.push({\\n                        key: node.key + '-' + i,\\n                        label: 'Lazy ' + node.label + '-' + i\\n                    });\\n                }\\n\\n                let value = [...nodes];\\n                value[parseInt(event.node.key, 10)] = node;\\n                setNodes(value);\\n                setLoading(false);\\n            }, 500);\\n        }\\n    }\\n\\n    useEffect(() => {\\n        setTimeout(() => {\\n            setNodes(createLazyNodes());\\n            setLoading(false);\\n        }, 2000);\\n    }, []); // eslint-disable-line react-hooks/exhaustive-deps\\n\\n    return (\\n        <div>\\n            <div className=\\\"card\\\">\\n                <Tree value={nodes} onExpand={loadOnExpand} loading={loading} />\\n            </div>\\n        </div>\\n    )\\n}\\n                \"}};return _this4;}_createClass(TreeLazyDemoDoc,[{key:\"shouldComponentUpdate\",value:function shouldComponentUpdate(){return false;}},{key:\"render\",value:function render(){return/*#__PURE__*/React.createElement(\"div\",{className:\"content-section documentation\"},/*#__PURE__*/React.createElement(TabView,null,useLiveEditorTabs({name:'TreeLazyDemo',sources:this.sources})));}}]);return TreeLazyDemoDoc;}(Component);","map":{"version":3,"sources":["C:/Users/zura.ph/WebstormProjects/zz-regul/src/showcase/tree/TreeLazyDemo.js"],"names":["React","Component","Tree","TabView","useLiveEditorTabs","AppInlineHeader","TreeLazyDemo","props","state","nodes","loading","loadOnExpand","bind","key","label","leaf","event","node","children","setState","setTimeout","i","push","value","parseInt","createLazyNodes","TreeLazyDemoDoc","sources","tabName","content","name"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { Tree } from '../../components/tree/Tree';\r\nimport { TabView } from '../../components/tabview/TabView';\r\nimport { useLiveEditorTabs }from '../liveeditor/LiveEditor';\r\nimport { AppInlineHeader } from '../../AppInlineHeader';\r\n\r\nexport class TreeLazyDemo extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            nodes: null,\r\n            loading: true,\r\n        };\r\n\r\n        this.loadOnExpand = this.loadOnExpand.bind(this);\r\n    }\r\n\r\n    createLazyNodes() {\r\n        return [\r\n            {\r\n                key: '0',\r\n                label: 'Node 0',\r\n                leaf: false\r\n            },\r\n            {\r\n                key: '1',\r\n                label: 'Node 1',\r\n                leaf: false\r\n            },\r\n            {\r\n                key: '2',\r\n                label: 'Node 2',\r\n                leaf: false\r\n            }\r\n        ];\r\n    }\r\n\r\n    loadOnExpand(event) {\r\n        if (!event.node.children) {\r\n            this.setState({\r\n                loading: true\r\n            });\r\n\r\n            setTimeout(() => {\r\n                let node = { ...event.node };\r\n                node.children = [];\r\n\r\n                for (let i = 0; i < 3; i++) {\r\n                    node.children.push({\r\n                        key: node.key + '-' + i,\r\n                        label: 'Lazy ' + node.label + '-' + i\r\n                    });\r\n                }\r\n\r\n                let value = [...this.state.nodes];\r\n                value[parseInt(event.node.key, 10)] = node;\r\n                this.setState({\r\n                    nodes: value,\r\n                    loading: false\r\n                });\r\n            }, 500);\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        setTimeout(() => {\r\n            this.setState({\r\n                nodes: this.createLazyNodes(),\r\n                loading: false\r\n            });\r\n        }, 2000);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div className=\"content-section introduction\">\r\n                    <AppInlineHeader changelogText=\"tree\">\r\n                        <h1>Tree <span>Lazy</span></h1>\r\n                        <p>Lazy loading is useful when dealing with huge datasets.</p>\r\n                    </AppInlineHeader>\r\n                </div>\r\n\r\n                <div className=\"content-section implementation\">\r\n                    <div className=\"card\">\r\n                        <Tree value={this.state.nodes} onExpand={this.loadOnExpand} loading={this.state.loading} />\r\n                    </div>\r\n                </div>\r\n\r\n                <TreeLazyDemoDoc />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport class TreeLazyDemoDoc extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.sources = {\r\n            'class': {\r\n                tabName: 'Class Source',\r\n                content: `\r\nimport React, { Component } from 'react';\r\nimport { Tree } from 'primereact/tree';\r\n\r\nexport class TreeLazyDemo extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            nodes: null,\r\n            loading: true,\r\n        };\r\n\r\n        this.loadOnExpand = this.loadOnExpand.bind(this);\r\n    }\r\n\r\n    createLazyNodes() {\r\n        return [\r\n            {\r\n                key: '0',\r\n                label: 'Node 0',\r\n                leaf: false\r\n            },\r\n            {\r\n                key: '1',\r\n                label: 'Node 1',\r\n                leaf: false\r\n            },\r\n            {\r\n                key: '2',\r\n                label: 'Node 2',\r\n                leaf: false\r\n            }\r\n        ];\r\n    }\r\n\r\n    loadOnExpand(event) {\r\n        if (!event.node.children) {\r\n            this.setState({\r\n                loading: true\r\n            });\r\n\r\n            setTimeout(() => {\r\n                let node = { ...event.node };\r\n                node.children = [];\r\n\r\n                for (let i = 0; i < 3; i++) {\r\n                    node.children.push({\r\n                        key: node.key + '-' + i,\r\n                        label: 'Lazy ' + node.label + '-' + i\r\n                    });\r\n                }\r\n\r\n                let value = [...this.state.nodes];\r\n                value[parseInt(event.node.key, 10)] = node;\r\n                this.setState({\r\n                    nodes: value,\r\n                    loading: false\r\n                });\r\n            }, 500);\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        setTimeout(() => {\r\n            this.setState({\r\n                nodes: this.createLazyNodes(),\r\n                loading: false\r\n            });\r\n        }, 2000);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div className=\"card\">\r\n                    <Tree value={this.state.nodes} onExpand={this.loadOnExpand} loading={this.state.loading} />\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n                `\r\n            },\r\n            'hooks': {\r\n                tabName: 'Hooks Source',\r\n                content: `\r\nimport React, { useState, useEffect } from 'react';\r\nimport { Tree } from 'primereact/tree';\r\n\r\nconst TreeLazyDemo = () => {\r\n    const [nodes, setNodes] = useState(null);\r\n    const [loading, setLoading] = useState(true);\r\n\r\n    const createLazyNodes = () => {\r\n        return [\r\n            {\r\n                key: '0',\r\n                label: 'Node 0',\r\n                leaf: false\r\n            },\r\n            {\r\n                key: '1',\r\n                label: 'Node 1',\r\n                leaf: false\r\n            },\r\n            {\r\n                key: '2',\r\n                label: 'Node 2',\r\n                leaf: false\r\n            }\r\n        ];\r\n    }\r\n\r\n    const loadOnExpand = (event) => {\r\n        if (!event.node.children) {\r\n            setLoading(true);\r\n\r\n            setTimeout(() => {\r\n                let node = { ...event.node };\r\n                node.children = [];\r\n\r\n                for (let i = 0; i < 3; i++) {\r\n                    node.children.push({\r\n                        key: node.key + '-' + i,\r\n                        label: 'Lazy ' + node.label + '-' + i\r\n                    });\r\n                }\r\n\r\n                let value = [...nodes];\r\n                value[parseInt(event.node.key, 10)] = node;\r\n                setNodes(value);\r\n                setLoading(false);\r\n            }, 500);\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        setTimeout(() => {\r\n            setNodes(createLazyNodes());\r\n            setLoading(false);\r\n        }, 2000);\r\n    }, []); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"card\">\r\n                <Tree value={nodes} onExpand={loadOnExpand} loading={loading} />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n                `\r\n            },\r\n            'ts': {\r\n                tabName: 'TS Source',\r\n                content: `\r\nimport React, { useState, useEffect } from 'react';\r\nimport { Tree } from 'primereact/tree';\r\n\r\nconst TreeLazyDemo = () => {\r\n    const [nodes, setNodes] = useState(null);\r\n    const [loading, setLoading] = useState(true);\r\n\r\n    const createLazyNodes = () => {\r\n        return [\r\n            {\r\n                key: '0',\r\n                label: 'Node 0',\r\n                leaf: false\r\n            },\r\n            {\r\n                key: '1',\r\n                label: 'Node 1',\r\n                leaf: false\r\n            },\r\n            {\r\n                key: '2',\r\n                label: 'Node 2',\r\n                leaf: false\r\n            }\r\n        ];\r\n    }\r\n\r\n    const loadOnExpand = (event) => {\r\n        if (!event.node.children) {\r\n            setLoading(true);\r\n\r\n            setTimeout(() => {\r\n                let node = { ...event.node };\r\n                node.children = [];\r\n\r\n                for (let i = 0; i < 3; i++) {\r\n                    node.children.push({\r\n                        key: node.key + '-' + i,\r\n                        label: 'Lazy ' + node.label + '-' + i\r\n                    });\r\n                }\r\n\r\n                let value = [...nodes];\r\n                value[parseInt(event.node.key, 10)] = node;\r\n                setNodes(value);\r\n                setLoading(false);\r\n            }, 500);\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        setTimeout(() => {\r\n            setNodes(createLazyNodes());\r\n            setLoading(false);\r\n        }, 2000);\r\n    }, []); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"card\">\r\n                <Tree value={nodes} onExpand={loadOnExpand} loading={loading} />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n                `\r\n            }\r\n        }\r\n    }\r\n\r\n    shouldComponentUpdate() {\r\n        return false;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"content-section documentation\">\r\n                <TabView>\r\n                    {\r\n                        useLiveEditorTabs({ name: 'TreeLazyDemo', sources: this.sources })\r\n                    }\r\n                </TabView>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}