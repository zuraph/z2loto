{"ast":null,"code":"import _objectSpread from \"C:\\\\Users\\\\zura.ph\\\\WebstormProjects\\\\zz-regul\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\nimport _toConsumableArray from \"C:\\\\Users\\\\zura.ph\\\\WebstormProjects\\\\zz-regul\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"C:\\\\Users\\\\zura.ph\\\\WebstormProjects\\\\zz-regul\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\zura.ph\\\\WebstormProjects\\\\zz-regul\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"C:\\\\Users\\\\zura.ph\\\\WebstormProjects\\\\zz-regul\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"C:\\\\Users\\\\zura.ph\\\\WebstormProjects\\\\zz-regul\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _createSuper from \"C:\\\\Users\\\\zura.ph\\\\WebstormProjects\\\\zz-regul\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"C:\\\\Users\\\\zura.ph\\\\WebstormProjects\\\\zz-regul\\\\src\\\\components\\\\datatable\\\\TableBody.js\";\nimport React, { Component } from 'react';\nimport { BodyRow } from './BodyRow';\nimport DomHandler from '../utils/DomHandler';\nimport ObjectUtils from '../utils/ObjectUtils';\nimport { RowTogglerButton } from './RowTogglerButton';\nexport var TableBody = /*#__PURE__*/function (_Component) {\n  _inherits(TableBody, _Component);\n\n  var _super = _createSuper(TableBody);\n\n  function TableBody(props) {\n    var _this;\n\n    _classCallCheck(this, TableBody);\n\n    _this = _super.call(this, props);\n    _this.onRowClick = _this.onRowClick.bind(_assertThisInitialized(_this));\n    _this.onRowRightClick = _this.onRowRightClick.bind(_assertThisInitialized(_this));\n    _this.onRowTouchEnd = _this.onRowTouchEnd.bind(_assertThisInitialized(_this));\n    _this.onRowToggle = _this.onRowToggle.bind(_assertThisInitialized(_this));\n    _this.onRadioClick = _this.onRadioClick.bind(_assertThisInitialized(_this));\n    _this.onCheckboxClick = _this.onCheckboxClick.bind(_assertThisInitialized(_this));\n    _this.onRowDragEnd = _this.onRowDragEnd.bind(_assertThisInitialized(_this));\n    _this.onRowDragLeave = _this.onRowDragLeave.bind(_assertThisInitialized(_this));\n    _this.onRowDrop = _this.onRowDrop.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(TableBody, [{\n    key: \"onRowClick\",\n    value: function onRowClick(event) {\n      var targetNode = event.originalEvent.target.nodeName;\n\n      if (targetNode === 'INPUT' || targetNode === 'BUTTON' || targetNode === 'A' || DomHandler.hasClass(event.originalEvent.target, 'p-clickable')) {\n        return;\n      }\n\n      if (this.props.onRowClick) {\n        this.props.onRowClick(event);\n      }\n\n      if (this.props.selectionMode) {\n        var rowData = event.data;\n        var rowIndex = event.index;\n        var selection;\n\n        if (this.isMultipleSelectionMode() && event.originalEvent.shiftKey && this.anchorRowIndex !== null) {\n          DomHandler.clearSelection();\n          this.rangeRowIndex = rowIndex;\n          selection = this.selectRange(event);\n        } else {\n          var selected = this.isSelected(rowData);\n          var metaSelection = this.rowTouched ? false : this.props.metaKeySelection;\n          this.anchorRowIndex = rowIndex;\n          this.rangeRowIndex = rowIndex;\n          this.anchorRowFirst = this.props.first;\n\n          if (metaSelection) {\n            var metaKey = event.originalEvent.metaKey || event.originalEvent.ctrlKey;\n\n            if (selected && metaKey) {\n              if (this.isSingleSelectionMode()) {\n                selection = null;\n              } else {\n                var selectionIndex = this.findIndexInSelection(rowData);\n                selection = this.props.selection.filter(function (val, i) {\n                  return i !== selectionIndex;\n                });\n              }\n\n              if (this.props.onRowUnselect) {\n                this.props.onRowUnselect({\n                  originalEvent: event.originalEvent,\n                  data: rowData,\n                  type: 'row'\n                });\n              }\n            } else {\n              if (this.isSingleSelectionMode()) {\n                selection = rowData;\n              } else if (this.isMultipleSelectionMode()) {\n                if (metaKey) selection = this.props.selection ? _toConsumableArray(this.props.selection) : [];else selection = [];\n                selection = [].concat(_toConsumableArray(selection), [rowData]);\n              }\n\n              if (this.props.onRowSelect) {\n                this.props.onRowSelect({\n                  originalEvent: event.originalEvent,\n                  data: rowData,\n                  type: 'row'\n                });\n              }\n            }\n          } else {\n            if (this.isSingleSelectionMode()) {\n              if (selected) {\n                selection = null;\n\n                if (this.props.onRowUnselect) {\n                  this.props.onRowUnselect({\n                    originalEvent: event.originalEvent,\n                    data: rowData,\n                    type: 'row'\n                  });\n                }\n              } else {\n                selection = rowData;\n\n                if (this.props.onRowSelect) {\n                  this.props.onRowSelect({\n                    originalEvent: event.originalEvent,\n                    data: rowData,\n                    type: 'row'\n                  });\n                }\n              }\n            } else {\n              if (selected) {\n                var _selectionIndex = this.findIndexInSelection(rowData);\n\n                selection = this.props.selection.filter(function (val, i) {\n                  return i !== _selectionIndex;\n                });\n\n                if (this.props.onRowSelect) {\n                  this.props.onRowSelect({\n                    originalEvent: event.originalEvent,\n                    data: rowData,\n                    type: 'row'\n                  });\n                }\n              } else {\n                selection = [].concat(_toConsumableArray(this.props.selection || []), [rowData]);\n\n                if (this.props.onRowSelect) {\n                  this.props.onRowSelect({\n                    originalEvent: event.originalEvent,\n                    data: rowData,\n                    type: 'row'\n                  });\n                }\n              }\n            }\n          }\n        }\n\n        if (this.props.onSelectionChange) {\n          this.props.onSelectionChange({\n            originalEvent: event.originalEvent,\n            value: selection\n          });\n        }\n      }\n\n      this.rowTouched = false;\n    }\n  }, {\n    key: \"selectRange\",\n    value: function selectRange(event) {\n      var rangeStart, rangeEnd;\n      var isLazyAndPaginator = this.props.lazy && this.props.paginator;\n\n      if (isLazyAndPaginator) {\n        this.anchorRowIndex += this.anchorRowFirst;\n        this.rangeRowIndex += this.props.first;\n      }\n\n      if (this.rangeRowIndex > this.anchorRowIndex) {\n        rangeStart = this.anchorRowIndex;\n        rangeEnd = this.rangeRowIndex;\n      } else if (this.rangeRowIndex < this.anchorRowIndex) {\n        rangeStart = this.rangeRowIndex;\n        rangeEnd = this.anchorRowIndex;\n      } else {\n        rangeStart = this.rangeRowIndex;\n        rangeEnd = this.rangeRowIndex;\n      }\n\n      if (isLazyAndPaginator) {\n        rangeStart = Math.max(rangeStart - this.props.first, 0);\n        rangeEnd -= this.props.first;\n      }\n\n      var value = this.props.value;\n      var selection = [];\n\n      for (var i = rangeStart; i <= rangeEnd; i++) {\n        var rangeRowData = value[i];\n        selection.push(rangeRowData);\n\n        if (this.props.onRowSelect) {\n          this.props.onRowSelect({\n            originalEvent: event.originalEvent,\n            data: rangeRowData,\n            type: 'row'\n          });\n        }\n      }\n\n      return selection;\n    }\n  }, {\n    key: \"onRowTouchEnd\",\n    value: function onRowTouchEnd(event) {\n      this.rowTouched = true;\n    }\n  }, {\n    key: \"onRowRightClick\",\n    value: function onRowRightClick(event) {\n      if (this.props.onContextMenu) {\n        DomHandler.clearSelection();\n\n        if (this.props.onContextMenuSelectionChange) {\n          this.props.onContextMenuSelectionChange({\n            originalEvent: event.originalEvent,\n            value: event.data\n          });\n        }\n\n        if (this.props.onContextMenu) {\n          this.props.onContextMenu({\n            originalEvent: event.originalEvent,\n            value: this.props.node\n          });\n        }\n\n        event.originalEvent.preventDefault();\n      }\n    }\n  }, {\n    key: \"onRadioClick\",\n    value: function onRadioClick(event) {\n      var rowData = event.data;\n      var selection;\n\n      if (this.isSelected(rowData)) {\n        selection = null;\n\n        if (this.props.onRowUnselect) {\n          this.props.onRowUnselect({\n            originalEvent: event.originalEvent,\n            data: rowData,\n            type: 'radio'\n          });\n        }\n      } else {\n        selection = rowData;\n\n        if (this.props.onRowSelect) {\n          this.props.onRowSelect({\n            originalEvent: event.originalEvent,\n            data: rowData,\n            type: 'radio'\n          });\n        }\n      }\n\n      if (this.props.onSelectionChange) {\n        this.props.onSelectionChange({\n          originalEvent: event.originalEvent,\n          value: selection\n        });\n      }\n    }\n  }, {\n    key: \"onCheckboxClick\",\n    value: function onCheckboxClick(event) {\n      var rowData = event.data;\n      var selection;\n\n      if (this.isSelected(rowData)) {\n        var selectionIndex = this.findIndexInSelection(rowData);\n        selection = this.props.selection.filter(function (val, i) {\n          return i !== selectionIndex;\n        });\n\n        if (this.props.onRowUnselect) {\n          this.props.onRowUnselect({\n            originalEvent: event.originalEvent,\n            data: rowData,\n            type: 'checkbox'\n          });\n        }\n      } else {\n        selection = [].concat(_toConsumableArray(this.props.selection || []), [rowData]);\n\n        if (this.props.onRowSelect) {\n          this.props.onRowSelect({\n            originalEvent: event.originalEvent,\n            data: rowData,\n            type: 'checkbox'\n          });\n        }\n      }\n\n      if (this.props.onSelectionChange) {\n        this.props.onSelectionChange({\n          originalEvent: event.originalEvent,\n          value: selection\n        });\n      }\n    }\n  }, {\n    key: \"isSingleSelectionMode\",\n    value: function isSingleSelectionMode() {\n      return this.props.selectionMode === 'single';\n    }\n  }, {\n    key: \"isMultipleSelectionMode\",\n    value: function isMultipleSelectionMode() {\n      return this.props.selectionMode === 'multiple';\n    }\n  }, {\n    key: \"isSelected\",\n    value: function isSelected(rowData) {\n      if (rowData && this.props.selection) {\n        if (this.props.selection instanceof Array) return this.findIndexInSelection(rowData) > -1;else return this.equals(rowData, this.props.selection);\n      }\n\n      return false;\n    }\n  }, {\n    key: \"isContextMenuSelected\",\n    value: function isContextMenuSelected(rowData) {\n      if (rowData && this.props.contextMenuSelection) {\n        return this.equals(rowData, this.props.contextMenuSelection);\n      }\n\n      return false;\n    }\n  }, {\n    key: \"equals\",\n    value: function equals(data1, data2) {\n      return this.compareSelectionBy === 'equals' ? data1 === data2 : ObjectUtils.equals(data1, data2, this.props.dataKey);\n    }\n  }, {\n    key: \"findIndexInSelection\",\n    value: function findIndexInSelection(rowData) {\n      var index = -1;\n\n      if (this.props.selection) {\n        for (var i = 0; i < this.props.selection.length; i++) {\n          if (this.equals(rowData, this.props.selection[i])) {\n            index = i;\n            break;\n          }\n        }\n      }\n\n      return index;\n    }\n  }, {\n    key: \"onRowToggle\",\n    value: function onRowToggle(event) {\n      var expandedRows;\n      var dataKey = this.props.dataKey;\n\n      if (dataKey) {\n        var dataKeyValue = String(ObjectUtils.resolveFieldData(event.data, dataKey));\n        expandedRows = this.props.expandedRows ? _objectSpread({}, this.props.expandedRows) : {};\n\n        if (expandedRows[dataKeyValue] != null) {\n          delete expandedRows[dataKeyValue];\n\n          if (this.props.onRowCollapse) {\n            this.props.onRowCollapse({\n              originalEvent: event,\n              data: event.data\n            });\n          }\n        } else {\n          expandedRows[dataKeyValue] = true;\n\n          if (this.props.onRowExpand) {\n            this.props.onRowExpand({\n              originalEvent: event,\n              data: event.data\n            });\n          }\n        }\n      } else {\n        var expandedRowIndex = this.findExpandedRowIndex(event.data);\n        expandedRows = this.props.expandedRows ? _toConsumableArray(this.props.expandedRows) : [];\n\n        if (expandedRowIndex !== -1) {\n          expandedRows = expandedRows.filter(function (val, i) {\n            return i !== expandedRowIndex;\n          });\n\n          if (this.props.onRowCollapse) {\n            this.props.onRowCollapse({\n              originalEvent: event,\n              data: event.data\n            });\n          }\n        } else {\n          expandedRows.push(event.data);\n\n          if (this.props.onRowExpand) {\n            this.props.onRowExpand({\n              originalEvent: event,\n              data: event.data\n            });\n          }\n        }\n      }\n\n      if (this.props.onRowToggle) {\n        this.props.onRowToggle({\n          data: expandedRows\n        });\n      }\n    }\n  }, {\n    key: \"findExpandedRowIndex\",\n    value: function findExpandedRowIndex(row) {\n      var index = -1;\n\n      if (this.props.expandedRows) {\n        for (var i = 0; i < this.props.expandedRows.length; i++) {\n          if (ObjectUtils.equals(this.props.expandedRows[i], row)) {\n            index = i;\n            break;\n          }\n        }\n      }\n\n      return index;\n    }\n  }, {\n    key: \"isRowExpanded\",\n    value: function isRowExpanded(row) {\n      var dataKey = this.props.dataKey;\n\n      if (dataKey) {\n        var dataKeyValue = String(ObjectUtils.resolveFieldData(row, dataKey));\n        return this.props.expandedRows && this.props.expandedRows[dataKeyValue] != null;\n      } else {\n        return this.findExpandedRowIndex(row) !== -1;\n      }\n    }\n  }, {\n    key: \"isSelectionEnabled\",\n    value: function isSelectionEnabled() {\n      if (this.props.selectionMode || this.props.frozenSelectionMode != null) {\n        return true;\n      } else {\n        if (Array.isArray(this.props.children)) {\n          for (var i = 0; i < this.props.children.length; i++) {\n            if (this.props.children[i].props.selectionMode) {\n              return true;\n            }\n          }\n        } else {\n          return this.props.children && this.props.children.selectionMode != null;\n        }\n      }\n\n      return false;\n    }\n  }, {\n    key: \"onRowDragStart\",\n    value: function onRowDragStart(event, index) {\n      this.rowDragging = true;\n      this.draggedRowIndex = index;\n      event.dataTransfer.setData('text', 'b'); // For firefox\n    }\n  }, {\n    key: \"onRowDragEnd\",\n    value: function onRowDragEnd(event, index) {\n      this.rowDragging = false;\n      this.draggedRowIndex = null;\n      this.droppedRowIndex = null;\n    }\n  }, {\n    key: \"onRowDragOver\",\n    value: function onRowDragOver(event, index) {\n      if (this.rowDragging && this.draggedRowIndex !== index) {\n        var rowElement = event.rowElement;\n        var rowY = DomHandler.getOffset(rowElement).top + DomHandler.getWindowScrollTop();\n        var pageY = event.originalEvent.pageY;\n        var rowMidY = rowY + DomHandler.getOuterHeight(rowElement) / 2;\n        var prevRowElement = rowElement.previousElementSibling;\n\n        if (pageY < rowMidY) {\n          DomHandler.removeClass(rowElement, 'p-datatable-dragpoint-bottom');\n          this.droppedRowIndex = index;\n          if (prevRowElement) DomHandler.addClass(prevRowElement, 'p-datatable-dragpoint-bottom');else DomHandler.addClass(rowElement, 'p-datatable-dragpoint-top');\n        } else {\n          if (prevRowElement) DomHandler.removeClass(prevRowElement, 'p-datatable-dragpoint-bottom');else DomHandler.addClass(rowElement, 'p-datatable-dragpoint-top');\n          this.droppedRowIndex = index + 1;\n          DomHandler.addClass(rowElement, 'p-datatable-dragpoint-bottom');\n        }\n      }\n    }\n  }, {\n    key: \"onRowDragLeave\",\n    value: function onRowDragLeave(event) {\n      var rowElement = event.rowElement;\n      var prevRowElement = rowElement.previousElementSibling;\n\n      if (prevRowElement) {\n        DomHandler.removeClass(prevRowElement, 'p-datatable-dragpoint-bottom');\n      }\n\n      DomHandler.removeClass(rowElement, 'p-datatable-dragpoint-bottom');\n      DomHandler.removeClass(rowElement, 'p-datatable-dragpoint-top');\n    }\n  }, {\n    key: \"onRowDrop\",\n    value: function onRowDrop(event) {\n      if (this.droppedRowIndex != null) {\n        var dropIndex = this.draggedRowIndex > this.droppedRowIndex ? this.droppedRowIndex : this.droppedRowIndex === 0 ? 0 : this.droppedRowIndex - 1;\n\n        var val = _toConsumableArray(this.props.value);\n\n        ObjectUtils.reorderArray(val, this.draggedRowIndex, dropIndex);\n\n        if (this.props.onRowReorder) {\n          this.props.onRowReorder({\n            originalEvent: event,\n            value: val,\n            dragIndex: this.draggedRowIndex,\n            dropIndex: this.droppedRowIndex\n          });\n        }\n      } //cleanup\n\n\n      this.onRowDragLeave(event);\n      this.onRowDragEnd(event);\n    }\n  }, {\n    key: \"renderRowGroupHeader\",\n    value: function renderRowGroupHeader(rowData, index) {\n      var content = null;\n\n      if (this.props.rowGroupMode === 'subheader' && this.props.expandableRowGroups) {\n        content = /*#__PURE__*/React.createElement(RowTogglerButton, {\n          onClick: this.onRowToggle,\n          rowData: rowData,\n          expanded: this.isRowExpanded(rowData),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 459,\n            columnNumber: 23\n          }\n        });\n      }\n\n      return /*#__PURE__*/React.createElement(\"tr\", {\n        role: \"row\",\n        key: index + '_rowgroupheader',\n        className: \"p-rowgroup-header\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 463,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"td\", {\n        role: \"cell\",\n        colSpan: React.Children.count(this.props.children),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 464,\n          columnNumber: 17\n        }\n      }, content, /*#__PURE__*/React.createElement(\"span\", {\n        className: \"p-rowgroup-header-name\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 466,\n          columnNumber: 21\n        }\n      }, this.props.rowGroupHeaderTemplate(rowData, index))));\n    }\n  }, {\n    key: \"renderRowGroupFooter\",\n    value: function renderRowGroupFooter(rowData, index) {\n      return /*#__PURE__*/React.createElement(\"tr\", {\n        role: \"row\",\n        key: index + '_rowgroupfooter',\n        className: \"p-rowgroup-footer\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 476,\n          columnNumber: 13\n        }\n      }, this.props.rowGroupFooterTemplate(rowData, index));\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var rows;\n\n      if (this.props.children) {\n        var rpp = this.props.rows || 0;\n        var first = this.props.first || 0;\n        var selectionEnabled = this.isSelectionEnabled();\n        var rowGroupMode = this.props.rowGroupMode;\n        var hasSubheaderGrouping = rowGroupMode && rowGroupMode === 'subheader';\n        var rowSpanGrouping = rowGroupMode && rowGroupMode === 'rowspan';\n        var rowGroupHeaderExpanded = false;\n\n        if (this.props.value && this.props.value.length) {\n          rows = [];\n          var startIndex = this.props.lazy ? 0 : this.props.value.length > first ? first : 0;\n          var endIndex = this.props.virtualScroll ? startIndex + rpp * 2 : startIndex + rpp || this.props.value.length;\n\n          var _loop = function _loop(i) {\n            if (i >= _this2.props.value.length) {\n              return \"break\";\n            }\n\n            var rowData = _this2.props.value[i];\n\n            var expanded = _this2.isRowExpanded(rowData);\n\n            var selected = selectionEnabled ? _this2.isSelected(_this2.props.value[i]) : false;\n\n            var contextMenuSelected = _this2.isContextMenuSelected(rowData);\n\n            var groupRowSpan = void 0; //header row group\n\n            if (hasSubheaderGrouping) {\n              var currentRowFieldData = ObjectUtils.resolveFieldData(rowData, _this2.props.groupField);\n              var previousRowFieldData = ObjectUtils.resolveFieldData(_this2.props.value[i - 1], _this2.props.groupField);\n\n              if (i === 0 || currentRowFieldData !== previousRowFieldData) {\n                rows.push(_this2.renderRowGroupHeader(rowData, i));\n                rowGroupHeaderExpanded = expanded;\n              }\n            }\n\n            if (rowSpanGrouping) {\n              var rowSpanIndex = i;\n\n              var _currentRowFieldData = ObjectUtils.resolveFieldData(rowData, _this2.props.sortField);\n\n              var shouldCountRowSpan = i === startIndex || ObjectUtils.resolveFieldData(_this2.props.value[i - 1], _this2.props.sortField) !== _currentRowFieldData;\n\n              if (shouldCountRowSpan) {\n                var nextRowFieldData = _currentRowFieldData;\n                groupRowSpan = 0;\n\n                while (_currentRowFieldData === nextRowFieldData) {\n                  groupRowSpan++;\n                  var nextRowData = _this2.props.value[++rowSpanIndex];\n\n                  if (nextRowData) {\n                    nextRowFieldData = ObjectUtils.resolveFieldData(nextRowData, _this2.props.sortField);\n                  } else {\n                    break;\n                  }\n                }\n              }\n            }\n\n            var isRowGroupExpanded = _this2.props.expandableRowGroups && hasSubheaderGrouping && rowGroupHeaderExpanded;\n\n            if (!_this2.props.expandableRowGroups || isRowGroupExpanded) {\n              //row content\n              var bodyRow = /*#__PURE__*/React.createElement(BodyRow, {\n                tableId: _this2.props.tableId,\n                key: i,\n                value: _this2.props.value,\n                rowData: rowData,\n                rowIndex: i,\n                onClick: _this2.onRowClick,\n                onDoubleClick: _this2.props.onRowDoubleClick,\n                onRightClick: _this2.onRowRightClick,\n                onTouchEnd: _this2.onRowTouchEnd,\n                onRowToggle: _this2.onRowToggle,\n                expanded: expanded,\n                selectionMode: _this2.props.selectionMode,\n                onRadioClick: _this2.onRadioClick,\n                onCheckboxClick: _this2.onCheckboxClick,\n                selected: selected,\n                contextMenuSelected: contextMenuSelected,\n                rowClassName: _this2.props.rowClassName,\n                sortField: _this2.props.sortField,\n                rowGroupMode: _this2.props.rowGroupMode,\n                groupRowSpan: groupRowSpan,\n                onDragStart: function onDragStart(e) {\n                  return _this2.onRowDragStart(e, i);\n                },\n                onDragEnd: _this2.onRowDragEnd,\n                onDragOver: function onDragOver(e) {\n                  return _this2.onRowDragOver(e, i);\n                },\n                onDragLeave: _this2.onRowDragLeave,\n                onDrop: _this2.onRowDrop,\n                virtualScroll: _this2.props.virtualScroll,\n                virtualRowHeight: _this2.props.virtualRowHeight,\n                editMode: _this2.props.editMode,\n                rowEditorValidator: _this2.props.rowEditorValidator,\n                onRowEditInit: _this2.props.onRowEditInit,\n                onRowEditSave: _this2.props.onRowEditSave,\n                onRowEditCancel: _this2.props.onRowEditCancel,\n                showRowReorderElement: _this2.props.showRowReorderElement,\n                showSelectionElement: _this2.props.showSelectionElement,\n                __self: _this2,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 546,\n                  columnNumber: 39\n                }\n              }, _this2.props.children);\n              rows.push(bodyRow);\n            } //row expansion\n\n\n            if (expanded && !(hasSubheaderGrouping && _this2.props.expandableRowGroups)) {\n              var expandedRowContent = _this2.props.rowExpansionTemplate(rowData);\n\n              var id = \"\".concat(_this2.props.tableId ? _this2.props.tableId + '_' : '', \"content_\").concat(i, \"_expanded\");\n              var expandedRow = /*#__PURE__*/React.createElement(\"tr\", {\n                key: id,\n                id: id,\n                role: \"row\",\n                __self: _this2,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 564,\n                  columnNumber: 43\n                }\n              }, /*#__PURE__*/React.createElement(\"td\", {\n                role: \"cell\",\n                colSpan: _this2.props.children.length,\n                __self: _this2,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 564,\n                  columnNumber: 75\n                }\n              }, expandedRowContent));\n              rows.push(expandedRow);\n            } //footer row group\n\n\n            if (hasSubheaderGrouping && (!_this2.props.expandableRowGroups || isRowGroupExpanded)) {\n              var _currentRowFieldData2 = ObjectUtils.resolveFieldData(rowData, _this2.props.groupField);\n\n              var _nextRowFieldData = ObjectUtils.resolveFieldData(_this2.props.value[i + 1], _this2.props.groupField);\n\n              if (i === _this2.props.value.length - 1 || _currentRowFieldData2 !== _nextRowFieldData) {\n                rows.push(_this2.renderRowGroupFooter(rowData, i));\n              }\n            }\n          };\n\n          for (var i = startIndex; i < endIndex; i++) {\n            var _ret = _loop(i);\n\n            if (_ret === \"break\") break;\n          }\n        } else {\n          var emptyMessage = this.props.emptyMessage;\n          rows = !this.props.loading && emptyMessage !== null ? /*#__PURE__*/React.createElement(\"tr\", {\n            role: \"row\",\n            className: \"p-datatable-emptymessage\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 583,\n              columnNumber: 21\n            }\n          }, /*#__PURE__*/React.createElement(\"td\", {\n            role: \"cell\",\n            colSpan: this.props.children.length,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 584,\n              columnNumber: 25\n            }\n          }, typeof emptyMessage === 'function' ? emptyMessage(this.props.frozen) : emptyMessage)) : null;\n        }\n      }\n\n      return /*#__PURE__*/React.createElement(\"tbody\", {\n        className: \"p-datatable-tbody\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 594,\n          columnNumber: 13\n        }\n      }, rows);\n    }\n  }]);\n\n  return TableBody;\n}(Component);","map":{"version":3,"sources":["C:/Users/zura.ph/WebstormProjects/zz-regul/src/components/datatable/TableBody.js"],"names":["React","Component","BodyRow","DomHandler","ObjectUtils","RowTogglerButton","TableBody","props","onRowClick","bind","onRowRightClick","onRowTouchEnd","onRowToggle","onRadioClick","onCheckboxClick","onRowDragEnd","onRowDragLeave","onRowDrop","event","targetNode","originalEvent","target","nodeName","hasClass","selectionMode","rowData","data","rowIndex","index","selection","isMultipleSelectionMode","shiftKey","anchorRowIndex","clearSelection","rangeRowIndex","selectRange","selected","isSelected","metaSelection","rowTouched","metaKeySelection","anchorRowFirst","first","metaKey","ctrlKey","isSingleSelectionMode","selectionIndex","findIndexInSelection","filter","val","i","onRowUnselect","type","onRowSelect","onSelectionChange","value","rangeStart","rangeEnd","isLazyAndPaginator","lazy","paginator","Math","max","rangeRowData","push","onContextMenu","onContextMenuSelectionChange","node","preventDefault","Array","equals","contextMenuSelection","data1","data2","compareSelectionBy","dataKey","length","expandedRows","dataKeyValue","String","resolveFieldData","onRowCollapse","onRowExpand","expandedRowIndex","findExpandedRowIndex","row","frozenSelectionMode","isArray","children","rowDragging","draggedRowIndex","dataTransfer","setData","droppedRowIndex","rowElement","rowY","getOffset","top","getWindowScrollTop","pageY","rowMidY","getOuterHeight","prevRowElement","previousElementSibling","removeClass","addClass","dropIndex","reorderArray","onRowReorder","dragIndex","content","rowGroupMode","expandableRowGroups","isRowExpanded","Children","count","rowGroupHeaderTemplate","rowGroupFooterTemplate","rows","rpp","selectionEnabled","isSelectionEnabled","hasSubheaderGrouping","rowSpanGrouping","rowGroupHeaderExpanded","startIndex","endIndex","virtualScroll","expanded","contextMenuSelected","isContextMenuSelected","groupRowSpan","currentRowFieldData","groupField","previousRowFieldData","renderRowGroupHeader","rowSpanIndex","sortField","shouldCountRowSpan","nextRowFieldData","nextRowData","isRowGroupExpanded","bodyRow","tableId","onRowDoubleClick","rowClassName","e","onRowDragStart","onRowDragOver","virtualRowHeight","editMode","rowEditorValidator","onRowEditInit","onRowEditSave","onRowEditCancel","showRowReorderElement","showSelectionElement","expandedRowContent","rowExpansionTemplate","id","expandedRow","renderRowGroupFooter","emptyMessage","loading","frozen"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport {BodyRow} from './BodyRow';\r\nimport DomHandler from '../utils/DomHandler';\r\nimport ObjectUtils from '../utils/ObjectUtils';\r\nimport { RowTogglerButton } from './RowTogglerButton';\r\n\r\nexport class TableBody extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.onRowClick = this.onRowClick.bind(this);\r\n        this.onRowRightClick = this.onRowRightClick.bind(this);\r\n        this.onRowTouchEnd = this.onRowTouchEnd.bind(this);\r\n        this.onRowToggle = this.onRowToggle.bind(this);\r\n        this.onRadioClick = this.onRadioClick.bind(this);\r\n        this.onCheckboxClick = this.onCheckboxClick.bind(this);\r\n        this.onRowDragEnd = this.onRowDragEnd.bind(this);\r\n        this.onRowDragLeave = this.onRowDragLeave.bind(this);\r\n        this.onRowDrop = this.onRowDrop.bind(this);\r\n    }\r\n\r\n    onRowClick(event) {\r\n        let targetNode = event.originalEvent.target.nodeName;\r\n        if(targetNode === 'INPUT' || targetNode === 'BUTTON' || targetNode ==='A' || (DomHandler.hasClass(event.originalEvent.target, 'p-clickable'))) {\r\n            return;\r\n        }\r\n\r\n        if(this.props.onRowClick) {\r\n            this.props.onRowClick(event);\r\n        }\r\n\r\n        if (this.props.selectionMode) {\r\n            let rowData = event.data;\r\n            let rowIndex = event.index;\r\n            let selection;\r\n\r\n            if (this.isMultipleSelectionMode() && event.originalEvent.shiftKey && this.anchorRowIndex !== null) {\r\n                DomHandler.clearSelection();\r\n                this.rangeRowIndex = rowIndex;\r\n                selection = this.selectRange(event);\r\n            }\r\n            else {\r\n                let selected = this.isSelected(rowData);\r\n                let metaSelection = this.rowTouched ? false : this.props.metaKeySelection;\r\n                this.anchorRowIndex = rowIndex;\r\n                this.rangeRowIndex = rowIndex;\r\n                this.anchorRowFirst = this.props.first;\r\n\r\n                if (metaSelection) {\r\n                    let metaKey = event.originalEvent.metaKey || event.originalEvent.ctrlKey;\r\n\r\n                    if(selected && metaKey) {\r\n                        if(this.isSingleSelectionMode()) {\r\n                            selection = null;\r\n                        }\r\n                        else {\r\n                            let selectionIndex = this.findIndexInSelection(rowData);\r\n                            selection = this.props.selection.filter((val,i) => i !== selectionIndex);\r\n                        }\r\n\r\n                        if(this.props.onRowUnselect) {\r\n                            this.props.onRowUnselect({originalEvent: event.originalEvent, data: rowData, type: 'row'});\r\n                        }\r\n                    }\r\n                    else {\r\n                        if (this.isSingleSelectionMode()) {\r\n                            selection = rowData;\r\n                        }\r\n                        else if (this.isMultipleSelectionMode()) {\r\n                            if (metaKey)\r\n                                selection = this.props.selection ? [...this.props.selection] : [];\r\n                            else\r\n                                selection = [];\r\n\r\n                            selection = [...selection, rowData];\r\n                        }\r\n\r\n                        if(this.props.onRowSelect) {\r\n                            this.props.onRowSelect({originalEvent: event.originalEvent, data: rowData, type: 'row'});\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    if(this.isSingleSelectionMode()) {\r\n                        if(selected) {\r\n                            selection = null;\r\n                            if(this.props.onRowUnselect) {\r\n                                this.props.onRowUnselect({originalEvent: event.originalEvent, data: rowData, type: 'row'});\r\n                            }\r\n                        }\r\n                        else {\r\n                            selection = rowData;\r\n                            if(this.props.onRowSelect) {\r\n                                this.props.onRowSelect({originalEvent: event.originalEvent, data: rowData, type: 'row'});\r\n                            }\r\n                        }\r\n                    }\r\n                    else {\r\n                        if (selected) {\r\n                            let selectionIndex = this.findIndexInSelection(rowData);\r\n                            selection = this.props.selection.filter((val,i) => i !== selectionIndex);\r\n                            if(this.props.onRowSelect) {\r\n                                this.props.onRowSelect({originalEvent: event.originalEvent, data: rowData, type: 'row'});\r\n                            }\r\n                        }\r\n                        else {\r\n                            selection = [...this.props.selection||[], rowData];\r\n                            if(this.props.onRowSelect) {\r\n                                this.props.onRowSelect({originalEvent: event.originalEvent, data: rowData, type: 'row'});\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            if(this.props.onSelectionChange) {\r\n                this.props.onSelectionChange({\r\n                    originalEvent: event.originalEvent,\r\n                    value: selection\r\n                });\r\n            }\r\n        }\r\n\r\n        this.rowTouched = false;\r\n    }\r\n\r\n    selectRange(event) {\r\n        let rangeStart, rangeEnd;\r\n        let isLazyAndPaginator = this.props.lazy && this.props.paginator;\r\n\r\n        if (isLazyAndPaginator) {\r\n            this.anchorRowIndex += this.anchorRowFirst;\r\n            this.rangeRowIndex += this.props.first;\r\n        }\r\n\r\n        if (this.rangeRowIndex > this.anchorRowIndex) {\r\n            rangeStart = this.anchorRowIndex;\r\n            rangeEnd = this.rangeRowIndex;\r\n        }\r\n        else if(this.rangeRowIndex < this.anchorRowIndex) {\r\n            rangeStart = this.rangeRowIndex;\r\n            rangeEnd = this.anchorRowIndex;\r\n        }\r\n        else {\r\n            rangeStart = this.rangeRowIndex;\r\n            rangeEnd = this.rangeRowIndex;\r\n        }\r\n\r\n        if (isLazyAndPaginator) {\r\n            rangeStart = Math.max(rangeStart - this.props.first, 0);\r\n            rangeEnd -= this.props.first;\r\n        }\r\n\r\n        const value = this.props.value;\r\n        let selection = [];\r\n        for(let i = rangeStart; i <= rangeEnd; i++) {\r\n            let rangeRowData = value[i];\r\n            selection.push(rangeRowData);\r\n\r\n            if(this.props.onRowSelect) {\r\n                this.props.onRowSelect({originalEvent: event.originalEvent, data: rangeRowData, type: 'row'});\r\n            }\r\n        }\r\n\r\n        return selection;\r\n    }\r\n\r\n    onRowTouchEnd(event) {\r\n        this.rowTouched = true;\r\n    }\r\n\r\n    onRowRightClick(event) {\r\n        if (this.props.onContextMenu) {\r\n            DomHandler.clearSelection();\r\n\r\n            if (this.props.onContextMenuSelectionChange) {\r\n                this.props.onContextMenuSelectionChange({\r\n                    originalEvent: event.originalEvent,\r\n                    value: event.data\r\n                });\r\n            }\r\n\r\n            if (this.props.onContextMenu) {\r\n                this.props.onContextMenu({\r\n                    originalEvent: event.originalEvent,\r\n                    value: this.props.node\r\n                });\r\n            }\r\n\r\n            event.originalEvent.preventDefault();\r\n        }\r\n    }\r\n\r\n    onRadioClick(event) {\r\n        let rowData = event.data;\r\n        let selection;\r\n\r\n        if(this.isSelected(rowData)) {\r\n            selection = null;\r\n            if(this.props.onRowUnselect) {\r\n                this.props.onRowUnselect({originalEvent: event.originalEvent, data: rowData, type: 'radio'});\r\n            }\r\n        }\r\n        else {\r\n            selection = rowData;\r\n            if(this.props.onRowSelect) {\r\n                this.props.onRowSelect({originalEvent: event.originalEvent, data: rowData, type: 'radio'});\r\n            }\r\n        }\r\n\r\n        if(this.props.onSelectionChange) {\r\n            this.props.onSelectionChange({\r\n                originalEvent: event.originalEvent,\r\n                value: selection\r\n            });\r\n        }\r\n    }\r\n\r\n    onCheckboxClick(event) {\r\n        let rowData = event.data;\r\n        let selection;\r\n\r\n        if(this.isSelected(rowData)) {\r\n            let selectionIndex = this.findIndexInSelection(rowData);\r\n            selection = this.props.selection.filter((val,i) => i !== selectionIndex);\r\n            if(this.props.onRowUnselect) {\r\n                this.props.onRowUnselect({originalEvent: event.originalEvent, data: rowData, type: 'checkbox'});\r\n            }\r\n        }\r\n        else {\r\n            selection = [...this.props.selection||[], rowData];\r\n            if(this.props.onRowSelect) {\r\n                this.props.onRowSelect({originalEvent: event.originalEvent, data: rowData, type: 'checkbox'});\r\n            }\r\n        }\r\n\r\n        if(this.props.onSelectionChange) {\r\n            this.props.onSelectionChange({\r\n                originalEvent: event.originalEvent,\r\n                value: selection\r\n            });\r\n        }\r\n    }\r\n\r\n    isSingleSelectionMode() {\r\n        return this.props.selectionMode === 'single';\r\n    }\r\n\r\n    isMultipleSelectionMode() {\r\n        return this.props.selectionMode === 'multiple';\r\n    }\r\n\r\n    isSelected(rowData) {\r\n        if(rowData && this.props.selection) {\r\n            if(this.props.selection instanceof Array)\r\n                return this.findIndexInSelection(rowData) > -1;\r\n            else\r\n                return this.equals(rowData, this.props.selection);\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    isContextMenuSelected(rowData) {\r\n        if(rowData && this.props.contextMenuSelection) {\r\n            return this.equals(rowData, this.props.contextMenuSelection);\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    equals(data1, data2) {\r\n        return this.compareSelectionBy === 'equals' ? (data1 === data2) : ObjectUtils.equals(data1, data2, this.props.dataKey);\r\n    }\r\n\r\n    findIndexInSelection(rowData) {\r\n        let index = -1;\r\n        if(this.props.selection) {\r\n            for(let i = 0; i  < this.props.selection.length; i++) {\r\n                if(this.equals(rowData, this.props.selection[i])) {\r\n                    index = i;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        return index;\r\n    }\r\n\r\n    onRowToggle(event) {\r\n        let expandedRows;\r\n        let dataKey = this.props.dataKey;\r\n\r\n        if (dataKey) {\r\n            let dataKeyValue = String(ObjectUtils.resolveFieldData(event.data, dataKey));\r\n            expandedRows = this.props.expandedRows ? {...this.props.expandedRows} : {};\r\n\r\n            if (expandedRows[dataKeyValue] != null) {\r\n                delete expandedRows[dataKeyValue];\r\n                if (this.props.onRowCollapse) {\r\n                    this.props.onRowCollapse({originalEvent: event, data: event.data});\r\n                }\r\n            }\r\n            else {\r\n                expandedRows[dataKeyValue] = true;\r\n                if (this.props.onRowExpand) {\r\n                    this.props.onRowExpand({originalEvent: event, data: event.data});\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            let expandedRowIndex = this.findExpandedRowIndex(event.data);\r\n            expandedRows = this.props.expandedRows ? [...this.props.expandedRows] : [];\r\n\r\n            if (expandedRowIndex !== -1) {\r\n                expandedRows = expandedRows.filter((val,i) => i !== expandedRowIndex);\r\n                if (this.props.onRowCollapse) {\r\n                    this.props.onRowCollapse({originalEvent: event, data: event.data});\r\n                }\r\n            }\r\n            else {\r\n                expandedRows.push(event.data);\r\n                if (this.props.onRowExpand) {\r\n                    this.props.onRowExpand({originalEvent: event, data: event.data});\r\n                }\r\n            }\r\n        }\r\n\r\n        if (this.props.onRowToggle) {\r\n            this.props.onRowToggle({\r\n                data: expandedRows\r\n            });\r\n        }\r\n    }\r\n\r\n    findExpandedRowIndex(row) {\r\n        let index = -1;\r\n        if (this.props.expandedRows) {\r\n            for (let i = 0; i < this.props.expandedRows.length; i++) {\r\n                if (ObjectUtils.equals(this.props.expandedRows[i], row)) {\r\n                    index = i;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        return index;\r\n    }\r\n\r\n    isRowExpanded(row) {\r\n        let dataKey = this.props.dataKey;\r\n\r\n        if (dataKey) {\r\n            let dataKeyValue = String(ObjectUtils.resolveFieldData(row, dataKey));\r\n\r\n            return this.props.expandedRows && this.props.expandedRows[dataKeyValue] != null;\r\n        }\r\n        else {\r\n            return this.findExpandedRowIndex(row) !== -1\r\n        }\r\n    }\r\n\r\n    isSelectionEnabled() {\r\n        if(this.props.selectionMode || this.props.frozenSelectionMode != null) {\r\n            return true;\r\n        }\r\n        else {\r\n            if(Array.isArray(this.props.children)) {\r\n                for(let i = 0; i < this.props.children.length; i++) {\r\n                    if(this.props.children[i].props.selectionMode) {\r\n                        return true;\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                return this.props.children && this.props.children.selectionMode != null;\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    onRowDragStart(event, index) {\r\n        this.rowDragging = true;\r\n        this.draggedRowIndex = index;\r\n        event.dataTransfer.setData('text', 'b');    // For firefox\r\n    }\r\n\r\n    onRowDragEnd(event, index) {\r\n        this.rowDragging = false;\r\n        this.draggedRowIndex = null;\r\n        this.droppedRowIndex = null;\r\n    }\r\n\r\n    onRowDragOver(event, index) {\r\n        if (this.rowDragging && this.draggedRowIndex !== index) {\r\n            let rowElement = event.rowElement;\r\n            let rowY = DomHandler.getOffset(rowElement).top + DomHandler.getWindowScrollTop();\r\n            let pageY = event.originalEvent.pageY;\r\n            let rowMidY = rowY + DomHandler.getOuterHeight(rowElement) / 2;\r\n            let prevRowElement = rowElement.previousElementSibling;\r\n\r\n            if (pageY < rowMidY) {\r\n                DomHandler.removeClass(rowElement, 'p-datatable-dragpoint-bottom');\r\n\r\n                this.droppedRowIndex = index;\r\n                if (prevRowElement)\r\n                    DomHandler.addClass(prevRowElement, 'p-datatable-dragpoint-bottom');\r\n                else\r\n                    DomHandler.addClass(rowElement, 'p-datatable-dragpoint-top');\r\n            }\r\n            else {\r\n                if (prevRowElement)\r\n                    DomHandler.removeClass(prevRowElement, 'p-datatable-dragpoint-bottom');\r\n                else\r\n                    DomHandler.addClass(rowElement, 'p-datatable-dragpoint-top');\r\n\r\n                this.droppedRowIndex = index + 1;\r\n                DomHandler.addClass(rowElement, 'p-datatable-dragpoint-bottom');\r\n            }\r\n        }\r\n    }\r\n\r\n    onRowDragLeave(event) {\r\n        let rowElement = event.rowElement;\r\n        let prevRowElement = rowElement.previousElementSibling;\r\n        if (prevRowElement) {\r\n            DomHandler.removeClass(prevRowElement, 'p-datatable-dragpoint-bottom');\r\n        }\r\n\r\n        DomHandler.removeClass(rowElement, 'p-datatable-dragpoint-bottom');\r\n        DomHandler.removeClass(rowElement, 'p-datatable-dragpoint-top');\r\n    }\r\n\r\n    onRowDrop(event) {\r\n        if (this.droppedRowIndex != null) {\r\n            let dropIndex = (this.draggedRowIndex > this.droppedRowIndex) ? this.droppedRowIndex : (this.droppedRowIndex === 0) ? 0 : this.droppedRowIndex - 1;\r\n            let val = [...this.props.value];\r\n            ObjectUtils.reorderArray(val, this.draggedRowIndex, dropIndex);\r\n\r\n            if(this.props.onRowReorder) {\r\n                this.props.onRowReorder({\r\n                    originalEvent: event,\r\n                    value: val,\r\n                    dragIndex: this.draggedRowIndex,\r\n                    dropIndex: this.droppedRowIndex\r\n                })\r\n            }\r\n        }\r\n\r\n        //cleanup\r\n        this.onRowDragLeave(event);\r\n        this.onRowDragEnd(event);\r\n    }\r\n\r\n    renderRowGroupHeader(rowData, index) {\r\n        let content = null;\r\n\r\n        if (this.props.rowGroupMode === 'subheader' && this.props.expandableRowGroups) {\r\n            content = <RowTogglerButton onClick={this.onRowToggle} rowData={rowData} expanded={this.isRowExpanded(rowData)}/>\r\n        }\r\n\r\n        return (\r\n            <tr role=\"row\" key={index + '_rowgroupheader'} className=\"p-rowgroup-header\">\r\n                <td role=\"cell\" colSpan={React.Children.count(this.props.children)}>\r\n                    { content }\r\n                    <span className=\"p-rowgroup-header-name\">\r\n                        {this.props.rowGroupHeaderTemplate(rowData, index)}\r\n                    </span>\r\n                </td>\r\n            </tr>\r\n        );\r\n    }\r\n\r\n    renderRowGroupFooter(rowData, index) {\r\n        return (\r\n            <tr role=\"row\" key={index + '_rowgroupfooter'} className=\"p-rowgroup-footer\">\r\n                {this.props.rowGroupFooterTemplate(rowData, index)}\r\n            </tr>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        let rows;\r\n\r\n        if (this.props.children) {\r\n            let rpp = this.props.rows||0;\r\n            let first = this.props.first||0;\r\n            let selectionEnabled = this.isSelectionEnabled();\r\n            let rowGroupMode = this.props.rowGroupMode;\r\n            let hasSubheaderGrouping = (rowGroupMode && rowGroupMode === 'subheader');\r\n            let rowSpanGrouping = (rowGroupMode && rowGroupMode === 'rowspan');\r\n            let rowGroupHeaderExpanded = false;\r\n\r\n            if(this.props.value && this.props.value.length) {\r\n                rows = [];\r\n                let startIndex = this.props.lazy ? 0 : (this.props.value.length > first ? first : 0);\r\n                let endIndex = this.props.virtualScroll ? (startIndex + rpp * 2) : (startIndex + rpp||this.props.value.length);\r\n\r\n                for(let i = startIndex; i < endIndex; i++) {\r\n                    if(i >= this.props.value.length) {\r\n                        break;\r\n                    }\r\n\r\n                    let rowData = this.props.value[i];\r\n                    let expanded = this.isRowExpanded(rowData);\r\n                    let selected = selectionEnabled ? this.isSelected(this.props.value[i]) : false;\r\n                    let contextMenuSelected = this.isContextMenuSelected(rowData);\r\n                    let groupRowSpan;\r\n\r\n                    //header row group\r\n                    if(hasSubheaderGrouping) {\r\n                        let currentRowFieldData = ObjectUtils.resolveFieldData(rowData, this.props.groupField);\r\n                        let previousRowFieldData = ObjectUtils.resolveFieldData(this.props.value[i - 1], this.props.groupField);\r\n\r\n                        if(i === 0 || (currentRowFieldData !== previousRowFieldData)) {\r\n                            rows.push(this.renderRowGroupHeader(rowData, i));\r\n                            rowGroupHeaderExpanded = expanded;\r\n                        }\r\n                    }\r\n\r\n                    if(rowSpanGrouping) {\r\n                        let rowSpanIndex = i;\r\n                        let currentRowFieldData = ObjectUtils.resolveFieldData(rowData, this.props.sortField);\r\n                        let shouldCountRowSpan = (i === startIndex) || ObjectUtils.resolveFieldData(this.props.value[i - 1], this.props.sortField) !== currentRowFieldData ;\r\n\r\n                        if(shouldCountRowSpan) {\r\n                            let nextRowFieldData = currentRowFieldData;\r\n                            groupRowSpan = 0;\r\n\r\n                            while(currentRowFieldData === nextRowFieldData) {\r\n                                groupRowSpan++;\r\n                                let nextRowData = this.props.value[++rowSpanIndex];\r\n                                if(nextRowData) {\r\n                                    nextRowFieldData = ObjectUtils.resolveFieldData(nextRowData, this.props.sortField);\r\n                                }\r\n                                else {\r\n                                    break;\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    let isRowGroupExpanded = this.props.expandableRowGroups && hasSubheaderGrouping && rowGroupHeaderExpanded;\r\n                    if (!this.props.expandableRowGroups || isRowGroupExpanded) {\r\n                        //row content\r\n                        let bodyRow = <BodyRow tableId={this.props.tableId} key={i} value={this.props.value} rowData={rowData} rowIndex={i} onClick={this.onRowClick} onDoubleClick={this.props.onRowDoubleClick} onRightClick={this.onRowRightClick} onTouchEnd={this.onRowTouchEnd}\r\n                                            onRowToggle={this.onRowToggle} expanded={expanded} selectionMode={this.props.selectionMode}\r\n                                            onRadioClick={this.onRadioClick} onCheckboxClick={this.onCheckboxClick} selected={selected} contextMenuSelected={contextMenuSelected} rowClassName={this.props.rowClassName}\r\n                                            sortField={this.props.sortField} rowGroupMode={this.props.rowGroupMode} groupRowSpan={groupRowSpan}\r\n                                            onDragStart={(e) => this.onRowDragStart(e, i)} onDragEnd={this.onRowDragEnd} onDragOver={(e) => this.onRowDragOver(e, i)} onDragLeave={this.onRowDragLeave}\r\n                                            onDrop={this.onRowDrop} virtualScroll={this.props.virtualScroll} virtualRowHeight={this.props.virtualRowHeight}\r\n                                            editMode={this.props.editMode} rowEditorValidator={this.props.rowEditorValidator} onRowEditInit={this.props.onRowEditInit} onRowEditSave={this.props.onRowEditSave} onRowEditCancel={this.props.onRowEditCancel}\r\n                                            showRowReorderElement={this.props.showRowReorderElement} showSelectionElement={this.props.showSelectionElement}>\r\n                                            {this.props.children}\r\n                                    </BodyRow>\r\n\r\n                        rows.push(bodyRow);\r\n                    }\r\n\r\n                    //row expansion\r\n                    if (expanded && !(hasSubheaderGrouping && this.props.expandableRowGroups)) {\r\n                        let expandedRowContent = this.props.rowExpansionTemplate(rowData);\r\n                        let id = `${this.props.tableId ? this.props.tableId + '_' : ''}content_${i}_expanded`;\r\n                        let expandedRow = <tr key={id} id={id} role=\"row\"><td role=\"cell\" colSpan={this.props.children.length}>{expandedRowContent}</td></tr>\r\n                        rows.push(expandedRow);\r\n                    }\r\n\r\n                    //footer row group\r\n                    if (hasSubheaderGrouping && (!this.props.expandableRowGroups || isRowGroupExpanded)) {\r\n                        let currentRowFieldData = ObjectUtils.resolveFieldData(rowData, this.props.groupField);\r\n                        let nextRowFieldData = ObjectUtils.resolveFieldData(this.props.value[i + 1], this.props.groupField);\r\n\r\n                        if((i === this.props.value.length - 1) || (currentRowFieldData !== nextRowFieldData)) {\r\n                            rows.push(this.renderRowGroupFooter(rowData, i));\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                let emptyMessage = this.props.emptyMessage;\r\n\r\n                rows = !this.props.loading && emptyMessage !== null ?\r\n                    <tr role=\"row\" className=\"p-datatable-emptymessage\">\r\n                        <td role=\"cell\" colSpan={this.props.children.length}>\r\n                            {\r\n                                (typeof emptyMessage === 'function') ? emptyMessage(this.props.frozen) : emptyMessage\r\n                            }\r\n                            </td>\r\n                    </tr> : null;\r\n            }\r\n        }\r\n\r\n        return (\r\n            <tbody className=\"p-datatable-tbody\">\r\n                {rows}\r\n            </tbody>\r\n        );\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}