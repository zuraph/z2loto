{"ast":null,"code":"import _classCallCheck from\"C:\\\\Users\\\\zura.ph\\\\WebstormProjects\\\\slotmaster-dashboard\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";import _createClass from\"C:\\\\Users\\\\zura.ph\\\\WebstormProjects\\\\slotmaster-dashboard\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";import _assertThisInitialized from\"C:\\\\Users\\\\zura.ph\\\\WebstormProjects\\\\slotmaster-dashboard\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/assertThisInitialized\";import _inherits from\"C:\\\\Users\\\\zura.ph\\\\WebstormProjects\\\\slotmaster-dashboard\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";import _createSuper from\"C:\\\\Users\\\\zura.ph\\\\WebstormProjects\\\\slotmaster-dashboard\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createSuper\";import React,{Component}from'react';import{DataTable}from'../../components/datatable/DataTable';import{Column}from'../../components/column/Column';import{CustomerService}from'../service/CustomerService';import{TabView}from'../../components/tabview/TabView';import{Button}from'../../components/button/Button';import{Ripple}from'../../components/ripple/Ripple';import{Dropdown}from'../../components/dropdown/Dropdown';import{InputText}from'../../components/inputtext/InputText';import{useLiveEditorTabs}from'../liveeditor/LiveEditor';import{AppInlineHeader}from'../../AppInlineHeader';import classNames from'classnames';export var DataTablePaginatorDemo=/*#__PURE__*/function(_Component){_inherits(DataTablePaginatorDemo,_Component);var _super=_createSuper(DataTablePaginatorDemo);function DataTablePaginatorDemo(props){var _this;_classCallCheck(this,DataTablePaginatorDemo);_this=_super.call(this,props);_this.state={customers1:[],customers2:[],customers3:[],first1:0,rows1:10,first2:0,rows2:10,currentPage:1,pageInputTooltip:'Press \\'Enter\\' key to go to this page.'};_this.customerService=new CustomerService();_this.onCustomPage1=_this.onCustomPage1.bind(_assertThisInitialized(_this));_this.onCustomPage2=_this.onCustomPage2.bind(_assertThisInitialized(_this));_this.onPageInputKeyDown=_this.onPageInputKeyDown.bind(_assertThisInitialized(_this));_this.onPageInputChange=_this.onPageInputChange.bind(_assertThisInitialized(_this));return _this;}_createClass(DataTablePaginatorDemo,[{key:\"onCustomPage1\",value:function onCustomPage1(event){this.setState({first1:event.first,rows1:event.rows,currentPage:event.page+1});}},{key:\"onCustomPage2\",value:function onCustomPage2(event){this.setState({first2:event.first,rows2:event.rows});}},{key:\"onPageInputKeyDown\",value:function onPageInputKeyDown(event,options){if(event.key==='Enter'){var page=parseInt(this.state.currentPage);if(page<0||page>options.totalPages){this.setState({pageInputTooltip:\"Value must be between 1 and \".concat(options.totalPages,\".\")});}else{var first=this.state.currentPage?options.rows*(page-1):0;this.setState({first1:first,pageInputTooltip:'Press \\'Enter\\' key to go to this page.'});}}}},{key:\"onPageInputChange\",value:function onPageInputChange(event){this.setState({currentPage:event.target.value});}},{key:\"componentDidMount\",value:function componentDidMount(){var _this2=this;this.customerService.getCustomersLarge().then(function(data){return _this2.setState({customers1:data});});this.customerService.getCustomersLarge().then(function(data){return _this2.setState({customers2:data});});this.customerService.getCustomersLarge().then(function(data){return _this2.setState({customers3:data});});}},{key:\"render\",value:function render(){var _this3=this;var paginatorLeft=/*#__PURE__*/React.createElement(Button,{type:\"button\",icon:\"pi pi-refresh\",className:\"p-button-text\"});var paginatorRight=/*#__PURE__*/React.createElement(Button,{type:\"button\",icon:\"pi pi-cloud\",className:\"p-button-text\"});var template1={layout:'PrevPageLink PageLinks NextPageLink RowsPerPageDropdown CurrentPageReport','PrevPageLink':function PrevPageLink(options){return/*#__PURE__*/React.createElement(\"button\",{type:\"button\",className:options.className,onClick:options.onClick,disabled:options.disabled},/*#__PURE__*/React.createElement(\"span\",{className:\"p-p-3\"},\"Previous\"),/*#__PURE__*/React.createElement(Ripple,null));},'NextPageLink':function NextPageLink(options){return/*#__PURE__*/React.createElement(\"button\",{type:\"button\",className:options.className,onClick:options.onClick,disabled:options.disabled},/*#__PURE__*/React.createElement(\"span\",{className:\"p-p-3\"},\"Next\"),/*#__PURE__*/React.createElement(Ripple,null));},'PageLinks':function PageLinks(options){if(options.view.startPage===options.page&&options.view.startPage!==0||options.view.endPage===options.page&&options.page+1!==options.totalPages){var className=classNames(options.className,{'p-disabled':true});return/*#__PURE__*/React.createElement(\"span\",{className:className,style:{userSelect:'none'}},\"...\");}return/*#__PURE__*/React.createElement(\"button\",{type:\"button\",className:options.className,onClick:options.onClick},options.page+1,/*#__PURE__*/React.createElement(Ripple,null));},'RowsPerPageDropdown':function RowsPerPageDropdown(options){var dropdownOptions=[{label:10,value:10},{label:20,value:20},{label:50,value:50},{label:'All',value:options.totalRecords}];return/*#__PURE__*/React.createElement(Dropdown,{value:options.value,options:dropdownOptions,onChange:options.onChange,appendTo:document.body});},'CurrentPageReport':function CurrentPageReport(options){return/*#__PURE__*/React.createElement(\"span\",{className:\"p-mx-3\",style:{color:'var(--text-color)',userSelect:'none'}},\"Go to \",/*#__PURE__*/React.createElement(InputText,{size:\"2\",className:\"p-ml-1\",value:_this3.state.currentPage,tooltip:_this3.state.pageInputTooltip,onKeyDown:function onKeyDown(e){return _this3.onPageInputKeyDown(e,options);},onChange:_this3.onPageInputChange}));}};var template2={layout:'RowsPerPageDropdown CurrentPageReport PrevPageLink NextPageLink','RowsPerPageDropdown':function RowsPerPageDropdown(options){var dropdownOptions=[{label:10,value:10},{label:20,value:20},{label:50,value:50}];return/*#__PURE__*/React.createElement(React.Fragment,null,/*#__PURE__*/React.createElement(\"span\",{className:\"p-mx-1\",style:{color:'var(--text-color)',userSelect:'none'}},\"Items per page: \"),/*#__PURE__*/React.createElement(Dropdown,{value:options.value,options:dropdownOptions,onChange:options.onChange,appendTo:document.body}));},'CurrentPageReport':function CurrentPageReport(options){return/*#__PURE__*/React.createElement(\"span\",{style:{color:'var(--text-color)',userSelect:'none',width:'120px',textAlign:'center'}},options.first,\" - \",options.last,\" of \",options.totalRecords);}};return/*#__PURE__*/React.createElement(\"div\",null,/*#__PURE__*/React.createElement(\"div\",{className:\"content-section introduction\"},/*#__PURE__*/React.createElement(AppInlineHeader,{changelogText:\"dataTable\"},/*#__PURE__*/React.createElement(\"h1\",null,\"DataTable \",/*#__PURE__*/React.createElement(\"span\",null,\"Paginator\")),/*#__PURE__*/React.createElement(\"p\",null,\"Pagination is enabled by setting paginator property to true, rows attribute defines the number of rows per page and pageLinks specify the the number of page links to display.\"))),/*#__PURE__*/React.createElement(\"div\",{className:\"content-section implementation\"},/*#__PURE__*/React.createElement(\"div\",{className:\"card\"},/*#__PURE__*/React.createElement(\"h5\",null,\"Basic\"),/*#__PURE__*/React.createElement(DataTable,{value:this.state.customers1,paginator:true,paginatorTemplate:\"CurrentPageReport FirstPageLink PrevPageLink PageLinks NextPageLink LastPageLink RowsPerPageDropdown\",currentPageReportTemplate:\"Showing {first} to {last} of {totalRecords}\",rows:10,rowsPerPageOptions:[10,20,50],paginatorLeft:paginatorLeft,paginatorRight:paginatorRight},/*#__PURE__*/React.createElement(Column,{field:\"name\",header:\"Name\"}),/*#__PURE__*/React.createElement(Column,{field:\"country.name\",header:\"Country\"}),/*#__PURE__*/React.createElement(Column,{field:\"company\",header:\"Company\"}),/*#__PURE__*/React.createElement(Column,{field:\"representative.name\",header:\"Representative\"})),/*#__PURE__*/React.createElement(\"h5\",null,\"Custom Paginator Template\"),/*#__PURE__*/React.createElement(DataTable,{value:this.state.customers2,paginator:true,paginatorTemplate:template1,first:this.state.first1,rows:this.state.rows1,onPage:this.onCustomPage1},/*#__PURE__*/React.createElement(Column,{field:\"name\",header:\"Name\"}),/*#__PURE__*/React.createElement(Column,{field:\"country.name\",header:\"Country\"}),/*#__PURE__*/React.createElement(Column,{field:\"company\",header:\"Company\"}),/*#__PURE__*/React.createElement(Column,{field:\"representative.name\",header:\"Representative\"})),/*#__PURE__*/React.createElement(DataTable,{value:this.state.customers3,paginator:true,paginatorTemplate:template2,first:this.state.first2,rows:this.state.rows2,onPage:this.onCustomPage2,paginatorClassName:\"p-jc-end\",className:\"p-mt-6\"},/*#__PURE__*/React.createElement(Column,{field:\"name\",header:\"Name\"}),/*#__PURE__*/React.createElement(Column,{field:\"country.name\",header:\"Country\"}),/*#__PURE__*/React.createElement(Column,{field:\"company\",header:\"Company\"}),/*#__PURE__*/React.createElement(Column,{field:\"representative.name\",header:\"Representative\"})))),/*#__PURE__*/React.createElement(DataTablePaginatorDemoDoc,null));}}]);return DataTablePaginatorDemo;}(Component);export var DataTablePaginatorDemoDoc=/*#__PURE__*/function(_Component2){_inherits(DataTablePaginatorDemoDoc,_Component2);var _super2=_createSuper(DataTablePaginatorDemoDoc);function DataTablePaginatorDemoDoc(props){var _this4;_classCallCheck(this,DataTablePaginatorDemoDoc);_this4=_super2.call(this,props);_this4.sources={'class':{tabName:'Class Source',content:\"\\nimport React, { Component } from 'react';\\nimport { DataTable } from 'primereact/datatable';\\nimport { Column } from 'primereact/column';\\nimport { Button } from 'primereact/button';\\nimport { Ripple } from 'primereact/ripple';\\nimport { Dropdown } from 'primereact/dropdown';\\nimport { InputText } from 'primereact/inputtext';\\nimport { CustomerService } from '../service/CustomerService';\\nimport { Button } from 'primereact/button';\\nimport classNames from 'classnames';\\n\\nexport class DataTablePaginatorDemo extends Component {\\n\\n    constructor(props) {\\n        super(props);\\n\\n        this.state = {\\n            customers1: [],\\n            customers2: [],\\n            customers3: [],\\n            first1: 0,\\n            rows1: 10,\\n            first2: 0,\\n            rows2: 10,\\n            currentPage: 1,\\n            pageInputTooltip: 'Press \\\\'Enter\\\\' key to go to this page.'\\n        };\\n\\n        this.customerService = new CustomerService();\\n\\n        this.onCustomPage1 = this.onCustomPage1.bind(this);\\n        this.onCustomPage2 = this.onCustomPage2.bind(this);\\n        this.onPageInputKeyDown = this.onPageInputKeyDown.bind(this);\\n        this.onPageInputChange = this.onPageInputChange.bind(this);\\n    }\\n\\n    onCustomPage1(event) {\\n        this.setState({\\n            first1: event.first,\\n            rows1: event.rows,\\n            currentPage: event.page + 1\\n        });\\n    }\\n\\n    onCustomPage2(event) {\\n        this.setState({\\n            first2: event.first,\\n            rows2: event.rows\\n        });\\n    }\\n\\n    onPageInputKeyDown(event, options) {\\n        if (event.key === 'Enter') {\\n            const page = parseInt(this.state.currentPage);\\n            if (page < 0 || page > options.totalPages) {\\n                this.setState({ pageInputTooltip: `Value must be between 1 and ${options.totalPages}.`})\\n            }\\n            else {\\n                const first = this.state.currentPage ? options.rows * (page - 1) : 0;\\n\\n                this.setState({ first1: first, pageInputTooltip: 'Press \\\\'Enter\\\\' key to go to this page.' });\\n            }\\n        }\\n    }\\n\\n    onPageInputChange(event) {\\n        this.setState({ currentPage: event.target.value });\\n    }\\n\\n    componentDidMount() {\\n        this.customerService.getCustomersLarge().then(data => this.setState({ customers1: data }));\\n        this.customerService.getCustomersLarge().then(data => this.setState({ customers2: data }));\\n        this.customerService.getCustomersLarge().then(data => this.setState({ customers3: data }));\\n    }\\n\\n    render() {\\n        const paginatorLeft = <Button type=\\\"button\\\" icon=\\\"pi pi-refresh\\\" className=\\\"p-button-text\\\" />;\\n        const paginatorRight = <Button type=\\\"button\\\" icon=\\\"pi pi-cloud\\\" className=\\\"p-button-text\\\" />;\\n        const template1 = {\\n            layout: 'PrevPageLink PageLinks NextPageLink RowsPerPageDropdown CurrentPageReport',\\n            'PrevPageLink': (options) => {\\n                return (\\n                    <button type=\\\"button\\\" className={options.className} onClick={options.onClick} disabled={options.disabled}>\\n                        <span className=\\\"p-p-3\\\">Previous</span>\\n                        <Ripple />\\n                    </button>\\n                )\\n            },\\n            'NextPageLink': (options) => {\\n                return (\\n                    <button type=\\\"button\\\" className={options.className} onClick={options.onClick} disabled={options.disabled}>\\n                        <span className=\\\"p-p-3\\\">Next</span>\\n                        <Ripple />\\n                    </button>\\n                )\\n            },\\n            'PageLinks': (options) => {\\n                if ((options.view.startPage === options.page && options.view.startPage !== 0) || (options.view.endPage === options.page && options.page + 1 !== options.totalPages)) {\\n                    const className = classNames(options.className, { 'p-disabled': true });\\n\\n                    return <span className={className} style={{ userSelect: 'none' }}>...</span>;\\n                }\\n\\n                return (\\n                    <button type=\\\"button\\\" className={options.className} onClick={options.onClick}>\\n                        {options.page + 1}\\n                        <Ripple />\\n                    </button>\\n                )\\n            },\\n            'RowsPerPageDropdown': (options) => {\\n                const dropdownOptions = [\\n                    { label: 10, value: 10 },\\n                    { label: 20, value: 20 },\\n                    { label: 50, value: 50 },\\n                    { label: 'All', value: options.totalRecords }\\n                ];\\n\\n                return <Dropdown value={options.value} options={dropdownOptions} onChange={options.onChange} appendTo={document.body} />;\\n            },\\n            'CurrentPageReport': (options) => {\\n                return (\\n                    <span className=\\\"p-mx-3\\\" style={{ color: 'var(--text-color)', userSelect: 'none' }}>\\n                        Go to <InputText size=\\\"2\\\" className=\\\"p-ml-1\\\" value={this.state.currentPage} tooltip={this.state.pageInputTooltip}\\n                            onKeyDown={(e) => this.onPageInputKeyDown(e, options)} onChange={this.onPageInputChange}/>\\n                    </span>\\n                )\\n            }\\n        };\\n        const template2 = {\\n            layout: 'RowsPerPageDropdown CurrentPageReport PrevPageLink NextPageLink',\\n            'RowsPerPageDropdown': (options) => {\\n                const dropdownOptions = [\\n                    { label: 10, value: 10 },\\n                    { label: 20, value: 20 },\\n                    { label: 50, value: 50 }\\n                ];\\n\\n                return (\\n                    <>\\n                        <span className=\\\"p-mx-1\\\" style={{ color: 'var(--text-color)', userSelect: 'none' }}>Items per page: </span>\\n                        <Dropdown value={options.value} options={dropdownOptions} onChange={options.onChange} appendTo={document.body} />\\n                    </>\\n                );\\n            },\\n            'CurrentPageReport': (options) => {\\n                return (\\n                    <span style={{ color: 'var(--text-color)', userSelect: 'none', width: '120px', textAlign: 'center' }}>\\n                        {options.first} - {options.last} of {options.totalRecords}\\n                    </span>\\n                )\\n            }\\n        };\\n\\n        return (\\n            <div>\\n                <div className=\\\"card\\\">\\n                    <h5>Basic</h5>\\n                    <DataTable value={this.state.customers1} paginator\\n                        paginatorTemplate=\\\"CurrentPageReport FirstPageLink PrevPageLink PageLinks NextPageLink LastPageLink RowsPerPageDropdown\\\"\\n                        currentPageReportTemplate=\\\"Showing {first} to {last} of {totalRecords}\\\" rows={10} rowsPerPageOptions={[10,20,50]}\\n                        paginatorLeft={paginatorLeft} paginatorRight={paginatorRight}>\\n                        <Column field=\\\"name\\\" header=\\\"Name\\\"></Column>\\n                        <Column field=\\\"country.name\\\" header=\\\"Country\\\"></Column>\\n                        <Column field=\\\"company\\\" header=\\\"Company\\\"></Column>\\n                        <Column field=\\\"representative.name\\\" header=\\\"Representative\\\"></Column>\\n                    </DataTable>\\n\\n                    <h5>Custom Paginator Template</h5>\\n                    <DataTable value={this.state.customers2} paginator paginatorTemplate={template1} first={this.state.first1} rows={this.state.rows1} onPage={this.onCustomPage1}>\\n                        <Column field=\\\"name\\\" header=\\\"Name\\\"></Column>\\n                        <Column field=\\\"country.name\\\" header=\\\"Country\\\"></Column>\\n                        <Column field=\\\"company\\\" header=\\\"Company\\\"></Column>\\n                        <Column field=\\\"representative.name\\\" header=\\\"Representative\\\"></Column>\\n                    </DataTable>\\n\\n                    <DataTable value={this.state.customers3} paginator paginatorTemplate={template2} first={this.state.first2} rows={this.state.rows2} onPage={this.onCustomPage2}\\n                        paginatorClassName=\\\"p-jc-end\\\" className=\\\"p-mt-6\\\">\\n                        <Column field=\\\"name\\\" header=\\\"Name\\\"></Column>\\n                        <Column field=\\\"country.name\\\" header=\\\"Country\\\"></Column>\\n                        <Column field=\\\"company\\\" header=\\\"Company\\\"></Column>\\n                        <Column field=\\\"representative.name\\\" header=\\\"Representative\\\"></Column>\\n                    </DataTable>\\n                </div>\\n            </div>\\n        );\\n    }\\n}\\n                \"},'hooks':{tabName:'Hooks Source',content:\"\\nimport React, { useState, useEffect } from 'react';\\nimport { DataTable } from 'primereact/datatable';\\nimport { Column } from 'primereact/column';\\nimport { Button } from 'primereact/button';\\nimport { Ripple } from 'primereact/ripple';\\nimport { Dropdown } from 'primereact/dropdown';\\nimport { InputText } from 'primereact/inputtext';\\nimport { CustomerService } from '../service/CustomerService';\\nimport { Button } from 'primereact/button';\\nimport classNames from 'classnames';\\n\\nconst DataTablePaginatorDemo = () => {\\n    const [customers1, setCustomers1] = useState([]);\\n    const [customers2, setCustomers2] = useState([]);\\n    const [customers3, setCustomers3] = useState([]);\\n    const [first1, setFirst1] = useState(0);\\n    const [rows1, setRows1] = useState(10);\\n    const [first2, setFirst2] = useState(0);\\n    const [rows2, setRows2] = useState(10);\\n    const [currentPage, setCurrentPage] = useState(1);\\n    const [pageInputTooltip, setPageInputTooltip] = useState('Press \\\\'Enter\\\\' key to go to this page.');\\n\\n    const customerService = new CustomerService();\\n\\n    const onCustomPage1 = (event) => {\\n        setFirst1(event.first);\\n        setRows1(event.rows);\\n        setCurrentPage(event.page + 1);\\n    }\\n\\n    const onCustomPage2 = (event) => {\\n        setFirst2(event.first);\\n        setRows2(event.rows);\\n    }\\n\\n    const onPageInputKeyDown = (event, options) => {\\n        if (event.key === 'Enter') {\\n            const page = parseInt(currentPage);\\n            if (page < 0 || page > options.totalPages) {\\n                setPageInputTooltip(`Value must be between 1 and ${options.totalPages}.`);\\n            }\\n            else {\\n                const first = currentPage ? options.rows * (page - 1) : 0;\\n\\n                setFirst1(first);\\n                setPageInputTooltip('Press \\\\'Enter\\\\' key to go to this page.');\\n            }\\n        }\\n    }\\n\\n    const onPageInputChange = (event) => {\\n        setCurrentPage(event.target.value);\\n    }\\n\\n    useEffect(() => {\\n        customerService.getCustomersLarge().then(data => setCustomers1(data));\\n        customerService.getCustomersLarge().then(data => setCustomers2(data));\\n        customerService.getCustomersLarge().then(data => setCustomers3(data));\\n    }, []); // eslint-disable-line react-hooks/exhaustive-deps\\n\\n    const paginatorLeft = <Button type=\\\"button\\\" icon=\\\"pi pi-refresh\\\" className=\\\"p-button-text\\\" />;\\n    const paginatorRight = <Button type=\\\"button\\\" icon=\\\"pi pi-cloud\\\" className=\\\"p-button-text\\\" />;\\n    const template1 = {\\n        layout: 'PrevPageLink PageLinks NextPageLink RowsPerPageDropdown CurrentPageReport',\\n        'PrevPageLink': (options) => {\\n            return (\\n                <button type=\\\"button\\\" className={options.className} onClick={options.onClick} disabled={options.disabled}>\\n                    <span className=\\\"p-p-3\\\">Previous</span>\\n                    <Ripple />\\n                </button>\\n            )\\n        },\\n        'NextPageLink': (options) => {\\n            return (\\n                <button type=\\\"button\\\" className={options.className} onClick={options.onClick} disabled={options.disabled}>\\n                    <span className=\\\"p-p-3\\\">Next</span>\\n                    <Ripple />\\n                </button>\\n            )\\n        },\\n        'PageLinks': (options) => {\\n            if ((options.view.startPage === options.page && options.view.startPage !== 0) || (options.view.endPage === options.page && options.page + 1 !== options.totalPages)) {\\n                const className = classNames(options.className, { 'p-disabled': true });\\n\\n                return <span className={className} style={{ userSelect: 'none' }}>...</span>;\\n            }\\n\\n            return (\\n                <button type=\\\"button\\\" className={options.className} onClick={options.onClick}>\\n                    {options.page + 1}\\n                    <Ripple />\\n                </button>\\n            )\\n        },\\n        'RowsPerPageDropdown': (options) => {\\n            const dropdownOptions = [\\n                { label: 10, value: 10 },\\n                { label: 20, value: 20 },\\n                { label: 50, value: 50 },\\n                { label: 'All', value: options.totalRecords }\\n            ];\\n\\n            return <Dropdown value={options.value} options={dropdownOptions} onChange={options.onChange} appendTo={document.body} />;\\n        },\\n        'CurrentPageReport': (options) => {\\n            return (\\n                <span className=\\\"p-mx-3\\\" style={{ color: 'var(--text-color)', userSelect: 'none' }}>\\n                    Go to <InputText size=\\\"2\\\" className=\\\"p-ml-1\\\" value={currentPage} tooltip={pageInputTooltip}\\n                        onKeyDown={(e) => onPageInputKeyDown(e, options)} onChange={onPageInputChange}/>\\n                </span>\\n            )\\n        }\\n    };\\n    const template2 = {\\n        layout: 'RowsPerPageDropdown CurrentPageReport PrevPageLink NextPageLink',\\n        'RowsPerPageDropdown': (options) => {\\n            const dropdownOptions = [\\n                { label: 10, value: 10 },\\n                { label: 20, value: 20 },\\n                { label: 50, value: 50 }\\n            ];\\n\\n            return (\\n                <>\\n                    <span className=\\\"p-mx-1\\\" style={{ color: 'var(--text-color)', userSelect: 'none' }}>Items per page: </span>\\n                    <Dropdown value={options.value} options={dropdownOptions} onChange={options.onChange} appendTo={document.body} />\\n                </>\\n            );\\n        },\\n        'CurrentPageReport': (options) => {\\n            return (\\n                <span style={{ color: 'var(--text-color)', userSelect: 'none', width: '120px', textAlign: 'center' }}>\\n                    {options.first} - {options.last} of {options.totalRecords}\\n                </span>\\n            )\\n        }\\n    };\\n\\n    return (\\n        <div>\\n            <div className=\\\"card\\\">\\n                <h5>Basic</h5>\\n                <DataTable value={customers1} paginator\\n                    paginatorTemplate=\\\"CurrentPageReport FirstPageLink PrevPageLink PageLinks NextPageLink LastPageLink RowsPerPageDropdown\\\"\\n                    currentPageReportTemplate=\\\"Showing {first} to {last} of {totalRecords}\\\" rows={10} rowsPerPageOptions={[10,20,50]}\\n                    paginatorLeft={paginatorLeft} paginatorRight={paginatorRight}>\\n                    <Column field=\\\"name\\\" header=\\\"Name\\\"></Column>\\n                    <Column field=\\\"country.name\\\" header=\\\"Country\\\"></Column>\\n                    <Column field=\\\"company\\\" header=\\\"Company\\\"></Column>\\n                    <Column field=\\\"representative.name\\\" header=\\\"Representative\\\"></Column>\\n                </DataTable>\\n\\n                <h5>Custom Paginator Template</h5>\\n                <DataTable value={customers2} paginator paginatorTemplate={template1} first={first1} rows={rows1} onPage={onCustomPage1}>\\n                    <Column field=\\\"name\\\" header=\\\"Name\\\"></Column>\\n                    <Column field=\\\"country.name\\\" header=\\\"Country\\\"></Column>\\n                    <Column field=\\\"company\\\" header=\\\"Company\\\"></Column>\\n                    <Column field=\\\"representative.name\\\" header=\\\"Representative\\\"></Column>\\n                </DataTable>\\n\\n                <DataTable value={customers3} paginator paginatorTemplate={template2} first={first2} rows={rows2} onPage={onCustomPage2}\\n                    paginatorClassName=\\\"p-jc-end\\\" className=\\\"p-mt-6\\\">\\n                    <Column field=\\\"name\\\" header=\\\"Name\\\"></Column>\\n                    <Column field=\\\"country.name\\\" header=\\\"Country\\\"></Column>\\n                    <Column field=\\\"company\\\" header=\\\"Company\\\"></Column>\\n                    <Column field=\\\"representative.name\\\" header=\\\"Representative\\\"></Column>\\n                </DataTable>\\n            </div>\\n        </div>\\n    );\\n}\\n                \"},'ts':{tabName:'TS Source',content:\"\\nimport React, { useState, useEffect } from 'react';\\nimport { DataTable } from 'primereact/datatable';\\nimport { Column } from 'primereact/column';\\nimport { Button } from 'primereact/button';\\nimport { Ripple } from 'primereact/ripple';\\nimport { Dropdown } from 'primereact/dropdown';\\nimport { InputText } from 'primereact/inputtext';\\nimport { CustomerService } from '../service/CustomerService';\\nimport { Button } from 'primereact/button';\\nimport classNames from 'classnames';\\n\\nconst DataTablePaginatorDemo = () => {\\n    const [customers1, setCustomers1] = useState([]);\\n    const [customers2, setCustomers2] = useState([]);\\n    const [customers3, setCustomers3] = useState([]);\\n    const [first1, setFirst1] = useState(0);\\n    const [rows1, setRows1] = useState(10);\\n    const [first2, setFirst2] = useState(0);\\n    const [rows2, setRows2] = useState(10);\\n    const [currentPage, setCurrentPage] = useState(1);\\n    const [pageInputTooltip, setPageInputTooltip] = useState('Press \\\\'Enter\\\\' key to go to this page.');\\n\\n    const customerService = new CustomerService();\\n\\n    const onCustomPage1 = (event) => {\\n        setFirst1(event.first);\\n        setRows1(event.rows);\\n        setCurrentPage(event.page + 1);\\n    }\\n\\n    const onCustomPage2 = (event) => {\\n        setFirst2(event.first);\\n        setRows2(event.rows);\\n    }\\n\\n    const onPageInputKeyDown = (event, options) => {\\n        if (event.key === 'Enter') {\\n            const page = parseInt(currentPage);\\n            if (page < 0 || page > options.totalPages) {\\n                setPageInputTooltip(`Value must be between 1 and ${options.totalPages}.`);\\n            }\\n            else {\\n                const first = currentPage ? options.rows * (page - 1) : 0;\\n\\n                setFirst1(first);\\n                setPageInputTooltip('Press \\\\'Enter\\\\' key to go to this page.');\\n            }\\n        }\\n    }\\n\\n    const onPageInputChange = (event) => {\\n        setCurrentPage(event.target.value);\\n    }\\n\\n    useEffect(() => {\\n        customerService.getCustomersLarge().then(data => setCustomers1(data));\\n        customerService.getCustomersLarge().then(data => setCustomers2(data));\\n        customerService.getCustomersLarge().then(data => setCustomers3(data));\\n    }, []); // eslint-disable-line react-hooks/exhaustive-deps\\n\\n    const paginatorLeft = <Button type=\\\"button\\\" icon=\\\"pi pi-refresh\\\" className=\\\"p-button-text\\\" />;\\n    const paginatorRight = <Button type=\\\"button\\\" icon=\\\"pi pi-cloud\\\" className=\\\"p-button-text\\\" />;\\n    const template1 = {\\n        layout: 'PrevPageLink PageLinks NextPageLink RowsPerPageDropdown CurrentPageReport',\\n        'PrevPageLink': (options) => {\\n            return (\\n                <button type=\\\"button\\\" className={options.className} onClick={options.onClick} disabled={options.disabled}>\\n                    <span className=\\\"p-p-3\\\">Previous</span>\\n                    <Ripple />\\n                </button>\\n            )\\n        },\\n        'NextPageLink': (options) => {\\n            return (\\n                <button type=\\\"button\\\" className={options.className} onClick={options.onClick} disabled={options.disabled}>\\n                    <span className=\\\"p-p-3\\\">Next</span>\\n                    <Ripple />\\n                </button>\\n            )\\n        },\\n        'PageLinks': (options) => {\\n            if ((options.view.startPage === options.page && options.view.startPage !== 0) || (options.view.endPage === options.page && options.page + 1 !== options.totalPages)) {\\n                const className = classNames(options.className, { 'p-disabled': true });\\n\\n                return <span className={className} style={{ userSelect: 'none' }}>...</span>;\\n            }\\n\\n            return (\\n                <button type=\\\"button\\\" className={options.className} onClick={options.onClick}>\\n                    {options.page + 1}\\n                    <Ripple />\\n                </button>\\n            )\\n        },\\n        'RowsPerPageDropdown': (options) => {\\n            const dropdownOptions = [\\n                { label: 10, value: 10 },\\n                { label: 20, value: 20 },\\n                { label: 50, value: 50 },\\n                { label: 'All', value: options.totalRecords }\\n            ];\\n\\n            return <Dropdown value={options.value} options={dropdownOptions} onChange={options.onChange} appendTo={document.body} />;\\n        },\\n        'CurrentPageReport': (options) => {\\n            return (\\n                <span className=\\\"p-mx-3\\\" style={{ color: 'var(--text-color)', userSelect: 'none' }}>\\n                    Go to <InputText size=\\\"2\\\" className=\\\"p-ml-1\\\" value={currentPage} tooltip={pageInputTooltip}\\n                        onKeyDown={(e) => onPageInputKeyDown(e, options)} onChange={onPageInputChange}/>\\n                </span>\\n            )\\n        }\\n    };\\n    const template2 = {\\n        layout: 'RowsPerPageDropdown CurrentPageReport PrevPageLink NextPageLink',\\n        'RowsPerPageDropdown': (options) => {\\n            const dropdownOptions = [\\n                { label: 10, value: 10 },\\n                { label: 20, value: 20 },\\n                { label: 50, value: 50 }\\n            ];\\n\\n            return (\\n                <>\\n                    <span className=\\\"p-mx-1\\\" style={{ color: 'var(--text-color)', userSelect: 'none' }}>Items per page: </span>\\n                    <Dropdown value={options.value} options={dropdownOptions} onChange={options.onChange} appendTo={document.body} />\\n                </>\\n            );\\n        },\\n        'CurrentPageReport': (options) => {\\n            return (\\n                <span style={{ color: 'var(--text-color)', userSelect: 'none', width: '120px', textAlign: 'center' }}>\\n                    {options.first} - {options.last} of {options.totalRecords}\\n                </span>\\n            )\\n        }\\n    };\\n\\n    return (\\n        <div>\\n            <div className=\\\"card\\\">\\n                <h5>Basic</h5>\\n                <DataTable value={customers1} paginator\\n                    paginatorTemplate=\\\"CurrentPageReport FirstPageLink PrevPageLink PageLinks NextPageLink LastPageLink RowsPerPageDropdown\\\"\\n                    currentPageReportTemplate=\\\"Showing {first} to {last} of {totalRecords}\\\" rows={10} rowsPerPageOptions={[10,20,50]}\\n                    paginatorLeft={paginatorLeft} paginatorRight={paginatorRight}>\\n                    <Column field=\\\"name\\\" header=\\\"Name\\\"></Column>\\n                    <Column field=\\\"country.name\\\" header=\\\"Country\\\"></Column>\\n                    <Column field=\\\"company\\\" header=\\\"Company\\\"></Column>\\n                    <Column field=\\\"representative.name\\\" header=\\\"Representative\\\"></Column>\\n                </DataTable>\\n\\n                <h5>Custom Paginator Template</h5>\\n                <DataTable value={customers2} paginator paginatorTemplate={template1} first={first1} rows={rows1} onPage={onCustomPage1}>\\n                    <Column field=\\\"name\\\" header=\\\"Name\\\"></Column>\\n                    <Column field=\\\"country.name\\\" header=\\\"Country\\\"></Column>\\n                    <Column field=\\\"company\\\" header=\\\"Company\\\"></Column>\\n                    <Column field=\\\"representative.name\\\" header=\\\"Representative\\\"></Column>\\n                </DataTable>\\n\\n                <DataTable value={customers3} paginator paginatorTemplate={template2} first={first2} rows={rows2} onPage={onCustomPage2}\\n                    paginatorClassName=\\\"p-jc-end\\\" className=\\\"p-mt-6\\\">\\n                    <Column field=\\\"name\\\" header=\\\"Name\\\"></Column>\\n                    <Column field=\\\"country.name\\\" header=\\\"Country\\\"></Column>\\n                    <Column field=\\\"company\\\" header=\\\"Company\\\"></Column>\\n                    <Column field=\\\"representative.name\\\" header=\\\"Representative\\\"></Column>\\n                </DataTable>\\n            </div>\\n        </div>\\n    );\\n}\\n                \"}};return _this4;}_createClass(DataTablePaginatorDemoDoc,[{key:\"shouldComponentUpdate\",value:function shouldComponentUpdate(){return false;}},{key:\"render\",value:function render(){return/*#__PURE__*/React.createElement(\"div\",{className:\"content-section documentation\"},/*#__PURE__*/React.createElement(TabView,null,useLiveEditorTabs({name:'DataTablePaginatorDemo',sources:this.sources,service:'CustomerService',data:'customers-large'})));}}]);return DataTablePaginatorDemoDoc;}(Component);","map":{"version":3,"sources":["C:/Users/zura.ph/WebstormProjects/slotmaster-dashboard/src/showcase/datatable/DataTablePaginatorDemo.js"],"names":["React","Component","DataTable","Column","CustomerService","TabView","Button","Ripple","Dropdown","InputText","useLiveEditorTabs","AppInlineHeader","classNames","DataTablePaginatorDemo","props","state","customers1","customers2","customers3","first1","rows1","first2","rows2","currentPage","pageInputTooltip","customerService","onCustomPage1","bind","onCustomPage2","onPageInputKeyDown","onPageInputChange","event","setState","first","rows","page","options","key","parseInt","totalPages","target","value","getCustomersLarge","then","data","paginatorLeft","paginatorRight","template1","layout","className","onClick","disabled","view","startPage","endPage","userSelect","dropdownOptions","label","totalRecords","onChange","document","body","color","e","template2","width","textAlign","last","DataTablePaginatorDemoDoc","sources","tabName","content","name","service"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { DataTable } from '../../components/datatable/DataTable';\r\nimport { Column } from '../../components/column/Column';\r\nimport { CustomerService } from '../service/CustomerService';\r\nimport { TabView } from '../../components/tabview/TabView';\r\nimport { Button } from '../../components/button/Button';\r\nimport { Ripple } from '../../components/ripple/Ripple';\r\nimport { Dropdown } from '../../components/dropdown/Dropdown';\r\nimport { InputText } from '../../components/inputtext/InputText';\r\nimport { useLiveEditorTabs }from '../liveeditor/LiveEditor';\r\nimport { AppInlineHeader } from '../../AppInlineHeader';\r\nimport classNames from 'classnames';\r\n\r\nexport class DataTablePaginatorDemo extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            customers1: [],\r\n            customers2: [],\r\n            customers3: [],\r\n            first1: 0,\r\n            rows1: 10,\r\n            first2: 0,\r\n            rows2: 10,\r\n            currentPage: 1,\r\n            pageInputTooltip: 'Press \\'Enter\\' key to go to this page.'\r\n        };\r\n\r\n        this.customerService = new CustomerService();\r\n\r\n        this.onCustomPage1 = this.onCustomPage1.bind(this);\r\n        this.onCustomPage2 = this.onCustomPage2.bind(this);\r\n        this.onPageInputKeyDown = this.onPageInputKeyDown.bind(this);\r\n        this.onPageInputChange = this.onPageInputChange.bind(this);\r\n    }\r\n\r\n    onCustomPage1(event) {\r\n        this.setState({\r\n            first1: event.first,\r\n            rows1: event.rows,\r\n            currentPage: event.page + 1\r\n        });\r\n    }\r\n\r\n    onCustomPage2(event) {\r\n        this.setState({\r\n            first2: event.first,\r\n            rows2: event.rows\r\n        });\r\n    }\r\n\r\n    onPageInputKeyDown(event, options) {\r\n        if (event.key === 'Enter') {\r\n            const page = parseInt(this.state.currentPage);\r\n            if (page < 0 || page > options.totalPages) {\r\n                this.setState({ pageInputTooltip: `Value must be between 1 and ${options.totalPages}.`})\r\n            }\r\n            else {\r\n                const first = this.state.currentPage ? options.rows * (page - 1) : 0;\r\n\r\n                this.setState({ first1: first, pageInputTooltip: 'Press \\'Enter\\' key to go to this page.' });\r\n            }\r\n        }\r\n    }\r\n\r\n    onPageInputChange(event) {\r\n        this.setState({ currentPage: event.target.value });\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.customerService.getCustomersLarge().then(data => this.setState({ customers1: data }));\r\n        this.customerService.getCustomersLarge().then(data => this.setState({ customers2: data }));\r\n        this.customerService.getCustomersLarge().then(data => this.setState({ customers3: data }));\r\n    }\r\n\r\n    render() {\r\n        const paginatorLeft = <Button type=\"button\" icon=\"pi pi-refresh\" className=\"p-button-text\" />;\r\n        const paginatorRight = <Button type=\"button\" icon=\"pi pi-cloud\" className=\"p-button-text\" />;\r\n        const template1 = {\r\n            layout: 'PrevPageLink PageLinks NextPageLink RowsPerPageDropdown CurrentPageReport',\r\n            'PrevPageLink': (options) => {\r\n                return (\r\n                    <button type=\"button\" className={options.className} onClick={options.onClick} disabled={options.disabled}>\r\n                        <span className=\"p-p-3\">Previous</span>\r\n                        <Ripple />\r\n                    </button>\r\n                )\r\n            },\r\n            'NextPageLink': (options) => {\r\n                return (\r\n                    <button type=\"button\" className={options.className} onClick={options.onClick} disabled={options.disabled}>\r\n                        <span className=\"p-p-3\">Next</span>\r\n                        <Ripple />\r\n                    </button>\r\n                )\r\n            },\r\n            'PageLinks': (options) => {\r\n                if ((options.view.startPage === options.page && options.view.startPage !== 0) || (options.view.endPage === options.page && options.page + 1 !== options.totalPages)) {\r\n                    const className = classNames(options.className, { 'p-disabled': true });\r\n\r\n                    return <span className={className} style={{ userSelect: 'none' }}>...</span>;\r\n                }\r\n\r\n                return (\r\n                    <button type=\"button\" className={options.className} onClick={options.onClick}>\r\n                        {options.page + 1}\r\n                        <Ripple />\r\n                    </button>\r\n                )\r\n            },\r\n            'RowsPerPageDropdown': (options) => {\r\n                const dropdownOptions = [\r\n                    { label: 10, value: 10 },\r\n                    { label: 20, value: 20 },\r\n                    { label: 50, value: 50 },\r\n                    { label: 'All', value: options.totalRecords }\r\n                ];\r\n\r\n                return <Dropdown value={options.value} options={dropdownOptions} onChange={options.onChange} appendTo={document.body} />;\r\n            },\r\n            'CurrentPageReport': (options) => {\r\n                return (\r\n                    <span className=\"p-mx-3\" style={{ color: 'var(--text-color)', userSelect: 'none' }}>\r\n                        Go to <InputText size=\"2\" className=\"p-ml-1\" value={this.state.currentPage} tooltip={this.state.pageInputTooltip}\r\n                            onKeyDown={(e) => this.onPageInputKeyDown(e, options)} onChange={this.onPageInputChange}/>\r\n                    </span>\r\n                )\r\n            }\r\n        };\r\n        const template2 = {\r\n            layout: 'RowsPerPageDropdown CurrentPageReport PrevPageLink NextPageLink',\r\n            'RowsPerPageDropdown': (options) => {\r\n                const dropdownOptions = [\r\n                    { label: 10, value: 10 },\r\n                    { label: 20, value: 20 },\r\n                    { label: 50, value: 50 }\r\n                ];\r\n\r\n                return (\r\n                    <>\r\n                        <span className=\"p-mx-1\" style={{ color: 'var(--text-color)', userSelect: 'none' }}>Items per page: </span>\r\n                        <Dropdown value={options.value} options={dropdownOptions} onChange={options.onChange} appendTo={document.body} />\r\n                    </>\r\n                );\r\n            },\r\n            'CurrentPageReport': (options) => {\r\n                return (\r\n                    <span style={{ color: 'var(--text-color)', userSelect: 'none', width: '120px', textAlign: 'center' }}>\r\n                        {options.first} - {options.last} of {options.totalRecords}\r\n                    </span>\r\n                )\r\n            }\r\n        };\r\n\r\n        return (\r\n            <div>\r\n                <div className=\"content-section introduction\">\r\n                    <AppInlineHeader changelogText=\"dataTable\">\r\n                        <h1>DataTable <span>Paginator</span></h1>\r\n                        <p>Pagination is enabled by setting paginator property to true, rows attribute defines the number of rows per page and pageLinks specify the the number of page links to display.</p>\r\n                    </AppInlineHeader>\r\n                </div>\r\n\r\n                <div className=\"content-section implementation\">\r\n                    <div className=\"card\">\r\n                        <h5>Basic</h5>\r\n                        <DataTable value={this.state.customers1} paginator\r\n                            paginatorTemplate=\"CurrentPageReport FirstPageLink PrevPageLink PageLinks NextPageLink LastPageLink RowsPerPageDropdown\"\r\n                            currentPageReportTemplate=\"Showing {first} to {last} of {totalRecords}\" rows={10} rowsPerPageOptions={[10,20,50]}\r\n                            paginatorLeft={paginatorLeft} paginatorRight={paginatorRight}>\r\n                            <Column field=\"name\" header=\"Name\"></Column>\r\n                            <Column field=\"country.name\" header=\"Country\"></Column>\r\n                            <Column field=\"company\" header=\"Company\"></Column>\r\n                            <Column field=\"representative.name\" header=\"Representative\"></Column>\r\n                        </DataTable>\r\n\r\n                        <h5>Custom Paginator Template</h5>\r\n                        <DataTable value={this.state.customers2} paginator paginatorTemplate={template1} first={this.state.first1} rows={this.state.rows1} onPage={this.onCustomPage1}>\r\n                            <Column field=\"name\" header=\"Name\"></Column>\r\n                            <Column field=\"country.name\" header=\"Country\"></Column>\r\n                            <Column field=\"company\" header=\"Company\"></Column>\r\n                            <Column field=\"representative.name\" header=\"Representative\"></Column>\r\n                        </DataTable>\r\n\r\n                        <DataTable value={this.state.customers3} paginator paginatorTemplate={template2} first={this.state.first2} rows={this.state.rows2} onPage={this.onCustomPage2}\r\n                            paginatorClassName=\"p-jc-end\" className=\"p-mt-6\">\r\n                            <Column field=\"name\" header=\"Name\"></Column>\r\n                            <Column field=\"country.name\" header=\"Country\"></Column>\r\n                            <Column field=\"company\" header=\"Company\"></Column>\r\n                            <Column field=\"representative.name\" header=\"Representative\"></Column>\r\n                        </DataTable>\r\n                    </div>\r\n                </div>\r\n\r\n                <DataTablePaginatorDemoDoc></DataTablePaginatorDemoDoc>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport class DataTablePaginatorDemoDoc extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.sources = {\r\n            'class': {\r\n                tabName: 'Class Source',\r\n                content: `\r\nimport React, { Component } from 'react';\r\nimport { DataTable } from 'primereact/datatable';\r\nimport { Column } from 'primereact/column';\r\nimport { Button } from 'primereact/button';\r\nimport { Ripple } from 'primereact/ripple';\r\nimport { Dropdown } from 'primereact/dropdown';\r\nimport { InputText } from 'primereact/inputtext';\r\nimport { CustomerService } from '../service/CustomerService';\r\nimport { Button } from 'primereact/button';\r\nimport classNames from 'classnames';\r\n\r\nexport class DataTablePaginatorDemo extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            customers1: [],\r\n            customers2: [],\r\n            customers3: [],\r\n            first1: 0,\r\n            rows1: 10,\r\n            first2: 0,\r\n            rows2: 10,\r\n            currentPage: 1,\r\n            pageInputTooltip: 'Press \\\\'Enter\\\\' key to go to this page.'\r\n        };\r\n\r\n        this.customerService = new CustomerService();\r\n\r\n        this.onCustomPage1 = this.onCustomPage1.bind(this);\r\n        this.onCustomPage2 = this.onCustomPage2.bind(this);\r\n        this.onPageInputKeyDown = this.onPageInputKeyDown.bind(this);\r\n        this.onPageInputChange = this.onPageInputChange.bind(this);\r\n    }\r\n\r\n    onCustomPage1(event) {\r\n        this.setState({\r\n            first1: event.first,\r\n            rows1: event.rows,\r\n            currentPage: event.page + 1\r\n        });\r\n    }\r\n\r\n    onCustomPage2(event) {\r\n        this.setState({\r\n            first2: event.first,\r\n            rows2: event.rows\r\n        });\r\n    }\r\n\r\n    onPageInputKeyDown(event, options) {\r\n        if (event.key === 'Enter') {\r\n            const page = parseInt(this.state.currentPage);\r\n            if (page < 0 || page > options.totalPages) {\r\n                this.setState({ pageInputTooltip: \\`Value must be between 1 and \\${options.totalPages}.\\`})\r\n            }\r\n            else {\r\n                const first = this.state.currentPage ? options.rows * (page - 1) : 0;\r\n\r\n                this.setState({ first1: first, pageInputTooltip: 'Press \\\\'Enter\\\\' key to go to this page.' });\r\n            }\r\n        }\r\n    }\r\n\r\n    onPageInputChange(event) {\r\n        this.setState({ currentPage: event.target.value });\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.customerService.getCustomersLarge().then(data => this.setState({ customers1: data }));\r\n        this.customerService.getCustomersLarge().then(data => this.setState({ customers2: data }));\r\n        this.customerService.getCustomersLarge().then(data => this.setState({ customers3: data }));\r\n    }\r\n\r\n    render() {\r\n        const paginatorLeft = <Button type=\"button\" icon=\"pi pi-refresh\" className=\"p-button-text\" />;\r\n        const paginatorRight = <Button type=\"button\" icon=\"pi pi-cloud\" className=\"p-button-text\" />;\r\n        const template1 = {\r\n            layout: 'PrevPageLink PageLinks NextPageLink RowsPerPageDropdown CurrentPageReport',\r\n            'PrevPageLink': (options) => {\r\n                return (\r\n                    <button type=\"button\" className={options.className} onClick={options.onClick} disabled={options.disabled}>\r\n                        <span className=\"p-p-3\">Previous</span>\r\n                        <Ripple />\r\n                    </button>\r\n                )\r\n            },\r\n            'NextPageLink': (options) => {\r\n                return (\r\n                    <button type=\"button\" className={options.className} onClick={options.onClick} disabled={options.disabled}>\r\n                        <span className=\"p-p-3\">Next</span>\r\n                        <Ripple />\r\n                    </button>\r\n                )\r\n            },\r\n            'PageLinks': (options) => {\r\n                if ((options.view.startPage === options.page && options.view.startPage !== 0) || (options.view.endPage === options.page && options.page + 1 !== options.totalPages)) {\r\n                    const className = classNames(options.className, { 'p-disabled': true });\r\n\r\n                    return <span className={className} style={{ userSelect: 'none' }}>...</span>;\r\n                }\r\n\r\n                return (\r\n                    <button type=\"button\" className={options.className} onClick={options.onClick}>\r\n                        {options.page + 1}\r\n                        <Ripple />\r\n                    </button>\r\n                )\r\n            },\r\n            'RowsPerPageDropdown': (options) => {\r\n                const dropdownOptions = [\r\n                    { label: 10, value: 10 },\r\n                    { label: 20, value: 20 },\r\n                    { label: 50, value: 50 },\r\n                    { label: 'All', value: options.totalRecords }\r\n                ];\r\n\r\n                return <Dropdown value={options.value} options={dropdownOptions} onChange={options.onChange} appendTo={document.body} />;\r\n            },\r\n            'CurrentPageReport': (options) => {\r\n                return (\r\n                    <span className=\"p-mx-3\" style={{ color: 'var(--text-color)', userSelect: 'none' }}>\r\n                        Go to <InputText size=\"2\" className=\"p-ml-1\" value={this.state.currentPage} tooltip={this.state.pageInputTooltip}\r\n                            onKeyDown={(e) => this.onPageInputKeyDown(e, options)} onChange={this.onPageInputChange}/>\r\n                    </span>\r\n                )\r\n            }\r\n        };\r\n        const template2 = {\r\n            layout: 'RowsPerPageDropdown CurrentPageReport PrevPageLink NextPageLink',\r\n            'RowsPerPageDropdown': (options) => {\r\n                const dropdownOptions = [\r\n                    { label: 10, value: 10 },\r\n                    { label: 20, value: 20 },\r\n                    { label: 50, value: 50 }\r\n                ];\r\n\r\n                return (\r\n                    <>\r\n                        <span className=\"p-mx-1\" style={{ color: 'var(--text-color)', userSelect: 'none' }}>Items per page: </span>\r\n                        <Dropdown value={options.value} options={dropdownOptions} onChange={options.onChange} appendTo={document.body} />\r\n                    </>\r\n                );\r\n            },\r\n            'CurrentPageReport': (options) => {\r\n                return (\r\n                    <span style={{ color: 'var(--text-color)', userSelect: 'none', width: '120px', textAlign: 'center' }}>\r\n                        {options.first} - {options.last} of {options.totalRecords}\r\n                    </span>\r\n                )\r\n            }\r\n        };\r\n\r\n        return (\r\n            <div>\r\n                <div className=\"card\">\r\n                    <h5>Basic</h5>\r\n                    <DataTable value={this.state.customers1} paginator\r\n                        paginatorTemplate=\"CurrentPageReport FirstPageLink PrevPageLink PageLinks NextPageLink LastPageLink RowsPerPageDropdown\"\r\n                        currentPageReportTemplate=\"Showing {first} to {last} of {totalRecords}\" rows={10} rowsPerPageOptions={[10,20,50]}\r\n                        paginatorLeft={paginatorLeft} paginatorRight={paginatorRight}>\r\n                        <Column field=\"name\" header=\"Name\"></Column>\r\n                        <Column field=\"country.name\" header=\"Country\"></Column>\r\n                        <Column field=\"company\" header=\"Company\"></Column>\r\n                        <Column field=\"representative.name\" header=\"Representative\"></Column>\r\n                    </DataTable>\r\n\r\n                    <h5>Custom Paginator Template</h5>\r\n                    <DataTable value={this.state.customers2} paginator paginatorTemplate={template1} first={this.state.first1} rows={this.state.rows1} onPage={this.onCustomPage1}>\r\n                        <Column field=\"name\" header=\"Name\"></Column>\r\n                        <Column field=\"country.name\" header=\"Country\"></Column>\r\n                        <Column field=\"company\" header=\"Company\"></Column>\r\n                        <Column field=\"representative.name\" header=\"Representative\"></Column>\r\n                    </DataTable>\r\n\r\n                    <DataTable value={this.state.customers3} paginator paginatorTemplate={template2} first={this.state.first2} rows={this.state.rows2} onPage={this.onCustomPage2}\r\n                        paginatorClassName=\"p-jc-end\" className=\"p-mt-6\">\r\n                        <Column field=\"name\" header=\"Name\"></Column>\r\n                        <Column field=\"country.name\" header=\"Country\"></Column>\r\n                        <Column field=\"company\" header=\"Company\"></Column>\r\n                        <Column field=\"representative.name\" header=\"Representative\"></Column>\r\n                    </DataTable>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n                `\r\n            },\r\n            'hooks': {\r\n                tabName: 'Hooks Source',\r\n                content: `\r\nimport React, { useState, useEffect } from 'react';\r\nimport { DataTable } from 'primereact/datatable';\r\nimport { Column } from 'primereact/column';\r\nimport { Button } from 'primereact/button';\r\nimport { Ripple } from 'primereact/ripple';\r\nimport { Dropdown } from 'primereact/dropdown';\r\nimport { InputText } from 'primereact/inputtext';\r\nimport { CustomerService } from '../service/CustomerService';\r\nimport { Button } from 'primereact/button';\r\nimport classNames from 'classnames';\r\n\r\nconst DataTablePaginatorDemo = () => {\r\n    const [customers1, setCustomers1] = useState([]);\r\n    const [customers2, setCustomers2] = useState([]);\r\n    const [customers3, setCustomers3] = useState([]);\r\n    const [first1, setFirst1] = useState(0);\r\n    const [rows1, setRows1] = useState(10);\r\n    const [first2, setFirst2] = useState(0);\r\n    const [rows2, setRows2] = useState(10);\r\n    const [currentPage, setCurrentPage] = useState(1);\r\n    const [pageInputTooltip, setPageInputTooltip] = useState('Press \\\\'Enter\\\\' key to go to this page.');\r\n\r\n    const customerService = new CustomerService();\r\n\r\n    const onCustomPage1 = (event) => {\r\n        setFirst1(event.first);\r\n        setRows1(event.rows);\r\n        setCurrentPage(event.page + 1);\r\n    }\r\n\r\n    const onCustomPage2 = (event) => {\r\n        setFirst2(event.first);\r\n        setRows2(event.rows);\r\n    }\r\n\r\n    const onPageInputKeyDown = (event, options) => {\r\n        if (event.key === 'Enter') {\r\n            const page = parseInt(currentPage);\r\n            if (page < 0 || page > options.totalPages) {\r\n                setPageInputTooltip(\\`Value must be between 1 and \\${options.totalPages}.\\`);\r\n            }\r\n            else {\r\n                const first = currentPage ? options.rows * (page - 1) : 0;\r\n\r\n                setFirst1(first);\r\n                setPageInputTooltip('Press \\\\'Enter\\\\' key to go to this page.');\r\n            }\r\n        }\r\n    }\r\n\r\n    const onPageInputChange = (event) => {\r\n        setCurrentPage(event.target.value);\r\n    }\r\n\r\n    useEffect(() => {\r\n        customerService.getCustomersLarge().then(data => setCustomers1(data));\r\n        customerService.getCustomersLarge().then(data => setCustomers2(data));\r\n        customerService.getCustomersLarge().then(data => setCustomers3(data));\r\n    }, []); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n    const paginatorLeft = <Button type=\"button\" icon=\"pi pi-refresh\" className=\"p-button-text\" />;\r\n    const paginatorRight = <Button type=\"button\" icon=\"pi pi-cloud\" className=\"p-button-text\" />;\r\n    const template1 = {\r\n        layout: 'PrevPageLink PageLinks NextPageLink RowsPerPageDropdown CurrentPageReport',\r\n        'PrevPageLink': (options) => {\r\n            return (\r\n                <button type=\"button\" className={options.className} onClick={options.onClick} disabled={options.disabled}>\r\n                    <span className=\"p-p-3\">Previous</span>\r\n                    <Ripple />\r\n                </button>\r\n            )\r\n        },\r\n        'NextPageLink': (options) => {\r\n            return (\r\n                <button type=\"button\" className={options.className} onClick={options.onClick} disabled={options.disabled}>\r\n                    <span className=\"p-p-3\">Next</span>\r\n                    <Ripple />\r\n                </button>\r\n            )\r\n        },\r\n        'PageLinks': (options) => {\r\n            if ((options.view.startPage === options.page && options.view.startPage !== 0) || (options.view.endPage === options.page && options.page + 1 !== options.totalPages)) {\r\n                const className = classNames(options.className, { 'p-disabled': true });\r\n\r\n                return <span className={className} style={{ userSelect: 'none' }}>...</span>;\r\n            }\r\n\r\n            return (\r\n                <button type=\"button\" className={options.className} onClick={options.onClick}>\r\n                    {options.page + 1}\r\n                    <Ripple />\r\n                </button>\r\n            )\r\n        },\r\n        'RowsPerPageDropdown': (options) => {\r\n            const dropdownOptions = [\r\n                { label: 10, value: 10 },\r\n                { label: 20, value: 20 },\r\n                { label: 50, value: 50 },\r\n                { label: 'All', value: options.totalRecords }\r\n            ];\r\n\r\n            return <Dropdown value={options.value} options={dropdownOptions} onChange={options.onChange} appendTo={document.body} />;\r\n        },\r\n        'CurrentPageReport': (options) => {\r\n            return (\r\n                <span className=\"p-mx-3\" style={{ color: 'var(--text-color)', userSelect: 'none' }}>\r\n                    Go to <InputText size=\"2\" className=\"p-ml-1\" value={currentPage} tooltip={pageInputTooltip}\r\n                        onKeyDown={(e) => onPageInputKeyDown(e, options)} onChange={onPageInputChange}/>\r\n                </span>\r\n            )\r\n        }\r\n    };\r\n    const template2 = {\r\n        layout: 'RowsPerPageDropdown CurrentPageReport PrevPageLink NextPageLink',\r\n        'RowsPerPageDropdown': (options) => {\r\n            const dropdownOptions = [\r\n                { label: 10, value: 10 },\r\n                { label: 20, value: 20 },\r\n                { label: 50, value: 50 }\r\n            ];\r\n\r\n            return (\r\n                <>\r\n                    <span className=\"p-mx-1\" style={{ color: 'var(--text-color)', userSelect: 'none' }}>Items per page: </span>\r\n                    <Dropdown value={options.value} options={dropdownOptions} onChange={options.onChange} appendTo={document.body} />\r\n                </>\r\n            );\r\n        },\r\n        'CurrentPageReport': (options) => {\r\n            return (\r\n                <span style={{ color: 'var(--text-color)', userSelect: 'none', width: '120px', textAlign: 'center' }}>\r\n                    {options.first} - {options.last} of {options.totalRecords}\r\n                </span>\r\n            )\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"card\">\r\n                <h5>Basic</h5>\r\n                <DataTable value={customers1} paginator\r\n                    paginatorTemplate=\"CurrentPageReport FirstPageLink PrevPageLink PageLinks NextPageLink LastPageLink RowsPerPageDropdown\"\r\n                    currentPageReportTemplate=\"Showing {first} to {last} of {totalRecords}\" rows={10} rowsPerPageOptions={[10,20,50]}\r\n                    paginatorLeft={paginatorLeft} paginatorRight={paginatorRight}>\r\n                    <Column field=\"name\" header=\"Name\"></Column>\r\n                    <Column field=\"country.name\" header=\"Country\"></Column>\r\n                    <Column field=\"company\" header=\"Company\"></Column>\r\n                    <Column field=\"representative.name\" header=\"Representative\"></Column>\r\n                </DataTable>\r\n\r\n                <h5>Custom Paginator Template</h5>\r\n                <DataTable value={customers2} paginator paginatorTemplate={template1} first={first1} rows={rows1} onPage={onCustomPage1}>\r\n                    <Column field=\"name\" header=\"Name\"></Column>\r\n                    <Column field=\"country.name\" header=\"Country\"></Column>\r\n                    <Column field=\"company\" header=\"Company\"></Column>\r\n                    <Column field=\"representative.name\" header=\"Representative\"></Column>\r\n                </DataTable>\r\n\r\n                <DataTable value={customers3} paginator paginatorTemplate={template2} first={first2} rows={rows2} onPage={onCustomPage2}\r\n                    paginatorClassName=\"p-jc-end\" className=\"p-mt-6\">\r\n                    <Column field=\"name\" header=\"Name\"></Column>\r\n                    <Column field=\"country.name\" header=\"Country\"></Column>\r\n                    <Column field=\"company\" header=\"Company\"></Column>\r\n                    <Column field=\"representative.name\" header=\"Representative\"></Column>\r\n                </DataTable>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n                `\r\n            },\r\n            'ts': {\r\n                tabName: 'TS Source',\r\n                content: `\r\nimport React, { useState, useEffect } from 'react';\r\nimport { DataTable } from 'primereact/datatable';\r\nimport { Column } from 'primereact/column';\r\nimport { Button } from 'primereact/button';\r\nimport { Ripple } from 'primereact/ripple';\r\nimport { Dropdown } from 'primereact/dropdown';\r\nimport { InputText } from 'primereact/inputtext';\r\nimport { CustomerService } from '../service/CustomerService';\r\nimport { Button } from 'primereact/button';\r\nimport classNames from 'classnames';\r\n\r\nconst DataTablePaginatorDemo = () => {\r\n    const [customers1, setCustomers1] = useState([]);\r\n    const [customers2, setCustomers2] = useState([]);\r\n    const [customers3, setCustomers3] = useState([]);\r\n    const [first1, setFirst1] = useState(0);\r\n    const [rows1, setRows1] = useState(10);\r\n    const [first2, setFirst2] = useState(0);\r\n    const [rows2, setRows2] = useState(10);\r\n    const [currentPage, setCurrentPage] = useState(1);\r\n    const [pageInputTooltip, setPageInputTooltip] = useState('Press \\\\'Enter\\\\' key to go to this page.');\r\n\r\n    const customerService = new CustomerService();\r\n\r\n    const onCustomPage1 = (event) => {\r\n        setFirst1(event.first);\r\n        setRows1(event.rows);\r\n        setCurrentPage(event.page + 1);\r\n    }\r\n\r\n    const onCustomPage2 = (event) => {\r\n        setFirst2(event.first);\r\n        setRows2(event.rows);\r\n    }\r\n\r\n    const onPageInputKeyDown = (event, options) => {\r\n        if (event.key === 'Enter') {\r\n            const page = parseInt(currentPage);\r\n            if (page < 0 || page > options.totalPages) {\r\n                setPageInputTooltip(\\`Value must be between 1 and \\${options.totalPages}.\\`);\r\n            }\r\n            else {\r\n                const first = currentPage ? options.rows * (page - 1) : 0;\r\n\r\n                setFirst1(first);\r\n                setPageInputTooltip('Press \\\\'Enter\\\\' key to go to this page.');\r\n            }\r\n        }\r\n    }\r\n\r\n    const onPageInputChange = (event) => {\r\n        setCurrentPage(event.target.value);\r\n    }\r\n\r\n    useEffect(() => {\r\n        customerService.getCustomersLarge().then(data => setCustomers1(data));\r\n        customerService.getCustomersLarge().then(data => setCustomers2(data));\r\n        customerService.getCustomersLarge().then(data => setCustomers3(data));\r\n    }, []); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n    const paginatorLeft = <Button type=\"button\" icon=\"pi pi-refresh\" className=\"p-button-text\" />;\r\n    const paginatorRight = <Button type=\"button\" icon=\"pi pi-cloud\" className=\"p-button-text\" />;\r\n    const template1 = {\r\n        layout: 'PrevPageLink PageLinks NextPageLink RowsPerPageDropdown CurrentPageReport',\r\n        'PrevPageLink': (options) => {\r\n            return (\r\n                <button type=\"button\" className={options.className} onClick={options.onClick} disabled={options.disabled}>\r\n                    <span className=\"p-p-3\">Previous</span>\r\n                    <Ripple />\r\n                </button>\r\n            )\r\n        },\r\n        'NextPageLink': (options) => {\r\n            return (\r\n                <button type=\"button\" className={options.className} onClick={options.onClick} disabled={options.disabled}>\r\n                    <span className=\"p-p-3\">Next</span>\r\n                    <Ripple />\r\n                </button>\r\n            )\r\n        },\r\n        'PageLinks': (options) => {\r\n            if ((options.view.startPage === options.page && options.view.startPage !== 0) || (options.view.endPage === options.page && options.page + 1 !== options.totalPages)) {\r\n                const className = classNames(options.className, { 'p-disabled': true });\r\n\r\n                return <span className={className} style={{ userSelect: 'none' }}>...</span>;\r\n            }\r\n\r\n            return (\r\n                <button type=\"button\" className={options.className} onClick={options.onClick}>\r\n                    {options.page + 1}\r\n                    <Ripple />\r\n                </button>\r\n            )\r\n        },\r\n        'RowsPerPageDropdown': (options) => {\r\n            const dropdownOptions = [\r\n                { label: 10, value: 10 },\r\n                { label: 20, value: 20 },\r\n                { label: 50, value: 50 },\r\n                { label: 'All', value: options.totalRecords }\r\n            ];\r\n\r\n            return <Dropdown value={options.value} options={dropdownOptions} onChange={options.onChange} appendTo={document.body} />;\r\n        },\r\n        'CurrentPageReport': (options) => {\r\n            return (\r\n                <span className=\"p-mx-3\" style={{ color: 'var(--text-color)', userSelect: 'none' }}>\r\n                    Go to <InputText size=\"2\" className=\"p-ml-1\" value={currentPage} tooltip={pageInputTooltip}\r\n                        onKeyDown={(e) => onPageInputKeyDown(e, options)} onChange={onPageInputChange}/>\r\n                </span>\r\n            )\r\n        }\r\n    };\r\n    const template2 = {\r\n        layout: 'RowsPerPageDropdown CurrentPageReport PrevPageLink NextPageLink',\r\n        'RowsPerPageDropdown': (options) => {\r\n            const dropdownOptions = [\r\n                { label: 10, value: 10 },\r\n                { label: 20, value: 20 },\r\n                { label: 50, value: 50 }\r\n            ];\r\n\r\n            return (\r\n                <>\r\n                    <span className=\"p-mx-1\" style={{ color: 'var(--text-color)', userSelect: 'none' }}>Items per page: </span>\r\n                    <Dropdown value={options.value} options={dropdownOptions} onChange={options.onChange} appendTo={document.body} />\r\n                </>\r\n            );\r\n        },\r\n        'CurrentPageReport': (options) => {\r\n            return (\r\n                <span style={{ color: 'var(--text-color)', userSelect: 'none', width: '120px', textAlign: 'center' }}>\r\n                    {options.first} - {options.last} of {options.totalRecords}\r\n                </span>\r\n            )\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"card\">\r\n                <h5>Basic</h5>\r\n                <DataTable value={customers1} paginator\r\n                    paginatorTemplate=\"CurrentPageReport FirstPageLink PrevPageLink PageLinks NextPageLink LastPageLink RowsPerPageDropdown\"\r\n                    currentPageReportTemplate=\"Showing {first} to {last} of {totalRecords}\" rows={10} rowsPerPageOptions={[10,20,50]}\r\n                    paginatorLeft={paginatorLeft} paginatorRight={paginatorRight}>\r\n                    <Column field=\"name\" header=\"Name\"></Column>\r\n                    <Column field=\"country.name\" header=\"Country\"></Column>\r\n                    <Column field=\"company\" header=\"Company\"></Column>\r\n                    <Column field=\"representative.name\" header=\"Representative\"></Column>\r\n                </DataTable>\r\n\r\n                <h5>Custom Paginator Template</h5>\r\n                <DataTable value={customers2} paginator paginatorTemplate={template1} first={first1} rows={rows1} onPage={onCustomPage1}>\r\n                    <Column field=\"name\" header=\"Name\"></Column>\r\n                    <Column field=\"country.name\" header=\"Country\"></Column>\r\n                    <Column field=\"company\" header=\"Company\"></Column>\r\n                    <Column field=\"representative.name\" header=\"Representative\"></Column>\r\n                </DataTable>\r\n\r\n                <DataTable value={customers3} paginator paginatorTemplate={template2} first={first2} rows={rows2} onPage={onCustomPage2}\r\n                    paginatorClassName=\"p-jc-end\" className=\"p-mt-6\">\r\n                    <Column field=\"name\" header=\"Name\"></Column>\r\n                    <Column field=\"country.name\" header=\"Country\"></Column>\r\n                    <Column field=\"company\" header=\"Company\"></Column>\r\n                    <Column field=\"representative.name\" header=\"Representative\"></Column>\r\n                </DataTable>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n                `\r\n            }\r\n        }\r\n    }\r\n\r\n    shouldComponentUpdate() {\r\n        return false;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"content-section documentation\">\r\n                <TabView>\r\n                    {\r\n                        useLiveEditorTabs({ name: 'DataTablePaginatorDemo', sources: this.sources, service: 'CustomerService', data: 'customers-large' })\r\n                    }\r\n                </TabView>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}