{"ast":null,"code":"import _objectSpread from \"C:\\\\Users\\\\zura.ph\\\\WebstormProjects\\\\zz-regul\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\nimport _classCallCheck from \"C:\\\\Users\\\\zura.ph\\\\WebstormProjects\\\\zz-regul\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\zura.ph\\\\WebstormProjects\\\\zz-regul\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _inherits from \"C:\\\\Users\\\\zura.ph\\\\WebstormProjects\\\\zz-regul\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _createSuper from \"C:\\\\Users\\\\zura.ph\\\\WebstormProjects\\\\zz-regul\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createSuper\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\zura.ph\\\\WebstormProjects\\\\zz-regul\\\\src\\\\components\\\\autocomplete\\\\AutoCompletePanel.js\",\n    _this2 = this;\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport ReactDOM from 'react-dom';\nimport ObjectUtils from '../utils/ObjectUtils';\nimport { Ripple } from '../ripple/Ripple';\nimport { classNames } from '../utils/ClassNames';\nimport { CSSTransition } from 'react-transition-group';\n\nvar AutoCompletePanelComponent = /*#__PURE__*/function (_Component) {\n  _inherits(AutoCompletePanelComponent, _Component);\n\n  var _super = _createSuper(AutoCompletePanelComponent);\n\n  function AutoCompletePanelComponent() {\n    _classCallCheck(this, AutoCompletePanelComponent);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(AutoCompletePanelComponent, [{\n    key: \"renderElement\",\n    value: function renderElement() {\n      var _this = this;\n\n      var panelClassName = classNames('p-autocomplete-panel p-component', this.props.panelClassName);\n\n      var panelStyle = _objectSpread({\n        maxHeight: this.props.scrollHeight\n      }, this.props.panelStyle);\n\n      var items;\n\n      if (this.props.suggestions) {\n        items = this.props.suggestions.map(function (suggestion, index) {\n          var itemContent = _this.props.itemTemplate ? ObjectUtils.getJSXElement(_this.props.itemTemplate, suggestion) : _this.props.field ? ObjectUtils.resolveFieldData(suggestion, _this.props.field) : suggestion;\n          return /*#__PURE__*/React.createElement(\"li\", {\n            key: index + '_item',\n            role: \"option\",\n            \"aria-selected\": _this.props.ariaSelected === suggestion,\n            className: \"p-autocomplete-item\",\n            onClick: function onClick(e) {\n              return _this.props.onItemClick(e, suggestion);\n            },\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 51,\n              columnNumber: 21\n            }\n          }, itemContent, /*#__PURE__*/React.createElement(Ripple, {\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 53,\n              columnNumber: 25\n            }\n          }));\n        });\n      }\n\n      return /*#__PURE__*/React.createElement(CSSTransition, {\n        nodeRef: this.props.forwardRef,\n        classNames: \"p-connected-overlay\",\n        in: this.props.in,\n        timeout: {\n          enter: 120,\n          exit: 100\n        },\n        unmountOnExit: true,\n        onEnter: this.props.onEnter,\n        onEntering: this.props.onEntering,\n        onEntered: this.props.onEntered,\n        onExit: this.props.onExit,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        ref: this.props.forwardRef,\n        className: panelClassName,\n        style: panelStyle,\n        onClick: this.props.onClick,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"ul\", {\n        className: \"p-autocomplete-items\",\n        role: \"listbox\",\n        id: this.props.listId,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 21\n        }\n      }, items)));\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var element = this.renderElement();\n\n      if (this.props.appendTo) {\n        return ReactDOM.createPortal(element, this.props.appendTo);\n      } else {\n        return element;\n      }\n    }\n  }]);\n\n  return AutoCompletePanelComponent;\n}(Component);\n\nAutoCompletePanelComponent.defaultProps = {\n  suggestions: null,\n  field: null,\n  appendTo: null,\n  itemTemplate: null,\n  onItemClick: null,\n  scrollHeight: '200px',\n  listId: null,\n  ariaSelected: null,\n  panelClassName: null,\n  panelStyle: null,\n  forwardRef: null,\n  onClick: null\n};\nAutoCompletePanelComponent.propTypes = {\n  suggestions: PropTypes.array,\n  field: PropTypes.string,\n  appendTo: PropTypes.any,\n  itemTemplate: PropTypes.any,\n  onItemClick: PropTypes.func,\n  scrollHeight: PropTypes.string,\n  listId: PropTypes.any,\n  ariaSelected: PropTypes.any,\n  panelClassName: PropTypes.string,\n  panelStyle: PropTypes.object,\n  forwardRef: PropTypes.any,\n  onClick: PropTypes.func\n};\nexport var AutoCompletePanel = React.forwardRef(function (props, ref) {\n  return /*#__PURE__*/React.createElement(AutoCompletePanelComponent, Object.assign({\n    forwardRef: ref\n  }, props, {\n    __self: _this2,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 67\n    }\n  }));\n});","map":{"version":3,"sources":["C:/Users/zura.ph/WebstormProjects/zz-regul/src/components/autocomplete/AutoCompletePanel.js"],"names":["React","Component","PropTypes","ReactDOM","ObjectUtils","Ripple","classNames","CSSTransition","AutoCompletePanelComponent","panelClassName","props","panelStyle","maxHeight","scrollHeight","items","suggestions","map","suggestion","index","itemContent","itemTemplate","getJSXElement","field","resolveFieldData","ariaSelected","e","onItemClick","forwardRef","in","enter","exit","onEnter","onEntering","onEntered","onExit","onClick","listId","element","renderElement","appendTo","createPortal","defaultProps","propTypes","array","string","any","func","object","AutoCompletePanel","ref"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport ReactDOM from 'react-dom';\r\nimport ObjectUtils from '../utils/ObjectUtils';\r\nimport { Ripple } from '../ripple/Ripple';\r\nimport { classNames } from '../utils/ClassNames';\r\nimport { CSSTransition } from 'react-transition-group';\r\n\r\nclass AutoCompletePanelComponent extends Component {\r\n\r\n    static defaultProps = {\r\n        suggestions: null,\r\n        field: null,\r\n        appendTo: null,\r\n        itemTemplate: null,\r\n        onItemClick: null,\r\n        scrollHeight: '200px',\r\n        listId: null,\r\n        ariaSelected: null,\r\n        panelClassName: null,\r\n        panelStyle: null,\r\n        forwardRef: null,\r\n        onClick: null\r\n    }\r\n\r\n    static propTypes = {\r\n        suggestions: PropTypes.array,\r\n        field: PropTypes.string,\r\n        appendTo: PropTypes.any,\r\n        itemTemplate: PropTypes.any,\r\n        onItemClick: PropTypes.func,\r\n        scrollHeight: PropTypes.string,\r\n        listId: PropTypes.any,\r\n        ariaSelected: PropTypes.any,\r\n        panelClassName: PropTypes.string,\r\n        panelStyle: PropTypes.object,\r\n        forwardRef: PropTypes.any,\r\n        onClick: PropTypes.func\r\n    };\r\n\r\n    renderElement() {\r\n        const panelClassName = classNames('p-autocomplete-panel p-component', this.props.panelClassName);\r\n        const panelStyle = { maxHeight: this.props.scrollHeight, ...this.props.panelStyle };\r\n        let items;\r\n\r\n        if (this.props.suggestions) {\r\n            items = this.props.suggestions.map((suggestion, index) => {\r\n                let itemContent = this.props.itemTemplate ? ObjectUtils.getJSXElement(this.props.itemTemplate, suggestion) : this.props.field ? ObjectUtils.resolveFieldData(suggestion, this.props.field) : suggestion;\r\n\r\n                return (\r\n                    <li key={index + '_item'} role=\"option\" aria-selected={this.props.ariaSelected === suggestion} className=\"p-autocomplete-item\" onClick={(e) => this.props.onItemClick(e, suggestion)}>\r\n                        {itemContent}\r\n                        <Ripple />\r\n                    </li>\r\n                );\r\n            });\r\n        }\r\n\r\n        return (\r\n            <CSSTransition nodeRef={this.props.forwardRef} classNames=\"p-connected-overlay\" in={this.props.in} timeout={{ enter: 120, exit: 100 }}\r\n                unmountOnExit onEnter={this.props.onEnter} onEntering={this.props.onEntering} onEntered={this.props.onEntered} onExit={this.props.onExit}>\r\n                <div ref={this.props.forwardRef} className={panelClassName} style={panelStyle} onClick={this.props.onClick}>\r\n                    <ul className=\"p-autocomplete-items\" role=\"listbox\" id={this.props.listId}>\r\n                        {items}\r\n                    </ul>\r\n                </div>\r\n            </CSSTransition>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        let element = this.renderElement();\r\n\r\n        if (this.props.appendTo) {\r\n            return ReactDOM.createPortal(element, this.props.appendTo);\r\n        }\r\n        else {\r\n            return element;\r\n        }\r\n    }\r\n}\r\n\r\nexport const AutoCompletePanel = React.forwardRef((props, ref) => <AutoCompletePanelComponent forwardRef={ref} {...props} />);\r\n"]},"metadata":{},"sourceType":"module"}