{"ast":null,"code":"import _objectSpread from\"C:\\\\Users\\\\zura.ph\\\\WebstormProjects\\\\zz-regul\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";import _classCallCheck from\"C:\\\\Users\\\\zura.ph\\\\WebstormProjects\\\\zz-regul\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";import _createClass from\"C:\\\\Users\\\\zura.ph\\\\WebstormProjects\\\\zz-regul\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";import _inherits from\"C:\\\\Users\\\\zura.ph\\\\WebstormProjects\\\\zz-regul\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";import _createSuper from\"C:\\\\Users\\\\zura.ph\\\\WebstormProjects\\\\zz-regul\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createSuper\";import React,{Component}from'react';import{TreeTable}from'../../components/treetable/TreeTable';import{ContextMenu}from'../../components/contextmenu/ContextMenu';import{Toast}from'../../components/toast/Toast';import{Column}from'../../components/column/Column';import{NodeService}from'../service/NodeService';import{TabView}from'../../components/tabview/TabView';import{useLiveEditorTabs}from'../liveeditor/LiveEditor';import{AppInlineHeader}from'../../AppInlineHeader';export var TreeTableContextMenuDemo=/*#__PURE__*/function(_Component){_inherits(TreeTableContextMenuDemo,_Component);var _super=_createSuper(TreeTableContextMenuDemo);function TreeTableContextMenuDemo(props){var _this;_classCallCheck(this,TreeTableContextMenuDemo);_this=_super.call(this,props);_this.state={nodes:[],expandedKeys:{},selectedNodeKey:null};_this.menu=[{label:'View Key',icon:'pi pi-search',command:function command(){_this.toast.show({severity:'success',summary:'Node Key',detail:_this.state.selectedNodeKey});}},{label:'Toggle',icon:'pi pi-cog',command:function command(){var expandedKeys=_objectSpread({},_this.state.expandedKeys);if(expandedKeys[_this.state.selectedNodeKey])delete expandedKeys[_this.state.selectedNodeKey];else expandedKeys[_this.state.selectedNodeKey]=true;_this.setState({expandedKeys:expandedKeys});}}];_this.nodeservice=new NodeService();return _this;}_createClass(TreeTableContextMenuDemo,[{key:\"componentDidMount\",value:function componentDidMount(){var _this2=this;this.nodeservice.getTreeTableNodes().then(function(data){return _this2.setState({nodes:data});});}},{key:\"render\",value:function render(){var _this3=this;return/*#__PURE__*/React.createElement(\"div\",null,/*#__PURE__*/React.createElement(\"div\",{className:\"content-section introduction\"},/*#__PURE__*/React.createElement(AppInlineHeader,{changelogText:\"treeTable\"},/*#__PURE__*/React.createElement(\"h1\",null,\"TreeTable \",/*#__PURE__*/React.createElement(\"span\",null,\"ContextMenu\")),/*#__PURE__*/React.createElement(\"p\",null,\"TreeTable has exclusive integration with ContextMenu.\"))),/*#__PURE__*/React.createElement(\"div\",{className:\"content-section implementation\"},/*#__PURE__*/React.createElement(Toast,{ref:function ref(el){return _this3.toast=el;}}),/*#__PURE__*/React.createElement(ContextMenu,{model:this.menu,ref:function ref(el){return _this3.cm=el;},onHide:function onHide(){return _this3.setState({selectedNodeKey:null});}}),/*#__PURE__*/React.createElement(\"div\",{className:\"card\"},/*#__PURE__*/React.createElement(TreeTable,{value:this.state.nodes,expandedKeys:this.state.expandedKeys,onToggle:function onToggle(e){return _this3.setState({expandedKeys:e.value});},contextMenuSelectionKey:this.state.selectedNodeKey,onContextMenuSelectionChange:function onContextMenuSelectionChange(event){return _this3.setState({selectedNodeKey:event.value});},onContextMenu:function onContextMenu(event){return _this3.cm.show(event.originalEvent);}},/*#__PURE__*/React.createElement(Column,{field:\"name\",header:\"Name\",expander:true}),/*#__PURE__*/React.createElement(Column,{field:\"size\",header:\"Size\"}),/*#__PURE__*/React.createElement(Column,{field:\"type\",header:\"Type\"})))),/*#__PURE__*/React.createElement(TreeTableContextMenuDemoDoc,null));}}]);return TreeTableContextMenuDemo;}(Component);var TreeTableContextMenuDemoDoc=/*#__PURE__*/function(_Component2){_inherits(TreeTableContextMenuDemoDoc,_Component2);var _super2=_createSuper(TreeTableContextMenuDemoDoc);function TreeTableContextMenuDemoDoc(props){var _this4;_classCallCheck(this,TreeTableContextMenuDemoDoc);_this4=_super2.call(this,props);_this4.sources={'class':{tabName:'Class Source',content:\"\\nimport React, { Component } from 'react';\\nimport { TreeTable } from 'primereact/treetable';\\nimport { ContextMenu } from 'primereact/contextmenu';\\nimport { Toast } from 'primereact/toast';\\nimport { Column } from 'primereact/column';\\nimport { NodeService } from '../service/NodeService';\\n\\nexport class TreeTableContextMenuDemo extends Component {\\n\\n    constructor(props) {\\n        super(props);\\n        this.state = {\\n            nodes: [],\\n            expandedKeys: {},\\n            selectedNodeKey: null\\n        };\\n\\n        this.menu = [\\n            {\\n                label: 'View Key',\\n                icon: 'pi pi-search',\\n                command: () => {\\n                    this.toast.show({ severity: 'success', summary: 'Node Key', detail: this.state.selectedNodeKey });\\n                }\\n            },\\n            {\\n                label: 'Toggle',\\n                icon: 'pi pi-cog',\\n                command: () => {\\n                    let expandedKeys = { ...this.state.expandedKeys };\\n                    if (expandedKeys[this.state.selectedNodeKey])\\n                        delete expandedKeys[this.state.selectedNodeKey];\\n                    else\\n                        expandedKeys[this.state.selectedNodeKey] = true;\\n\\n                    this.setState({ expandedKeys: expandedKeys });\\n                }\\n            }\\n        ];\\n\\n        this.nodeservice = new NodeService();\\n    }\\n\\n    componentDidMount() {\\n        this.nodeservice.getTreeTableNodes().then(data => this.setState({ nodes: data }));\\n    }\\n\\n    render() {\\n        return (\\n            <div>\\n                <Toast ref={(el) => this.toast = el} />\\n\\n                <ContextMenu model={this.menu} ref={el => this.cm = el} onHide={() => this.setState({ selectedNodeKey: null })} />\\n\\n                <div className=\\\"card\\\">\\n                    <TreeTable value={this.state.nodes} expandedKeys={this.state.expandedKeys} onToggle={e => this.setState({ expandedKeys: e.value })}\\n                        contextMenuSelectionKey={this.state.selectedNodeKey} onContextMenuSelectionChange={event => this.setState({ selectedNodeKey: event.value })}\\n                        onContextMenu={event => this.cm.show(event.originalEvent)}>\\n                        <Column field=\\\"name\\\" header=\\\"Name\\\" expander></Column>\\n                        <Column field=\\\"size\\\" header=\\\"Size\\\"></Column>\\n                        <Column field=\\\"type\\\" header=\\\"Type\\\"></Column>\\n                    </TreeTable>\\n                </div>\\n            </div>\\n        )\\n    }\\n}\\n                \"},'hooks':{tabName:'Hooks Source',content:\"\\nimport React, { useState, useEffect, useRef } from 'react';\\nimport { TreeTable } from 'primereact/treetable';\\nimport { ContextMenu } from 'primereact/contextmenu';\\nimport { Toast } from 'primereact/toast';\\nimport { Column } from 'primereact/column';\\nimport { NodeService } from '../service/NodeService';\\n\\nconst TreeTableContextMenuDemo = () => {\\n    const [nodes, setNodes] = useState([]);\\n    const [expandedKeys, setExpandedKeys] = useState({});\\n    const [selectedNodeKey, setSelectedNodeKey] = useState(null);\\n    const toast = useRef(null);\\n    const cm = useRef(null);\\n    const menu = [\\n        {\\n            label: 'View Key',\\n            icon: 'pi pi-search',\\n            command: () => {\\n                toast.current.show({ severity: 'success', summary: 'Node Key', detail: this.state.selectedNodeKey });\\n            }\\n        },\\n        {\\n            label: 'Toggle',\\n            icon: 'pi pi-cog',\\n            command: () => {\\n                let _expandedKeys = { ...expandedKeys };\\n                if (_expandedKeys[selectedNodeKey])\\n                    delete _expandedKeys[selectedNodeKey];\\n                else\\n                    _expandedKeys[selectedNodeKey] = true;\\n\\n                setExpandedKeys(_expandedKeys);\\n            }\\n        }\\n    ];\\n\\n    const nodeservice = new NodeService();\\n\\n    useEffect(() => {\\n        nodeservice.getTreeTableNodes().then(data => setNodes(data));\\n    }, []); // eslint-disable-line react-hooks/exhaustive-deps\\n\\n    return (\\n        <div>\\n            <Toast ref={toast} />\\n\\n            <ContextMenu model={menu} ref={cm} onHide={() => setSelectedNodeKey(null)} />\\n\\n            <div className=\\\"card\\\">\\n                <TreeTable value={nodes} expandedKeys={expandedKeys} onToggle={e => setExpandedKeys(e.value)}\\n                    contextMenuSelectionKey={selectedNodeKey} onContextMenuSelectionChange={event => setSelectedNodeKey(event.value)}\\n                    onContextMenu={event => cm.current.show(event.originalEvent)}>\\n                    <Column field=\\\"name\\\" header=\\\"Name\\\" expander></Column>\\n                    <Column field=\\\"size\\\" header=\\\"Size\\\"></Column>\\n                    <Column field=\\\"type\\\" header=\\\"Type\\\"></Column>\\n                </TreeTable>\\n            </div>\\n        </div>\\n    )\\n}\\n                \"},'ts':{tabName:'TS Source',content:\"\\nimport React, { useState, useEffect, useRef } from 'react';\\nimport { TreeTable } from 'primereact/treetable';\\nimport { ContextMenu } from 'primereact/contextmenu';\\nimport { Toast } from 'primereact/toast';\\nimport { Column } from 'primereact/column';\\nimport { NodeService } from '../service/NodeService';\\n\\nconst TreeTableContextMenuDemo = () => {\\n    const [nodes, setNodes] = useState([]);\\n    const [expandedKeys, setExpandedKeys] = useState({});\\n    const [selectedNodeKey, setSelectedNodeKey] = useState(null);\\n    const toast = useRef(null);\\n    const cm = useRef(null);\\n    const menu = [\\n        {\\n            label: 'View Key',\\n            icon: 'pi pi-search',\\n            command: () => {\\n                toast.current.show({ severity: 'success', summary: 'Node Key', detail: this.state.selectedNodeKey });\\n            }\\n        },\\n        {\\n            label: 'Toggle',\\n            icon: 'pi pi-cog',\\n            command: () => {\\n                let _expandedKeys = { ...expandedKeys };\\n                if (_expandedKeys[selectedNodeKey])\\n                    delete _expandedKeys[selectedNodeKey];\\n                else\\n                    _expandedKeys[selectedNodeKey] = true;\\n\\n                setExpandedKeys(_expandedKeys);\\n            }\\n        }\\n    ];\\n\\n    const nodeservice = new NodeService();\\n\\n    useEffect(() => {\\n        nodeservice.getTreeTableNodes().then(data => setNodes(data));\\n    }, []); // eslint-disable-line react-hooks/exhaustive-deps\\n\\n    return (\\n        <div>\\n            <Toast ref={toast} />\\n\\n            <ContextMenu model={menu} ref={cm} onHide={() => setSelectedNodeKey(null)} />\\n\\n            <div className=\\\"card\\\">\\n                <TreeTable value={nodes} expandedKeys={expandedKeys} onToggle={e => setExpandedKeys(e.value)}\\n                    contextMenuSelectionKey={selectedNodeKey} onContextMenuSelectionChange={event => setSelectedNodeKey(event.value)}\\n                    onContextMenu={event => cm.current.show(event.originalEvent)}>\\n                    <Column field=\\\"name\\\" header=\\\"Name\\\" expander></Column>\\n                    <Column field=\\\"size\\\" header=\\\"Size\\\"></Column>\\n                    <Column field=\\\"type\\\" header=\\\"Type\\\"></Column>\\n                </TreeTable>\\n            </div>\\n        </div>\\n    )\\n}\\n                \"}};return _this4;}_createClass(TreeTableContextMenuDemoDoc,[{key:\"shouldComponentUpdate\",value:function shouldComponentUpdate(){return false;}},{key:\"render\",value:function render(){return/*#__PURE__*/React.createElement(\"div\",{className:\"content-section documentation\"},/*#__PURE__*/React.createElement(TabView,null,useLiveEditorTabs({name:'TreeTableContextMenuDemo',sources:this.sources,service:'NodeService',data:'treetablenodes'})));}}]);return TreeTableContextMenuDemoDoc;}(Component);","map":{"version":3,"sources":["C:/Users/zura.ph/WebstormProjects/zz-regul/src/showcase/treetable/TreeTableContextMenuDemo.js"],"names":["React","Component","TreeTable","ContextMenu","Toast","Column","NodeService","TabView","useLiveEditorTabs","AppInlineHeader","TreeTableContextMenuDemo","props","state","nodes","expandedKeys","selectedNodeKey","menu","label","icon","command","toast","show","severity","summary","detail","setState","nodeservice","getTreeTableNodes","then","data","el","cm","e","value","event","originalEvent","TreeTableContextMenuDemoDoc","sources","tabName","content","name","service"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { TreeTable } from '../../components/treetable/TreeTable';\r\nimport { ContextMenu } from '../../components/contextmenu/ContextMenu';\r\nimport { Toast } from '../../components/toast/Toast';\r\nimport { Column } from '../../components/column/Column';\r\nimport { NodeService } from '../service/NodeService';\r\nimport { TabView } from '../../components/tabview/TabView';\r\nimport { useLiveEditorTabs }from '../liveeditor/LiveEditor';\r\nimport { AppInlineHeader } from '../../AppInlineHeader';\r\n\r\nexport class TreeTableContextMenuDemo extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            nodes: [],\r\n            expandedKeys: {},\r\n            selectedNodeKey: null\r\n        };\r\n\r\n        this.menu = [\r\n            {\r\n                label: 'View Key',\r\n                icon: 'pi pi-search',\r\n                command: () => {\r\n                    this.toast.show({ severity: 'success', summary: 'Node Key', detail: this.state.selectedNodeKey });\r\n                }\r\n            },\r\n            {\r\n                label: 'Toggle',\r\n                icon: 'pi pi-cog',\r\n                command: () => {\r\n                    let expandedKeys = { ...this.state.expandedKeys };\r\n                    if (expandedKeys[this.state.selectedNodeKey])\r\n                        delete expandedKeys[this.state.selectedNodeKey];\r\n                    else\r\n                        expandedKeys[this.state.selectedNodeKey] = true;\r\n\r\n                    this.setState({ expandedKeys: expandedKeys });\r\n                }\r\n            }\r\n        ];\r\n\r\n        this.nodeservice = new NodeService();\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.nodeservice.getTreeTableNodes().then(data => this.setState({ nodes: data }));\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div className=\"content-section introduction\">\r\n                    <AppInlineHeader changelogText=\"treeTable\">\r\n                        <h1>TreeTable <span>ContextMenu</span></h1>\r\n                        <p>TreeTable has exclusive integration with ContextMenu.</p>\r\n                    </AppInlineHeader>\r\n                </div>\r\n\r\n                <div className=\"content-section implementation\">\r\n                    <Toast ref={(el) => this.toast = el} />\r\n\r\n                    <ContextMenu model={this.menu} ref={el => this.cm = el} onHide={() => this.setState({ selectedNodeKey: null })} />\r\n\r\n                    <div className=\"card\">\r\n                        <TreeTable value={this.state.nodes} expandedKeys={this.state.expandedKeys} onToggle={e => this.setState({ expandedKeys: e.value })}\r\n                            contextMenuSelectionKey={this.state.selectedNodeKey} onContextMenuSelectionChange={event => this.setState({ selectedNodeKey: event.value })}\r\n                            onContextMenu={event => this.cm.show(event.originalEvent)}>\r\n                            <Column field=\"name\" header=\"Name\" expander></Column>\r\n                            <Column field=\"size\" header=\"Size\"></Column>\r\n                            <Column field=\"type\" header=\"Type\"></Column>\r\n                        </TreeTable>\r\n                    </div>\r\n                </div>\r\n\r\n                <TreeTableContextMenuDemoDoc />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nclass TreeTableContextMenuDemoDoc extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.sources = {\r\n            'class': {\r\n                tabName: 'Class Source',\r\n                content: `\r\nimport React, { Component } from 'react';\r\nimport { TreeTable } from 'primereact/treetable';\r\nimport { ContextMenu } from 'primereact/contextmenu';\r\nimport { Toast } from 'primereact/toast';\r\nimport { Column } from 'primereact/column';\r\nimport { NodeService } from '../service/NodeService';\r\n\r\nexport class TreeTableContextMenuDemo extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            nodes: [],\r\n            expandedKeys: {},\r\n            selectedNodeKey: null\r\n        };\r\n\r\n        this.menu = [\r\n            {\r\n                label: 'View Key',\r\n                icon: 'pi pi-search',\r\n                command: () => {\r\n                    this.toast.show({ severity: 'success', summary: 'Node Key', detail: this.state.selectedNodeKey });\r\n                }\r\n            },\r\n            {\r\n                label: 'Toggle',\r\n                icon: 'pi pi-cog',\r\n                command: () => {\r\n                    let expandedKeys = { ...this.state.expandedKeys };\r\n                    if (expandedKeys[this.state.selectedNodeKey])\r\n                        delete expandedKeys[this.state.selectedNodeKey];\r\n                    else\r\n                        expandedKeys[this.state.selectedNodeKey] = true;\r\n\r\n                    this.setState({ expandedKeys: expandedKeys });\r\n                }\r\n            }\r\n        ];\r\n\r\n        this.nodeservice = new NodeService();\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.nodeservice.getTreeTableNodes().then(data => this.setState({ nodes: data }));\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Toast ref={(el) => this.toast = el} />\r\n\r\n                <ContextMenu model={this.menu} ref={el => this.cm = el} onHide={() => this.setState({ selectedNodeKey: null })} />\r\n\r\n                <div className=\"card\">\r\n                    <TreeTable value={this.state.nodes} expandedKeys={this.state.expandedKeys} onToggle={e => this.setState({ expandedKeys: e.value })}\r\n                        contextMenuSelectionKey={this.state.selectedNodeKey} onContextMenuSelectionChange={event => this.setState({ selectedNodeKey: event.value })}\r\n                        onContextMenu={event => this.cm.show(event.originalEvent)}>\r\n                        <Column field=\"name\" header=\"Name\" expander></Column>\r\n                        <Column field=\"size\" header=\"Size\"></Column>\r\n                        <Column field=\"type\" header=\"Type\"></Column>\r\n                    </TreeTable>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n                `\r\n            },\r\n            'hooks': {\r\n                tabName: 'Hooks Source',\r\n                content: `\r\nimport React, { useState, useEffect, useRef } from 'react';\r\nimport { TreeTable } from 'primereact/treetable';\r\nimport { ContextMenu } from 'primereact/contextmenu';\r\nimport { Toast } from 'primereact/toast';\r\nimport { Column } from 'primereact/column';\r\nimport { NodeService } from '../service/NodeService';\r\n\r\nconst TreeTableContextMenuDemo = () => {\r\n    const [nodes, setNodes] = useState([]);\r\n    const [expandedKeys, setExpandedKeys] = useState({});\r\n    const [selectedNodeKey, setSelectedNodeKey] = useState(null);\r\n    const toast = useRef(null);\r\n    const cm = useRef(null);\r\n    const menu = [\r\n        {\r\n            label: 'View Key',\r\n            icon: 'pi pi-search',\r\n            command: () => {\r\n                toast.current.show({ severity: 'success', summary: 'Node Key', detail: this.state.selectedNodeKey });\r\n            }\r\n        },\r\n        {\r\n            label: 'Toggle',\r\n            icon: 'pi pi-cog',\r\n            command: () => {\r\n                let _expandedKeys = { ...expandedKeys };\r\n                if (_expandedKeys[selectedNodeKey])\r\n                    delete _expandedKeys[selectedNodeKey];\r\n                else\r\n                    _expandedKeys[selectedNodeKey] = true;\r\n\r\n                setExpandedKeys(_expandedKeys);\r\n            }\r\n        }\r\n    ];\r\n\r\n    const nodeservice = new NodeService();\r\n\r\n    useEffect(() => {\r\n        nodeservice.getTreeTableNodes().then(data => setNodes(data));\r\n    }, []); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n    return (\r\n        <div>\r\n            <Toast ref={toast} />\r\n\r\n            <ContextMenu model={menu} ref={cm} onHide={() => setSelectedNodeKey(null)} />\r\n\r\n            <div className=\"card\">\r\n                <TreeTable value={nodes} expandedKeys={expandedKeys} onToggle={e => setExpandedKeys(e.value)}\r\n                    contextMenuSelectionKey={selectedNodeKey} onContextMenuSelectionChange={event => setSelectedNodeKey(event.value)}\r\n                    onContextMenu={event => cm.current.show(event.originalEvent)}>\r\n                    <Column field=\"name\" header=\"Name\" expander></Column>\r\n                    <Column field=\"size\" header=\"Size\"></Column>\r\n                    <Column field=\"type\" header=\"Type\"></Column>\r\n                </TreeTable>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n                `\r\n            },\r\n            'ts': {\r\n                tabName: 'TS Source',\r\n                content: `\r\nimport React, { useState, useEffect, useRef } from 'react';\r\nimport { TreeTable } from 'primereact/treetable';\r\nimport { ContextMenu } from 'primereact/contextmenu';\r\nimport { Toast } from 'primereact/toast';\r\nimport { Column } from 'primereact/column';\r\nimport { NodeService } from '../service/NodeService';\r\n\r\nconst TreeTableContextMenuDemo = () => {\r\n    const [nodes, setNodes] = useState([]);\r\n    const [expandedKeys, setExpandedKeys] = useState({});\r\n    const [selectedNodeKey, setSelectedNodeKey] = useState(null);\r\n    const toast = useRef(null);\r\n    const cm = useRef(null);\r\n    const menu = [\r\n        {\r\n            label: 'View Key',\r\n            icon: 'pi pi-search',\r\n            command: () => {\r\n                toast.current.show({ severity: 'success', summary: 'Node Key', detail: this.state.selectedNodeKey });\r\n            }\r\n        },\r\n        {\r\n            label: 'Toggle',\r\n            icon: 'pi pi-cog',\r\n            command: () => {\r\n                let _expandedKeys = { ...expandedKeys };\r\n                if (_expandedKeys[selectedNodeKey])\r\n                    delete _expandedKeys[selectedNodeKey];\r\n                else\r\n                    _expandedKeys[selectedNodeKey] = true;\r\n\r\n                setExpandedKeys(_expandedKeys);\r\n            }\r\n        }\r\n    ];\r\n\r\n    const nodeservice = new NodeService();\r\n\r\n    useEffect(() => {\r\n        nodeservice.getTreeTableNodes().then(data => setNodes(data));\r\n    }, []); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n    return (\r\n        <div>\r\n            <Toast ref={toast} />\r\n\r\n            <ContextMenu model={menu} ref={cm} onHide={() => setSelectedNodeKey(null)} />\r\n\r\n            <div className=\"card\">\r\n                <TreeTable value={nodes} expandedKeys={expandedKeys} onToggle={e => setExpandedKeys(e.value)}\r\n                    contextMenuSelectionKey={selectedNodeKey} onContextMenuSelectionChange={event => setSelectedNodeKey(event.value)}\r\n                    onContextMenu={event => cm.current.show(event.originalEvent)}>\r\n                    <Column field=\"name\" header=\"Name\" expander></Column>\r\n                    <Column field=\"size\" header=\"Size\"></Column>\r\n                    <Column field=\"type\" header=\"Type\"></Column>\r\n                </TreeTable>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n                `\r\n            }\r\n        }\r\n    }\r\n\r\n    shouldComponentUpdate() {\r\n        return false;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"content-section documentation\">\r\n                <TabView>\r\n                    {\r\n                        useLiveEditorTabs({ name: 'TreeTableContextMenuDemo', sources: this.sources, service: 'NodeService', data: 'treetablenodes' })\r\n                    }\r\n                </TabView>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}