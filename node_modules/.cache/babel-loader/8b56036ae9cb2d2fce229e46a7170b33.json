{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\zura.ph\\\\WebstormProjects\\\\zloto\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\zura.ph\\\\WebstormProjects\\\\zloto\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _inherits from \"C:\\\\Users\\\\zura.ph\\\\WebstormProjects\\\\zloto\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _createSuper from \"C:\\\\Users\\\\zura.ph\\\\WebstormProjects\\\\zloto\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"C:\\\\Users\\\\zura.ph\\\\WebstormProjects\\\\zloto\\\\src\\\\showcase\\\\tree\\\\TreeFilterDemo.js\";\nimport React, { Component } from 'react';\nimport { Tree } from '../../components/tree/Tree';\nimport { NodeService } from '../service/NodeService';\nimport { TabView } from '../../components/tabview/TabView';\nimport { useLiveEditorTabs } from '../liveeditor/LiveEditor';\nimport { AppInlineHeader } from '../../AppInlineHeader';\nexport var TreeFilterDemo = /*#__PURE__*/function (_Component) {\n  _inherits(TreeFilterDemo, _Component);\n\n  var _super = _createSuper(TreeFilterDemo);\n\n  function TreeFilterDemo(props) {\n    var _this;\n\n    _classCallCheck(this, TreeFilterDemo);\n\n    _this = _super.call(this, props);\n    _this.state = {\n      nodes: null\n    };\n    _this.nodeService = new NodeService();\n    return _this;\n  }\n\n  _createClass(TreeFilterDemo, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      this.nodeService.getTreeNodes().then(function (data) {\n        return _this2.setState({\n          nodes: data\n        });\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 25,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"content-section introduction\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 26,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(AppInlineHeader, {\n        changelogText: \"tree\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 27,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(\"h1\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 28,\n          columnNumber: 25\n        }\n      }, \"Tree \", /*#__PURE__*/React.createElement(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 28,\n          columnNumber: 34\n        }\n      }, \"Filter\")), /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 29,\n          columnNumber: 25\n        }\n      }, \"Filtering updates the node based on the constraints.\"))), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"content-section implementation\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"card\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(\"h5\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 25\n        }\n      }, \"Lenient Filter\"), /*#__PURE__*/React.createElement(Tree, {\n        value: this.state.nodes,\n        filter: true,\n        filterMode: \"lenient\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 25\n        }\n      }), /*#__PURE__*/React.createElement(\"h5\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 25\n        }\n      }, \"Strict Filter\"), /*#__PURE__*/React.createElement(Tree, {\n        value: this.state.nodes,\n        filter: true,\n        filterMode: \"strict\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 25\n        }\n      }))), /*#__PURE__*/React.createElement(TreeFilterDemoDoc, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 17\n        }\n      }));\n    }\n  }]);\n\n  return TreeFilterDemo;\n}(Component);\nexport var TreeFilterDemoDoc = /*#__PURE__*/function (_Component2) {\n  _inherits(TreeFilterDemoDoc, _Component2);\n\n  var _super2 = _createSuper(TreeFilterDemoDoc);\n\n  function TreeFilterDemoDoc(props) {\n    var _this3;\n\n    _classCallCheck(this, TreeFilterDemoDoc);\n\n    _this3 = _super2.call(this, props);\n    _this3.sources = {\n      'class': {\n        tabName: 'Class Source',\n        content: \"\\nimport React, { Component } from 'react';\\nimport { Tree } from 'primereact/tree';\\nimport { NodeService } from '../service/NodeService';\\n\\nexport class TreeFilterDemo extends Component {\\n\\n    constructor(props) {\\n        super(props);\\n        this.state = {\\n            nodes: null\\n        };\\n\\n        this.nodeService = new NodeService();\\n    }\\n\\n    componentDidMount() {\\n        this.nodeService.getTreeNodes().then(data => this.setState({ nodes: data }));\\n    }\\n\\n    render() {\\n        return (\\n            <div>\\n                <div className=\\\"card\\\">\\n                    <h5>Lenient Filter</h5>\\n                    <Tree value={this.state.nodes} filter filterMode=\\\"lenient\\\"></Tree>\\n\\n                    <h5>Strict Filter</h5>\\n                    <Tree value={this.state.nodes} filter filterMode=\\\"strict\\\"></Tree>\\n                </div>\\n            </div>\\n        )\\n    }\\n}\\n                \"\n      },\n      'hooks': {\n        tabName: 'Hooks Source',\n        content: \"\\nimport React, { useState, useEffect } from 'react';\\nimport { Tree } from 'primereact/tree';\\nimport { NodeService } from '../service/NodeService';\\n\\nconst TreeFilterDemo = () => {\\n    const [nodes, setNodes] = useState(null);\\n    const nodeService = new NodeService();\\n\\n    useEffect(() => {\\n        nodeService.getTreeNodes().then(data => setNodes(data));\\n    }, []); // eslint-disable-line react-hooks/exhaustive-deps\\n\\n    return (\\n        <div>\\n            <div className=\\\"card\\\">\\n                <h5>Lenient Filter</h5>\\n                <Tree value={nodes} filter filterMode=\\\"lenient\\\"></Tree>\\n\\n                <h5>Strict Filter</h5>\\n                <Tree value={nodes} filter filterMode=\\\"strict\\\"></Tree>\\n            </div>\\n        </div>\\n    )\\n}\\n                \"\n      },\n      'ts': {\n        tabName: 'TS Source',\n        content: \"\\nimport React, { useState, useEffect } from 'react';\\nimport {Tree} from 'primereact/tree';\\nimport {NodeService} from '../service/NodeService';\\n\\nconst TreeFilterDemo = () => {\\n    const [nodes1, setNodes1] = useState([]);\\n    const [nodes2, setNodes2] = useState([]);\\n    const nodeService = new NodeService();\\n\\n    useEffect(() => {\\n        nodeService.getTreeNodes().then(data => {\\n            setNodes1(data);\\n            setNodes2(data);\\n        });\\n    }, []); // eslint-disable-line react-hooks/exhaustive-deps\\n\\n    return (\\n        <div>\\n            <h3 className=\\\"first\\\">Lenient Filter Mode</h3>\\n            <Tree value={nodes1} filter />\\n\\n            <h3>Strict Filter Mode</h3>\\n            <Tree value={nodes2} filter filterMode=\\\"strict\\\" />\\n        </div>\\n    )\\n}\\n                \"\n      }\n    };\n    return _this3;\n  }\n\n  _createClass(TreeFilterDemoDoc, [{\n    key: \"shouldComponentUpdate\",\n    value: function shouldComponentUpdate() {\n      return false;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"content-section documentation\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 162,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(TabView, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 163,\n          columnNumber: 17\n        }\n      }, useLiveEditorTabs({\n        name: 'TreeFilterDemo',\n        sources: this.sources,\n        service: 'NodeService',\n        data: 'treenodes'\n      })));\n    }\n  }]);\n\n  return TreeFilterDemoDoc;\n}(Component);","map":{"version":3,"sources":["C:/Users/zura.ph/WebstormProjects/zloto/src/showcase/tree/TreeFilterDemo.js"],"names":["React","Component","Tree","NodeService","TabView","useLiveEditorTabs","AppInlineHeader","TreeFilterDemo","props","state","nodes","nodeService","getTreeNodes","then","data","setState","TreeFilterDemoDoc","sources","tabName","content","name","service"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { Tree } from '../../components/tree/Tree';\r\nimport { NodeService } from '../service/NodeService';\r\nimport { TabView } from '../../components/tabview/TabView';\r\nimport { useLiveEditorTabs }from '../liveeditor/LiveEditor';\r\nimport { AppInlineHeader } from '../../AppInlineHeader';\r\n\r\nexport class TreeFilterDemo extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            nodes: null\r\n        };\r\n\r\n        this.nodeService = new NodeService();\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.nodeService.getTreeNodes().then(data => this.setState({ nodes: data }));\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div className=\"content-section introduction\">\r\n                    <AppInlineHeader changelogText=\"tree\">\r\n                        <h1>Tree <span>Filter</span></h1>\r\n                        <p>Filtering updates the node based on the constraints.</p>\r\n                    </AppInlineHeader>\r\n                </div>\r\n\r\n                <div className=\"content-section implementation\">\r\n                    <div className=\"card\">\r\n                        <h5>Lenient Filter</h5>\r\n                        <Tree value={this.state.nodes} filter filterMode=\"lenient\"></Tree>\r\n\r\n                        <h5>Strict Filter</h5>\r\n                        <Tree value={this.state.nodes} filter filterMode=\"strict\"></Tree>\r\n                    </div>\r\n                </div>\r\n\r\n                <TreeFilterDemoDoc />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport class TreeFilterDemoDoc extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.sources = {\r\n            'class': {\r\n                tabName: 'Class Source',\r\n                content: `\r\nimport React, { Component } from 'react';\r\nimport { Tree } from 'primereact/tree';\r\nimport { NodeService } from '../service/NodeService';\r\n\r\nexport class TreeFilterDemo extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            nodes: null\r\n        };\r\n\r\n        this.nodeService = new NodeService();\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.nodeService.getTreeNodes().then(data => this.setState({ nodes: data }));\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div className=\"card\">\r\n                    <h5>Lenient Filter</h5>\r\n                    <Tree value={this.state.nodes} filter filterMode=\"lenient\"></Tree>\r\n\r\n                    <h5>Strict Filter</h5>\r\n                    <Tree value={this.state.nodes} filter filterMode=\"strict\"></Tree>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n                `\r\n            },\r\n            'hooks': {\r\n                tabName: 'Hooks Source',\r\n                content: `\r\nimport React, { useState, useEffect } from 'react';\r\nimport { Tree } from 'primereact/tree';\r\nimport { NodeService } from '../service/NodeService';\r\n\r\nconst TreeFilterDemo = () => {\r\n    const [nodes, setNodes] = useState(null);\r\n    const nodeService = new NodeService();\r\n\r\n    useEffect(() => {\r\n        nodeService.getTreeNodes().then(data => setNodes(data));\r\n    }, []); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"card\">\r\n                <h5>Lenient Filter</h5>\r\n                <Tree value={nodes} filter filterMode=\"lenient\"></Tree>\r\n\r\n                <h5>Strict Filter</h5>\r\n                <Tree value={nodes} filter filterMode=\"strict\"></Tree>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n                `\r\n            },\r\n            'ts': {\r\n                tabName: 'TS Source',\r\n                content: `\r\nimport React, { useState, useEffect } from 'react';\r\nimport {Tree} from 'primereact/tree';\r\nimport {NodeService} from '../service/NodeService';\r\n\r\nconst TreeFilterDemo = () => {\r\n    const [nodes1, setNodes1] = useState([]);\r\n    const [nodes2, setNodes2] = useState([]);\r\n    const nodeService = new NodeService();\r\n\r\n    useEffect(() => {\r\n        nodeService.getTreeNodes().then(data => {\r\n            setNodes1(data);\r\n            setNodes2(data);\r\n        });\r\n    }, []); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n    return (\r\n        <div>\r\n            <h3 className=\"first\">Lenient Filter Mode</h3>\r\n            <Tree value={nodes1} filter />\r\n\r\n            <h3>Strict Filter Mode</h3>\r\n            <Tree value={nodes2} filter filterMode=\"strict\" />\r\n        </div>\r\n    )\r\n}\r\n                `\r\n            }\r\n        }\r\n    }\r\n\r\n    shouldComponentUpdate() {\r\n        return false;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"content-section documentation\">\r\n                <TabView>\r\n                    {\r\n                        useLiveEditorTabs({ name: 'TreeFilterDemo', sources: this.sources, service: 'NodeService', data: 'treenodes' })\r\n                    }\r\n                </TabView>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}