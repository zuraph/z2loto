{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\zura.ph\\\\WebstormProjects\\\\zloto\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\zura.ph\\\\WebstormProjects\\\\zloto\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"C:\\\\Users\\\\zura.ph\\\\WebstormProjects\\\\zloto\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"C:\\\\Users\\\\zura.ph\\\\WebstormProjects\\\\zloto\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _createSuper from \"C:\\\\Users\\\\zura.ph\\\\WebstormProjects\\\\zloto\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"C:\\\\Users\\\\zura.ph\\\\WebstormProjects\\\\zloto\\\\src\\\\components\\\\multiselect\\\\MultiSelectHeader.js\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { InputText } from '../inputtext/InputText';\nimport { Checkbox } from '../checkbox/Checkbox';\nimport { Ripple } from '../ripple/Ripple';\nimport ObjectUtils from '../utils/ObjectUtils';\nexport var MultiSelectHeader = /*#__PURE__*/function (_Component) {\n  _inherits(MultiSelectHeader, _Component);\n\n  var _super = _createSuper(MultiSelectHeader);\n\n  function MultiSelectHeader(props) {\n    var _this;\n\n    _classCallCheck(this, MultiSelectHeader);\n\n    _this = _super.call(this, props);\n    _this.onFilter = _this.onFilter.bind(_assertThisInitialized(_this));\n    _this.onToggleAll = _this.onToggleAll.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(MultiSelectHeader, [{\n    key: \"onFilter\",\n    value: function onFilter(event) {\n      if (this.props.onFilter) {\n        this.props.onFilter({\n          originalEvent: event,\n          query: event.target.value\n        });\n      }\n    }\n  }, {\n    key: \"onToggleAll\",\n    value: function onToggleAll(event) {\n      if (this.props.onToggleAll) {\n        this.props.onToggleAll({\n          originalEvent: event,\n          checked: this.props.allChecked\n        });\n      }\n    }\n  }, {\n    key: \"renderFilterElement\",\n    value: function renderFilterElement() {\n      if (this.props.filter) {\n        return /*#__PURE__*/React.createElement(\"div\", {\n          className: \"p-multiselect-filter-container\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 60,\n            columnNumber: 17\n          }\n        }, /*#__PURE__*/React.createElement(InputText, {\n          type: \"text\",\n          role: \"textbox\",\n          value: this.props.filterValue,\n          onChange: this.onFilter,\n          className: \"p-multiselect-filter\",\n          placeholder: this.props.filterPlaceholder,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 61,\n            columnNumber: 21\n          }\n        }), /*#__PURE__*/React.createElement(\"span\", {\n          className: \"p-multiselect-filter-icon pi pi-search\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 63,\n            columnNumber: 21\n          }\n        }));\n      }\n\n      return null;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var filterElement = this.renderFilterElement();\n      var checkboxElement = /*#__PURE__*/React.createElement(Checkbox, {\n        checked: this.props.allChecked,\n        onChange: this.onToggleAll,\n        role: \"checkbox\",\n        \"aria-checked\": this.props.allChecked,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 33\n        }\n      });\n      var closeElement = /*#__PURE__*/React.createElement(\"button\", {\n        type: \"button\",\n        className: \"p-multiselect-close p-link\",\n        onClick: this.props.onClose,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        className: \"p-multiselect-close-icon pi pi-times\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 17\n        }\n      }), /*#__PURE__*/React.createElement(Ripple, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 17\n        }\n      }));\n      var element = /*#__PURE__*/React.createElement(\"div\", {\n        className: \"p-multiselect-header\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 13\n        }\n      }, checkboxElement, filterElement, closeElement);\n\n      if (this.props.template) {\n        var defaultOptions = {\n          className: 'p-multiselect-header',\n          checkboxElement: checkboxElement,\n          checked: this.props.allChecked,\n          onChange: this.onToggleAll,\n          filterElement: filterElement,\n          closeElement: closeElement,\n          closeElementClassName: 'p-multiselect-close p-link',\n          closeIconClassName: 'p-multiselect-close-icon pi pi-times',\n          onCloseClick: this.props.onClose,\n          element: element,\n          props: this.props\n        };\n        return ObjectUtils.getJSXElement(this.props.template, defaultOptions);\n      }\n\n      return element;\n    }\n  }]);\n\n  return MultiSelectHeader;\n}(Component);\nMultiSelectHeader.defaultProps = {\n  filter: false,\n  filterValue: null,\n  filterPlaceholder: null,\n  onFilter: null,\n  onClose: null,\n  onToggleAll: null,\n  allChecked: false,\n  template: null\n};\nMultiSelectHeader.propTypes = {\n  filter: PropTypes.bool,\n  filterValue: PropTypes.string,\n  filterPlaceholder: PropTypes.string,\n  allChecked: PropTypes.bool,\n  onFilter: PropTypes.func,\n  onClose: PropTypes.func,\n  onToggleAll: PropTypes.func,\n  template: PropTypes.any\n};","map":{"version":3,"sources":["C:/Users/zura.ph/WebstormProjects/zloto/src/components/multiselect/MultiSelectHeader.js"],"names":["React","Component","PropTypes","InputText","Checkbox","Ripple","ObjectUtils","MultiSelectHeader","props","onFilter","bind","onToggleAll","event","originalEvent","query","target","value","checked","allChecked","filter","filterValue","filterPlaceholder","filterElement","renderFilterElement","checkboxElement","closeElement","onClose","element","template","defaultOptions","className","onChange","closeElementClassName","closeIconClassName","onCloseClick","getJSXElement","defaultProps","propTypes","bool","string","func","any"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { InputText } from '../inputtext/InputText';\r\nimport { Checkbox } from '../checkbox/Checkbox';\r\nimport { Ripple } from '../ripple/Ripple';\r\nimport ObjectUtils from '../utils/ObjectUtils';\r\n\r\nexport class MultiSelectHeader extends Component {\r\n\r\n    static defaultProps = {\r\n        filter: false,\r\n        filterValue: null,\r\n        filterPlaceholder: null,\r\n        onFilter: null,\r\n        onClose: null,\r\n        onToggleAll: null,\r\n        allChecked: false,\r\n        template: null\r\n    }\r\n\r\n    static propTypes = {\r\n        filter: PropTypes.bool,\r\n        filterValue: PropTypes.string,\r\n        filterPlaceholder: PropTypes.string,\r\n        allChecked: PropTypes.bool,\r\n        onFilter: PropTypes.func,\r\n        onClose: PropTypes.func,\r\n        onToggleAll: PropTypes.func,\r\n        template: PropTypes.any\r\n    }\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.onFilter = this.onFilter.bind(this);\r\n        this.onToggleAll = this.onToggleAll.bind(this);\r\n    }\r\n\r\n    onFilter(event) {\r\n        if (this.props.onFilter) {\r\n            this.props.onFilter({\r\n                originalEvent: event,\r\n                query: event.target.value\r\n            });\r\n        }\r\n    }\r\n\r\n    onToggleAll(event) {\r\n        if (this.props.onToggleAll) {\r\n            this.props.onToggleAll({\r\n                originalEvent: event,\r\n                checked: this.props.allChecked\r\n            });\r\n        }\r\n    }\r\n\r\n    renderFilterElement() {\r\n        if (this.props.filter) {\r\n            return (\r\n                <div className=\"p-multiselect-filter-container\">\r\n                    <InputText type=\"text\" role=\"textbox\" value={this.props.filterValue} onChange={this.onFilter}\r\n                        className=\"p-multiselect-filter\" placeholder={this.props.filterPlaceholder} />\r\n                    <span className=\"p-multiselect-filter-icon pi pi-search\"></span>\r\n                </div>\r\n            );\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    render() {\r\n        const filterElement = this.renderFilterElement();\r\n        const checkboxElement = <Checkbox checked={this.props.allChecked} onChange={this.onToggleAll} role=\"checkbox\" aria-checked={this.props.allChecked} />;\r\n        const closeElement = (\r\n            <button type=\"button\" className=\"p-multiselect-close p-link\" onClick={this.props.onClose}>\r\n                <span className=\"p-multiselect-close-icon pi pi-times\"></span>\r\n                <Ripple />\r\n            </button>\r\n        );\r\n        const element = (\r\n            <div className=\"p-multiselect-header\">\r\n                {checkboxElement}\r\n                {filterElement}\r\n                {closeElement}\r\n            </div>\r\n        );\r\n\r\n        if (this.props.template) {\r\n            const defaultOptions = {\r\n                className: 'p-multiselect-header',\r\n                checkboxElement,\r\n                checked: this.props.allChecked,\r\n                onChange: this.onToggleAll,\r\n                filterElement,\r\n                closeElement,\r\n                closeElementClassName: 'p-multiselect-close p-link',\r\n                closeIconClassName: 'p-multiselect-close-icon pi pi-times',\r\n                onCloseClick: this.props.onClose,\r\n                element,\r\n                props: this.props\r\n            }\r\n\r\n            return ObjectUtils.getJSXElement(this.props.template, defaultOptions);\r\n        }\r\n\r\n        return element;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}