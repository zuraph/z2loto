{"ast":null,"code":"import _classCallCheck from\"C:\\\\Users\\\\zura.ph\\\\WebstormProjects\\\\zz-regul\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";import _createClass from\"C:\\\\Users\\\\zura.ph\\\\WebstormProjects\\\\zz-regul\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";import _assertThisInitialized from\"C:\\\\Users\\\\zura.ph\\\\WebstormProjects\\\\zz-regul\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/assertThisInitialized\";import _inherits from\"C:\\\\Users\\\\zura.ph\\\\WebstormProjects\\\\zz-regul\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";import _createSuper from\"C:\\\\Users\\\\zura.ph\\\\WebstormProjects\\\\zz-regul\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createSuper\";import React,{Component}from'react';import{Tree}from'../../components/tree/Tree';import{Toast}from'../../components/toast/Toast';import{NodeService}from'../service/NodeService';import{TabView}from'../../components/tabview/TabView';import{useLiveEditorTabs}from'../liveeditor/LiveEditor';import{AppInlineHeader}from'../../AppInlineHeader';export var TreeEventsDemo=/*#__PURE__*/function(_Component){_inherits(TreeEventsDemo,_Component);var _super=_createSuper(TreeEventsDemo);function TreeEventsDemo(props){var _this;_classCallCheck(this,TreeEventsDemo);_this=_super.call(this,props);_this.state={nodes:[],selectedNodeKey:null};_this.nodeService=new NodeService();_this.onExpand=_this.onExpand.bind(_assertThisInitialized(_this));_this.onCollapse=_this.onCollapse.bind(_assertThisInitialized(_this));_this.onSelect=_this.onSelect.bind(_assertThisInitialized(_this));_this.onUnselect=_this.onUnselect.bind(_assertThisInitialized(_this));return _this;}_createClass(TreeEventsDemo,[{key:\"componentDidMount\",value:function componentDidMount(){var _this2=this;this.nodeService.getTreeNodes().then(function(data){return _this2.setState({nodes:data});});}},{key:\"onExpand\",value:function onExpand(event){this.toast.show({severity:'success',summary:'Node Expanded',detail:event.node.label});}},{key:\"onCollapse\",value:function onCollapse(event){this.toast.show({severity:'success',summary:'Node Collapsed',detail:event.node.label});}},{key:\"onSelect\",value:function onSelect(event){this.toast.show({severity:'info',summary:'Node Selected',detail:event.node.label});}},{key:\"onUnselect\",value:function onUnselect(event){this.toast.show({severity:'info',summary:'Node Unselected',detail:event.node.label});}},{key:\"render\",value:function render(){var _this3=this;return/*#__PURE__*/React.createElement(\"div\",null,/*#__PURE__*/React.createElement(\"div\",{className:\"content-section introduction\"},/*#__PURE__*/React.createElement(AppInlineHeader,{changelogText:\"tree\"},/*#__PURE__*/React.createElement(\"h1\",null,\"Tree \",/*#__PURE__*/React.createElement(\"span\",null,\"Events\")),/*#__PURE__*/React.createElement(\"p\",null,\"An event is provided each type of user interaction such as expand, collapse and selection.\"))),/*#__PURE__*/React.createElement(\"div\",{className:\"content-section implementation\"},/*#__PURE__*/React.createElement(Toast,{ref:function ref(el){return _this3.toast=el;}}),/*#__PURE__*/React.createElement(\"div\",{className:\"card\"},/*#__PURE__*/React.createElement(Tree,{value:this.state.nodes,selectionMode:\"single\",selectionKeys:this.state.selectedNodeKey,onSelectionChange:function onSelectionChange(e){return _this3.setState({selectedNodeKey:e.value});},onExpand:this.onExpand,onCollapse:this.onCollapse,onSelect:this.onSelect,onUnselect:this.onUnselect}))),/*#__PURE__*/React.createElement(TreeEventsDemoDoc,null));}}]);return TreeEventsDemo;}(Component);export var TreeEventsDemoDoc=/*#__PURE__*/function(_Component2){_inherits(TreeEventsDemoDoc,_Component2);var _super2=_createSuper(TreeEventsDemoDoc);function TreeEventsDemoDoc(props){var _this4;_classCallCheck(this,TreeEventsDemoDoc);_this4=_super2.call(this,props);_this4.sources={'class':{tabName:'Class Source',content:\"\\nimport React, { Component } from 'react';\\nimport { Tree } from 'primereact/tree';\\nimport { Toast } from 'primereact/toast';\\nimport { NodeService } from '../service/NodeService';\\n\\nexport class TreeEventsDemo extends Component {\\n\\n    constructor(props) {\\n        super(props);\\n        this.state = {\\n            nodes: [],\\n            selectedNodeKey: null\\n        };\\n\\n        this.nodeService = new NodeService();\\n\\n        this.onExpand = this.onExpand.bind(this);\\n        this.onCollapse = this.onCollapse.bind(this);\\n        this.onSelect = this.onSelect.bind(this);\\n        this.onUnselect = this.onUnselect.bind(this);\\n    }\\n\\n    componentDidMount() {\\n        this.nodeService.getTreeNodes().then(data => this.setState({ nodes: data }));\\n    }\\n\\n    onExpand(event) {\\n        this.toast.show({ severity: 'success', summary: 'Node Expanded', detail: event.node.label });\\n    }\\n\\n    onCollapse(event) {\\n        this.toast.show({ severity: 'success', summary: 'Node Collapsed', detail: event.node.label });\\n    }\\n\\n    onSelect(event) {\\n        this.toast.show({ severity: 'info', summary: 'Node Selected', detail: event.node.label });\\n    }\\n\\n    onUnselect(event) {\\n        this.toast.show({ severity: 'info', summary: 'Node Unselected', detail: event.node.label });\\n    }\\n\\n    render() {\\n        return (\\n            <div>\\n                <Toast ref={(el) => this.toast = el} />\\n\\n                <div className=\\\"card\\\">\\n                    <Tree value={this.state.nodes} selectionMode=\\\"single\\\" selectionKeys={this.state.selectedNodeKey} onSelectionChange={e => this.setState({ selectedNodeKey: e.value })}\\n                        onExpand={this.onExpand} onCollapse={this.onCollapse} onSelect={this.onSelect} onUnselect={this.onUnselect} />\\n                </div>\\n            </div>\\n        )\\n    }\\n}\\n                \"},'hooks':{tabName:'Hooks Source',content:\"\\nimport React, { useState, useEffect, useRef } from 'react';\\nimport { Tree } from 'primereact/tree';\\nimport { Toast } from 'primereact/toast';\\nimport { NodeService } from '../service/NodeService';\\n\\nconst TreeEventsDemo = () => {\\n    const [nodes, setNodes] = useState([]);\\n    const [selectedNodeKey, setSelectedNodeKey] = useState(null);\\n    const toast = useRef(null);\\n    const nodeService = new NodeService();\\n\\n    useEffect(() => {\\n        nodeService.getTreeNodes().then(data => setNodes(data));\\n    }, []); // eslint-disable-line react-hooks/exhaustive-deps\\n\\n    const onExpand = (event) => {\\n        toast.current.show({ severity: 'success', summary: 'Node Expanded', detail: event.node.label });\\n    }\\n\\n    const onCollapse = (event) => {\\n        toast.current.show({ severity: 'success', summary: 'Node Collapsed', detail: event.node.label });\\n    }\\n\\n    const onSelect = (event) => {\\n        toast.current.show({ severity: 'info', summary: 'Node Selected', detail: event.node.label });\\n    }\\n\\n    const onUnselect = (event) => {\\n        toast.current.show({ severity: 'info', summary: 'Node Unselected', detail: event.node.label });\\n    }\\n\\n    return (\\n        <div>\\n            <Toast ref={toast} />\\n\\n            <div className=\\\"card\\\">\\n                <Tree value={nodes} selectionMode=\\\"single\\\" selectionKeys={selectedNodeKey} onSelectionChange={e => setSelectedNodeKey(e.value)}\\n                    onExpand={onExpand} onCollapse={onCollapse} onSelect={onSelect} onUnselect={onUnselect} />\\n            </div>\\n        </div>\\n    )\\n}\\n                \"},'ts':{tabName:'TS Source',content:\"\\nimport React, { useState, useEffect, useRef } from 'react';\\nimport { Tree } from 'primereact/tree';\\nimport { Toast } from 'primereact/toast';\\nimport { NodeService } from '../service/NodeService';\\n\\nconst TreeEventsDemo = () => {\\n    const [nodes, setNodes] = useState([]);\\n    const [selectedNodeKey, setSelectedNodeKey] = useState(null);\\n    const toast = useRef(null);\\n    const nodeService = new NodeService();\\n\\n    useEffect(() => {\\n        nodeService.getTreeNodes().then(data => setNodes(data));\\n    }, []); // eslint-disable-line react-hooks/exhaustive-deps\\n\\n    const onExpand = (event) => {\\n        toast.current.show({ severity: 'success', summary: 'Node Expanded', detail: event.node.label });\\n    }\\n\\n    const onCollapse = (event) => {\\n        toast.current.show({ severity: 'success', summary: 'Node Collapsed', detail: event.node.label });\\n    }\\n\\n    const onSelect = (event) => {\\n        toast.current.show({ severity: 'info', summary: 'Node Selected', detail: event.node.label });\\n    }\\n\\n    const onUnselect = (event) => {\\n        toast.current.show({ severity: 'info', summary: 'Node Unselected', detail: event.node.label });\\n    }\\n\\n    return (\\n        <div>\\n            <Toast ref={toast} />\\n\\n            <div className=\\\"card\\\">\\n                <Tree value={nodes} selectionMode=\\\"single\\\" selectionKeys={selectedNodeKey} onSelectionChange={e => setSelectedNodeKey(e.value)}\\n                    onExpand={onExpand} onCollapse={onCollapse} onSelect={onSelect} onUnselect={onUnselect} />\\n            </div>\\n        </div>\\n    )\\n}\\n                \"}};return _this4;}_createClass(TreeEventsDemoDoc,[{key:\"shouldComponentUpdate\",value:function shouldComponentUpdate(){return false;}},{key:\"render\",value:function render(){return/*#__PURE__*/React.createElement(\"div\",{className:\"content-section documentation\"},/*#__PURE__*/React.createElement(TabView,null,useLiveEditorTabs({name:'TreeEventsDemo',sources:this.sources,service:'NodeService',data:'treenodes'})));}}]);return TreeEventsDemoDoc;}(Component);","map":{"version":3,"sources":["C:/Users/zura.ph/WebstormProjects/zz-regul/src/showcase/tree/TreeEventsDemo.js"],"names":["React","Component","Tree","Toast","NodeService","TabView","useLiveEditorTabs","AppInlineHeader","TreeEventsDemo","props","state","nodes","selectedNodeKey","nodeService","onExpand","bind","onCollapse","onSelect","onUnselect","getTreeNodes","then","data","setState","event","toast","show","severity","summary","detail","node","label","el","e","value","TreeEventsDemoDoc","sources","tabName","content","name","service"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { Tree } from '../../components/tree/Tree';\r\nimport { Toast } from '../../components/toast/Toast';\r\nimport { NodeService } from '../service/NodeService';\r\nimport { TabView } from '../../components/tabview/TabView';\r\nimport { useLiveEditorTabs }from '../liveeditor/LiveEditor';\r\nimport { AppInlineHeader } from '../../AppInlineHeader';\r\n\r\nexport class TreeEventsDemo extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            nodes: [],\r\n            selectedNodeKey: null\r\n        };\r\n\r\n        this.nodeService = new NodeService();\r\n\r\n        this.onExpand = this.onExpand.bind(this);\r\n        this.onCollapse = this.onCollapse.bind(this);\r\n        this.onSelect = this.onSelect.bind(this);\r\n        this.onUnselect = this.onUnselect.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.nodeService.getTreeNodes().then(data => this.setState({ nodes: data }));\r\n    }\r\n\r\n    onExpand(event) {\r\n        this.toast.show({ severity: 'success', summary: 'Node Expanded', detail: event.node.label });\r\n    }\r\n\r\n    onCollapse(event) {\r\n        this.toast.show({ severity: 'success', summary: 'Node Collapsed', detail: event.node.label });\r\n    }\r\n\r\n    onSelect(event) {\r\n        this.toast.show({ severity: 'info', summary: 'Node Selected', detail: event.node.label });\r\n    }\r\n\r\n    onUnselect(event) {\r\n        this.toast.show({ severity: 'info', summary: 'Node Unselected', detail: event.node.label });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div className=\"content-section introduction\">\r\n                    <AppInlineHeader changelogText=\"tree\">\r\n                        <h1>Tree <span>Events</span></h1>\r\n                        <p>An event is provided each type of user interaction such as expand, collapse and selection.</p>\r\n                    </AppInlineHeader>\r\n                </div>\r\n\r\n                <div className=\"content-section implementation\">\r\n                    <Toast ref={(el) => this.toast = el} />\r\n\r\n                    <div className=\"card\">\r\n                        <Tree value={this.state.nodes} selectionMode=\"single\" selectionKeys={this.state.selectedNodeKey} onSelectionChange={e => this.setState({ selectedNodeKey: e.value })}\r\n                            onExpand={this.onExpand} onCollapse={this.onCollapse} onSelect={this.onSelect} onUnselect={this.onUnselect} />\r\n                    </div>\r\n                </div>\r\n\r\n                <TreeEventsDemoDoc />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport class TreeEventsDemoDoc extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.sources = {\r\n            'class': {\r\n                tabName: 'Class Source',\r\n                content: `\r\nimport React, { Component } from 'react';\r\nimport { Tree } from 'primereact/tree';\r\nimport { Toast } from 'primereact/toast';\r\nimport { NodeService } from '../service/NodeService';\r\n\r\nexport class TreeEventsDemo extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            nodes: [],\r\n            selectedNodeKey: null\r\n        };\r\n\r\n        this.nodeService = new NodeService();\r\n\r\n        this.onExpand = this.onExpand.bind(this);\r\n        this.onCollapse = this.onCollapse.bind(this);\r\n        this.onSelect = this.onSelect.bind(this);\r\n        this.onUnselect = this.onUnselect.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.nodeService.getTreeNodes().then(data => this.setState({ nodes: data }));\r\n    }\r\n\r\n    onExpand(event) {\r\n        this.toast.show({ severity: 'success', summary: 'Node Expanded', detail: event.node.label });\r\n    }\r\n\r\n    onCollapse(event) {\r\n        this.toast.show({ severity: 'success', summary: 'Node Collapsed', detail: event.node.label });\r\n    }\r\n\r\n    onSelect(event) {\r\n        this.toast.show({ severity: 'info', summary: 'Node Selected', detail: event.node.label });\r\n    }\r\n\r\n    onUnselect(event) {\r\n        this.toast.show({ severity: 'info', summary: 'Node Unselected', detail: event.node.label });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Toast ref={(el) => this.toast = el} />\r\n\r\n                <div className=\"card\">\r\n                    <Tree value={this.state.nodes} selectionMode=\"single\" selectionKeys={this.state.selectedNodeKey} onSelectionChange={e => this.setState({ selectedNodeKey: e.value })}\r\n                        onExpand={this.onExpand} onCollapse={this.onCollapse} onSelect={this.onSelect} onUnselect={this.onUnselect} />\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n                `\r\n            },\r\n            'hooks': {\r\n                tabName: 'Hooks Source',\r\n                content: `\r\nimport React, { useState, useEffect, useRef } from 'react';\r\nimport { Tree } from 'primereact/tree';\r\nimport { Toast } from 'primereact/toast';\r\nimport { NodeService } from '../service/NodeService';\r\n\r\nconst TreeEventsDemo = () => {\r\n    const [nodes, setNodes] = useState([]);\r\n    const [selectedNodeKey, setSelectedNodeKey] = useState(null);\r\n    const toast = useRef(null);\r\n    const nodeService = new NodeService();\r\n\r\n    useEffect(() => {\r\n        nodeService.getTreeNodes().then(data => setNodes(data));\r\n    }, []); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n    const onExpand = (event) => {\r\n        toast.current.show({ severity: 'success', summary: 'Node Expanded', detail: event.node.label });\r\n    }\r\n\r\n    const onCollapse = (event) => {\r\n        toast.current.show({ severity: 'success', summary: 'Node Collapsed', detail: event.node.label });\r\n    }\r\n\r\n    const onSelect = (event) => {\r\n        toast.current.show({ severity: 'info', summary: 'Node Selected', detail: event.node.label });\r\n    }\r\n\r\n    const onUnselect = (event) => {\r\n        toast.current.show({ severity: 'info', summary: 'Node Unselected', detail: event.node.label });\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Toast ref={toast} />\r\n\r\n            <div className=\"card\">\r\n                <Tree value={nodes} selectionMode=\"single\" selectionKeys={selectedNodeKey} onSelectionChange={e => setSelectedNodeKey(e.value)}\r\n                    onExpand={onExpand} onCollapse={onCollapse} onSelect={onSelect} onUnselect={onUnselect} />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n                `\r\n            },\r\n            'ts': {\r\n                tabName: 'TS Source',\r\n                content: `\r\nimport React, { useState, useEffect, useRef } from 'react';\r\nimport { Tree } from 'primereact/tree';\r\nimport { Toast } from 'primereact/toast';\r\nimport { NodeService } from '../service/NodeService';\r\n\r\nconst TreeEventsDemo = () => {\r\n    const [nodes, setNodes] = useState([]);\r\n    const [selectedNodeKey, setSelectedNodeKey] = useState(null);\r\n    const toast = useRef(null);\r\n    const nodeService = new NodeService();\r\n\r\n    useEffect(() => {\r\n        nodeService.getTreeNodes().then(data => setNodes(data));\r\n    }, []); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n    const onExpand = (event) => {\r\n        toast.current.show({ severity: 'success', summary: 'Node Expanded', detail: event.node.label });\r\n    }\r\n\r\n    const onCollapse = (event) => {\r\n        toast.current.show({ severity: 'success', summary: 'Node Collapsed', detail: event.node.label });\r\n    }\r\n\r\n    const onSelect = (event) => {\r\n        toast.current.show({ severity: 'info', summary: 'Node Selected', detail: event.node.label });\r\n    }\r\n\r\n    const onUnselect = (event) => {\r\n        toast.current.show({ severity: 'info', summary: 'Node Unselected', detail: event.node.label });\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Toast ref={toast} />\r\n\r\n            <div className=\"card\">\r\n                <Tree value={nodes} selectionMode=\"single\" selectionKeys={selectedNodeKey} onSelectionChange={e => setSelectedNodeKey(e.value)}\r\n                    onExpand={onExpand} onCollapse={onCollapse} onSelect={onSelect} onUnselect={onUnselect} />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n                `\r\n            }\r\n        }\r\n    }\r\n\r\n    shouldComponentUpdate() {\r\n        return false;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"content-section documentation\">\r\n                <TabView>\r\n                    {\r\n                        useLiveEditorTabs({ name: 'TreeEventsDemo', sources: this.sources, service: 'NodeService', data: 'treenodes' })\r\n                    }\r\n                </TabView>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}