{"ast":null,"code":"import _classCallCheck from\"C:\\\\Users\\\\zura.ph\\\\WebstormProjects\\\\zz-regul\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";import _createClass from\"C:\\\\Users\\\\zura.ph\\\\WebstormProjects\\\\zz-regul\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";import _inherits from\"C:\\\\Users\\\\zura.ph\\\\WebstormProjects\\\\zz-regul\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";import _createSuper from\"C:\\\\Users\\\\zura.ph\\\\WebstormProjects\\\\zz-regul\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createSuper\";import React,{Component}from'react';import{Link}from'react-router-dom';import{TabView,TabPanel}from'../../components/tabview/TabView';import{useLiveEditorTabs}from'../liveeditor/LiveEditor';import{CodeHighlight}from'../codehighlight/CodeHighlight';export var InputNumberDoc=/*#__PURE__*/function(_Component){_inherits(InputNumberDoc,_Component);var _super=_createSuper(InputNumberDoc);function InputNumberDoc(props){var _this;_classCallCheck(this,InputNumberDoc);_this=_super.call(this,props);_this.sources={'class':{tabName:'Class Source',content:\"\\nimport React, { Component } from 'react';\\nimport { InputNumber } from 'primereact/inputnumber';\\n\\nexport class InputNumberDemo extends Component {\\n\\n    constructor(props) {\\n        super(props);\\n        this.state = {\\n            value1: 42723,\\n            value2: 58151,\\n            value3: 2351.35,\\n            value4: 50,\\n            value5: 151351,\\n            value6: 115744,\\n            value7: 635524,\\n            value8: 732762,\\n            value9: 1500,\\n            value10: 2500,\\n            value11: 4250,\\n            value12: 5002,\\n            value13: 20,\\n            value14: 50,\\n            value15: 10,\\n            value16: 20,\\n            value17: 20,\\n            value18: 10.50,\\n            value19: 25,\\n            value20: 50\\n        };\\n    }\\n\\n    render() {\\n        return (\\n            <div>\\n                <div className=\\\"card\\\">\\n                    <h5>Numerals</h5>\\n                    <div className=\\\"p-fluid p-grid p-formgrid\\\">\\n                        <div className=\\\"p-field p-col-12 p-md-3\\\">\\n                            <label htmlFor=\\\"integeronly\\\">Integer Only</label>\\n                            <InputNumber id=\\\"integeronly\\\" value={this.state.value1} onValueChange={(e) => this.setState({value1: e.value})} />\\n                        </div>\\n                        <div className=\\\"p-field p-col-12 p-md-3\\\">\\n                            <label htmlFor=\\\"withoutgrouping\\\">Without Grouping</label>\\n                            <InputNumber id=\\\"withoutgrouping\\\" value={this.state.value2} onValueChange={(e) => this.setState({value2: e.value})} mode=\\\"decimal\\\" useGrouping={false} />\\n                        </div>\\n                        <div className=\\\"p-field p-col-12 p-md-3\\\">\\n                            <label htmlFor=\\\"minmaxfraction\\\">Min-Max Fraction Digits</label>\\n                            <InputNumber id=\\\"minmaxfraction\\\" value={this.state.value3} onValueChange={(e) => this.setState({value3: e.value})} mode=\\\"decimal\\\" minFractionDigits={2} maxFractionDigits={5} />\\n                        </div>\\n                        <div className=\\\"p-field p-col-12 p-md-3\\\">\\n                            <label htmlFor=\\\"minmax\\\">Min-Max Boundaries</label>\\n                            <InputNumber id=\\\"minmax\\\" value={this.state.value4} onValueChange={(e) => this.setState({value4: e.value})} mode=\\\"decimal\\\" min={0} max={100} />\\n                        </div>\\n\\n                        <div className=\\\"p-field p-col-12 p-md-3\\\">\\n                            <label htmlFor=\\\"locale-user\\\">User Locale</label>\\n                            <InputNumber id=\\\"locale-user\\\" value={this.state.value5} onValueChange={(e) => this.setState({value5: e.value})} mode=\\\"decimal\\\" minFractionDigits={2} />\\n                        </div>\\n                        <div className=\\\"p-field p-col-12 p-md-3\\\">\\n                            <label htmlFor=\\\"locale-us\\\">United States Locale</label>\\n                            <InputNumber id=\\\"locale-us\\\" value={this.state.value6} onValueChange={(e) => this.setState({value6: e.value})} mode=\\\"decimal\\\" locale=\\\"en-US\\\" minFractionDigits={2}/>\\n                        </div>\\n                        <div className=\\\"p-field p-col-12 p-md-3\\\">\\n                            <label htmlFor=\\\"locale-german\\\">German Locale</label>\\n                            <InputNumber id=\\\"locale-german\\\" value={this.state.value7} onValueChange={(e) => this.setState({value7: e.value})} mode=\\\"decimal\\\" locale=\\\"de-DE\\\" minFractionDigits={2}/>\\n                        </div>\\n                        <div className=\\\"p-field p-col-12 p-md-3\\\">\\n                            <label htmlFor=\\\"locale-indian\\\">Indian Locale</label>\\n                            <InputNumber id=\\\"locale-indian\\\" value={this.state.value8} onValueChange={(e) => this.setState({value8: e.value})} mode=\\\"decimal\\\" locale=\\\"en-IN\\\" minFractionDigits={2} />\\n                        </div>\\n                    </div>\\n\\n                    <h5>Currency</h5>\\n                    <div className=\\\"p-grid p-fluid\\\">\\n                        <div className=\\\"p-field p-col-12 p-md-3\\\">\\n                            <label htmlFor=\\\"currency-us\\\">United States</label>\\n                            <InputNumber id=\\\"currency-us\\\" value={this.state.value9} onValueChange={(e) => this.setState({value9: e.value})} mode=\\\"currency\\\" currency=\\\"USD\\\" locale=\\\"en-US\\\" />\\n                        </div>\\n                        <div className=\\\"p-field p-col-12 p-md-3\\\">\\n                            <label htmlFor=\\\"currency-germany\\\">Germany</label>\\n                            <InputNumber id=\\\"currency-germany\\\" value={this.state.value10} onValueChange={(e) => this.setState({value10: e.value})} mode=\\\"currency\\\" currency=\\\"EUR\\\" locale=\\\"de-DE\\\" />\\n                        </div>\\n                        <div className=\\\"p-field p-col-12 p-md-3\\\">\\n                            <label htmlFor=\\\"currency-india\\\">India</label>\\n                            <InputNumber id=\\\"currency-india\\\" value={this.state.value11} onValueChange={(e) => this.setState({value11: e.value})} mode=\\\"currency\\\" currency=\\\"INR\\\" currencyDisplay=\\\"code\\\" locale=\\\"en-IN\\\"/>\\n                        </div>\\n                        <div className=\\\"p-field p-col-12 p-md-3\\\">\\n                            <label htmlFor=\\\"currency-japan\\\">Japan</label>\\n                            <InputNumber id=\\\"currency-japan\\\" value={this.state.value12} onValueChange={(e) => this.setState({value12: e.value})} mode=\\\"currency\\\" currency=\\\"JPY\\\" locale=\\\"jp-JP\\\"/>\\n                        </div>\\n                    </div>\\n\\n                    <h5>Prefix and Suffix</h5>\\n                    <div className=\\\"p-grid p-fluid\\\">\\n                        <div className=\\\"p-field p-col-12 p-md-3\\\">\\n                            <label htmlFor=\\\"mile\\\">Mile</label>\\n                            <InputNumber id=\\\"mile\\\" value={this.state.value13} onValueChange={(e) => this.setState({value13: e.value})} suffix=\\\" mi\\\" />\\n                        </div>\\n                        <div className=\\\"p-field p-col-12 p-md-3\\\">\\n                            <label htmlFor=\\\"percent\\\">Percent</label>\\n                            <InputNumber id=\\\"percent\\\" value={this.state.value14} onValueChange={(e) => this.setState({value14: e.value})} prefix=\\\"%\\\" />\\n                        </div>\\n                        <div className=\\\"p-field p-col-12 p-md-3\\\">\\n                            <label htmlFor=\\\"expiry\\\">Expiry</label>\\n                            <InputNumber id=\\\"expiry\\\" value={this.state.value15} onValueChange={(e) => this.setState({value15: e.value})}  prefix=\\\"Expires in \\\" suffix=\\\" days\\\" />\\n                        </div>\\n                        <div className=\\\"p-field p-col-12 p-md-3\\\">\\n                            <label htmlFor=\\\"temperature\\\">Temperature</label>\\n                            <InputNumber id=\\\"temperature\\\" value={this.state.value16} onValueChange={(e) => this.setState({value16: e.value})} prefix=\\\"&uarr; \\\" suffix=\\\"\\u2103\\\" min={0} max={40} />\\n                        </div>\\n                    </div>\\n\\n                    <h5>Buttons</h5>\\n                    <div className=\\\"p-grid p-fluid\\\">\\n                        <div className=\\\"p-field p-col-12 p-md-3\\\">\\n                            <label htmlFor=\\\"stacked\\\">Stacked</label>\\n                            <InputNumber id=\\\"stacked\\\" value={this.state.value17} onValueChange={(e) => this.setState({value17: e.value})} showButtons mode=\\\"currency\\\" currency=\\\"USD\\\" />\\n                        </div>\\n                        <div className=\\\"p-field p-col-12 p-md-3\\\">\\n                            <label htmlFor=\\\"horizontal\\\">Horizontal with Step</label>\\n                            <InputNumber id=\\\"horizontal\\\" value={this.state.value18} onValueChange={(e) => this.setState({value18: e.value})} showButtons buttonLayout=\\\"horizontal\\\" step={0.25}\\n                                decrementButtonClassName=\\\"p-button-danger\\\" incrementButtonClassName=\\\"p-button-success\\\" incrementButtonIcon=\\\"pi pi-plus\\\" decrementButtonIcon=\\\"pi pi-minus\\\" mode=\\\"currency\\\" currency=\\\"EUR\\\"/>\\n                        </div>\\n                        <div className=\\\"p-field p-col-12 p-md-3\\\">\\n                            <label htmlFor=\\\"minmax-buttons\\\">Min-Max Boundaries</label>\\n                            <InputNumber id=\\\"minmax-buttons\\\" value={this.state.value20} onValueChange={(e) => this.setState({value20: e.value})} mode=\\\"decimal\\\" showButtons min={0} max={100} />\\n                        </div>\\n                    </div>\\n\\n                    <div className=\\\"p-grid\\\">\\n                        <div className=\\\"p-field p-col-12 p-md-3\\\">\\n                            <label htmlFor=\\\"vertical\\\" style={{display: 'block'}}>Vertical</label>\\n                            <InputNumber id=\\\"vertical\\\" value={this.state.value19} onValueChange={(e) => this.setState({value19: e.value})} mode=\\\"decimal\\\" showButtons buttonLayout=\\\"vertical\\\" style={{width: '4rem'}}\\n                                decrementButtonClassName=\\\"p-button-secondary\\\" incrementButtonClassName=\\\"p-button-secondary\\\" incrementButtonIcon=\\\"pi pi-plus\\\" decrementButtonIcon=\\\"pi pi-minus\\\" />\\n                        </div>\\n                    </div>\\n                </div>\\n            </div>\\n        );\\n    }\\n}\\n                \"},'hooks':{tabName:'Hooks Source',content:\"\\nimport React, { useState } from 'react';\\nimport { InputNumber } from 'primereact/inputnumber';\\n\\nconst InputNumberDemo = () => {\\n    const [value1, setValue1] = useState(42723);\\n    const [value2, setValue2] = useState(58151);\\n    const [value3, setValue3] = useState(2351.35);\\n    const [value4, setValue4] = useState(50);\\n    const [value5, setValue5] = useState(151351);\\n    const [value6, setValue6] = useState(115744);\\n    const [value7, setValue7] = useState(635524);\\n    const [value8, setValue8] = useState(732762);\\n    const [value9, setValue9] = useState(1500);\\n    const [value10, setValue10] = useState(2500);\\n    const [value11, setValue11] = useState(4250);\\n    const [value12, setValue12] = useState(5002);\\n    const [value13, setValue13] = useState(20);\\n    const [value14, setValue14] = useState(50);\\n    const [value15, setValue15] = useState(10);\\n    const [value16, setValue16] = useState(20);\\n    const [value17, setValue17] = useState(20);\\n    const [value18, setValue18] = useState(10.50);\\n    const [value19, setValue19] = useState(25);\\n    const [value20, setValue20] = useState(50);\\n\\n    return (\\n        <div>\\n            <div className=\\\"card\\\">\\n                <h5>Numerals</h5>\\n                <div className=\\\"p-fluid p-grid p-formgrid\\\">\\n                    <div className=\\\"p-field p-col-12 p-md-3\\\">\\n                        <label htmlFor=\\\"integeronly\\\">Integer Only</label>\\n                        <InputNumber id=\\\"integeronly\\\" value={value1} onValueChange={(e) => setValue1(e.value)} />\\n                    </div>\\n                    <div className=\\\"p-field p-col-12 p-md-3\\\">\\n                        <label htmlFor=\\\"withoutgrouping\\\">Without Grouping</label>\\n                        <InputNumber id=\\\"withoutgrouping\\\" value={value2} onValueChange={(e) => setValue2(e.value)} mode=\\\"decimal\\\" useGrouping={false} />\\n                    </div>\\n                    <div className=\\\"p-field p-col-12 p-md-3\\\">\\n                        <label htmlFor=\\\"minmaxfraction\\\">Min-Max Fraction Digits</label>\\n                        <InputNumber id=\\\"minmaxfraction\\\" value={value3} onValueChange={(e) => setValue3(e.value)} mode=\\\"decimal\\\" minFractionDigits={2} maxFractionDigits={5} />\\n                    </div>\\n                    <div className=\\\"p-field p-col-12 p-md-3\\\">\\n                        <label htmlFor=\\\"minmax\\\">Min-Max Boundaries</label>\\n                        <InputNumber id=\\\"minmax\\\" value={value4} onValueChange={(e) => setValue4(e.value)} mode=\\\"decimal\\\" min={0} max={100} />\\n                    </div>\\n\\n                    <div className=\\\"p-field p-col-12 p-md-3\\\">\\n                        <label htmlFor=\\\"locale-user\\\">User Locale</label>\\n                        <InputNumber id=\\\"locale-user\\\" value={value5} onValueChange={(e) => setValue5(e.value)} mode=\\\"decimal\\\" minFractionDigits={2} />\\n                    </div>\\n                    <div className=\\\"p-field p-col-12 p-md-3\\\">\\n                        <label htmlFor=\\\"locale-us\\\">United States Locale</label>\\n                        <InputNumber id=\\\"locale-us\\\" value={value6} onValueChange={(e) => setValue6(e.value)} mode=\\\"decimal\\\" locale=\\\"en-US\\\" minFractionDigits={2}/>\\n                    </div>\\n                    <div className=\\\"p-field p-col-12 p-md-3\\\">\\n                        <label htmlFor=\\\"locale-german\\\">German Locale</label>\\n                        <InputNumber id=\\\"locale-german\\\" value={value7} onValueChange={(e) => setValue7(e.value)} mode=\\\"decimal\\\" locale=\\\"de-DE\\\" minFractionDigits={2}/>\\n                    </div>\\n                    <div className=\\\"p-field p-col-12 p-md-3\\\">\\n                        <label htmlFor=\\\"locale-indian\\\">Indian Locale</label>\\n                        <InputNumber id=\\\"locale-indian\\\" value={value8} onValueChange={(e) => setValue8(e.value)} mode=\\\"decimal\\\" locale=\\\"en-IN\\\" minFractionDigits={2} />\\n                    </div>\\n                </div>\\n\\n                <h5>Currency</h5>\\n                <div className=\\\"p-grid p-fluid\\\">\\n                    <div className=\\\"p-field p-col-12 p-md-3\\\">\\n                        <label htmlFor=\\\"currency-us\\\">United States</label>\\n                        <InputNumber id=\\\"currency-us\\\" value={value9} onValueChange={(e) => setValue9(e.value)} mode=\\\"currency\\\" currency=\\\"USD\\\" locale=\\\"en-US\\\" />\\n                    </div>\\n                    <div className=\\\"p-field p-col-12 p-md-3\\\">\\n                        <label htmlFor=\\\"currency-germany\\\">Germany</label>\\n                        <InputNumber id=\\\"currency-germany\\\" value={value10} onValueChange={(e) => setValue10(e.value)} mode=\\\"currency\\\" currency=\\\"EUR\\\" locale=\\\"de-DE\\\" />\\n                    </div>\\n                    <div className=\\\"p-field p-col-12 p-md-3\\\">\\n                        <label htmlFor=\\\"currency-india\\\">India</label>\\n                        <InputNumber id=\\\"currency-india\\\" value={value11} onValueChange={(e) => setValue11(e.value)} mode=\\\"currency\\\" currency=\\\"INR\\\" currencyDisplay=\\\"code\\\" locale=\\\"en-IN\\\"/>\\n                    </div>\\n                    <div className=\\\"p-field p-col-12 p-md-3\\\">\\n                        <label htmlFor=\\\"currency-japan\\\">Japan</label>\\n                        <InputNumber id=\\\"currency-japan\\\" value={value12} onValueChange={(e) => setValue12(e.value)} mode=\\\"currency\\\" currency=\\\"JPY\\\" locale=\\\"jp-JP\\\"/>\\n                    </div>\\n                </div>\\n\\n                <h5>Prefix and Suffix</h5>\\n                <div className=\\\"p-grid p-fluid\\\">\\n                    <div className=\\\"p-field p-col-12 p-md-3\\\">\\n                        <label htmlFor=\\\"mile\\\">Mile</label>\\n                        <InputNumber id=\\\"mile\\\" value={value13} onValueChange={(e) => setValue13(e.value)} suffix=\\\" mi\\\" />\\n                    </div>\\n                    <div className=\\\"p-field p-col-12 p-md-3\\\">\\n                        <label htmlFor=\\\"percent\\\">Percent</label>\\n                        <InputNumber id=\\\"percent\\\" value={value14} onValueChange={(e) => setValue14(e.value)} prefix=\\\"%\\\" />\\n                    </div>\\n                    <div className=\\\"p-field p-col-12 p-md-3\\\">\\n                        <label htmlFor=\\\"expiry\\\">Expiry</label>\\n                        <InputNumber id=\\\"expiry\\\" value={value15} onValueChange={(e) => setValue15(e.value)}  prefix=\\\"Expires in \\\" suffix=\\\" days\\\" />\\n                    </div>\\n                    <div className=\\\"p-field p-col-12 p-md-3\\\">\\n                        <label htmlFor=\\\"temperature\\\">Temperature</label>\\n                        <InputNumber id=\\\"temperature\\\" value={value16} onValueChange={(e) => setValue16(e.value)} prefix=\\\"&uarr; \\\" suffix=\\\"\\u2103\\\" min={0} max={40} />\\n                    </div>\\n                </div>\\n\\n                <h5>Buttons</h5>\\n                <div className=\\\"p-grid p-fluid\\\">\\n                    <div className=\\\"p-field p-col-12 p-md-3\\\">\\n                        <label htmlFor=\\\"stacked\\\">Stacked</label>\\n                        <InputNumber id=\\\"stacked\\\" value={value17} onValueChange={(e) => setValue17(e.value)} showButtons mode=\\\"currency\\\" currency=\\\"USD\\\" />\\n                    </div>\\n                    <div className=\\\"p-field p-col-12 p-md-3\\\">\\n                        <label htmlFor=\\\"horizontal\\\">Horizontal with Step</label>\\n                        <InputNumber id=\\\"horizontal\\\" value={value18} onValueChange={(e) => setValue18(e.value)} showButtons buttonLayout=\\\"horizontal\\\" step={0.25}\\n                            decrementButtonClassName=\\\"p-button-danger\\\" incrementButtonClassName=\\\"p-button-success\\\" incrementButtonIcon=\\\"pi pi-plus\\\" decrementButtonIcon=\\\"pi pi-minus\\\" mode=\\\"currency\\\" currency=\\\"EUR\\\"/>\\n                    </div>\\n                    <div className=\\\"p-field p-col-12 p-md-3\\\">\\n                        <label htmlFor=\\\"minmax-buttons\\\">Min-Max Boundaries</label>\\n                        <InputNumber id=\\\"minmax-buttons\\\" value={value20} onValueChange={(e) => setValue20(e.value)} mode=\\\"decimal\\\" showButtons min={0} max={100} />\\n                    </div>\\n                </div>\\n\\n                <div className=\\\"p-grid\\\">\\n                    <div className=\\\"p-field p-col-12 p-md-3\\\">\\n                        <label htmlFor=\\\"vertical\\\" style={{display: 'block'}}>Vertical</label>\\n                        <InputNumber id=\\\"vertical\\\" value={value19} onValueChange={(e) => setValue19(e.value)} mode=\\\"decimal\\\" showButtons buttonLayout=\\\"vertical\\\" style={{width: '4rem'}}\\n                            decrementButtonClassName=\\\"p-button-secondary\\\" incrementButtonClassName=\\\"p-button-secondary\\\" incrementButtonIcon=\\\"pi pi-plus\\\" decrementButtonIcon=\\\"pi pi-minus\\\" />\\n                    </div>\\n                </div>\\n            </div>\\n        </div>\\n    );\\n}\\n                \"},'ts':{tabName:'TS Source',content:\"\\nimport React, { useState } from 'react';\\nimport { InputNumber } from 'primereact/inputnumber';\\n\\nconst InputNumberDemo = () => {\\n    const [value1, setValue1] = useState(42723);\\n    const [value2, setValue2] = useState(58151);\\n    const [value3, setValue3] = useState(2351.35);\\n    const [value4, setValue4] = useState(50);\\n    const [value5, setValue5] = useState(151351);\\n    const [value6, setValue6] = useState(115744);\\n    const [value7, setValue7] = useState(635524);\\n    const [value8, setValue8] = useState(732762);\\n    const [value9, setValue9] = useState(1500);\\n    const [value10, setValue10] = useState(2500);\\n    const [value11, setValue11] = useState(4250);\\n    const [value12, setValue12] = useState(5002);\\n    const [value13, setValue13] = useState(20);\\n    const [value14, setValue14] = useState(50);\\n    const [value15, setValue15] = useState(10);\\n    const [value16, setValue16] = useState(20);\\n    const [value17, setValue17] = useState(20);\\n    const [value18, setValue18] = useState(10.50);\\n    const [value19, setValue19] = useState(25);\\n    const [value20, setValue20] = useState(50);\\n\\n    return (\\n        <div>\\n            <div className=\\\"card\\\">\\n                <h5>Numerals</h5>\\n                <div className=\\\"p-fluid p-grid p-formgrid\\\">\\n                    <div className=\\\"p-field p-col-12 p-md-3\\\">\\n                        <label htmlFor=\\\"integeronly\\\">Integer Only</label>\\n                        <InputNumber id=\\\"integeronly\\\" value={value1} onValueChange={(e) => setValue1(e.value)} />\\n                    </div>\\n                    <div className=\\\"p-field p-col-12 p-md-3\\\">\\n                        <label htmlFor=\\\"withoutgrouping\\\">Without Grouping</label>\\n                        <InputNumber id=\\\"withoutgrouping\\\" value={value2} onValueChange={(e) => setValue2(e.value)} mode=\\\"decimal\\\" useGrouping={false} />\\n                    </div>\\n                    <div className=\\\"p-field p-col-12 p-md-3\\\">\\n                        <label htmlFor=\\\"minmaxfraction\\\">Min-Max Fraction Digits</label>\\n                        <InputNumber id=\\\"minmaxfraction\\\" value={value3} onValueChange={(e) => setValue3(e.value)} mode=\\\"decimal\\\" minFractionDigits={2} maxFractionDigits={5} />\\n                    </div>\\n                    <div className=\\\"p-field p-col-12 p-md-3\\\">\\n                        <label htmlFor=\\\"minmax\\\">Min-Max Boundaries</label>\\n                        <InputNumber id=\\\"minmax\\\" value={value4} onValueChange={(e) => setValue4(e.value)} mode=\\\"decimal\\\" min={0} max={100} />\\n                    </div>\\n\\n                    <div className=\\\"p-field p-col-12 p-md-3\\\">\\n                        <label htmlFor=\\\"locale-user\\\">User Locale</label>\\n                        <InputNumber id=\\\"locale-user\\\" value={value5} onValueChange={(e) => setValue5(e.value)} mode=\\\"decimal\\\" minFractionDigits={2} />\\n                    </div>\\n                    <div className=\\\"p-field p-col-12 p-md-3\\\">\\n                        <label htmlFor=\\\"locale-us\\\">United States Locale</label>\\n                        <InputNumber id=\\\"locale-us\\\" value={value6} onValueChange={(e) => setValue6(e.value)} mode=\\\"decimal\\\" locale=\\\"en-US\\\" minFractionDigits={2}/>\\n                    </div>\\n                    <div className=\\\"p-field p-col-12 p-md-3\\\">\\n                        <label htmlFor=\\\"locale-german\\\">German Locale</label>\\n                        <InputNumber id=\\\"locale-german\\\" value={value7} onValueChange={(e) => setValue7(e.value)} mode=\\\"decimal\\\" locale=\\\"de-DE\\\" minFractionDigits={2}/>\\n                    </div>\\n                    <div className=\\\"p-field p-col-12 p-md-3\\\">\\n                        <label htmlFor=\\\"locale-indian\\\">Indian Locale</label>\\n                        <InputNumber id=\\\"locale-indian\\\" value={value8} onValueChange={(e) => setValue8(e.value)} mode=\\\"decimal\\\" locale=\\\"en-IN\\\" minFractionDigits={2} />\\n                    </div>\\n                </div>\\n\\n                <h5>Currency</h5>\\n                <div className=\\\"p-grid p-fluid\\\">\\n                    <div className=\\\"p-field p-col-12 p-md-3\\\">\\n                        <label htmlFor=\\\"currency-us\\\">United States</label>\\n                        <InputNumber id=\\\"currency-us\\\" value={value9} onValueChange={(e) => setValue9(e.value)} mode=\\\"currency\\\" currency=\\\"USD\\\" locale=\\\"en-US\\\" />\\n                    </div>\\n                    <div className=\\\"p-field p-col-12 p-md-3\\\">\\n                        <label htmlFor=\\\"currency-germany\\\">Germany</label>\\n                        <InputNumber id=\\\"currency-germany\\\" value={value10} onValueChange={(e) => setValue10(e.value)} mode=\\\"currency\\\" currency=\\\"EUR\\\" locale=\\\"de-DE\\\" />\\n                    </div>\\n                    <div className=\\\"p-field p-col-12 p-md-3\\\">\\n                        <label htmlFor=\\\"currency-india\\\">India</label>\\n                        <InputNumber id=\\\"currency-india\\\" value={value11} onValueChange={(e) => setValue11(e.value)} mode=\\\"currency\\\" currency=\\\"INR\\\" currencyDisplay=\\\"code\\\" locale=\\\"en-IN\\\"/>\\n                    </div>\\n                    <div className=\\\"p-field p-col-12 p-md-3\\\">\\n                        <label htmlFor=\\\"currency-japan\\\">Japan</label>\\n                        <InputNumber id=\\\"currency-japan\\\" value={value12} onValueChange={(e) => setValue12(e.value)} mode=\\\"currency\\\" currency=\\\"JPY\\\" locale=\\\"jp-JP\\\"/>\\n                    </div>\\n                </div>\\n\\n                <h5>Prefix and Suffix</h5>\\n                <div className=\\\"p-grid p-fluid\\\">\\n                    <div className=\\\"p-field p-col-12 p-md-3\\\">\\n                        <label htmlFor=\\\"mile\\\">Mile</label>\\n                        <InputNumber id=\\\"mile\\\" value={value13} onValueChange={(e) => setValue13(e.value)} suffix=\\\" mi\\\" />\\n                    </div>\\n                    <div className=\\\"p-field p-col-12 p-md-3\\\">\\n                        <label htmlFor=\\\"percent\\\">Percent</label>\\n                        <InputNumber id=\\\"percent\\\" value={value14} onValueChange={(e) => setValue14(e.value)} prefix=\\\"%\\\" />\\n                    </div>\\n                    <div className=\\\"p-field p-col-12 p-md-3\\\">\\n                        <label htmlFor=\\\"expiry\\\">Expiry</label>\\n                        <InputNumber id=\\\"expiry\\\" value={value15} onValueChange={(e) => setValue15(e.value)}  prefix=\\\"Expires in \\\" suffix=\\\" days\\\" />\\n                    </div>\\n                    <div className=\\\"p-field p-col-12 p-md-3\\\">\\n                        <label htmlFor=\\\"temperature\\\">Temperature</label>\\n                        <InputNumber id=\\\"temperature\\\" value={value16} onValueChange={(e) => setValue16(e.value)} prefix=\\\"&uarr; \\\" suffix=\\\"\\u2103\\\" min={0} max={40} />\\n                    </div>\\n                </div>\\n\\n                <h5>Buttons</h5>\\n                <div className=\\\"p-grid p-fluid\\\">\\n                    <div className=\\\"p-field p-col-12 p-md-3\\\">\\n                        <label htmlFor=\\\"stacked\\\">Stacked</label>\\n                        <InputNumber id=\\\"stacked\\\" value={value17} onValueChange={(e) => setValue17(e.value)} showButtons mode=\\\"currency\\\" currency=\\\"USD\\\" />\\n                    </div>\\n                    <div className=\\\"p-field p-col-12 p-md-3\\\">\\n                        <label htmlFor=\\\"horizontal\\\">Horizontal with Step</label>\\n                        <InputNumber id=\\\"horizontal\\\" value={value18} onValueChange={(e) => setValue18(e.value)} showButtons buttonLayout=\\\"horizontal\\\" step={0.25}\\n                            decrementButtonClassName=\\\"p-button-danger\\\" incrementButtonClassName=\\\"p-button-success\\\" incrementButtonIcon=\\\"pi pi-plus\\\" decrementButtonIcon=\\\"pi pi-minus\\\" mode=\\\"currency\\\" currency=\\\"EUR\\\"/>\\n                    </div>\\n                    <div className=\\\"p-field p-col-12 p-md-3\\\">\\n                        <label htmlFor=\\\"minmax-buttons\\\">Min-Max Boundaries</label>\\n                        <InputNumber id=\\\"minmax-buttons\\\" value={value20} onValueChange={(e) => setValue20(e.value)} mode=\\\"decimal\\\" showButtons min={0} max={100} />\\n                    </div>\\n                </div>\\n\\n                <div className=\\\"p-grid\\\">\\n                    <div className=\\\"p-field p-col-12 p-md-3\\\">\\n                        <label htmlFor=\\\"vertical\\\" style={{display: 'block'}}>Vertical</label>\\n                        <InputNumber id=\\\"vertical\\\" value={value19} onValueChange={(e) => setValue19(e.value)} mode=\\\"decimal\\\" showButtons buttonLayout=\\\"vertical\\\" style={{width: '4rem'}}\\n                            decrementButtonClassName=\\\"p-button-secondary\\\" incrementButtonClassName=\\\"p-button-secondary\\\" incrementButtonIcon=\\\"pi pi-plus\\\" decrementButtonIcon=\\\"pi pi-minus\\\" />\\n                    </div>\\n                </div>\\n            </div>\\n        </div>\\n    );\\n}\\n                \"}};return _this;}_createClass(InputNumberDoc,[{key:\"shouldComponentUpdate\",value:function shouldComponentUpdate(){return false;}},{key:\"render\",value:function render(){return/*#__PURE__*/React.createElement(\"div\",{className:\"content-section documentation\"},/*#__PURE__*/React.createElement(TabView,null,/*#__PURE__*/React.createElement(TabPanel,{header:\"Documentation\"},/*#__PURE__*/React.createElement(\"h5\",null,\"Import\"),/*#__PURE__*/React.createElement(CodeHighlight,{lang:\"js\"},\"\\nimport { InputNumber } from 'primereact/inputnumber';\\n\"),/*#__PURE__*/React.createElement(\"h5\",null,\"Getting Started\"),/*#__PURE__*/React.createElement(\"p\",null,\"InputNumber is used as a controlled input with \",/*#__PURE__*/React.createElement(\"i\",null,\"value\"),\" and \",/*#__PURE__*/React.createElement(\"i\",null,\"onValueChange\"),\" properties. Component always provides a number type although formatting on the input is a string.\"),/*#__PURE__*/React.createElement(CodeHighlight,null,\"\\n<InputNumber value={value} onValueChange={(e) => setValue(e.value)} />\\n\"),/*#__PURE__*/React.createElement(\"h5\",null,\"Decimal Mode\"),/*#__PURE__*/React.createElement(\"p\",null,\"Format is defined using the \",/*#__PURE__*/React.createElement(\"i\",null,\"mode\"),\" property, \\\"decimal\\\" is the default value allowing only integers when there is no other configuration.\"),/*#__PURE__*/React.createElement(CodeHighlight,null,\"\\n<InputNumber value={value} onValueChange={(e) => setValue(e.value)}  mode=\\\"decimal\\\" />\\n\"),/*#__PURE__*/React.createElement(\"p\",null,\"Fractions are configured with the \",/*#__PURE__*/React.createElement(\"i\",null,\"minFractionDigits\"),\" property. Optionally \",/*#__PURE__*/React.createElement(\"i\",null,\"maxFractionDigits\"),\" can be used to defined a boundary for the maximum digits.\"),/*#__PURE__*/React.createElement(CodeHighlight,null,\"\\n<InputNumber value={value1} onValueChange={(e) => setValue1(e.value)} mode=\\\"decimal\\\" minFractionDigits={2} />\\n<InputNumber value={value2} onValueChange={(e) => setValue2(e.value)} mode=\\\"decimal\\\" minFractionDigits={2} maxFracionDigits={2} />\\n\"),/*#__PURE__*/React.createElement(\"p\",null,/*#__PURE__*/React.createElement(\"i\",null,\"locale\"),\" option is available to set the localization information such as grouping and decimal symbols where default value is the browser locale. Locales are defined per \",/*#__PURE__*/React.createElement(\"a\",{href:\"https://tools.ietf.org/html/rfc5646\"},\"BCP Language Tag\"),\".\"),/*#__PURE__*/React.createElement(CodeHighlight,null,\"\\nUser Locale\\n<InputNumber value={value1} onValueChange={(e) => setValue1(e.value)} mode=\\\"decimal\\\" minFractionDigits={2} />\\n\\nUnited State Locale\\n<InputNumber value={value2} onValueChange={(e) => setValue2(e.value)} mode=\\\"decimal\\\" locale=\\\"en-US\\\" minFractionDigits={2}/>\\n\\nGerman Locale\\n<InputNumber value={value3} onValueChange={(e) => setValue3(e.value)} mode=\\\"decimal\\\" locale=\\\"de-DE\\\" minFractionDigits={2}/>\\n\\nIndian Locale\\n<InputNumber value={value4} onValueChange={(e) => setValue4(e.value)} mode=\\\"decimal\\\" locale=\\\"en-IN\\\" minFractionDigits={2} />\\n\"),/*#__PURE__*/React.createElement(\"h5\",null,\"Currency\"),/*#__PURE__*/React.createElement(\"p\",null,\"Currency formatting is specified by setting the \",/*#__PURE__*/React.createElement(\"i\",null,\"mode\"),\" option to currency and \",/*#__PURE__*/React.createElement(\"i\",null,\"currency\"),\" property. In addition \",/*#__PURE__*/React.createElement(\"i\",null,\"currencyDisplay\"),\" option allows how the currency is displayed, valid values are \\\"symbol\\\" (default) or \\\"code\\\".\"),/*#__PURE__*/React.createElement(CodeHighlight,null,\"\\nUnited States\\n<InputNumber value={value1} onValueChange={(e) => setValue1(e.value)} mode=\\\"currency\\\" currency=\\\"USD\\\" locale=\\\"en-US\\\" />\\n\\nGermany\\n<InputNumber value={value2} onValueChange={(e) => setValue2(e.value)} mode=\\\"currency\\\" currency=\\\"EUR\\\" locale=\\\"de-DE\\\" />\\n\\nIndia\\n<InputNumber value={value3} onValueChange={(e) => setValue3(e.value)} mode=\\\"currency\\\" currency=\\\"INR\\\" currencyDisplay=\\\"code\\\" locale=\\\"en-IN\\\"/>\\n\\nJapan\\n<InputNumber value={value4} onValueChange={(e) => setValue4(e.value)} mode=\\\"currency\\\" currency=\\\"JPY\\\" locale=\\\"jp-JP\\\"/>\\n\"),/*#__PURE__*/React.createElement(\"h5\",null,\"Prefix and Suffix\"),/*#__PURE__*/React.createElement(\"p\",null,\"Custom texts e.g. units can be placed before or after the input section with the \",/*#__PURE__*/React.createElement(\"i\",null,\"prefix\"),\" and \",/*#__PURE__*/React.createElement(\"i\",null,\"suffix\"),\" properties.\"),/*#__PURE__*/React.createElement(CodeHighlight,null,\"\\nMile\\n<InputNumber value={value1} onValueChange={(e) => setValue1(e.value)} suffix=\\\" mi\\\" />\\n\\nPercent\\n<InputNumber value={value2} onValueChange={(e) => setValue2(e.value)} prefix=\\\"%\\\" />\\n\\nExpiry\\n<InputNumber value={value3} onValueChange={(e) => setValue3(e.value)} prefix=\\\"Expires in \\\" suffix=\\\" days\\\" />\\n\\nTemperature\\n<InputNumber value={value4} onValueChange={(e) => setValue4(e.value)} prefix=\\\"&uarr; \\\" suffix=\\\"\\u2103\\\" min={0} max={40} />\\n\"),/*#__PURE__*/React.createElement(\"h5\",null,\"Buttons\"),/*#__PURE__*/React.createElement(\"p\",null,\"Spinner buttons is enabled using the \",/*#__PURE__*/React.createElement(\"i\",null,\"showButtons\"),\" options and layout is defined with the \",/*#__PURE__*/React.createElement(\"i\",null,\"buttonLayout\"),\". Default value is \\\"stacked\\\" whereas \\\"horizontal\\\" and \\\"stacked\\\" are alternatives. Note that even there are no buttons, up and down arrow keys can be used to spin the values with keyboard.\"),/*#__PURE__*/React.createElement(CodeHighlight,null,\"\\nStacked\\n<InputNumber value={value1} onValueChange={(e) => setValue1(e.value)} showButtons mode=\\\"currency\\\" currency=\\\"USD\\\" />\\n\\nHorizontal\\n<InputNumber value={value2} onValueChange={(e) => setValue2(e.value)} showButtons buttonLayout=\\\"horizontal\\\"\\n    decrementButtonClassName=\\\"p-button-danger\\\" incrementButtonClassName=\\\"p-button-success\\\" incrementButtonIcon=\\\"pi pi-plus\\\" decrementButtonIcon=\\\"pi pi-minus\\\" mode=\\\"currency\\\" currency=\\\"EUR\\\"/>\\n\\nVertical\\n<InputNumber value={value3} onValueChange={(e) => setValue3(e.value)} mode=\\\"decimal\\\" showButtons buttonLayout=\\\"vertical\\\" style={{width: '6em'}}\\n    decrementButtonClassName=\\\"p-button-secondary\\\" incrementButtonClassName=\\\"p-button-secondary\\\" incrementButtonIcon=\\\"pi pi-plus\\\" decrementButtonIcon=\\\"pi pi-minus\\\" />\\n\"),/*#__PURE__*/React.createElement(\"h5\",null,\"Step\"),/*#__PURE__*/React.createElement(\"p\",null,\"Step factor is 1 by default and can be customized with \",/*#__PURE__*/React.createElement(\"i\",null,\"step\"),\" option.\"),/*#__PURE__*/React.createElement(CodeHighlight,null,\"\\n<InputNumber value={value} onValueChange={(e) => setValue(e.value)} step={0.25} />\\n\"),/*#__PURE__*/React.createElement(\"h5\",null,\"Min and Max Boundaries\"),/*#__PURE__*/React.createElement(\"p\",null,\"Value to be entered can be restricted by configuring the \",/*#__PURE__*/React.createElement(\"i\",null,\"min\"),\" and \",/*#__PURE__*/React.createElement(\"i\",null,\"max\"),\" options.\"),/*#__PURE__*/React.createElement(CodeHighlight,null,\"\\n<InputNumber value={value} onValueChange={(e) => setValue1(e.value)} min={0} max={100} />\\n\"),/*#__PURE__*/React.createElement(\"h5\",null,\"Properties\"),/*#__PURE__*/React.createElement(\"div\",{className:\"doc-tablewrapper\"},/*#__PURE__*/React.createElement(\"table\",{className:\"doc-table\"},/*#__PURE__*/React.createElement(\"thead\",null,/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"th\",null,\"Name\"),/*#__PURE__*/React.createElement(\"th\",null,\"Type\"),/*#__PURE__*/React.createElement(\"th\",null,\"Default\"),/*#__PURE__*/React.createElement(\"th\",null,\"Description\"))),/*#__PURE__*/React.createElement(\"tbody\",null,/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"td\",null,\"value\"),/*#__PURE__*/React.createElement(\"td\",null,\"number\"),/*#__PURE__*/React.createElement(\"td\",null,\"null\"),/*#__PURE__*/React.createElement(\"td\",null,\"Value of the component.\")),/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"td\",null,\"format\"),/*#__PURE__*/React.createElement(\"td\",null,\"boolean\"),/*#__PURE__*/React.createElement(\"td\",null,\"true\"),/*#__PURE__*/React.createElement(\"td\",null,\"Whether to format the value.\")),/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"td\",null,\"showButtons\"),/*#__PURE__*/React.createElement(\"td\",null,\"boolean\"),/*#__PURE__*/React.createElement(\"td\",null,\"false\"),/*#__PURE__*/React.createElement(\"td\",null,\"Displays spinner buttons.\")),/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"td\",null,\"buttonLayout\"),/*#__PURE__*/React.createElement(\"td\",null,\"string\"),/*#__PURE__*/React.createElement(\"td\",null,\"stacked\"),/*#__PURE__*/React.createElement(\"td\",null,\"Layout of the buttons, valid values are \\\"stacked\\\" (default), \\\"horizontal\\\" and \\\"vertical\\\".\")),/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"td\",null,\"incrementButtonClassName\"),/*#__PURE__*/React.createElement(\"td\",null,\"string\"),/*#__PURE__*/React.createElement(\"td\",null,\"null\"),/*#__PURE__*/React.createElement(\"td\",null,\"Style class of the increment button.\")),/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"td\",null,\"decrementButtonClassName\"),/*#__PURE__*/React.createElement(\"td\",null,\"string\"),/*#__PURE__*/React.createElement(\"td\",null,\"null\"),/*#__PURE__*/React.createElement(\"td\",null,\"Style class of the decrement button.\")),/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"td\",null,\"incrementButtonIcon\"),/*#__PURE__*/React.createElement(\"td\",null,\"string\"),/*#__PURE__*/React.createElement(\"td\",null,\"pi pi-caret-up\"),/*#__PURE__*/React.createElement(\"td\",null,\"Style class of the increment button.\")),/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"td\",null,\"decrementButtonIcon\"),/*#__PURE__*/React.createElement(\"td\",null,\"string\"),/*#__PURE__*/React.createElement(\"td\",null,\"pi pi-caret-down\"),/*#__PURE__*/React.createElement(\"td\",null,\"Style class of the decrement button.\")),/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"td\",null,\"locale\"),/*#__PURE__*/React.createElement(\"td\",null,\"string\"),/*#__PURE__*/React.createElement(\"td\",null,\"null\"),/*#__PURE__*/React.createElement(\"td\",null,\"Locale to be used in formatting.\")),/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"td\",null,\"localeMatcher\"),/*#__PURE__*/React.createElement(\"td\",null,\"string\"),/*#__PURE__*/React.createElement(\"td\",null,\"best fit\"),/*#__PURE__*/React.createElement(\"td\",null,\"The locale matching algorithm to use. Possible values are \\\"lookup\\\" and \\\"best fit\\\"; the default is \\\"best fit\\\". See \",/*#__PURE__*/React.createElement(\"a\",{href:\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl#Locale_negotiation\"},\"Locale Negotation\"),\" for details.\")),/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"td\",null,\"mode\"),/*#__PURE__*/React.createElement(\"td\",null,\"string\"),/*#__PURE__*/React.createElement(\"td\",null,\"decimal\"),/*#__PURE__*/React.createElement(\"td\",null,\"Defines the behavior of the component, valid values are \\\"decimal\\\" and \\\"currency\\\".\")),/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"td\",null,\"prefix\"),/*#__PURE__*/React.createElement(\"td\",null,\"string\"),/*#__PURE__*/React.createElement(\"td\",null,\"null\"),/*#__PURE__*/React.createElement(\"td\",null,\"Text to display before the value.\")),/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"td\",null,\"suffix\"),/*#__PURE__*/React.createElement(\"td\",null,\"string\"),/*#__PURE__*/React.createElement(\"td\",null,\"decimal\"),/*#__PURE__*/React.createElement(\"td\",null,\"Text to display after the value.\")),/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"td\",null,\"currency\"),/*#__PURE__*/React.createElement(\"td\",null,\"string\"),/*#__PURE__*/React.createElement(\"td\",null,\"null\"),/*#__PURE__*/React.createElement(\"td\",null,\"The currency to use in currency formatting. Possible values are the \",/*#__PURE__*/React.createElement(\"a\",{href:\"https://www.currency-iso.org/en/home/tables/table-a1.html\"},\"ISO 4217 currency codes\"),\", such as \\\"USD\\\" for the US dollar, \\\"EUR\\\" for the euro, or \\\"CNY\\\" for the Chinese RMB. There is no default value; if the style is \\\"currency\\\", the currency property must be provided.\")),/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"td\",null,\"currencyDisplay\"),/*#__PURE__*/React.createElement(\"td\",null,\"string\"),/*#__PURE__*/React.createElement(\"td\",null,\"symbol\"),/*#__PURE__*/React.createElement(\"td\",null,\"How to display the currency in currency formatting. Possible values are \\\"symbol\\\" to use a localized currency symbol such as \\u20AC, \\xFC\\\"code\\\" to use the ISO currency code, \\\"name\\\" to use a localized currency name such as \\\"dollar\\\"; the default is \\\"symbol\\\".\")),/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"td\",null,\"useGrouping\"),/*#__PURE__*/React.createElement(\"td\",null,\"boolean\"),/*#__PURE__*/React.createElement(\"td\",null,\"true\"),/*#__PURE__*/React.createElement(\"td\",null,\"Whether to use grouping separators, such as thousands separators or thousand/lakh/crore separators.\")),/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"td\",null,\"minFractionDigits\"),/*#__PURE__*/React.createElement(\"td\",null,\"number\"),/*#__PURE__*/React.createElement(\"td\",null,\"null\"),/*#__PURE__*/React.createElement(\"td\",null,\"The minimum number of fraction digits to use. Possible values are from 0 to 20; the default for plain number and percent formatting is 0; the default for currency formatting is the number of minor unit digits provided by the \",/*#__PURE__*/React.createElement(\"a\",{href:\"https://www.currency-iso.org/en/home/tables/table-a1.html\"},\"ISO 4217 currency code list\"),\" (2 if the list doesn't provide that information).\")),/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"td\",null,\"maxFractionDigits\"),/*#__PURE__*/React.createElement(\"td\",null,\"number\"),/*#__PURE__*/React.createElement(\"td\",null,\"null\"),/*#__PURE__*/React.createElement(\"td\",null,\"The maximum number of fraction digits to use. Possible values are from 0 to 20; the default for plain number formatting is the larger of minimumFractionDigits and 3; the default for currency formatting is the larger of minimumFractionDigits and the number of minor unit digits provided by the \",/*#__PURE__*/React.createElement(\"a\",{href:\"https://www.currency-iso.org/en/home/tables/table-a1.html\"},\"ISO 4217 currency code list\"),\"(2 if the list doesn't provide that information).\")),/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"td\",null,\"id\"),/*#__PURE__*/React.createElement(\"td\",null,\"string\"),/*#__PURE__*/React.createElement(\"td\",null,\"null\"),/*#__PURE__*/React.createElement(\"td\",null,\"Identifier of the element.\")),/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"td\",null,\"name\"),/*#__PURE__*/React.createElement(\"td\",null,\"string\"),/*#__PURE__*/React.createElement(\"td\",null,\"null\"),/*#__PURE__*/React.createElement(\"td\",null,\"Name of the input element.\")),/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"td\",null,\"type\"),/*#__PURE__*/React.createElement(\"td\",null,\"string\"),/*#__PURE__*/React.createElement(\"td\",null,\"text\"),/*#__PURE__*/React.createElement(\"td\",null,\"Type of the input element.\")),/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"td\",null,\"step\"),/*#__PURE__*/React.createElement(\"td\",null,\"number\"),/*#__PURE__*/React.createElement(\"td\",null,\"1\"),/*#__PURE__*/React.createElement(\"td\",null,\"Step factor to increment/decrement the value.\")),/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"td\",null,\"min\"),/*#__PURE__*/React.createElement(\"td\",null,\"number\"),/*#__PURE__*/React.createElement(\"td\",null,\"null\"),/*#__PURE__*/React.createElement(\"td\",null,\"Mininum boundary value.\")),/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"td\",null,\"max\"),/*#__PURE__*/React.createElement(\"td\",null,\"number\"),/*#__PURE__*/React.createElement(\"td\",null,\"null\"),/*#__PURE__*/React.createElement(\"td\",null,\"Maximum boundary value.\")),/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"td\",null,\"disabled\"),/*#__PURE__*/React.createElement(\"td\",null,\"boolean\"),/*#__PURE__*/React.createElement(\"td\",null,\"false\"),/*#__PURE__*/React.createElement(\"td\",null,\"When present, it specifies that the element should be disabled.\")),/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"td\",null,\"required\"),/*#__PURE__*/React.createElement(\"td\",null,\"boolean\"),/*#__PURE__*/React.createElement(\"td\",null,\"false\"),/*#__PURE__*/React.createElement(\"td\",null,\"When present, it specifies that an input field must be filled out before submitting the form.\")),/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"td\",null,\"tabIndex\"),/*#__PURE__*/React.createElement(\"td\",null,\"number\"),/*#__PURE__*/React.createElement(\"td\",null,\"null\"),/*#__PURE__*/React.createElement(\"td\",null,\"Index of the element in tabbing order.\")),/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"td\",null,\"autoFocus\"),/*#__PURE__*/React.createElement(\"td\",null,\"boolean\"),/*#__PURE__*/React.createElement(\"td\",null,\"false\"),/*#__PURE__*/React.createElement(\"td\",null,\"When present, it specifies that the component should automatically get focus on load.\")),/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"td\",null,\"pattern\"),/*#__PURE__*/React.createElement(\"td\",null,\"string\"),/*#__PURE__*/React.createElement(\"td\",null,\"null\"),/*#__PURE__*/React.createElement(\"td\",null,\"The pattern attribute specifies a regular expression that the element's value is checked against on form submission.\")),/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"td\",null,\"inputmode\"),/*#__PURE__*/React.createElement(\"td\",null,\"string\"),/*#__PURE__*/React.createElement(\"td\",null,\"null\"),/*#__PURE__*/React.createElement(\"td\",null,\"The inputmode attribute provides a hint to browsers for devices with onscreen keyboards to help them decide which keyboard to display.\")),/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"td\",null,\"placeholder\"),/*#__PURE__*/React.createElement(\"td\",null,\"string\"),/*#__PURE__*/React.createElement(\"td\",null,\"null\"),/*#__PURE__*/React.createElement(\"td\",null,\"Hint text for the input field.\")),/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"td\",null,\"readOnly\"),/*#__PURE__*/React.createElement(\"td\",null,\"boolean\"),/*#__PURE__*/React.createElement(\"td\",null,\"false\"),/*#__PURE__*/React.createElement(\"td\",null,\"When present, it specifies that the element should be read-only.\")),/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"td\",null,\"size\"),/*#__PURE__*/React.createElement(\"td\",null,\"number\"),/*#__PURE__*/React.createElement(\"td\",null,\"null\"),/*#__PURE__*/React.createElement(\"td\",null,\"Size of the input field.\")),/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"td\",null,\"style\"),/*#__PURE__*/React.createElement(\"td\",null,\"string\"),/*#__PURE__*/React.createElement(\"td\",null,\"null\"),/*#__PURE__*/React.createElement(\"td\",null,\"Inline style of the component.\")),/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"td\",null,\"className\"),/*#__PURE__*/React.createElement(\"td\",null,\"string\"),/*#__PURE__*/React.createElement(\"td\",null,\"null\"),/*#__PURE__*/React.createElement(\"td\",null,\"Style class of the element.\")),/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"td\",null,\"inputId\"),/*#__PURE__*/React.createElement(\"td\",null,\"string\"),/*#__PURE__*/React.createElement(\"td\",null,\"null\"),/*#__PURE__*/React.createElement(\"td\",null,\"Identifier of the input element.\")),/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"td\",null,\"inputStyle\"),/*#__PURE__*/React.createElement(\"td\",null,\"string\"),/*#__PURE__*/React.createElement(\"td\",null,\"null\"),/*#__PURE__*/React.createElement(\"td\",null,\"Inline style of the input field.\")),/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"td\",null,\"inputClassName\"),/*#__PURE__*/React.createElement(\"td\",null,\"string\"),/*#__PURE__*/React.createElement(\"td\",null,\"null\"),/*#__PURE__*/React.createElement(\"td\",null,\"Inline style of the input field.\")),/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"td\",null,\"tooltip\"),/*#__PURE__*/React.createElement(\"td\",null,\"any\"),/*#__PURE__*/React.createElement(\"td\",null,\"null\"),/*#__PURE__*/React.createElement(\"td\",null,\"Content of the tooltip.\")),/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"td\",null,\"tooltipOptions\"),/*#__PURE__*/React.createElement(\"td\",null,\"object\"),/*#__PURE__*/React.createElement(\"td\",null,\"null\"),/*#__PURE__*/React.createElement(\"td\",null,\"Configuration of the tooltip, refer to the tooltip documentation for more information.\")),/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"td\",null,\"ariaLabelledBy\"),/*#__PURE__*/React.createElement(\"td\",null,\"string\"),/*#__PURE__*/React.createElement(\"td\",null,\"null\"),/*#__PURE__*/React.createElement(\"td\",null,\"Establishes relationships between the component and label(s) where its value should be one or more element IDs.\"))))),/*#__PURE__*/React.createElement(\"h5\",null,\"Events\"),/*#__PURE__*/React.createElement(\"div\",{className:\"doc-tablewrapper\"},/*#__PURE__*/React.createElement(\"table\",{className:\"doc-table\"},/*#__PURE__*/React.createElement(\"thead\",null,/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"th\",null,\"Name\"),/*#__PURE__*/React.createElement(\"th\",null,\"Parameters\"),/*#__PURE__*/React.createElement(\"th\",null,\"Description\"))),/*#__PURE__*/React.createElement(\"tbody\",null,/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"td\",null,\"onValueChange\"),/*#__PURE__*/React.createElement(\"td\",null,\"event.originalEvent: Browser event \",/*#__PURE__*/React.createElement(\"br\",null),\"event.value: New value\"),/*#__PURE__*/React.createElement(\"td\",null,\"Callback to invoke after validation check and value change.\")),/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"td\",null,\"onChange\"),/*#__PURE__*/React.createElement(\"td\",null,\"event.originalEvent: Browser event \",/*#__PURE__*/React.createElement(\"br\",null),\"event.value: New value\"),/*#__PURE__*/React.createElement(\"td\",null,\"Callback to invoke on value change.\")),/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"td\",null,\"onFocus\"),/*#__PURE__*/React.createElement(\"td\",null,\"event: Browser event\"),/*#__PURE__*/React.createElement(\"td\",null,\"Callback to invoke when input receives focus.\")),/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"td\",null,\"onBlur\"),/*#__PURE__*/React.createElement(\"td\",null,\"event: Browser event\"),/*#__PURE__*/React.createElement(\"td\",null,\"Callback to invoke when input loses focus.\")),/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"td\",null,\"onKeyDown\"),/*#__PURE__*/React.createElement(\"td\",null,\"event: Browser event.\"),/*#__PURE__*/React.createElement(\"td\",null,\"Callback to invoke when the key pressed.\"))))),/*#__PURE__*/React.createElement(\"h5\",null,\"Styling\"),/*#__PURE__*/React.createElement(\"p\",null,\"Following is the list of structural style classes, for theming classes visit \",/*#__PURE__*/React.createElement(Link,{to:\"/theming\"},\" theming\"),\" page.\"),/*#__PURE__*/React.createElement(\"div\",{className:\"doc-tablewrapper\"},/*#__PURE__*/React.createElement(\"table\",{className:\"doc-table\"},/*#__PURE__*/React.createElement(\"thead\",null,/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"th\",null,\"Name\"),/*#__PURE__*/React.createElement(\"th\",null,\"Element\"))),/*#__PURE__*/React.createElement(\"tbody\",null,/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"td\",null,\"p-inputnumber\"),/*#__PURE__*/React.createElement(\"td\",null,\"Container element\")),/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"td\",null,\"p-inputnumber-stacked\"),/*#__PURE__*/React.createElement(\"td\",null,\"Container element with stacked buttons.\")),/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"td\",null,\"p-inputnumber-horizontal\"),/*#__PURE__*/React.createElement(\"td\",null,\"Container element with horizontal buttons.\")),/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"td\",null,\"p-inputnumber-vertical\"),/*#__PURE__*/React.createElement(\"td\",null,\"Container element with vertical buttons.\")),/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"td\",null,\"p-inputnumber-input\"),/*#__PURE__*/React.createElement(\"td\",null,\"Input element\")),/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"td\",null,\"p-inputnumber-button\"),/*#__PURE__*/React.createElement(\"td\",null,\"Input element\")),/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"td\",null,\"p-inputnumber-button-up\"),/*#__PURE__*/React.createElement(\"td\",null,\"Increment button\")),/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"td\",null,\"p-inputnumber-button-down\"),/*#__PURE__*/React.createElement(\"td\",null,\"Decrement button\")),/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"td\",null,\"p-inputnumber-button-icon\"),/*#__PURE__*/React.createElement(\"td\",null,\"Button icon\"))))),/*#__PURE__*/React.createElement(\"h5\",null,\"Dependencies\"),/*#__PURE__*/React.createElement(\"p\",null,\"None.\")),useLiveEditorTabs({name:'InputNumberDemo',sources:this.sources})));}}]);return InputNumberDoc;}(Component);","map":{"version":3,"sources":["C:/Users/zura.ph/WebstormProjects/zz-regul/src/showcase/inputnumber/InputNumberDoc.js"],"names":["React","Component","Link","TabView","TabPanel","useLiveEditorTabs","CodeHighlight","InputNumberDoc","props","sources","tabName","content","name"],"mappings":"wpBAAA,MAAOA,CAAAA,KAAP,EAAgBC,SAAhB,KAAiC,OAAjC,CACA,OAASC,IAAT,KAAqB,kBAArB,CACA,OAASC,OAAT,CAAkBC,QAAlB,KAAkC,kCAAlC,CACA,OAASC,iBAAT,KAAiC,0BAAjC,CACA,OAASC,aAAT,KAA8B,gCAA9B,CAEA,UAAaC,CAAAA,cAAb,gHAEI,wBAAYC,KAAZ,CAAmB,gDACf,uBAAMA,KAAN,EAEA,MAAKC,OAAL,CAAe,CACX,QAAS,CACLC,OAAO,CAAE,cADJ,CAELC,OAAO,yySAFF,CADE,CAmJX,QAAS,CACLD,OAAO,CAAE,cADJ,CAELC,OAAO,0tRAFF,CAnJE,CA6RX,KAAM,CACFD,OAAO,CAAE,WADP,CAEFC,OAAO,0tRAFL,CA7RK,CAAf,CAHe,aA2alB,CA7aL,gEA+aI,gCAAwB,CACpB,MAAO,MAAP,CACH,CAjbL,sBAmbI,iBAAS,CACL,mBACI,2BAAK,SAAS,CAAC,+BAAf,eACR,oBAAC,OAAD,mBACI,oBAAC,QAAD,EAAU,MAAM,CAAC,eAAjB,eACI,uCADJ,cAER,oBAAC,aAAD,EAAe,IAAI,CAAC,IAApB,8DAFQ,cAQI,gDARJ,cASI,4FAAkD,qCAAlD,sBAAmE,6CAAnE,sGATJ,cAWR,oBAAC,aAAD,mFAXQ,cAiBI,6CAjBJ,cAkBI,yEAA+B,oCAA/B,4GAlBJ,cAmBR,oBAAC,aAAD,qGAnBQ,cAyBI,+EAAqC,iDAArC,uCAAmF,iDAAnF,8DAzBJ,cA0BR,oBAAC,aAAD,kQA1BQ,cAiCI,0CAAG,sCAAH,kLAAiL,yBAAG,IAAI,CAAC,qCAAR,qBAAjL,KAjCJ,cAkCR,oBAAC,aAAD,skBAlCQ,cAkDI,yCAlDJ,cAmDI,6FAAmD,oCAAnD,yCAAsF,wCAAtF,wCAA4H,+CAA5H,oGAnDJ,cAqDR,oBAAC,aAAD,skBArDQ,cAqEI,kDArEJ,cAsEI,8HAAoF,sCAApF,sBAAsG,sCAAtG,gBAtEJ,cAuER,oBAAC,aAAD,udAvEQ,cAuFI,wCAvFJ,cAwFI,kFAAwC,2CAAxC,yDAAkG,4CAAlG,qMAxFJ,cA0FR,oBAAC,aAAD,syBA1FQ,cAyGI,qCAzGJ,cA0GI,oGAA0D,oCAA1D,YA1GJ,cA2GR,oBAAC,aAAD,+FA3GQ,cAkHI,uDAlHJ,cAmHI,sGAA4D,mCAA5D,sBAA2E,mCAA3E,aAnHJ,cAoHR,oBAAC,aAAD,sGApHQ,cA0HI,2CA1HJ,cA2HI,2BAAK,SAAS,CAAC,kBAAf,eACI,6BAAO,SAAS,CAAC,WAAjB,eACI,8CACI,2CACI,qCADJ,cAEI,qCAFJ,cAGI,wCAHJ,cAII,4CAJJ,CADJ,CADJ,cASI,8CACI,2CACI,sCADJ,cAEI,uCAFJ,cAGI,qCAHJ,cAII,wDAJJ,CADJ,cAOI,2CACI,uCADJ,cAEI,wCAFJ,cAGI,qCAHJ,cAII,6DAJJ,CAPJ,cAaI,2CACI,4CADJ,cAEI,wCAFJ,cAGI,sCAHJ,cAII,0DAJJ,CAbJ,cAmBI,2CACI,6CADJ,cAEI,uCAFJ,cAGI,wCAHJ,cAII,gIAJJ,CAnBJ,cAyBI,2CACI,yDADJ,cAEI,uCAFJ,cAGI,qCAHJ,cAII,qEAJJ,CAzBJ,cA+BI,2CACI,yDADJ,cAEI,uCAFJ,cAGI,qCAHJ,cAII,qEAJJ,CA/BJ,cAqCI,2CACI,oDADJ,cAEI,uCAFJ,cAGI,+CAHJ,cAII,qEAJJ,CArCJ,cA2CI,2CACI,oDADJ,cAEI,uCAFJ,cAGI,iDAHJ,cAII,qEAJJ,CA3CJ,cAiDI,2CACI,uCADJ,cAEI,uCAFJ,cAGI,qCAHJ,cAII,iEAJJ,CAjDJ,cAuDI,2CACI,8CADJ,cAEI,uCAFJ,cAGI,yCAHJ,cAII,sKACQ,yBAAG,IAAI,CAAC,0GAAR,sBADR,iBAJJ,CAvDJ,cA+DI,2CACI,qCADJ,cAEI,uCAFJ,cAGI,wCAHJ,cAII,sHAJJ,CA/DJ,cAqEI,2CACI,uCADJ,cAEI,uCAFJ,cAGI,qCAHJ,cAII,kEAJJ,CArEJ,cA2EI,2CACI,uCADJ,cAEI,uCAFJ,cAGI,wCAHJ,cAII,iEAJJ,CA3EJ,cAiFI,2CACI,yCADJ,cAEI,uCAFJ,cAGI,qCAHJ,cAII,kHAAwE,yBAAG,IAAI,CAAC,2DAAR,4BAAxE,+LAJJ,CAjFJ,cAyFI,2CACI,gDADJ,cAEI,uCAFJ,cAGI,uCAHJ,cAII,0SAJJ,CAzFJ,cAgGI,2CACI,4CADJ,cAEI,wCAFJ,cAGI,qCAHJ,cAII,oIAJJ,CAhGJ,cAsGI,2CACI,kDADJ,cAEI,uCAFJ,cAGI,qCAHJ,cAII,+QACsC,yBAAG,IAAI,CAAC,2DAAR,gCADtC,sDAJJ,CAtGJ,cA6GI,2CACI,kDADJ,cAEI,uCAFJ,cAGI,qCAHJ,cAII,mVAE+F,yBAAG,IAAI,CAAC,2DAAR,gCAF/F,qDAJJ,CA7GJ,cAsHI,2CACI,mCADJ,cAEI,uCAFJ,cAGI,qCAHJ,cAII,2DAJJ,CAtHJ,cA4HI,2CACI,qCADJ,cAEI,uCAFJ,cAGI,qCAHJ,cAII,2DAJJ,CA5HJ,cAkII,2CACI,qCADJ,cAEI,uCAFJ,cAGI,qCAHJ,cAII,2DAJJ,CAlIJ,cAwII,2CACI,qCADJ,cAEI,uCAFJ,cAGI,kCAHJ,cAII,8EAJJ,CAxIJ,cA8II,2CACI,oCADJ,cAEI,uCAFJ,cAGI,qCAHJ,cAII,wDAJJ,CA9IJ,cAoJI,2CACI,oCADJ,cAEI,uCAFJ,cAGI,qCAHJ,cAII,wDAJJ,CApJJ,cA0JI,2CACG,yCADH,cAEG,wCAFH,cAGG,sCAHH,cAIG,gGAJH,CA1JJ,cAgKI,2CACI,yCADJ,cAEI,wCAFJ,cAGI,sCAHJ,cAII,8HAJJ,CAhKJ,cAsKI,2CACI,yCADJ,cAEI,uCAFJ,cAGI,qCAHJ,cAII,uEAJJ,CAtKJ,cA4KI,2CACI,0CADJ,cAEI,wCAFJ,cAGI,sCAHJ,cAII,sHAJJ,CA5KJ,cAkLI,2CACI,wCADJ,cAEI,uCAFJ,cAGI,qCAHJ,cAII,qJAJJ,CAlLJ,cAwLI,2CACI,0CADJ,cAEI,uCAFJ,cAGI,qCAHJ,cAII,uKAJJ,CAxLJ,cA8LI,2CACI,4CADJ,cAEI,uCAFJ,cAGI,qCAHJ,cAII,+DAJJ,CA9LJ,cAoMI,2CACI,yCADJ,cAEI,wCAFJ,cAGI,sCAHJ,cAII,iGAJJ,CApMJ,cA0MI,2CACI,qCADJ,cAEI,uCAFJ,cAGI,qCAHJ,cAII,yDAJJ,CA1MJ,cAgNI,2CACI,sCADJ,cAEI,uCAFJ,cAGI,qCAHJ,cAII,+DAJJ,CAhNJ,cAsNI,2CACI,0CADJ,cAEI,uCAFJ,cAGI,qCAHJ,cAII,4DAJJ,CAtNJ,cA4NI,2CACI,wCADJ,cAEI,uCAFJ,cAGI,qCAHJ,cAII,iEAJJ,CA5NJ,cAkOI,2CACI,2CADJ,cAEI,uCAFJ,cAGI,qCAHJ,cAII,iEAJJ,CAlOJ,cAwOI,2CACI,+CADJ,cAEI,uCAFJ,cAGI,qCAHJ,cAII,iEAJJ,CAxOJ,cA8OI,2CACI,wCADJ,cAEI,oCAFJ,cAGI,qCAHJ,cAII,wDAJJ,CA9OJ,cAoPI,2CACI,+CADJ,cAEI,uCAFJ,cAGI,qCAHJ,cAII,uHAJJ,CApPJ,cA0PI,2CACI,+CADJ,cAEI,uCAFJ,cAGI,qCAHJ,cAII,gJAJJ,CA1PJ,CATJ,CADJ,CA3HJ,cAyYI,uCAzYJ,cA0YI,2BAAK,SAAS,CAAC,kBAAf,eACI,6BAAO,SAAS,CAAC,WAAjB,eACI,8CACI,2CACI,qCADJ,cAEI,2CAFJ,cAGI,4CAHJ,CADJ,CADJ,cAQI,8CACI,2CACI,8CADJ,cAEI,iFAAuC,8BAAvC,0BAFJ,cAII,4FAJJ,CADJ,cAOI,2CACI,yCADJ,cAEI,iFAAuC,8BAAvC,0BAFJ,cAII,oEAJJ,CAPJ,cAaI,2CACI,wCADJ,cAEI,qDAFJ,cAGI,8EAHJ,CAbJ,cAkBI,2CACI,uCADJ,cAEI,qDAFJ,cAGI,2EAHJ,CAlBJ,cAuBI,2CACI,0CADJ,cAEI,sDAFJ,cAGI,yEAHJ,CAvBJ,CARJ,CADJ,CA1YJ,cAmbI,wCAnbJ,cAobI,0HAAgF,oBAAC,IAAD,EAAM,EAAE,CAAC,UAAT,aAAhF,UApbJ,cAqbI,2BAAK,SAAS,CAAC,kBAAf,eACI,6BAAO,SAAS,CAAC,WAAjB,eACI,8CACI,2CACI,qCADJ,cAEI,wCAFJ,CADJ,CADJ,cAOI,8CACI,2CACI,8CADJ,cAEI,kDAFJ,CADJ,cAKI,2CACI,sDADJ,cAEI,wEAFJ,CALJ,cASI,2CACI,yDADJ,cAEI,2EAFJ,CATJ,cAaI,2CACI,uDADJ,cAEI,yEAFJ,CAbJ,cAiBI,2CACI,oDADJ,cAEI,8CAFJ,CAjBJ,cAqBI,2CACI,qDADJ,cAEI,8CAFJ,CArBJ,cAyBI,2CACI,wDADJ,cAEI,iDAFJ,CAzBJ,cA6BI,2CACI,0DADJ,cAEI,iDAFJ,CA7BJ,cAiCI,2CACI,0DADJ,cAEI,4CAFJ,CAjCJ,CAPJ,CADJ,CArbJ,cAueI,6CAveJ,cAweI,qCAxeJ,CADJ,CA6eQN,iBAAiB,CAAC,CAAEO,IAAI,CAAE,iBAAR,CAA2BH,OAAO,CAAE,KAAKA,OAAzC,CAAD,CA7ezB,CADQ,CADJ,CAofH,CAx6BL,4BAAoCR,SAApC","sourcesContent":["import React, { Component } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { TabView, TabPanel } from '../../components/tabview/TabView';\r\nimport { useLiveEditorTabs }from '../liveeditor/LiveEditor';\r\nimport { CodeHighlight } from '../codehighlight/CodeHighlight';\r\n\r\nexport class InputNumberDoc extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.sources = {\r\n            'class': {\r\n                tabName: 'Class Source',\r\n                content: `\r\nimport React, { Component } from 'react';\r\nimport { InputNumber } from 'primereact/inputnumber';\r\n\r\nexport class InputNumberDemo extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            value1: 42723,\r\n            value2: 58151,\r\n            value3: 2351.35,\r\n            value4: 50,\r\n            value5: 151351,\r\n            value6: 115744,\r\n            value7: 635524,\r\n            value8: 732762,\r\n            value9: 1500,\r\n            value10: 2500,\r\n            value11: 4250,\r\n            value12: 5002,\r\n            value13: 20,\r\n            value14: 50,\r\n            value15: 10,\r\n            value16: 20,\r\n            value17: 20,\r\n            value18: 10.50,\r\n            value19: 25,\r\n            value20: 50\r\n        };\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div className=\"card\">\r\n                    <h5>Numerals</h5>\r\n                    <div className=\"p-fluid p-grid p-formgrid\">\r\n                        <div className=\"p-field p-col-12 p-md-3\">\r\n                            <label htmlFor=\"integeronly\">Integer Only</label>\r\n                            <InputNumber id=\"integeronly\" value={this.state.value1} onValueChange={(e) => this.setState({value1: e.value})} />\r\n                        </div>\r\n                        <div className=\"p-field p-col-12 p-md-3\">\r\n                            <label htmlFor=\"withoutgrouping\">Without Grouping</label>\r\n                            <InputNumber id=\"withoutgrouping\" value={this.state.value2} onValueChange={(e) => this.setState({value2: e.value})} mode=\"decimal\" useGrouping={false} />\r\n                        </div>\r\n                        <div className=\"p-field p-col-12 p-md-3\">\r\n                            <label htmlFor=\"minmaxfraction\">Min-Max Fraction Digits</label>\r\n                            <InputNumber id=\"minmaxfraction\" value={this.state.value3} onValueChange={(e) => this.setState({value3: e.value})} mode=\"decimal\" minFractionDigits={2} maxFractionDigits={5} />\r\n                        </div>\r\n                        <div className=\"p-field p-col-12 p-md-3\">\r\n                            <label htmlFor=\"minmax\">Min-Max Boundaries</label>\r\n                            <InputNumber id=\"minmax\" value={this.state.value4} onValueChange={(e) => this.setState({value4: e.value})} mode=\"decimal\" min={0} max={100} />\r\n                        </div>\r\n\r\n                        <div className=\"p-field p-col-12 p-md-3\">\r\n                            <label htmlFor=\"locale-user\">User Locale</label>\r\n                            <InputNumber id=\"locale-user\" value={this.state.value5} onValueChange={(e) => this.setState({value5: e.value})} mode=\"decimal\" minFractionDigits={2} />\r\n                        </div>\r\n                        <div className=\"p-field p-col-12 p-md-3\">\r\n                            <label htmlFor=\"locale-us\">United States Locale</label>\r\n                            <InputNumber id=\"locale-us\" value={this.state.value6} onValueChange={(e) => this.setState({value6: e.value})} mode=\"decimal\" locale=\"en-US\" minFractionDigits={2}/>\r\n                        </div>\r\n                        <div className=\"p-field p-col-12 p-md-3\">\r\n                            <label htmlFor=\"locale-german\">German Locale</label>\r\n                            <InputNumber id=\"locale-german\" value={this.state.value7} onValueChange={(e) => this.setState({value7: e.value})} mode=\"decimal\" locale=\"de-DE\" minFractionDigits={2}/>\r\n                        </div>\r\n                        <div className=\"p-field p-col-12 p-md-3\">\r\n                            <label htmlFor=\"locale-indian\">Indian Locale</label>\r\n                            <InputNumber id=\"locale-indian\" value={this.state.value8} onValueChange={(e) => this.setState({value8: e.value})} mode=\"decimal\" locale=\"en-IN\" minFractionDigits={2} />\r\n                        </div>\r\n                    </div>\r\n\r\n                    <h5>Currency</h5>\r\n                    <div className=\"p-grid p-fluid\">\r\n                        <div className=\"p-field p-col-12 p-md-3\">\r\n                            <label htmlFor=\"currency-us\">United States</label>\r\n                            <InputNumber id=\"currency-us\" value={this.state.value9} onValueChange={(e) => this.setState({value9: e.value})} mode=\"currency\" currency=\"USD\" locale=\"en-US\" />\r\n                        </div>\r\n                        <div className=\"p-field p-col-12 p-md-3\">\r\n                            <label htmlFor=\"currency-germany\">Germany</label>\r\n                            <InputNumber id=\"currency-germany\" value={this.state.value10} onValueChange={(e) => this.setState({value10: e.value})} mode=\"currency\" currency=\"EUR\" locale=\"de-DE\" />\r\n                        </div>\r\n                        <div className=\"p-field p-col-12 p-md-3\">\r\n                            <label htmlFor=\"currency-india\">India</label>\r\n                            <InputNumber id=\"currency-india\" value={this.state.value11} onValueChange={(e) => this.setState({value11: e.value})} mode=\"currency\" currency=\"INR\" currencyDisplay=\"code\" locale=\"en-IN\"/>\r\n                        </div>\r\n                        <div className=\"p-field p-col-12 p-md-3\">\r\n                            <label htmlFor=\"currency-japan\">Japan</label>\r\n                            <InputNumber id=\"currency-japan\" value={this.state.value12} onValueChange={(e) => this.setState({value12: e.value})} mode=\"currency\" currency=\"JPY\" locale=\"jp-JP\"/>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <h5>Prefix and Suffix</h5>\r\n                    <div className=\"p-grid p-fluid\">\r\n                        <div className=\"p-field p-col-12 p-md-3\">\r\n                            <label htmlFor=\"mile\">Mile</label>\r\n                            <InputNumber id=\"mile\" value={this.state.value13} onValueChange={(e) => this.setState({value13: e.value})} suffix=\" mi\" />\r\n                        </div>\r\n                        <div className=\"p-field p-col-12 p-md-3\">\r\n                            <label htmlFor=\"percent\">Percent</label>\r\n                            <InputNumber id=\"percent\" value={this.state.value14} onValueChange={(e) => this.setState({value14: e.value})} prefix=\"%\" />\r\n                        </div>\r\n                        <div className=\"p-field p-col-12 p-md-3\">\r\n                            <label htmlFor=\"expiry\">Expiry</label>\r\n                            <InputNumber id=\"expiry\" value={this.state.value15} onValueChange={(e) => this.setState({value15: e.value})}  prefix=\"Expires in \" suffix=\" days\" />\r\n                        </div>\r\n                        <div className=\"p-field p-col-12 p-md-3\">\r\n                            <label htmlFor=\"temperature\">Temperature</label>\r\n                            <InputNumber id=\"temperature\" value={this.state.value16} onValueChange={(e) => this.setState({value16: e.value})} prefix=\"&uarr; \" suffix=\"℃\" min={0} max={40} />\r\n                        </div>\r\n                    </div>\r\n\r\n                    <h5>Buttons</h5>\r\n                    <div className=\"p-grid p-fluid\">\r\n                        <div className=\"p-field p-col-12 p-md-3\">\r\n                            <label htmlFor=\"stacked\">Stacked</label>\r\n                            <InputNumber id=\"stacked\" value={this.state.value17} onValueChange={(e) => this.setState({value17: e.value})} showButtons mode=\"currency\" currency=\"USD\" />\r\n                        </div>\r\n                        <div className=\"p-field p-col-12 p-md-3\">\r\n                            <label htmlFor=\"horizontal\">Horizontal with Step</label>\r\n                            <InputNumber id=\"horizontal\" value={this.state.value18} onValueChange={(e) => this.setState({value18: e.value})} showButtons buttonLayout=\"horizontal\" step={0.25}\r\n                                decrementButtonClassName=\"p-button-danger\" incrementButtonClassName=\"p-button-success\" incrementButtonIcon=\"pi pi-plus\" decrementButtonIcon=\"pi pi-minus\" mode=\"currency\" currency=\"EUR\"/>\r\n                        </div>\r\n                        <div className=\"p-field p-col-12 p-md-3\">\r\n                            <label htmlFor=\"minmax-buttons\">Min-Max Boundaries</label>\r\n                            <InputNumber id=\"minmax-buttons\" value={this.state.value20} onValueChange={(e) => this.setState({value20: e.value})} mode=\"decimal\" showButtons min={0} max={100} />\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div className=\"p-grid\">\r\n                        <div className=\"p-field p-col-12 p-md-3\">\r\n                            <label htmlFor=\"vertical\" style={{display: 'block'}}>Vertical</label>\r\n                            <InputNumber id=\"vertical\" value={this.state.value19} onValueChange={(e) => this.setState({value19: e.value})} mode=\"decimal\" showButtons buttonLayout=\"vertical\" style={{width: '4rem'}}\r\n                                decrementButtonClassName=\"p-button-secondary\" incrementButtonClassName=\"p-button-secondary\" incrementButtonIcon=\"pi pi-plus\" decrementButtonIcon=\"pi pi-minus\" />\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n                `\r\n            },\r\n            'hooks': {\r\n                tabName: 'Hooks Source',\r\n                content: `\r\nimport React, { useState } from 'react';\r\nimport { InputNumber } from 'primereact/inputnumber';\r\n\r\nconst InputNumberDemo = () => {\r\n    const [value1, setValue1] = useState(42723);\r\n    const [value2, setValue2] = useState(58151);\r\n    const [value3, setValue3] = useState(2351.35);\r\n    const [value4, setValue4] = useState(50);\r\n    const [value5, setValue5] = useState(151351);\r\n    const [value6, setValue6] = useState(115744);\r\n    const [value7, setValue7] = useState(635524);\r\n    const [value8, setValue8] = useState(732762);\r\n    const [value9, setValue9] = useState(1500);\r\n    const [value10, setValue10] = useState(2500);\r\n    const [value11, setValue11] = useState(4250);\r\n    const [value12, setValue12] = useState(5002);\r\n    const [value13, setValue13] = useState(20);\r\n    const [value14, setValue14] = useState(50);\r\n    const [value15, setValue15] = useState(10);\r\n    const [value16, setValue16] = useState(20);\r\n    const [value17, setValue17] = useState(20);\r\n    const [value18, setValue18] = useState(10.50);\r\n    const [value19, setValue19] = useState(25);\r\n    const [value20, setValue20] = useState(50);\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"card\">\r\n                <h5>Numerals</h5>\r\n                <div className=\"p-fluid p-grid p-formgrid\">\r\n                    <div className=\"p-field p-col-12 p-md-3\">\r\n                        <label htmlFor=\"integeronly\">Integer Only</label>\r\n                        <InputNumber id=\"integeronly\" value={value1} onValueChange={(e) => setValue1(e.value)} />\r\n                    </div>\r\n                    <div className=\"p-field p-col-12 p-md-3\">\r\n                        <label htmlFor=\"withoutgrouping\">Without Grouping</label>\r\n                        <InputNumber id=\"withoutgrouping\" value={value2} onValueChange={(e) => setValue2(e.value)} mode=\"decimal\" useGrouping={false} />\r\n                    </div>\r\n                    <div className=\"p-field p-col-12 p-md-3\">\r\n                        <label htmlFor=\"minmaxfraction\">Min-Max Fraction Digits</label>\r\n                        <InputNumber id=\"minmaxfraction\" value={value3} onValueChange={(e) => setValue3(e.value)} mode=\"decimal\" minFractionDigits={2} maxFractionDigits={5} />\r\n                    </div>\r\n                    <div className=\"p-field p-col-12 p-md-3\">\r\n                        <label htmlFor=\"minmax\">Min-Max Boundaries</label>\r\n                        <InputNumber id=\"minmax\" value={value4} onValueChange={(e) => setValue4(e.value)} mode=\"decimal\" min={0} max={100} />\r\n                    </div>\r\n\r\n                    <div className=\"p-field p-col-12 p-md-3\">\r\n                        <label htmlFor=\"locale-user\">User Locale</label>\r\n                        <InputNumber id=\"locale-user\" value={value5} onValueChange={(e) => setValue5(e.value)} mode=\"decimal\" minFractionDigits={2} />\r\n                    </div>\r\n                    <div className=\"p-field p-col-12 p-md-3\">\r\n                        <label htmlFor=\"locale-us\">United States Locale</label>\r\n                        <InputNumber id=\"locale-us\" value={value6} onValueChange={(e) => setValue6(e.value)} mode=\"decimal\" locale=\"en-US\" minFractionDigits={2}/>\r\n                    </div>\r\n                    <div className=\"p-field p-col-12 p-md-3\">\r\n                        <label htmlFor=\"locale-german\">German Locale</label>\r\n                        <InputNumber id=\"locale-german\" value={value7} onValueChange={(e) => setValue7(e.value)} mode=\"decimal\" locale=\"de-DE\" minFractionDigits={2}/>\r\n                    </div>\r\n                    <div className=\"p-field p-col-12 p-md-3\">\r\n                        <label htmlFor=\"locale-indian\">Indian Locale</label>\r\n                        <InputNumber id=\"locale-indian\" value={value8} onValueChange={(e) => setValue8(e.value)} mode=\"decimal\" locale=\"en-IN\" minFractionDigits={2} />\r\n                    </div>\r\n                </div>\r\n\r\n                <h5>Currency</h5>\r\n                <div className=\"p-grid p-fluid\">\r\n                    <div className=\"p-field p-col-12 p-md-3\">\r\n                        <label htmlFor=\"currency-us\">United States</label>\r\n                        <InputNumber id=\"currency-us\" value={value9} onValueChange={(e) => setValue9(e.value)} mode=\"currency\" currency=\"USD\" locale=\"en-US\" />\r\n                    </div>\r\n                    <div className=\"p-field p-col-12 p-md-3\">\r\n                        <label htmlFor=\"currency-germany\">Germany</label>\r\n                        <InputNumber id=\"currency-germany\" value={value10} onValueChange={(e) => setValue10(e.value)} mode=\"currency\" currency=\"EUR\" locale=\"de-DE\" />\r\n                    </div>\r\n                    <div className=\"p-field p-col-12 p-md-3\">\r\n                        <label htmlFor=\"currency-india\">India</label>\r\n                        <InputNumber id=\"currency-india\" value={value11} onValueChange={(e) => setValue11(e.value)} mode=\"currency\" currency=\"INR\" currencyDisplay=\"code\" locale=\"en-IN\"/>\r\n                    </div>\r\n                    <div className=\"p-field p-col-12 p-md-3\">\r\n                        <label htmlFor=\"currency-japan\">Japan</label>\r\n                        <InputNumber id=\"currency-japan\" value={value12} onValueChange={(e) => setValue12(e.value)} mode=\"currency\" currency=\"JPY\" locale=\"jp-JP\"/>\r\n                    </div>\r\n                </div>\r\n\r\n                <h5>Prefix and Suffix</h5>\r\n                <div className=\"p-grid p-fluid\">\r\n                    <div className=\"p-field p-col-12 p-md-3\">\r\n                        <label htmlFor=\"mile\">Mile</label>\r\n                        <InputNumber id=\"mile\" value={value13} onValueChange={(e) => setValue13(e.value)} suffix=\" mi\" />\r\n                    </div>\r\n                    <div className=\"p-field p-col-12 p-md-3\">\r\n                        <label htmlFor=\"percent\">Percent</label>\r\n                        <InputNumber id=\"percent\" value={value14} onValueChange={(e) => setValue14(e.value)} prefix=\"%\" />\r\n                    </div>\r\n                    <div className=\"p-field p-col-12 p-md-3\">\r\n                        <label htmlFor=\"expiry\">Expiry</label>\r\n                        <InputNumber id=\"expiry\" value={value15} onValueChange={(e) => setValue15(e.value)}  prefix=\"Expires in \" suffix=\" days\" />\r\n                    </div>\r\n                    <div className=\"p-field p-col-12 p-md-3\">\r\n                        <label htmlFor=\"temperature\">Temperature</label>\r\n                        <InputNumber id=\"temperature\" value={value16} onValueChange={(e) => setValue16(e.value)} prefix=\"&uarr; \" suffix=\"℃\" min={0} max={40} />\r\n                    </div>\r\n                </div>\r\n\r\n                <h5>Buttons</h5>\r\n                <div className=\"p-grid p-fluid\">\r\n                    <div className=\"p-field p-col-12 p-md-3\">\r\n                        <label htmlFor=\"stacked\">Stacked</label>\r\n                        <InputNumber id=\"stacked\" value={value17} onValueChange={(e) => setValue17(e.value)} showButtons mode=\"currency\" currency=\"USD\" />\r\n                    </div>\r\n                    <div className=\"p-field p-col-12 p-md-3\">\r\n                        <label htmlFor=\"horizontal\">Horizontal with Step</label>\r\n                        <InputNumber id=\"horizontal\" value={value18} onValueChange={(e) => setValue18(e.value)} showButtons buttonLayout=\"horizontal\" step={0.25}\r\n                            decrementButtonClassName=\"p-button-danger\" incrementButtonClassName=\"p-button-success\" incrementButtonIcon=\"pi pi-plus\" decrementButtonIcon=\"pi pi-minus\" mode=\"currency\" currency=\"EUR\"/>\r\n                    </div>\r\n                    <div className=\"p-field p-col-12 p-md-3\">\r\n                        <label htmlFor=\"minmax-buttons\">Min-Max Boundaries</label>\r\n                        <InputNumber id=\"minmax-buttons\" value={value20} onValueChange={(e) => setValue20(e.value)} mode=\"decimal\" showButtons min={0} max={100} />\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"p-grid\">\r\n                    <div className=\"p-field p-col-12 p-md-3\">\r\n                        <label htmlFor=\"vertical\" style={{display: 'block'}}>Vertical</label>\r\n                        <InputNumber id=\"vertical\" value={value19} onValueChange={(e) => setValue19(e.value)} mode=\"decimal\" showButtons buttonLayout=\"vertical\" style={{width: '4rem'}}\r\n                            decrementButtonClassName=\"p-button-secondary\" incrementButtonClassName=\"p-button-secondary\" incrementButtonIcon=\"pi pi-plus\" decrementButtonIcon=\"pi pi-minus\" />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n                `\r\n            },\r\n            'ts': {\r\n                tabName: 'TS Source',\r\n                content: `\r\nimport React, { useState } from 'react';\r\nimport { InputNumber } from 'primereact/inputnumber';\r\n\r\nconst InputNumberDemo = () => {\r\n    const [value1, setValue1] = useState(42723);\r\n    const [value2, setValue2] = useState(58151);\r\n    const [value3, setValue3] = useState(2351.35);\r\n    const [value4, setValue4] = useState(50);\r\n    const [value5, setValue5] = useState(151351);\r\n    const [value6, setValue6] = useState(115744);\r\n    const [value7, setValue7] = useState(635524);\r\n    const [value8, setValue8] = useState(732762);\r\n    const [value9, setValue9] = useState(1500);\r\n    const [value10, setValue10] = useState(2500);\r\n    const [value11, setValue11] = useState(4250);\r\n    const [value12, setValue12] = useState(5002);\r\n    const [value13, setValue13] = useState(20);\r\n    const [value14, setValue14] = useState(50);\r\n    const [value15, setValue15] = useState(10);\r\n    const [value16, setValue16] = useState(20);\r\n    const [value17, setValue17] = useState(20);\r\n    const [value18, setValue18] = useState(10.50);\r\n    const [value19, setValue19] = useState(25);\r\n    const [value20, setValue20] = useState(50);\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"card\">\r\n                <h5>Numerals</h5>\r\n                <div className=\"p-fluid p-grid p-formgrid\">\r\n                    <div className=\"p-field p-col-12 p-md-3\">\r\n                        <label htmlFor=\"integeronly\">Integer Only</label>\r\n                        <InputNumber id=\"integeronly\" value={value1} onValueChange={(e) => setValue1(e.value)} />\r\n                    </div>\r\n                    <div className=\"p-field p-col-12 p-md-3\">\r\n                        <label htmlFor=\"withoutgrouping\">Without Grouping</label>\r\n                        <InputNumber id=\"withoutgrouping\" value={value2} onValueChange={(e) => setValue2(e.value)} mode=\"decimal\" useGrouping={false} />\r\n                    </div>\r\n                    <div className=\"p-field p-col-12 p-md-3\">\r\n                        <label htmlFor=\"minmaxfraction\">Min-Max Fraction Digits</label>\r\n                        <InputNumber id=\"minmaxfraction\" value={value3} onValueChange={(e) => setValue3(e.value)} mode=\"decimal\" minFractionDigits={2} maxFractionDigits={5} />\r\n                    </div>\r\n                    <div className=\"p-field p-col-12 p-md-3\">\r\n                        <label htmlFor=\"minmax\">Min-Max Boundaries</label>\r\n                        <InputNumber id=\"minmax\" value={value4} onValueChange={(e) => setValue4(e.value)} mode=\"decimal\" min={0} max={100} />\r\n                    </div>\r\n\r\n                    <div className=\"p-field p-col-12 p-md-3\">\r\n                        <label htmlFor=\"locale-user\">User Locale</label>\r\n                        <InputNumber id=\"locale-user\" value={value5} onValueChange={(e) => setValue5(e.value)} mode=\"decimal\" minFractionDigits={2} />\r\n                    </div>\r\n                    <div className=\"p-field p-col-12 p-md-3\">\r\n                        <label htmlFor=\"locale-us\">United States Locale</label>\r\n                        <InputNumber id=\"locale-us\" value={value6} onValueChange={(e) => setValue6(e.value)} mode=\"decimal\" locale=\"en-US\" minFractionDigits={2}/>\r\n                    </div>\r\n                    <div className=\"p-field p-col-12 p-md-3\">\r\n                        <label htmlFor=\"locale-german\">German Locale</label>\r\n                        <InputNumber id=\"locale-german\" value={value7} onValueChange={(e) => setValue7(e.value)} mode=\"decimal\" locale=\"de-DE\" minFractionDigits={2}/>\r\n                    </div>\r\n                    <div className=\"p-field p-col-12 p-md-3\">\r\n                        <label htmlFor=\"locale-indian\">Indian Locale</label>\r\n                        <InputNumber id=\"locale-indian\" value={value8} onValueChange={(e) => setValue8(e.value)} mode=\"decimal\" locale=\"en-IN\" minFractionDigits={2} />\r\n                    </div>\r\n                </div>\r\n\r\n                <h5>Currency</h5>\r\n                <div className=\"p-grid p-fluid\">\r\n                    <div className=\"p-field p-col-12 p-md-3\">\r\n                        <label htmlFor=\"currency-us\">United States</label>\r\n                        <InputNumber id=\"currency-us\" value={value9} onValueChange={(e) => setValue9(e.value)} mode=\"currency\" currency=\"USD\" locale=\"en-US\" />\r\n                    </div>\r\n                    <div className=\"p-field p-col-12 p-md-3\">\r\n                        <label htmlFor=\"currency-germany\">Germany</label>\r\n                        <InputNumber id=\"currency-germany\" value={value10} onValueChange={(e) => setValue10(e.value)} mode=\"currency\" currency=\"EUR\" locale=\"de-DE\" />\r\n                    </div>\r\n                    <div className=\"p-field p-col-12 p-md-3\">\r\n                        <label htmlFor=\"currency-india\">India</label>\r\n                        <InputNumber id=\"currency-india\" value={value11} onValueChange={(e) => setValue11(e.value)} mode=\"currency\" currency=\"INR\" currencyDisplay=\"code\" locale=\"en-IN\"/>\r\n                    </div>\r\n                    <div className=\"p-field p-col-12 p-md-3\">\r\n                        <label htmlFor=\"currency-japan\">Japan</label>\r\n                        <InputNumber id=\"currency-japan\" value={value12} onValueChange={(e) => setValue12(e.value)} mode=\"currency\" currency=\"JPY\" locale=\"jp-JP\"/>\r\n                    </div>\r\n                </div>\r\n\r\n                <h5>Prefix and Suffix</h5>\r\n                <div className=\"p-grid p-fluid\">\r\n                    <div className=\"p-field p-col-12 p-md-3\">\r\n                        <label htmlFor=\"mile\">Mile</label>\r\n                        <InputNumber id=\"mile\" value={value13} onValueChange={(e) => setValue13(e.value)} suffix=\" mi\" />\r\n                    </div>\r\n                    <div className=\"p-field p-col-12 p-md-3\">\r\n                        <label htmlFor=\"percent\">Percent</label>\r\n                        <InputNumber id=\"percent\" value={value14} onValueChange={(e) => setValue14(e.value)} prefix=\"%\" />\r\n                    </div>\r\n                    <div className=\"p-field p-col-12 p-md-3\">\r\n                        <label htmlFor=\"expiry\">Expiry</label>\r\n                        <InputNumber id=\"expiry\" value={value15} onValueChange={(e) => setValue15(e.value)}  prefix=\"Expires in \" suffix=\" days\" />\r\n                    </div>\r\n                    <div className=\"p-field p-col-12 p-md-3\">\r\n                        <label htmlFor=\"temperature\">Temperature</label>\r\n                        <InputNumber id=\"temperature\" value={value16} onValueChange={(e) => setValue16(e.value)} prefix=\"&uarr; \" suffix=\"℃\" min={0} max={40} />\r\n                    </div>\r\n                </div>\r\n\r\n                <h5>Buttons</h5>\r\n                <div className=\"p-grid p-fluid\">\r\n                    <div className=\"p-field p-col-12 p-md-3\">\r\n                        <label htmlFor=\"stacked\">Stacked</label>\r\n                        <InputNumber id=\"stacked\" value={value17} onValueChange={(e) => setValue17(e.value)} showButtons mode=\"currency\" currency=\"USD\" />\r\n                    </div>\r\n                    <div className=\"p-field p-col-12 p-md-3\">\r\n                        <label htmlFor=\"horizontal\">Horizontal with Step</label>\r\n                        <InputNumber id=\"horizontal\" value={value18} onValueChange={(e) => setValue18(e.value)} showButtons buttonLayout=\"horizontal\" step={0.25}\r\n                            decrementButtonClassName=\"p-button-danger\" incrementButtonClassName=\"p-button-success\" incrementButtonIcon=\"pi pi-plus\" decrementButtonIcon=\"pi pi-minus\" mode=\"currency\" currency=\"EUR\"/>\r\n                    </div>\r\n                    <div className=\"p-field p-col-12 p-md-3\">\r\n                        <label htmlFor=\"minmax-buttons\">Min-Max Boundaries</label>\r\n                        <InputNumber id=\"minmax-buttons\" value={value20} onValueChange={(e) => setValue20(e.value)} mode=\"decimal\" showButtons min={0} max={100} />\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"p-grid\">\r\n                    <div className=\"p-field p-col-12 p-md-3\">\r\n                        <label htmlFor=\"vertical\" style={{display: 'block'}}>Vertical</label>\r\n                        <InputNumber id=\"vertical\" value={value19} onValueChange={(e) => setValue19(e.value)} mode=\"decimal\" showButtons buttonLayout=\"vertical\" style={{width: '4rem'}}\r\n                            decrementButtonClassName=\"p-button-secondary\" incrementButtonClassName=\"p-button-secondary\" incrementButtonIcon=\"pi pi-plus\" decrementButtonIcon=\"pi pi-minus\" />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n                `\r\n            }\r\n        }\r\n    }\r\n\r\n    shouldComponentUpdate() {\r\n        return false;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"content-section documentation\">\r\n    <TabView>\r\n        <TabPanel header=\"Documentation\">\r\n            <h5>Import</h5>\r\n<CodeHighlight lang=\"js\">\r\n{`\r\nimport { InputNumber } from 'primereact/inputnumber';\r\n`}\r\n</CodeHighlight>\r\n\r\n            <h5>Getting Started</h5>\r\n            <p>InputNumber is used as a controlled input with <i>value</i> and <i>onValueChange</i> properties. Component always provides a number type although formatting on the input is a string.</p>\r\n\r\n<CodeHighlight>\r\n{`\r\n<InputNumber value={value} onValueChange={(e) => setValue(e.value)} />\r\n`}\r\n</CodeHighlight>\r\n\r\n            <h5>Decimal Mode</h5>\r\n            <p>Format is defined using the <i>mode</i> property, \"decimal\" is the default value allowing only integers when there is no other configuration.</p>\r\n<CodeHighlight>\r\n{`\r\n<InputNumber value={value} onValueChange={(e) => setValue(e.value)}  mode=\"decimal\" />\r\n`}\r\n</CodeHighlight>\r\n\r\n            <p>Fractions are configured with the <i>minFractionDigits</i> property. Optionally <i>maxFractionDigits</i> can be used to defined a boundary for the maximum digits.</p>\r\n<CodeHighlight>\r\n{`\r\n<InputNumber value={value1} onValueChange={(e) => setValue1(e.value)} mode=\"decimal\" minFractionDigits={2} />\r\n<InputNumber value={value2} onValueChange={(e) => setValue2(e.value)} mode=\"decimal\" minFractionDigits={2} maxFracionDigits={2} />\r\n`}\r\n</CodeHighlight>\r\n\r\n            <p><i>locale</i> option is available to set the localization information such as grouping and decimal symbols where default value is the browser locale. Locales are defined per <a href=\"https://tools.ietf.org/html/rfc5646\">BCP Language Tag</a>.</p>\r\n<CodeHighlight>\r\n{`\r\nUser Locale\r\n<InputNumber value={value1} onValueChange={(e) => setValue1(e.value)} mode=\"decimal\" minFractionDigits={2} />\r\n\r\nUnited State Locale\r\n<InputNumber value={value2} onValueChange={(e) => setValue2(e.value)} mode=\"decimal\" locale=\"en-US\" minFractionDigits={2}/>\r\n\r\nGerman Locale\r\n<InputNumber value={value3} onValueChange={(e) => setValue3(e.value)} mode=\"decimal\" locale=\"de-DE\" minFractionDigits={2}/>\r\n\r\nIndian Locale\r\n<InputNumber value={value4} onValueChange={(e) => setValue4(e.value)} mode=\"decimal\" locale=\"en-IN\" minFractionDigits={2} />\r\n`}\r\n</CodeHighlight>\r\n\r\n            <h5>Currency</h5>\r\n            <p>Currency formatting is specified by setting the <i>mode</i> option to currency and <i>currency</i> property. In addition <i>currencyDisplay</i> option\r\n            allows how the currency is displayed, valid values are \"symbol\" (default) or \"code\".</p>\r\n<CodeHighlight>\r\n{`\r\nUnited States\r\n<InputNumber value={value1} onValueChange={(e) => setValue1(e.value)} mode=\"currency\" currency=\"USD\" locale=\"en-US\" />\r\n\r\nGermany\r\n<InputNumber value={value2} onValueChange={(e) => setValue2(e.value)} mode=\"currency\" currency=\"EUR\" locale=\"de-DE\" />\r\n\r\nIndia\r\n<InputNumber value={value3} onValueChange={(e) => setValue3(e.value)} mode=\"currency\" currency=\"INR\" currencyDisplay=\"code\" locale=\"en-IN\"/>\r\n\r\nJapan\r\n<InputNumber value={value4} onValueChange={(e) => setValue4(e.value)} mode=\"currency\" currency=\"JPY\" locale=\"jp-JP\"/>\r\n`}\r\n</CodeHighlight>\r\n\r\n            <h5>Prefix and Suffix</h5>\r\n            <p>Custom texts e.g. units can be placed before or after the input section with the <i>prefix</i> and <i>suffix</i> properties.</p>\r\n<CodeHighlight>\r\n{`\r\nMile\r\n<InputNumber value={value1} onValueChange={(e) => setValue1(e.value)} suffix=\" mi\" />\r\n\r\nPercent\r\n<InputNumber value={value2} onValueChange={(e) => setValue2(e.value)} prefix=\"%\" />\r\n\r\nExpiry\r\n<InputNumber value={value3} onValueChange={(e) => setValue3(e.value)} prefix=\"Expires in \" suffix=\" days\" />\r\n\r\nTemperature\r\n<InputNumber value={value4} onValueChange={(e) => setValue4(e.value)} prefix=\"&uarr; \" suffix=\"℃\" min={0} max={40} />\r\n`}\r\n</CodeHighlight>\r\n\r\n            <h5>Buttons</h5>\r\n            <p>Spinner buttons is enabled using the <i>showButtons</i> options and layout is defined with the <i>buttonLayout</i>. Default value is \"stacked\" whereas\r\n            \"horizontal\" and \"stacked\" are alternatives. Note that even there are no buttons, up and down arrow keys can be used to spin the values with keyboard.</p>\r\n<CodeHighlight>\r\n{`\r\nStacked\r\n<InputNumber value={value1} onValueChange={(e) => setValue1(e.value)} showButtons mode=\"currency\" currency=\"USD\" />\r\n\r\nHorizontal\r\n<InputNumber value={value2} onValueChange={(e) => setValue2(e.value)} showButtons buttonLayout=\"horizontal\"\r\n    decrementButtonClassName=\"p-button-danger\" incrementButtonClassName=\"p-button-success\" incrementButtonIcon=\"pi pi-plus\" decrementButtonIcon=\"pi pi-minus\" mode=\"currency\" currency=\"EUR\"/>\r\n\r\nVertical\r\n<InputNumber value={value3} onValueChange={(e) => setValue3(e.value)} mode=\"decimal\" showButtons buttonLayout=\"vertical\" style={{width: '6em'}}\r\n    decrementButtonClassName=\"p-button-secondary\" incrementButtonClassName=\"p-button-secondary\" incrementButtonIcon=\"pi pi-plus\" decrementButtonIcon=\"pi pi-minus\" />\r\n`}\r\n</CodeHighlight>\r\n\r\n            <h5>Step</h5>\r\n            <p>Step factor is 1 by default and can be customized with <i>step</i> option.</p>\r\n<CodeHighlight>\r\n{`\r\n<InputNumber value={value} onValueChange={(e) => setValue(e.value)} step={0.25} />\r\n`}\r\n</CodeHighlight>\r\n\r\n\r\n            <h5>Min and Max Boundaries</h5>\r\n            <p>Value to be entered can be restricted by configuring the <i>min</i> and <i>max</i> options.</p>\r\n<CodeHighlight>\r\n{`\r\n<InputNumber value={value} onValueChange={(e) => setValue1(e.value)} min={0} max={100} />\r\n`}\r\n</CodeHighlight>\r\n\r\n            <h5>Properties</h5>\r\n            <div className=\"doc-tablewrapper\">\r\n                <table className=\"doc-table\">\r\n                    <thead>\r\n                        <tr>\r\n                            <th>Name</th>\r\n                            <th>Type</th>\r\n                            <th>Default</th>\r\n                            <th>Description</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        <tr>\r\n                            <td>value</td>\r\n                            <td>number</td>\r\n                            <td>null</td>\r\n                            <td>Value of the component.</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>format</td>\r\n                            <td>boolean</td>\r\n                            <td>true</td>\r\n                            <td>Whether to format the value.</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>showButtons</td>\r\n                            <td>boolean</td>\r\n                            <td>false</td>\r\n                            <td>Displays spinner buttons.</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>buttonLayout</td>\r\n                            <td>string</td>\r\n                            <td>stacked</td>\r\n                            <td>Layout of the buttons, valid values are \"stacked\" (default), \"horizontal\" and \"vertical\".</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>incrementButtonClassName</td>\r\n                            <td>string</td>\r\n                            <td>null</td>\r\n                            <td>Style class of the increment button.</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>decrementButtonClassName</td>\r\n                            <td>string</td>\r\n                            <td>null</td>\r\n                            <td>Style class of the decrement button.</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>incrementButtonIcon</td>\r\n                            <td>string</td>\r\n                            <td>pi pi-caret-up</td>\r\n                            <td>Style class of the increment button.</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>decrementButtonIcon</td>\r\n                            <td>string</td>\r\n                            <td>pi pi-caret-down</td>\r\n                            <td>Style class of the decrement button.</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>locale</td>\r\n                            <td>string</td>\r\n                            <td>null</td>\r\n                            <td>Locale to be used in formatting.</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>localeMatcher</td>\r\n                            <td>string</td>\r\n                            <td>best fit</td>\r\n                            <td>The locale matching algorithm to use. Possible values are \"lookup\" and \"best fit\"; the default is \"best fit\".\r\n                                See <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl#Locale_negotiation\">Locale Negotation</a> for details.\r\n                            </td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>mode</td>\r\n                            <td>string</td>\r\n                            <td>decimal</td>\r\n                            <td>Defines the behavior of the component, valid values are \"decimal\" and \"currency\".</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>prefix</td>\r\n                            <td>string</td>\r\n                            <td>null</td>\r\n                            <td>Text to display before the value.</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>suffix</td>\r\n                            <td>string</td>\r\n                            <td>decimal</td>\r\n                            <td>Text to display after the value.</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>currency</td>\r\n                            <td>string</td>\r\n                            <td>null</td>\r\n                            <td>The currency to use in currency formatting. Possible values are the <a href=\"https://www.currency-iso.org/en/home/tables/table-a1.html\">ISO 4217 currency codes</a>,\r\n                                such as \"USD\" for the US dollar, \"EUR\" for the euro, or \"CNY\" for the Chinese RMB.\r\n                                There is no default value; if the style is \"currency\", the currency property must be provided.</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>currencyDisplay</td>\r\n                            <td>string</td>\r\n                            <td>symbol</td>\r\n                            <td>How to display the currency in currency formatting. Possible values are \"symbol\" to use a localized currency symbol such as €,\r\n                                ü\"code\" to use the ISO currency code, \"name\" to use a localized currency name such as \"dollar\"; the default is \"symbol\".</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>useGrouping</td>\r\n                            <td>boolean</td>\r\n                            <td>true</td>\r\n                            <td>Whether to use grouping separators, such as thousands separators or thousand/lakh/crore separators.</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>minFractionDigits</td>\r\n                            <td>number</td>\r\n                            <td>null</td>\r\n                            <td>The minimum number of fraction digits to use. Possible values are from 0 to 20; the default for plain number and percent formatting is 0; the default for currency formatting is the number of\r\n                                minor unit digits provided by the <a href=\"https://www.currency-iso.org/en/home/tables/table-a1.html\">ISO 4217 currency code list</a> (2 if the list doesn't provide that information).</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>maxFractionDigits</td>\r\n                            <td>number</td>\r\n                            <td>null</td>\r\n                            <td>The maximum number of fraction digits to use. Possible values are from 0 to 20; the default for plain\r\n                                number formatting is the larger of minimumFractionDigits and 3; the default for currency formatting\r\n                                is the larger of minimumFractionDigits and the number of minor unit digits provided by the <a href=\"https://www.currency-iso.org/en/home/tables/table-a1.html\">ISO 4217 currency code list</a>\r\n                                 (2 if the list doesn't provide that information).</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>id</td>\r\n                            <td>string</td>\r\n                            <td>null</td>\r\n                            <td>Identifier of the element.</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>name</td>\r\n                            <td>string</td>\r\n                            <td>null</td>\r\n                            <td>Name of the input element.</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>type</td>\r\n                            <td>string</td>\r\n                            <td>text</td>\r\n                            <td>Type of the input element.</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>step</td>\r\n                            <td>number</td>\r\n                            <td>1</td>\r\n                            <td>Step factor to increment/decrement the value.</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>min</td>\r\n                            <td>number</td>\r\n                            <td>null</td>\r\n                            <td>Mininum boundary value.</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>max</td>\r\n                            <td>number</td>\r\n                            <td>null</td>\r\n                            <td>Maximum boundary value.</td>\r\n                        </tr>\r\n                        <tr>\r\n                           <td>disabled</td>\r\n                           <td>boolean</td>\r\n                           <td>false</td>\r\n                           <td>When present, it specifies that the element should be disabled.</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>required</td>\r\n                            <td>boolean</td>\r\n                            <td>false</td>\r\n                            <td>When present, it specifies that an input field must be filled out before submitting the form.</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>tabIndex</td>\r\n                            <td>number</td>\r\n                            <td>null</td>\r\n                            <td>Index of the element in tabbing order.</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>autoFocus</td>\r\n                            <td>boolean</td>\r\n                            <td>false</td>\r\n                            <td>When present, it specifies that the component should automatically get focus on load.</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>pattern</td>\r\n                            <td>string</td>\r\n                            <td>null</td>\r\n                            <td>The pattern attribute specifies a regular expression that the element's value is checked against on form submission.</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>inputmode</td>\r\n                            <td>string</td>\r\n                            <td>null</td>\r\n                            <td>The inputmode attribute provides a hint to browsers for devices with onscreen keyboards to help them decide which keyboard to display.</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>placeholder</td>\r\n                            <td>string</td>\r\n                            <td>null</td>\r\n                            <td>Hint text for the input field.</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>readOnly</td>\r\n                            <td>boolean</td>\r\n                            <td>false</td>\r\n                            <td>When present, it specifies that the element should be read-only.</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>size</td>\r\n                            <td>number</td>\r\n                            <td>null</td>\r\n                            <td>Size of the input field.</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>style</td>\r\n                            <td>string</td>\r\n                            <td>null</td>\r\n                            <td>Inline style of the component.</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>className</td>\r\n                            <td>string</td>\r\n                            <td>null</td>\r\n                            <td>Style class of the element.</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>inputId</td>\r\n                            <td>string</td>\r\n                            <td>null</td>\r\n                            <td>Identifier of the input element.</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>inputStyle</td>\r\n                            <td>string</td>\r\n                            <td>null</td>\r\n                            <td>Inline style of the input field.</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>inputClassName</td>\r\n                            <td>string</td>\r\n                            <td>null</td>\r\n                            <td>Inline style of the input field.</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>tooltip</td>\r\n                            <td>any</td>\r\n                            <td>null</td>\r\n                            <td>Content of the tooltip.</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>tooltipOptions</td>\r\n                            <td>object</td>\r\n                            <td>null</td>\r\n                            <td>Configuration of the tooltip, refer to the tooltip documentation for more information.</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>ariaLabelledBy</td>\r\n                            <td>string</td>\r\n                            <td>null</td>\r\n                            <td>Establishes relationships between the component and label(s) where its value should be one or more element IDs.</td>\r\n                        </tr>\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n\r\n            <h5>Events</h5>\r\n            <div className=\"doc-tablewrapper\">\r\n                <table className=\"doc-table\">\r\n                    <thead>\r\n                        <tr>\r\n                            <th>Name</th>\r\n                            <th>Parameters</th>\r\n                            <th>Description</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        <tr>\r\n                            <td>onValueChange</td>\r\n                            <td>event.originalEvent: Browser event <br />\r\n                                event.value: New value</td>\r\n                            <td>Callback to invoke after validation check and value change.</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>onChange</td>\r\n                            <td>event.originalEvent: Browser event <br />\r\n                                event.value: New value</td>\r\n                            <td>Callback to invoke on value change.</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>onFocus</td>\r\n                            <td>event: Browser event</td>\r\n                            <td>Callback to invoke when input receives focus.</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>onBlur</td>\r\n                            <td>event: Browser event</td>\r\n                            <td>Callback to invoke when input loses focus.</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>onKeyDown</td>\r\n                            <td>event: Browser event.</td>\r\n                            <td>Callback to invoke when the key pressed.</td>\r\n                        </tr>\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n\r\n            <h5>Styling</h5>\r\n            <p>Following is the list of structural style classes, for theming classes visit <Link to=\"/theming\"> theming</Link> page.</p>\r\n            <div className=\"doc-tablewrapper\">\r\n                <table className=\"doc-table\">\r\n                    <thead>\r\n                        <tr>\r\n                            <th>Name</th>\r\n                            <th>Element</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        <tr>\r\n                            <td>p-inputnumber</td>\r\n                            <td>Container element</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>p-inputnumber-stacked</td>\r\n                            <td>Container element with stacked buttons.</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>p-inputnumber-horizontal</td>\r\n                            <td>Container element with horizontal buttons.</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>p-inputnumber-vertical</td>\r\n                            <td>Container element with vertical buttons.</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>p-inputnumber-input</td>\r\n                            <td>Input element</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>p-inputnumber-button</td>\r\n                            <td>Input element</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>p-inputnumber-button-up</td>\r\n                            <td>Increment button</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>p-inputnumber-button-down</td>\r\n                            <td>Decrement button</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>p-inputnumber-button-icon</td>\r\n                            <td>Button icon</td>\r\n                        </tr>\r\n\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n\r\n            <h5>Dependencies</h5>\r\n            <p>None.</p>\r\n        </TabPanel>\r\n\r\n        {\r\n            useLiveEditorTabs({ name: 'InputNumberDemo', sources: this.sources })\r\n        }\r\n    </TabView>\r\n</div>\r\n        );\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}