{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\zura.ph\\\\WebstormProjects\\\\slotmaster-dashboard\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\zura.ph\\\\WebstormProjects\\\\slotmaster-dashboard\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"C:\\\\Users\\\\zura.ph\\\\WebstormProjects\\\\slotmaster-dashboard\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"C:\\\\Users\\\\zura.ph\\\\WebstormProjects\\\\slotmaster-dashboard\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _createSuper from \"C:\\\\Users\\\\zura.ph\\\\WebstormProjects\\\\slotmaster-dashboard\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"C:\\\\Users\\\\zura.ph\\\\WebstormProjects\\\\slotmaster-dashboard\\\\src\\\\components\\\\fieldset\\\\Fieldset.js\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { classNames } from '../utils/ClassNames';\nimport UniqueComponentId from '../utils/UniqueComponentId';\nimport { CSSTransition } from 'react-transition-group';\nimport { Ripple } from '../ripple/Ripple';\nexport var Fieldset = /*#__PURE__*/function (_Component) {\n  _inherits(Fieldset, _Component);\n\n  var _super = _createSuper(Fieldset);\n\n  function Fieldset(props) {\n    var _this;\n\n    _classCallCheck(this, Fieldset);\n\n    _this = _super.call(this, props);\n\n    if (!_this.props.onToggle) {\n      _this.state = {\n        collapsed: _this.props.collapsed\n      };\n    }\n\n    _this.toggle = _this.toggle.bind(_assertThisInitialized(_this));\n    _this.id = _this.props.id || UniqueComponentId();\n    _this.contentRef = React.createRef();\n    return _this;\n  }\n\n  _createClass(Fieldset, [{\n    key: \"toggle\",\n    value: function toggle(event) {\n      if (this.props.toggleable) {\n        var collapsed = this.props.onToggle ? this.props.collapsed : this.state.collapsed;\n        if (collapsed) this.expand(event);else this.collapse(event);\n\n        if (this.props.onToggle) {\n          this.props.onToggle({\n            originalEvent: event,\n            value: !collapsed\n          });\n        }\n      }\n\n      event.preventDefault();\n    }\n  }, {\n    key: \"expand\",\n    value: function expand(event) {\n      if (!this.props.onToggle) {\n        this.setState({\n          collapsed: false\n        });\n      }\n\n      if (this.props.onExpand) {\n        this.props.onExpand(event);\n      }\n    }\n  }, {\n    key: \"collapse\",\n    value: function collapse(event) {\n      if (!this.props.onToggle) {\n        this.setState({\n          collapsed: true\n        });\n      }\n\n      if (this.props.onCollapse) {\n        this.props.onCollapse(event);\n      }\n    }\n  }, {\n    key: \"isCollapsed\",\n    value: function isCollapsed() {\n      return this.props.toggleable ? this.props.onToggle ? this.props.collapsed : this.state.collapsed : false;\n    }\n  }, {\n    key: \"renderContent\",\n    value: function renderContent(collapsed) {\n      var id = this.id + '_content';\n      return /*#__PURE__*/React.createElement(CSSTransition, {\n        nodeRef: this.contentRef,\n        classNames: \"p-toggleable-content\",\n        timeout: {\n          enter: 1000,\n          exit: 450\n        },\n        in: !collapsed,\n        unmountOnExit: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        ref: this.contentRef,\n        id: id,\n        className: \"p-toggleable-content\",\n        \"aria-hidden\": collapsed,\n        role: \"region\",\n        \"aria-labelledby\": this.id + '_header',\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"p-fieldset-content\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 21\n        }\n      }, this.props.children)));\n    }\n  }, {\n    key: \"renderToggleIcon\",\n    value: function renderToggleIcon(collapsed) {\n      if (this.props.toggleable) {\n        var className = classNames('p-fieldset-toggler pi', {\n          'pi-plus': collapsed,\n          'pi-minus': !collapsed\n        });\n        return /*#__PURE__*/React.createElement(\"span\", {\n          className: className,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 112,\n            columnNumber: 17\n          }\n        });\n      }\n\n      return null;\n    }\n  }, {\n    key: \"renderLegendContent\",\n    value: function renderLegendContent(collapsed) {\n      if (this.props.toggleable) {\n        var toggleIcon = this.renderToggleIcon(collapsed);\n        var ariaControls = this.id + '_content';\n        return /*#__PURE__*/React.createElement(\"a\", {\n          href: '#' + ariaControls,\n          \"aria-controls\": ariaControls,\n          id: this.id + '_header',\n          \"aria-expanded\": !collapsed,\n          tabIndex: this.props.toggleable ? null : -1,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 125,\n            columnNumber: 17\n          }\n        }, toggleIcon, /*#__PURE__*/React.createElement(\"span\", {\n          className: \"p-fieldset-legend-text\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 127,\n            columnNumber: 21\n          }\n        }, this.props.legend), /*#__PURE__*/React.createElement(Ripple, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 128,\n            columnNumber: 21\n          }\n        }));\n      }\n\n      return /*#__PURE__*/React.createElement(\"span\", {\n        className: \"p-fieldset-legend-text\",\n        id: this.id + '_header',\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 13\n        }\n      }, this.props.legend);\n    }\n  }, {\n    key: \"renderLegend\",\n    value: function renderLegend(collapsed) {\n      var legendContent = this.renderLegendContent(collapsed);\n      return /*#__PURE__*/React.createElement(\"legend\", {\n        className: \"p-fieldset-legend p-unselectable-text\",\n        onClick: this.toggle,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 13\n        }\n      }, legendContent);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var className = classNames('p-fieldset p-component', this.props.className, {\n        'p-fieldset-toggleable': this.props.toggleable\n      });\n      var collapsed = this.isCollapsed();\n      var legend = this.renderLegend(collapsed);\n      var content = this.renderContent(collapsed);\n      return /*#__PURE__*/React.createElement(\"fieldset\", {\n        id: this.props.id,\n        className: className,\n        style: this.props.style,\n        onClick: this.props.onClick,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 13\n        }\n      }, legend, content);\n    }\n  }]);\n\n  return Fieldset;\n}(Component);\nFieldset.defaultProps = {\n  id: null,\n  legend: null,\n  className: null,\n  style: null,\n  toggleable: null,\n  collapsed: null,\n  onExpand: null,\n  onCollapse: null,\n  onToggle: null,\n  onClick: null\n};\nFieldset.propTypes = {\n  id: PropTypes.string,\n  legend: PropTypes.any,\n  className: PropTypes.string,\n  style: PropTypes.object,\n  toggleable: PropTypes.bool,\n  collapsed: PropTypes.bool,\n  onExpand: PropTypes.func,\n  onCollapse: PropTypes.func,\n  onToggle: PropTypes.func,\n  onClick: PropTypes.func\n};","map":{"version":3,"sources":["C:/Users/zura.ph/WebstormProjects/slotmaster-dashboard/src/components/fieldset/Fieldset.js"],"names":["React","Component","PropTypes","classNames","UniqueComponentId","CSSTransition","Ripple","Fieldset","props","onToggle","state","collapsed","toggle","bind","id","contentRef","createRef","event","toggleable","expand","collapse","originalEvent","value","preventDefault","setState","onExpand","onCollapse","enter","exit","children","className","toggleIcon","renderToggleIcon","ariaControls","legend","legendContent","renderLegendContent","isCollapsed","renderLegend","content","renderContent","style","onClick","defaultProps","propTypes","string","any","object","bool","func"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { classNames } from '../utils/ClassNames';\r\nimport UniqueComponentId from '../utils/UniqueComponentId';\r\nimport { CSSTransition } from 'react-transition-group';\r\nimport { Ripple } from '../ripple/Ripple';\r\n\r\nexport class Fieldset extends Component {\r\n\r\n    static defaultProps = {\r\n        id: null,\r\n        legend: null,\r\n        className: null,\r\n        style: null,\r\n        toggleable: null,\r\n        collapsed: null,\r\n        onExpand: null,\r\n        onCollapse: null,\r\n        onToggle: null,\r\n        onClick: null\r\n    };\r\n\r\n    static propTypes = {\r\n        id: PropTypes.string,\r\n        legend: PropTypes.any,\r\n        className: PropTypes.string,\r\n        style: PropTypes.object,\r\n        toggleable: PropTypes.bool,\r\n        collapsed: PropTypes.bool,\r\n        onExpand: PropTypes.func,\r\n        onCollapse: PropTypes.func,\r\n        onToggle: PropTypes.func,\r\n        onClick: PropTypes.func\r\n    };\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        if (!this.props.onToggle) {\r\n            this.state = {\r\n                collapsed: this.props.collapsed\r\n            };\r\n        }\r\n\r\n        this.toggle = this.toggle.bind(this);\r\n        this.id = this.props.id || UniqueComponentId();\r\n        this.contentRef = React.createRef();\r\n    }\r\n\r\n    toggle(event) {\r\n        if (this.props.toggleable) {\r\n            const collapsed = this.props.onToggle ? this.props.collapsed : this.state.collapsed;\r\n\r\n            if (collapsed)\r\n                this.expand(event);\r\n            else\r\n                this.collapse(event);\r\n\r\n            if (this.props.onToggle) {\r\n                this.props.onToggle({\r\n                    originalEvent: event,\r\n                    value: !collapsed\r\n                });\r\n            }\r\n        }\r\n\r\n        event.preventDefault();\r\n    }\r\n\r\n    expand(event) {\r\n        if (!this.props.onToggle) {\r\n            this.setState({ collapsed: false });\r\n        }\r\n\r\n        if (this.props.onExpand) {\r\n            this.props.onExpand(event);\r\n        }\r\n    }\r\n\r\n    collapse(event) {\r\n        if (!this.props.onToggle) {\r\n            this.setState({ collapsed: true });\r\n        }\r\n\r\n        if (this.props.onCollapse) {\r\n            this.props.onCollapse(event);\r\n        }\r\n    }\r\n\r\n    isCollapsed() {\r\n        return this.props.toggleable ? (this.props.onToggle ? this.props.collapsed : this.state.collapsed) : false;\r\n    }\r\n\r\n    renderContent(collapsed) {\r\n        const id = this.id + '_content';\r\n\r\n        return (\r\n            <CSSTransition nodeRef={this.contentRef} classNames=\"p-toggleable-content\" timeout={{ enter: 1000, exit: 450 }} in={!collapsed} unmountOnExit>\r\n                <div ref={this.contentRef} id={id} className=\"p-toggleable-content\" aria-hidden={collapsed} role=\"region\" aria-labelledby={this.id + '_header'}>\r\n                    <div className=\"p-fieldset-content\">\r\n                        {this.props.children}\r\n                    </div>\r\n                </div>\r\n            </CSSTransition>\r\n        );\r\n    }\r\n\r\n    renderToggleIcon(collapsed) {\r\n        if (this.props.toggleable) {\r\n            const className = classNames('p-fieldset-toggler pi', { 'pi-plus': collapsed, 'pi-minus': !collapsed });\r\n\r\n            return (\r\n                <span className={className}></span>\r\n            );\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    renderLegendContent(collapsed) {\r\n        if (this.props.toggleable) {\r\n            const toggleIcon = this.renderToggleIcon(collapsed);\r\n            const ariaControls = this.id + '_content';\r\n\r\n            return (\r\n                <a href={'#' + ariaControls} aria-controls={ariaControls} id={this.id + '_header'} aria-expanded={!collapsed} tabIndex={this.props.toggleable ? null : -1}>\r\n                    {toggleIcon}\r\n                    <span className=\"p-fieldset-legend-text\">{this.props.legend}</span>\r\n                    <Ripple />\r\n                </a>\r\n            );\r\n        }\r\n\r\n        return (\r\n            <span className=\"p-fieldset-legend-text\" id={this.id + '_header'}>{this.props.legend}</span>\r\n        );\r\n    }\r\n\r\n    renderLegend(collapsed) {\r\n        const legendContent = this.renderLegendContent(collapsed);\r\n\r\n        return (\r\n            <legend className=\"p-fieldset-legend p-unselectable-text\" onClick={this.toggle}>\r\n                {legendContent}\r\n            </legend>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        const className = classNames('p-fieldset p-component', this.props.className, { 'p-fieldset-toggleable': this.props.toggleable });\r\n        const collapsed = this.isCollapsed();\r\n        const legend = this.renderLegend(collapsed);\r\n        const content = this.renderContent(collapsed);\r\n\r\n        return (\r\n            <fieldset id={this.props.id} className={className} style={this.props.style} onClick={this.props.onClick}>\r\n                {legend}\r\n                {content}\r\n            </fieldset>\r\n        );\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}