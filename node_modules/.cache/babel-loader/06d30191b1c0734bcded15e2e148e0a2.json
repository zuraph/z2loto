{"ast":null,"code":"import _classCallCheck from\"C:\\\\Users\\\\zura.ph\\\\WebstormProjects\\\\slotmaster-dashboard\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";import _createClass from\"C:\\\\Users\\\\zura.ph\\\\WebstormProjects\\\\slotmaster-dashboard\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";import _inherits from\"C:\\\\Users\\\\zura.ph\\\\WebstormProjects\\\\slotmaster-dashboard\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";import _createSuper from\"C:\\\\Users\\\\zura.ph\\\\WebstormProjects\\\\slotmaster-dashboard\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createSuper\";import React,{Component}from'react';import{Link}from'react-router-dom';import{TabView,TabPanel}from'../../components/tabview/TabView';import{CodeHighlight}from'../codehighlight/CodeHighlight';import{useLiveEditorTabs}from'../liveeditor/LiveEditor';export var CascadeSelectDoc=/*#__PURE__*/function(_Component){_inherits(CascadeSelectDoc,_Component);var _super=_createSuper(CascadeSelectDoc);function CascadeSelectDoc(props){var _this;_classCallCheck(this,CascadeSelectDoc);_this=_super.call(this,props);_this.sources={'class':{tabName:'Class Source',content:\"\\nimport React, { Component } from 'react';\\nimport { CascadeSelect } from 'primereact/cascadeselect';\\n\\nexport class CascadeSelectDemo extends Component {\\n\\n    constructor(props) {\\n        super(props);\\n\\n        this.state = {\\n            selectedCity1: null,\\n            selectedCity2: null\\n        };\\n\\n        this.countries = [\\n            {\\n                name: 'Australia',\\n                code: 'AU',\\n                states: [\\n                    {\\n                        name: 'New South Wales',\\n                        cities: [\\n                            {cname: 'Sydney', code: 'A-SY'},\\n                            {cname: 'Newcastle', code: 'A-NE'},\\n                            {cname: 'Wollongong', code: 'A-WO'}\\n                        ]\\n                    },\\n                    {\\n                        name: 'Queensland',\\n                        cities: [\\n                            {cname: 'Brisbane', code: 'A-BR'},\\n                            {cname: 'Townsville', code: 'A-TO'}\\n                        ]\\n                    },\\n\\n                ]\\n            },\\n            {\\n                name: 'Canada',\\n                code: 'CA',\\n                states: [\\n                    {\\n                        name: 'Quebec',\\n                        cities: [\\n                            {cname: 'Montreal', code: 'C-MO'},\\n                            {cname: 'Quebec City', code: 'C-QU'}\\n                        ]\\n                    },\\n                    {\\n                        name: 'Ontario',\\n                        cities: [\\n                            {cname: 'Ottawa', code: 'C-OT'},\\n                            {cname: 'Toronto', code: 'C-TO'}\\n                        ]\\n                    },\\n\\n                ]\\n            },\\n            {\\n                name: 'United States',\\n                code: 'US',\\n                states: [\\n                    {\\n                        name: 'California',\\n                        cities: [\\n                            {cname: 'Los Angeles', code: 'US-LA'},\\n                            {cname: 'San Diego', code: 'US-SD'},\\n                            {cname: 'San Francisco', code: 'US-SF'}\\n                        ]\\n                    },\\n                    {\\n                        name: 'Florida',\\n                        cities: [\\n                            {cname: 'Jacksonville', code: 'US-JA'},\\n                            {cname: 'Miami', code: 'US-MI'},\\n                            {cname: 'Tampa', code: 'US-TA'},\\n                            {cname: 'Orlando', code: 'US-OR'}\\n                        ]\\n                    },\\n                    {\\n                        name: 'Texas',\\n                        cities: [\\n                            {cname: 'Austin', code: 'US-AU'},\\n                            {cname: 'Dallas', code: 'US-DA'},\\n                            {cname: 'Houston', code: 'US-HO'}\\n                        ]\\n                    }\\n                ]\\n            }\\n        ];\\n    }\\n\\n    countryOptionTemplate(option) {\\n        return (\\n            <div className=\\\"country-item\\\">\\n                {option.states && <img alt={option.name} src=\\\"showcase/demo/images/flag_placeholder.png\\\" onError={(e) => e.target.src='https://www.primefaces.org/wp-content/uploads/2020/05/placeholder.png'}\\n                                       className={`flag flag-${option.code.toLowerCase()}`} />}\\n                {option.cities && <i className=\\\"pi pi-compass p-mr-2\\\"/>}\\n                {option.cname && <i className=\\\"pi pi-map-marker p-mr-2\\\"/>}\\n                <span>{option.cname || option.name}</span>\\n            </div>\\n        );\\n    }\\n    render() {\\n        return (\\n            <div>\\n                <div className=\\\"card\\\">\\n                    <h5>Basic</h5>\\n                    <CascadeSelect  value={this.state.selectedCity1} options={this.countries}  optionLabel={\\\"cname\\\"} optionGroupLabel={\\\"name\\\"} optionGroupChildren={['states', 'cities']}\\n                                    style={{minWidth: '14rem'}} placeholder={\\\"Select a City\\\"} onChange={event => this.setState({selectedCity1: event.value})}/>\\n\\n                    <h5>Templating</h5>\\n                    <CascadeSelect  value={this.state.selectedCity2} options={this.countries}  optionLabel={\\\"cname\\\"} optionGroupLabel={\\\"name\\\"} optionGroupChildren={['states', 'cities']}\\n                                    style={{minWidth: '14rem'}} placeholder={\\\"Select a City\\\"} onChange={event => this.setState({selectedCity2: event.value})}  itemTemplate={this.countryOptionTemplate}/>\\n                </div>\\n            </div>\\n        )\\n    }\\n}\\n                \"},'hooks':{tabName:'Hooks Source',content:\"\\nimport React, { useState } from 'react';\\nimport { CascadeSelect } from 'primereact/cascadeselect';\\n\\nconst CascadeSelectDemo = () => {\\n    const [selectedCity1, setSelectedCity1] = useState(null);\\n    const [selectedCity2, setSelectedCity2] = useState(null);\\n    const countries = [\\n                {\\n                    name: 'Australia',\\n                    code: 'AU',\\n                    states: [\\n                        {\\n                            name: 'New South Wales',\\n                            cities: [\\n                                {cname: 'Sydney', code: 'A-SY'},\\n                                {cname: 'Newcastle', code: 'A-NE'},\\n                                {cname: 'Wollongong', code: 'A-WO'}\\n                            ]\\n                        },\\n                        {\\n                            name: 'Queensland',\\n                            cities: [\\n                                {cname: 'Brisbane', code: 'A-BR'},\\n                                {cname: 'Townsville', code: 'A-TO'}\\n                            ]\\n                        },\\n\\n                    ]\\n                },\\n                {\\n                    name: 'Canada',\\n                    code: 'CA',\\n                    states: [\\n                        {\\n                            name: 'Quebec',\\n                            cities: [\\n                                {cname: 'Montreal', code: 'C-MO'},\\n                                {cname: 'Quebec City', code: 'C-QU'}\\n                            ]\\n                        },\\n                        {\\n                            name: 'Ontario',\\n                            cities: [\\n                                {cname: 'Ottawa', code: 'C-OT'},\\n                                {cname: 'Toronto', code: 'C-TO'}\\n                            ]\\n                        },\\n\\n                    ]\\n                },\\n                {\\n                    name: 'United States',\\n                    code: 'US',\\n                    states: [\\n                        {\\n                            name: 'California',\\n                            cities: [\\n                                {cname: 'Los Angeles', code: 'US-LA'},\\n                                {cname: 'San Diego', code: 'US-SD'},\\n                                {cname: 'San Francisco', code: 'US-SF'}\\n                            ]\\n                        },\\n                        {\\n                            name: 'Florida',\\n                            cities: [\\n                                {cname: 'Jacksonville', code: 'US-JA'},\\n                                {cname: 'Miami', code: 'US-MI'},\\n                                {cname: 'Tampa', code: 'US-TA'},\\n                                {cname: 'Orlando', code: 'US-OR'}\\n                            ]\\n                        },\\n                        {\\n                            name: 'Texas',\\n                            cities: [\\n                                {cname: 'Austin', code: 'US-AU'},\\n                                {cname: 'Dallas', code: 'US-DA'},\\n                                {cname: 'Houston', code: 'US-HO'}\\n                            ]\\n                        }\\n                    ]\\n                }\\n            ];\\n\\n    const countryOptionTemplate = (option) => {\\n        return (\\n            <div className=\\\"country-item\\\">\\n                {option.states && <img alt={option.name} src=\\\"showcase/demo/images/flag_placeholder.png\\\" onError={(e) => e.target.src='https://www.primefaces.org/wp-content/uploads/2020/05/placeholder.png'}\\n                                       className={`flag flag-${option.code.toLowerCase()}`} />}\\n                {option.cities && <i className=\\\"pi pi-compass p-mr-2\\\"/>}\\n                {option.cname && <i className=\\\"pi pi-map-marker p-mr-2\\\"/>}\\n                <span>{option.cname || option.name}</span>\\n            </div>\\n        );\\n    }\\n\\n    return (\\n        <div>\\n            <div className=\\\"card\\\">\\n                <h5>Basic</h5>\\n                <CascadeSelect  value={selectedCity1} options={countries}  optionLabel={\\\"cname\\\"} optionGroupLabel={\\\"name\\\"} optionGroupChildren={['states', 'cities']}\\n                                style={{minWidth: '14rem'}} placeholder={\\\"Select a City\\\"} onChange={event => setSelectedCity1(event.value)}/>\\n\\n                <h5>Templating</h5>\\n                <CascadeSelect  value={selectedCity2} options={countries}  optionLabel={\\\"cname\\\"} optionGroupLabel={\\\"name\\\"} optionGroupChildren={['states', 'cities']}\\n                                style={{minWidth: '14rem'}} placeholder={\\\"Select a City\\\"} onChange={event =>  setSelectedCity2(event.value)}  itemTemplate={countryOptionTemplate}/>\\n            </div>\\n        </div>\\n    )\\n}\\n                \"},'ts':{tabName:'TS Source',content:\"\\nimport React, { useState } from 'react';\\nimport { CascadeSelect } from 'primereact/cascadeselect';\\n\\nconst CascadeSelectDemo = () => {\\n    const [selectedCity1, setSelectedCity1] = useState(null);\\n    const [selectedCity2, setSelectedCity2] = useState(null);\\n    const countries = [\\n                {\\n                    name: 'Australia',\\n                    code: 'AU',\\n                    states: [\\n                        {\\n                            name: 'New South Wales',\\n                            cities: [\\n                                {cname: 'Sydney', code: 'A-SY'},\\n                                {cname: 'Newcastle', code: 'A-NE'},\\n                                {cname: 'Wollongong', code: 'A-WO'}\\n                            ]\\n                        },\\n                        {\\n                            name: 'Queensland',\\n                            cities: [\\n                                {cname: 'Brisbane', code: 'A-BR'},\\n                                {cname: 'Townsville', code: 'A-TO'}\\n                            ]\\n                        },\\n\\n                    ]\\n                },\\n                {\\n                    name: 'Canada',\\n                    code: 'CA',\\n                    states: [\\n                        {\\n                            name: 'Quebec',\\n                            cities: [\\n                                {cname: 'Montreal', code: 'C-MO'},\\n                                {cname: 'Quebec City', code: 'C-QU'}\\n                            ]\\n                        },\\n                        {\\n                            name: 'Ontario',\\n                            cities: [\\n                                {cname: 'Ottawa', code: 'C-OT'},\\n                                {cname: 'Toronto', code: 'C-TO'}\\n                            ]\\n                        },\\n\\n                    ]\\n                },\\n                {\\n                    name: 'United States',\\n                    code: 'US',\\n                    states: [\\n                        {\\n                            name: 'California',\\n                            cities: [\\n                                {cname: 'Los Angeles', code: 'US-LA'},\\n                                {cname: 'San Diego', code: 'US-SD'},\\n                                {cname: 'San Francisco', code: 'US-SF'}\\n                            ]\\n                        },\\n                        {\\n                            name: 'Florida',\\n                            cities: [\\n                                {cname: 'Jacksonville', code: 'US-JA'},\\n                                {cname: 'Miami', code: 'US-MI'},\\n                                {cname: 'Tampa', code: 'US-TA'},\\n                                {cname: 'Orlando', code: 'US-OR'}\\n                            ]\\n                        },\\n                        {\\n                            name: 'Texas',\\n                            cities: [\\n                                {cname: 'Austin', code: 'US-AU'},\\n                                {cname: 'Dallas', code: 'US-DA'},\\n                                {cname: 'Houston', code: 'US-HO'}\\n                            ]\\n                        }\\n                    ]\\n                }\\n            ];\\n\\n    const countryOptionTemplate = (option) => {\\n        return (\\n            <div className=\\\"country-item\\\">\\n                {option.states && <img alt={option.name} src=\\\"showcase/demo/images/flag_placeholder.png\\\" onError={(e) => e.target.src='https://www.primefaces.org/wp-content/uploads/2020/05/placeholder.png'}\\n                                       className={`flag flag-${option.code.toLowerCase()}`} />}\\n                {option.cities && <i className=\\\"pi pi-compass p-mr-2\\\"/>}\\n                {option.cname && <i className=\\\"pi pi-map-marker p-mr-2\\\"/>}\\n                <span>{option.cname || option.name}</span>\\n            </div>\\n        );\\n    }\\n\\n    return (\\n        <div>\\n            <div className=\\\"card\\\">\\n                <h5>Basic</h5>\\n                <CascadeSelect  value={selectedCity1} options={countries}  optionLabel={\\\"cname\\\"} optionGroupLabel={\\\"name\\\"} optionGroupChildren={['states', 'cities']}\\n                                style={{minWidth: '14rem'}} placeholder={\\\"Select a City\\\"} onChange={event => setSelectedCity1(event.value)}/>\\n\\n                <h5>Templating</h5>\\n                <CascadeSelect  value={selectedCity2} options={countries}  optionLabel={\\\"cname\\\"} optionGroupLabel={\\\"name\\\"} optionGroupChildren={['states', 'cities']}\\n                                style={{minWidth: '14rem'}} placeholder={\\\"Select a City\\\"} onChange={event =>  setSelectedCity2(event.value)}  itemTemplate={countryOptionTemplate}/>\\n            </div>\\n        </div>\\n    )\\n}\\n                \"}};return _this;}_createClass(CascadeSelectDoc,[{key:\"shouldComponentUpdate\",value:function shouldComponentUpdate(){return false;}},{key:\"render\",value:function render(){return/*#__PURE__*/React.createElement(\"div\",{className:\"content-section documentation\"},/*#__PURE__*/React.createElement(TabView,null,/*#__PURE__*/React.createElement(TabPanel,{header:\"Documentation\"},/*#__PURE__*/React.createElement(\"h5\",null,\"Import\"),/*#__PURE__*/React.createElement(CodeHighlight,{lang:\"js\"},\"\\nimport { CascadeSelect } from 'primereact/cascadeselect';\\n\"),/*#__PURE__*/React.createElement(\"h5\",null,\"Getting Started\"),/*#__PURE__*/React.createElement(\"p\",null,\"CascadeSelect requires a value to bind and a collection of arbitrary objects with a nested hierarchy. \",/*#__PURE__*/React.createElement(\"i\",null,\"optionGroupLabel\"),\"is used for the text of a category and \",/*#__PURE__*/React.createElement(\"i\",null,\"optionGroupChildren\"),\" is to define the children of the category. Note that order of the \",/*#__PURE__*/React.createElement(\"i\",null,\"optionGroupChildren\"),\"matters and it should correspond to the data hierarchy.\"),/*#__PURE__*/React.createElement(CodeHighlight,null,\"\\n<CascadeSelect  value={selectedCity} options={countries}  optionLabel={\\\"cname\\\"} optionGroupLabel={\\\"name\\\"} optionGroupChildren={['states', 'cities']}\\n                style={{minWidth: '14rem'}} placeholder={\\\"Select a City\\\"} onChange={event => setSelectedCity1(event.value)}/>\\n\"),/*#__PURE__*/React.createElement(CodeHighlight,{lang:\"js\"},\"\\nconst countries = [\\n    {\\n        name: 'Australia',\\n        code: 'AU',\\n        states: [\\n            {\\n                name: 'New South Wales',\\n                cities: [\\n                    {cname: 'Sydney', code: 'A-SY'},\\n                    {cname: 'Newcastle', code: 'A-NE'},\\n                    {cname: 'Wollongong', code: 'A-WO'}\\n                ]\\n            },\\n            {\\n                name: 'Queensland',\\n                cities: [\\n                    {cname: 'Brisbane', code: 'A-BR'},\\n                    {cname: 'Townsville', code: 'A-TO'}\\n                ]\\n            },\\n\\n        ]\\n    },\\n    {\\n        name: 'Canada',\\n        code: 'CA',\\n        states: [\\n            {\\n                name: 'Quebec',\\n                cities: [\\n                    {cname: 'Montreal', code: 'C-MO'},\\n                    {cname: 'Quebec City', code: 'C-QU'}\\n                ]\\n            },\\n            {\\n                name: 'Ontario',\\n                cities: [\\n                    {cname: 'Ottawa', code: 'C-OT'},\\n                    {cname: 'Toronto', code: 'C-TO'}\\n                ]\\n            },\\n\\n        ]\\n    },\\n    {\\n        name: 'United States',\\n        code: 'US',\\n        states: [\\n            {\\n                name: 'California',\\n                cities: [\\n                    {cname: 'Los Angeles', code: 'US-LA'},\\n                    {cname: 'San Diego', code: 'US-SD'},\\n                    {cname: 'San Francisco', code: 'US-SF'}\\n                ]\\n            },\\n            {\\n                name: 'Florida',\\n                cities: [\\n                    {cname: 'Jacksonville', code: 'US-JA'},\\n                    {cname: 'Miami', code: 'US-MI'},\\n                    {cname: 'Tampa', code: 'US-TA'},\\n                    {cname: 'Orlando', code: 'US-OR'}\\n                ]\\n            },\\n            {\\n                name: 'Texas',\\n                cities: [\\n                    {cname: 'Austin', code: 'US-AU'},\\n                    {cname: 'Dallas', code: 'US-DA'},\\n                    {cname: 'Houston', code: 'US-HO'}\\n                ]\\n            }\\n        ]\\n    }\\n]\\n\"),/*#__PURE__*/React.createElement(\"h5\",null,\"Templating\"),/*#__PURE__*/React.createElement(\"p\",null,\"Content of an item can be customized with the \",/*#__PURE__*/React.createElement(\"i\",null,\"itemTemplate\"),\" prop.\"),/*#__PURE__*/React.createElement(CodeHighlight,null,\"\\n<CascadeSelect value={selectedCity2} options={countries}  optionLabel={\\\"cname\\\"} optionGroupLabel={\\\"name\\\"} optionGroupChildren={['states', 'cities']}\\n    style={{minWidth: '14rem'}} placeholder={\\\"Select a City\\\"} onChange={event => setSelectedCity2(event.value)} itemTemplate={countryOptionTemplate}/>\\n\"),/*#__PURE__*/React.createElement(CodeHighlight,{lang:\"js\"},\"\\nconst countryOptionTemplate = (option) => {\\n    return (\\n        <div className=\\\"country-item\\\">\\n            {option.states && <img alt={option.name} src=\\\"showcase/demo/images/flag_placeholder.png\\\" onError={(e) => e.target.src='https://www.primefaces.org/wp-content/uploads/2020/05/placeholder.png'}\\n                                   className={`flag flag-${option.code.toLowerCase()}`} />}\\n            {option.cities && <i className=\\\"pi pi-compass p-mr-2\\\"/>}\\n            {option.cname && <i className=\\\"pi pi-map-marker p-mr-2\\\"/>}\\n            <span>{option.cname || option.name}</span>\\n        </div>\\n    );\\n}\\n\"),/*#__PURE__*/React.createElement(\"h5\",null,\"Properties\"),/*#__PURE__*/React.createElement(\"div\",{className:\"doc-tablewrapper\"},/*#__PURE__*/React.createElement(\"table\",{className:\"doc-table\"},/*#__PURE__*/React.createElement(\"thead\",null,/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"th\",null,\"Name\"),/*#__PURE__*/React.createElement(\"th\",null,\"Type\"),/*#__PURE__*/React.createElement(\"th\",null,\"Default\"),/*#__PURE__*/React.createElement(\"th\",null,\"Description\"))),/*#__PURE__*/React.createElement(\"tbody\",null,/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"td\",null,\"id\"),/*#__PURE__*/React.createElement(\"td\",null,\"string\"),/*#__PURE__*/React.createElement(\"td\",null,\"null\"),/*#__PURE__*/React.createElement(\"td\",null,\"Unique identifier of the element.\")),/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"td\",null,\"style\"),/*#__PURE__*/React.createElement(\"td\",null,\"object\"),/*#__PURE__*/React.createElement(\"td\",null,\"null\"),/*#__PURE__*/React.createElement(\"td\",null,\"Inline style of the component.\")),/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"td\",null,\"className\"),/*#__PURE__*/React.createElement(\"td\",null,\"string\"),/*#__PURE__*/React.createElement(\"td\",null,\"null\"),/*#__PURE__*/React.createElement(\"td\",null,\"Style class of the component.\")),/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"td\",null,\"options\"),/*#__PURE__*/React.createElement(\"td\",null,\"array\"),/*#__PURE__*/React.createElement(\"td\",null,\"null\"),/*#__PURE__*/React.createElement(\"td\",null,\"An array of selectitems to display as the available options.\")),/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"td\",null,\"optionLabel\"),/*#__PURE__*/React.createElement(\"td\",null,\"string\"),/*#__PURE__*/React.createElement(\"td\",null,\"null\"),/*#__PURE__*/React.createElement(\"td\",null,\"Property name or getter function to use as the label of an option.\")),/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"td\",null,\"optionValue\"),/*#__PURE__*/React.createElement(\"td\",null,\"string\"),/*#__PURE__*/React.createElement(\"td\",null,\"null\"),/*#__PURE__*/React.createElement(\"td\",null,\"Property name or getter function to use as the value of an option, defaults to the option itself when not defined.\")),/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"td\",null,\"optionGroupLabel\"),/*#__PURE__*/React.createElement(\"td\",null,\"string\"),/*#__PURE__*/React.createElement(\"td\",null,\"null\"),/*#__PURE__*/React.createElement(\"td\",null,\"Property name or getter function to use as the label of an option group.\")),/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"td\",null,\"optionGroupChildren\"),/*#__PURE__*/React.createElement(\"td\",null,\"string\"),/*#__PURE__*/React.createElement(\"td\",null,\"null\"),/*#__PURE__*/React.createElement(\"td\",null,\"Property name or getter function to retrieve the items of a group.\")),/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"td\",null,\"placeholder\"),/*#__PURE__*/React.createElement(\"td\",null,\"string\"),/*#__PURE__*/React.createElement(\"td\",null,\"null\"),/*#__PURE__*/React.createElement(\"td\",null,\"Default text to display when no option is selected.\")),/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"td\",null,\"disabled\"),/*#__PURE__*/React.createElement(\"td\",null,\"boolean\"),/*#__PURE__*/React.createElement(\"td\",null,\"false\"),/*#__PURE__*/React.createElement(\"td\",null,\"When present, it specifies that the component should be disabled.\")),/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"td\",null,\"dataKey\"),/*#__PURE__*/React.createElement(\"td\",null,\"string\"),/*#__PURE__*/React.createElement(\"td\",null,\"null\"),/*#__PURE__*/React.createElement(\"td\",null,\"A property to uniquely identify an option.\")),/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"td\",null,\"tabIndex\"),/*#__PURE__*/React.createElement(\"td\",null,\"number\"),/*#__PURE__*/React.createElement(\"td\",null,\"null\"),/*#__PURE__*/React.createElement(\"td\",null,\"Index of the element in tabbing order.\")),/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"td\",null,\"inputId\"),/*#__PURE__*/React.createElement(\"td\",null,\"string\"),/*#__PURE__*/React.createElement(\"td\",null,\"null\"),/*#__PURE__*/React.createElement(\"td\",null,\"Identifier of the underlying input element.\")),/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"td\",null,\"ariaLabelledBy\"),/*#__PURE__*/React.createElement(\"td\",null,\"string\"),/*#__PURE__*/React.createElement(\"td\",null,\"null\"),/*#__PURE__*/React.createElement(\"td\",null,\"Establishes relationships between the component and label(s) where its value should be one or more element IDs.\")),/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"td\",null,\"appendTo\"),/*#__PURE__*/React.createElement(\"td\",null,\"string\"),/*#__PURE__*/React.createElement(\"td\",null,\"null\"),/*#__PURE__*/React.createElement(\"td\",null,\"Id of the element or \\\"body\\\" for document where the overlay should be appended to.\")),/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"td\",null,\"itemTemplate\"),/*#__PURE__*/React.createElement(\"td\",null,\"any\"),/*#__PURE__*/React.createElement(\"td\",null,\"null\"),/*#__PURE__*/React.createElement(\"td\",null,\"The template of items.\"))))),/*#__PURE__*/React.createElement(\"h5\",null,\"Events\"),/*#__PURE__*/React.createElement(\"div\",{className:\"doc-tablewrapper\"},/*#__PURE__*/React.createElement(\"table\",{className:\"doc-table\"},/*#__PURE__*/React.createElement(\"thead\",null,/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"th\",null,\"Name\"),/*#__PURE__*/React.createElement(\"th\",null,\"Parameters\"),/*#__PURE__*/React.createElement(\"th\",null,\"Description\"))),/*#__PURE__*/React.createElement(\"tbody\",null,/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"td\",null,\"onChange\"),/*#__PURE__*/React.createElement(\"td\",null,\"event.originalEvent: Original event \",/*#__PURE__*/React.createElement(\"br\",null),\"event.value: Value of the checkbox \"),/*#__PURE__*/React.createElement(\"td\",null,\"Callback to invoke on value change\")),/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"td\",null,\"onGroupChange\"),/*#__PURE__*/React.createElement(\"td\",null,\"event: Browser event.\"),/*#__PURE__*/React.createElement(\"td\",null,\"Callback to invoke when a group changes.\")),/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"td\",null,\"onBeforeShow\"),/*#__PURE__*/React.createElement(\"td\",null,\"-\"),/*#__PURE__*/React.createElement(\"td\",null,\"Callback to invoke before the overlay is shown.\")),/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"td\",null,\"onBeforeHide\"),/*#__PURE__*/React.createElement(\"td\",null,\"-\"),/*#__PURE__*/React.createElement(\"td\",null,\"Callback to invoke before the overlay is hidden.\")),/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"td\",null,\"onShow\"),/*#__PURE__*/React.createElement(\"td\",null,\"-\"),/*#__PURE__*/React.createElement(\"td\",null,\"Callback to invoke when the overlay is shown.\")),/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"td\",null,\"onHide\"),/*#__PURE__*/React.createElement(\"td\",null,\"-\"),/*#__PURE__*/React.createElement(\"td\",null,\"Callback to invoke when the overlay is hidden.\"))))),/*#__PURE__*/React.createElement(\"h5\",null,\"Styling\"),/*#__PURE__*/React.createElement(\"p\",null,\"Following is the list of structural style classes, for theming classes visit \",/*#__PURE__*/React.createElement(Link,{to:\"/theming\"},\"theming\"),\" page.\"),/*#__PURE__*/React.createElement(\"div\",{className:\"doc-tablewrapper\"},/*#__PURE__*/React.createElement(\"table\",{className:\"doc-table\"},/*#__PURE__*/React.createElement(\"thead\",null,/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"th\",null,\"Name\"),/*#__PURE__*/React.createElement(\"th\",null,\"Element\"))),/*#__PURE__*/React.createElement(\"tbody\",null,/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"td\",null,\"p-cascadeselect\"),/*#__PURE__*/React.createElement(\"td\",null,\"Container element.\")),/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"td\",null,\"p-cascadeselect-label\"),/*#__PURE__*/React.createElement(\"td\",null,\"Element to display label of selected option.\")),/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"td\",null,\"p-cascadeselect-trigger\"),/*#__PURE__*/React.createElement(\"td\",null,\"Icon element.\")),/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"td\",null,\"p-cascadeselect-panel\"),/*#__PURE__*/React.createElement(\"td\",null,\"Icon element.\")),/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"td\",null,\"p-cascadeselect-items-wrapper\"),/*#__PURE__*/React.createElement(\"td\",null,\"Wrapper element of items list.\")),/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"td\",null,\"p-cascadeselect-items\"),/*#__PURE__*/React.createElement(\"td\",null,\"List element of items.\")),/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"td\",null,\"p-cascadeselect-item\"),/*#__PURE__*/React.createElement(\"td\",null,\"An item in the list.\"))))),/*#__PURE__*/React.createElement(\"h5\",null,\"Dependencies\"),/*#__PURE__*/React.createElement(\"p\",null,\"None.\")),useLiveEditorTabs({name:'CascadeSelectDemo',sources:this.sources})));}}]);return CascadeSelectDoc;}(Component);","map":{"version":3,"sources":["C:/Users/zura.ph/WebstormProjects/slotmaster-dashboard/src/showcase/cascadeselect/CascadeSelectDoc.js"],"names":["React","Component","Link","TabView","TabPanel","CodeHighlight","useLiveEditorTabs","CascadeSelectDoc","props","sources","tabName","content","name"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { TabView, TabPanel } from '../../components/tabview/TabView';\r\nimport { CodeHighlight } from '../codehighlight/CodeHighlight';\r\nimport { useLiveEditorTabs }from '../liveeditor/LiveEditor';\r\n\r\nexport class CascadeSelectDoc extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.sources = {\r\n            'class': {\r\n                tabName: 'Class Source',\r\n                content: `\r\nimport React, { Component } from 'react';\r\nimport { CascadeSelect } from 'primereact/cascadeselect';\r\n\r\nexport class CascadeSelectDemo extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            selectedCity1: null,\r\n            selectedCity2: null\r\n        };\r\n\r\n        this.countries = [\r\n            {\r\n                name: 'Australia',\r\n                code: 'AU',\r\n                states: [\r\n                    {\r\n                        name: 'New South Wales',\r\n                        cities: [\r\n                            {cname: 'Sydney', code: 'A-SY'},\r\n                            {cname: 'Newcastle', code: 'A-NE'},\r\n                            {cname: 'Wollongong', code: 'A-WO'}\r\n                        ]\r\n                    },\r\n                    {\r\n                        name: 'Queensland',\r\n                        cities: [\r\n                            {cname: 'Brisbane', code: 'A-BR'},\r\n                            {cname: 'Townsville', code: 'A-TO'}\r\n                        ]\r\n                    },\r\n\r\n                ]\r\n            },\r\n            {\r\n                name: 'Canada',\r\n                code: 'CA',\r\n                states: [\r\n                    {\r\n                        name: 'Quebec',\r\n                        cities: [\r\n                            {cname: 'Montreal', code: 'C-MO'},\r\n                            {cname: 'Quebec City', code: 'C-QU'}\r\n                        ]\r\n                    },\r\n                    {\r\n                        name: 'Ontario',\r\n                        cities: [\r\n                            {cname: 'Ottawa', code: 'C-OT'},\r\n                            {cname: 'Toronto', code: 'C-TO'}\r\n                        ]\r\n                    },\r\n\r\n                ]\r\n            },\r\n            {\r\n                name: 'United States',\r\n                code: 'US',\r\n                states: [\r\n                    {\r\n                        name: 'California',\r\n                        cities: [\r\n                            {cname: 'Los Angeles', code: 'US-LA'},\r\n                            {cname: 'San Diego', code: 'US-SD'},\r\n                            {cname: 'San Francisco', code: 'US-SF'}\r\n                        ]\r\n                    },\r\n                    {\r\n                        name: 'Florida',\r\n                        cities: [\r\n                            {cname: 'Jacksonville', code: 'US-JA'},\r\n                            {cname: 'Miami', code: 'US-MI'},\r\n                            {cname: 'Tampa', code: 'US-TA'},\r\n                            {cname: 'Orlando', code: 'US-OR'}\r\n                        ]\r\n                    },\r\n                    {\r\n                        name: 'Texas',\r\n                        cities: [\r\n                            {cname: 'Austin', code: 'US-AU'},\r\n                            {cname: 'Dallas', code: 'US-DA'},\r\n                            {cname: 'Houston', code: 'US-HO'}\r\n                        ]\r\n                    }\r\n                ]\r\n            }\r\n        ];\r\n    }\r\n\r\n    countryOptionTemplate(option) {\r\n        return (\r\n            <div className=\"country-item\">\r\n                {option.states && <img alt={option.name} src=\"showcase/demo/images/flag_placeholder.png\" onError={(e) => e.target.src='https://www.primefaces.org/wp-content/uploads/2020/05/placeholder.png'}\r\n                                       className={\\`flag flag-\\${option.code.toLowerCase()}\\`} />}\r\n                {option.cities && <i className=\"pi pi-compass p-mr-2\"/>}\r\n                {option.cname && <i className=\"pi pi-map-marker p-mr-2\"/>}\r\n                <span>{option.cname || option.name}</span>\r\n            </div>\r\n        );\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div className=\"card\">\r\n                    <h5>Basic</h5>\r\n                    <CascadeSelect  value={this.state.selectedCity1} options={this.countries}  optionLabel={\"cname\"} optionGroupLabel={\"name\"} optionGroupChildren={['states', 'cities']}\r\n                                    style={{minWidth: '14rem'}} placeholder={\"Select a City\"} onChange={event => this.setState({selectedCity1: event.value})}/>\r\n\r\n                    <h5>Templating</h5>\r\n                    <CascadeSelect  value={this.state.selectedCity2} options={this.countries}  optionLabel={\"cname\"} optionGroupLabel={\"name\"} optionGroupChildren={['states', 'cities']}\r\n                                    style={{minWidth: '14rem'}} placeholder={\"Select a City\"} onChange={event => this.setState({selectedCity2: event.value})}  itemTemplate={this.countryOptionTemplate}/>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n                `\r\n            },\r\n            'hooks': {\r\n                tabName: 'Hooks Source',\r\n                content: `\r\nimport React, { useState } from 'react';\r\nimport { CascadeSelect } from 'primereact/cascadeselect';\r\n\r\nconst CascadeSelectDemo = () => {\r\n    const [selectedCity1, setSelectedCity1] = useState(null);\r\n    const [selectedCity2, setSelectedCity2] = useState(null);\r\n    const countries = [\r\n                {\r\n                    name: 'Australia',\r\n                    code: 'AU',\r\n                    states: [\r\n                        {\r\n                            name: 'New South Wales',\r\n                            cities: [\r\n                                {cname: 'Sydney', code: 'A-SY'},\r\n                                {cname: 'Newcastle', code: 'A-NE'},\r\n                                {cname: 'Wollongong', code: 'A-WO'}\r\n                            ]\r\n                        },\r\n                        {\r\n                            name: 'Queensland',\r\n                            cities: [\r\n                                {cname: 'Brisbane', code: 'A-BR'},\r\n                                {cname: 'Townsville', code: 'A-TO'}\r\n                            ]\r\n                        },\r\n\r\n                    ]\r\n                },\r\n                {\r\n                    name: 'Canada',\r\n                    code: 'CA',\r\n                    states: [\r\n                        {\r\n                            name: 'Quebec',\r\n                            cities: [\r\n                                {cname: 'Montreal', code: 'C-MO'},\r\n                                {cname: 'Quebec City', code: 'C-QU'}\r\n                            ]\r\n                        },\r\n                        {\r\n                            name: 'Ontario',\r\n                            cities: [\r\n                                {cname: 'Ottawa', code: 'C-OT'},\r\n                                {cname: 'Toronto', code: 'C-TO'}\r\n                            ]\r\n                        },\r\n\r\n                    ]\r\n                },\r\n                {\r\n                    name: 'United States',\r\n                    code: 'US',\r\n                    states: [\r\n                        {\r\n                            name: 'California',\r\n                            cities: [\r\n                                {cname: 'Los Angeles', code: 'US-LA'},\r\n                                {cname: 'San Diego', code: 'US-SD'},\r\n                                {cname: 'San Francisco', code: 'US-SF'}\r\n                            ]\r\n                        },\r\n                        {\r\n                            name: 'Florida',\r\n                            cities: [\r\n                                {cname: 'Jacksonville', code: 'US-JA'},\r\n                                {cname: 'Miami', code: 'US-MI'},\r\n                                {cname: 'Tampa', code: 'US-TA'},\r\n                                {cname: 'Orlando', code: 'US-OR'}\r\n                            ]\r\n                        },\r\n                        {\r\n                            name: 'Texas',\r\n                            cities: [\r\n                                {cname: 'Austin', code: 'US-AU'},\r\n                                {cname: 'Dallas', code: 'US-DA'},\r\n                                {cname: 'Houston', code: 'US-HO'}\r\n                            ]\r\n                        }\r\n                    ]\r\n                }\r\n            ];\r\n\r\n    const countryOptionTemplate = (option) => {\r\n        return (\r\n            <div className=\"country-item\">\r\n                {option.states && <img alt={option.name} src=\"showcase/demo/images/flag_placeholder.png\" onError={(e) => e.target.src='https://www.primefaces.org/wp-content/uploads/2020/05/placeholder.png'}\r\n                                       className={\\`flag flag-\\${option.code.toLowerCase()}\\`} />}\r\n                {option.cities && <i className=\"pi pi-compass p-mr-2\"/>}\r\n                {option.cname && <i className=\"pi pi-map-marker p-mr-2\"/>}\r\n                <span>{option.cname || option.name}</span>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"card\">\r\n                <h5>Basic</h5>\r\n                <CascadeSelect  value={selectedCity1} options={countries}  optionLabel={\"cname\"} optionGroupLabel={\"name\"} optionGroupChildren={['states', 'cities']}\r\n                                style={{minWidth: '14rem'}} placeholder={\"Select a City\"} onChange={event => setSelectedCity1(event.value)}/>\r\n\r\n                <h5>Templating</h5>\r\n                <CascadeSelect  value={selectedCity2} options={countries}  optionLabel={\"cname\"} optionGroupLabel={\"name\"} optionGroupChildren={['states', 'cities']}\r\n                                style={{minWidth: '14rem'}} placeholder={\"Select a City\"} onChange={event =>  setSelectedCity2(event.value)}  itemTemplate={countryOptionTemplate}/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n                `\r\n            },\r\n            'ts': {\r\n                tabName: 'TS Source',\r\n                content: `\r\nimport React, { useState } from 'react';\r\nimport { CascadeSelect } from 'primereact/cascadeselect';\r\n\r\nconst CascadeSelectDemo = () => {\r\n    const [selectedCity1, setSelectedCity1] = useState(null);\r\n    const [selectedCity2, setSelectedCity2] = useState(null);\r\n    const countries = [\r\n                {\r\n                    name: 'Australia',\r\n                    code: 'AU',\r\n                    states: [\r\n                        {\r\n                            name: 'New South Wales',\r\n                            cities: [\r\n                                {cname: 'Sydney', code: 'A-SY'},\r\n                                {cname: 'Newcastle', code: 'A-NE'},\r\n                                {cname: 'Wollongong', code: 'A-WO'}\r\n                            ]\r\n                        },\r\n                        {\r\n                            name: 'Queensland',\r\n                            cities: [\r\n                                {cname: 'Brisbane', code: 'A-BR'},\r\n                                {cname: 'Townsville', code: 'A-TO'}\r\n                            ]\r\n                        },\r\n\r\n                    ]\r\n                },\r\n                {\r\n                    name: 'Canada',\r\n                    code: 'CA',\r\n                    states: [\r\n                        {\r\n                            name: 'Quebec',\r\n                            cities: [\r\n                                {cname: 'Montreal', code: 'C-MO'},\r\n                                {cname: 'Quebec City', code: 'C-QU'}\r\n                            ]\r\n                        },\r\n                        {\r\n                            name: 'Ontario',\r\n                            cities: [\r\n                                {cname: 'Ottawa', code: 'C-OT'},\r\n                                {cname: 'Toronto', code: 'C-TO'}\r\n                            ]\r\n                        },\r\n\r\n                    ]\r\n                },\r\n                {\r\n                    name: 'United States',\r\n                    code: 'US',\r\n                    states: [\r\n                        {\r\n                            name: 'California',\r\n                            cities: [\r\n                                {cname: 'Los Angeles', code: 'US-LA'},\r\n                                {cname: 'San Diego', code: 'US-SD'},\r\n                                {cname: 'San Francisco', code: 'US-SF'}\r\n                            ]\r\n                        },\r\n                        {\r\n                            name: 'Florida',\r\n                            cities: [\r\n                                {cname: 'Jacksonville', code: 'US-JA'},\r\n                                {cname: 'Miami', code: 'US-MI'},\r\n                                {cname: 'Tampa', code: 'US-TA'},\r\n                                {cname: 'Orlando', code: 'US-OR'}\r\n                            ]\r\n                        },\r\n                        {\r\n                            name: 'Texas',\r\n                            cities: [\r\n                                {cname: 'Austin', code: 'US-AU'},\r\n                                {cname: 'Dallas', code: 'US-DA'},\r\n                                {cname: 'Houston', code: 'US-HO'}\r\n                            ]\r\n                        }\r\n                    ]\r\n                }\r\n            ];\r\n\r\n    const countryOptionTemplate = (option) => {\r\n        return (\r\n            <div className=\"country-item\">\r\n                {option.states && <img alt={option.name} src=\"showcase/demo/images/flag_placeholder.png\" onError={(e) => e.target.src='https://www.primefaces.org/wp-content/uploads/2020/05/placeholder.png'}\r\n                                       className={\\`flag flag-\\${option.code.toLowerCase()}\\`} />}\r\n                {option.cities && <i className=\"pi pi-compass p-mr-2\"/>}\r\n                {option.cname && <i className=\"pi pi-map-marker p-mr-2\"/>}\r\n                <span>{option.cname || option.name}</span>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"card\">\r\n                <h5>Basic</h5>\r\n                <CascadeSelect  value={selectedCity1} options={countries}  optionLabel={\"cname\"} optionGroupLabel={\"name\"} optionGroupChildren={['states', 'cities']}\r\n                                style={{minWidth: '14rem'}} placeholder={\"Select a City\"} onChange={event => setSelectedCity1(event.value)}/>\r\n\r\n                <h5>Templating</h5>\r\n                <CascadeSelect  value={selectedCity2} options={countries}  optionLabel={\"cname\"} optionGroupLabel={\"name\"} optionGroupChildren={['states', 'cities']}\r\n                                style={{minWidth: '14rem'}} placeholder={\"Select a City\"} onChange={event =>  setSelectedCity2(event.value)}  itemTemplate={countryOptionTemplate}/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n                `\r\n            }\r\n        }\r\n    }\r\n\r\n    shouldComponentUpdate() {\r\n        return false;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"content-section documentation\">\r\n                <TabView>\r\n                    <TabPanel header=\"Documentation\">\r\n                        <h5>Import</h5>\r\n<CodeHighlight lang=\"js\">\r\n{`\r\nimport { CascadeSelect } from 'primereact/cascadeselect';\r\n`}\r\n</CodeHighlight>\r\n\r\n                        <h5>Getting Started</h5>\r\n                        <p>CascadeSelect requires a value to bind and a collection of arbitrary objects with a nested hierarchy. <i>optionGroupLabel</i>\r\n                            is used for the text of a category and <i>optionGroupChildren</i> is to define the children of the category. Note that order of the <i>optionGroupChildren</i>\r\n                            matters and it should correspond to the data hierarchy.</p>\r\n<CodeHighlight>\r\n{`\r\n<CascadeSelect  value={selectedCity} options={countries}  optionLabel={\"cname\"} optionGroupLabel={\"name\"} optionGroupChildren={['states', 'cities']}\r\n                style={{minWidth: '14rem'}} placeholder={\"Select a City\"} onChange={event => setSelectedCity1(event.value)}/>\r\n`}\r\n</CodeHighlight>\r\n\r\n<CodeHighlight lang=\"js\">\r\n{`\r\nconst countries = [\r\n    {\r\n        name: 'Australia',\r\n        code: 'AU',\r\n        states: [\r\n            {\r\n                name: 'New South Wales',\r\n                cities: [\r\n                    {cname: 'Sydney', code: 'A-SY'},\r\n                    {cname: 'Newcastle', code: 'A-NE'},\r\n                    {cname: 'Wollongong', code: 'A-WO'}\r\n                ]\r\n            },\r\n            {\r\n                name: 'Queensland',\r\n                cities: [\r\n                    {cname: 'Brisbane', code: 'A-BR'},\r\n                    {cname: 'Townsville', code: 'A-TO'}\r\n                ]\r\n            },\r\n\r\n        ]\r\n    },\r\n    {\r\n        name: 'Canada',\r\n        code: 'CA',\r\n        states: [\r\n            {\r\n                name: 'Quebec',\r\n                cities: [\r\n                    {cname: 'Montreal', code: 'C-MO'},\r\n                    {cname: 'Quebec City', code: 'C-QU'}\r\n                ]\r\n            },\r\n            {\r\n                name: 'Ontario',\r\n                cities: [\r\n                    {cname: 'Ottawa', code: 'C-OT'},\r\n                    {cname: 'Toronto', code: 'C-TO'}\r\n                ]\r\n            },\r\n\r\n        ]\r\n    },\r\n    {\r\n        name: 'United States',\r\n        code: 'US',\r\n        states: [\r\n            {\r\n                name: 'California',\r\n                cities: [\r\n                    {cname: 'Los Angeles', code: 'US-LA'},\r\n                    {cname: 'San Diego', code: 'US-SD'},\r\n                    {cname: 'San Francisco', code: 'US-SF'}\r\n                ]\r\n            },\r\n            {\r\n                name: 'Florida',\r\n                cities: [\r\n                    {cname: 'Jacksonville', code: 'US-JA'},\r\n                    {cname: 'Miami', code: 'US-MI'},\r\n                    {cname: 'Tampa', code: 'US-TA'},\r\n                    {cname: 'Orlando', code: 'US-OR'}\r\n                ]\r\n            },\r\n            {\r\n                name: 'Texas',\r\n                cities: [\r\n                    {cname: 'Austin', code: 'US-AU'},\r\n                    {cname: 'Dallas', code: 'US-DA'},\r\n                    {cname: 'Houston', code: 'US-HO'}\r\n                ]\r\n            }\r\n        ]\r\n    }\r\n]\r\n`}\r\n</CodeHighlight>\r\n\r\n\r\n                        <h5>Templating</h5>\r\n                        <p>Content of an item can be customized with the <i>itemTemplate</i> prop.</p>\r\n<CodeHighlight>\r\n{`\r\n<CascadeSelect value={selectedCity2} options={countries}  optionLabel={\"cname\"} optionGroupLabel={\"name\"} optionGroupChildren={['states', 'cities']}\r\n    style={{minWidth: '14rem'}} placeholder={\"Select a City\"} onChange={event => setSelectedCity2(event.value)} itemTemplate={countryOptionTemplate}/>\r\n`}\r\n</CodeHighlight>\r\n<CodeHighlight lang=\"js\">\r\n{`\r\nconst countryOptionTemplate = (option) => {\r\n    return (\r\n        <div className=\"country-item\">\r\n            {option.states && <img alt={option.name} src=\"showcase/demo/images/flag_placeholder.png\" onError={(e) => e.target.src='https://www.primefaces.org/wp-content/uploads/2020/05/placeholder.png'}\r\n                                   className={\\`flag flag-\\${option.code.toLowerCase()}\\`} />}\r\n            {option.cities && <i className=\"pi pi-compass p-mr-2\"/>}\r\n            {option.cname && <i className=\"pi pi-map-marker p-mr-2\"/>}\r\n            <span>{option.cname || option.name}</span>\r\n        </div>\r\n    );\r\n}\r\n`}\r\n</CodeHighlight>\r\n\r\n                        <h5>Properties</h5>\r\n                        <div className=\"doc-tablewrapper\">\r\n                            <table className=\"doc-table\">\r\n                                <thead>\r\n                                    <tr>\r\n                                        <th>Name</th>\r\n                                        <th>Type</th>\r\n                                        <th>Default</th>\r\n                                        <th>Description</th>\r\n                                    </tr>\r\n                                </thead>\r\n                                <tbody>\r\n                                    <tr>\r\n                                        <td>id</td>\r\n                                        <td>string</td>\r\n                                        <td>null</td>\r\n                                        <td>Unique identifier of the element.</td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>style</td>\r\n                                        <td>object</td>\r\n                                        <td>null</td>\r\n                                        <td>Inline style of the component.</td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>className</td>\r\n                                        <td>string</td>\r\n                                        <td>null</td>\r\n                                        <td>Style class of the component.</td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>options</td>\r\n                                        <td>array</td>\r\n                                        <td>null</td>\r\n                                        <td>An array of selectitems to display as the available options.</td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>optionLabel</td>\r\n                                        <td>string</td>\r\n                                        <td>null</td>\r\n                                        <td>Property name or getter function to use as the label of an option.</td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>optionValue</td>\r\n                                        <td>string</td>\r\n                                        <td>null</td>\r\n                                        <td>Property name or getter function to use as the value of an option, defaults to the option itself when not defined.</td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>optionGroupLabel</td>\r\n                                        <td>string</td>\r\n                                        <td>null</td>\r\n                                        <td>Property name or getter function to use as the label of an option group.</td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>optionGroupChildren</td>\r\n                                        <td>string</td>\r\n                                        <td>null</td>\r\n                                        <td>Property name or getter function to retrieve the items of a group.</td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>placeholder</td>\r\n                                        <td>string</td>\r\n                                        <td>null</td>\r\n                                        <td>Default text to display when no option is selected.</td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>disabled</td>\r\n                                        <td>boolean</td>\r\n                                        <td>false</td>\r\n                                        <td>When present, it specifies that the component should be disabled.</td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>dataKey</td>\r\n                                        <td>string</td>\r\n                                        <td>null</td>\r\n                                        <td>A property to uniquely identify an option.</td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>tabIndex</td>\r\n                                        <td>number</td>\r\n                                        <td>null</td>\r\n                                        <td>Index of the element in tabbing order.</td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>inputId</td>\r\n                                        <td>string</td>\r\n                                        <td>null</td>\r\n                                        <td>Identifier of the underlying input element.</td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>ariaLabelledBy</td>\r\n                                        <td>string</td>\r\n                                        <td>null</td>\r\n                                        <td>Establishes relationships between the component and label(s) where its value should be one or more element IDs.</td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>appendTo</td>\r\n                                        <td>string</td>\r\n                                        <td>null</td>\r\n                                        <td>Id of the element or \"body\" for document where the overlay should be appended to.</td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>itemTemplate</td>\r\n                                        <td>any</td>\r\n                                        <td>null</td>\r\n                                        <td>The template of items.</td>\r\n                                    </tr>\r\n                                </tbody>\r\n                            </table>\r\n                        </div>\r\n\r\n                        <h5>Events</h5>\r\n                        <div className=\"doc-tablewrapper\">\r\n                            <table className=\"doc-table\">\r\n                                <thead>\r\n                                    <tr>\r\n                                        <th>Name</th>\r\n                                        <th>Parameters</th>\r\n                                        <th>Description</th>\r\n                                    </tr>\r\n                                </thead>\r\n                                <tbody>\r\n                                    <tr>\r\n                                        <td>onChange</td>\r\n                                        <td>event.originalEvent: Original event <br />\r\n                                            event.value: Value of the checkbox </td>\r\n                                        <td>Callback to invoke on value change</td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>onGroupChange</td>\r\n                                        <td>event: Browser event.</td>\r\n                                        <td>Callback to invoke when a group changes.</td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>onBeforeShow</td>\r\n                                        <td>-</td>\r\n                                        <td>Callback to invoke before the overlay is shown.</td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>onBeforeHide</td>\r\n                                        <td>-</td>\r\n                                        <td>Callback to invoke before the overlay is hidden.</td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>onShow</td>\r\n                                        <td>-</td>\r\n                                        <td>Callback to invoke when the overlay is shown.</td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>onHide</td>\r\n                                        <td>-</td>\r\n                                        <td>Callback to invoke when the overlay is hidden.</td>\r\n                                    </tr>\r\n                                </tbody>\r\n                            </table>\r\n                        </div>\r\n\r\n                        <h5>Styling</h5>\r\n                        <p>Following is the list of structural style classes, for theming classes visit <Link to=\"/theming\">theming</Link> page.</p>\r\n                        <div className=\"doc-tablewrapper\">\r\n                            <table className=\"doc-table\">\r\n                                <thead>\r\n                                    <tr>\r\n                                        <th>Name</th>\r\n                                        <th>Element</th>\r\n                                    </tr>\r\n                                </thead>\r\n                                <tbody>\r\n                                    <tr>\r\n                                        <td>p-cascadeselect</td>\r\n                                        <td>Container element.</td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>p-cascadeselect-label</td>\r\n                                        <td>Element to display label of selected option.</td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>p-cascadeselect-trigger</td>\r\n                                        <td>Icon element.</td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>p-cascadeselect-panel</td>\r\n                                        <td>Icon element.</td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>p-cascadeselect-items-wrapper</td>\r\n                                        <td>Wrapper element of items list.</td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>p-cascadeselect-items</td>\r\n                                        <td>List element of items.</td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>p-cascadeselect-item</td>\r\n                                        <td>An item in the list.</td>\r\n                                    </tr>\r\n                                </tbody>\r\n                            </table>\r\n                        </div>\r\n\r\n                        <h5>Dependencies</h5>\r\n                        <p>None.</p>\r\n                    </TabPanel>\r\n\r\n                    {\r\n                        useLiveEditorTabs({ name: 'CascadeSelectDemo', sources: this.sources })\r\n                    }\r\n                </TabView>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}