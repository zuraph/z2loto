{"ast":null,"code":"import _objectSpread from \"C:\\\\Users\\\\zura.ph\\\\WebstormProjects\\\\slotmaster-dashboard\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\nimport _classCallCheck from \"C:\\\\Users\\\\zura.ph\\\\WebstormProjects\\\\slotmaster-dashboard\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\zura.ph\\\\WebstormProjects\\\\slotmaster-dashboard\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"C:\\\\Users\\\\zura.ph\\\\WebstormProjects\\\\slotmaster-dashboard\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"C:\\\\Users\\\\zura.ph\\\\WebstormProjects\\\\slotmaster-dashboard\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _createSuper from \"C:\\\\Users\\\\zura.ph\\\\WebstormProjects\\\\slotmaster-dashboard\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"C:\\\\Users\\\\zura.ph\\\\WebstormProjects\\\\slotmaster-dashboard\\\\src\\\\showcase\\\\datatable\\\\DataTableScrollDemo.js\";\nimport React, { Component } from 'react';\nimport { DataTable } from '../../components/datatable/DataTable';\nimport { Column } from '../../components/column/Column';\nimport { CustomerService } from '../service/CustomerService';\nimport { TabView } from '../../components/tabview/TabView';\nimport { useLiveEditorTabs } from '../liveeditor/LiveEditor';\nimport { AppInlineHeader } from '../../AppInlineHeader';\nimport './DataTableDemo.scss';\nexport var DataTableScrollDemo = /*#__PURE__*/function (_Component) {\n  _inherits(DataTableScrollDemo, _Component);\n\n  var _super = _createSuper(DataTableScrollDemo);\n\n  function DataTableScrollDemo(props) {\n    var _this;\n\n    _classCallCheck(this, DataTableScrollDemo);\n\n    _this = _super.call(this, props);\n    _this.state = {\n      customers: [],\n      virtualCustomers: [],\n      inmemoryData: [],\n      lazyTotalRecords: 0,\n      loading: false,\n      virtualLoading: false\n    };\n    _this.customerService = new CustomerService();\n    _this.nameBodyTemplate = _this.nameBodyTemplate.bind(_assertThisInitialized(_this));\n    _this.onVirtualScroll = _this.onVirtualScroll.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(DataTableScrollDemo, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      this.setState({\n        loading: true,\n        virtualLoading: true\n      });\n      this.customerService.getCustomersLarge().then(function (data) {\n        _this2.setState({\n          customers: data,\n          loading: false\n        });\n      });\n      this.customerService.getCustomersXLarge().then(function (data) {\n        return _this2.setState({\n          inmemoryData: data\n        }, _this2.loadVirtualCustomers);\n      });\n      this.frozenValue = [{\n        id: 1255,\n        name: \"James McAdams\",\n        country: {\n          name: \"United States\",\n          code: \"us\"\n        },\n        company: \"McAdams Consulting Ltd\",\n        date: \"2014-02-13\",\n        status: \"qualified\",\n        activity: 23,\n        representative: {\n          name: \"Ioni Bowcher\",\n          image: \"ionibowcher.png\"\n        }\n      }, {\n        id: 5135,\n        name: \"Geraldine Bisset\",\n        country: {\n          name: \"France\",\n          code: \"fr\"\n        },\n        company: \"Bisset Group\",\n        status: \"proposal\",\n        date: \"2019-05-05\",\n        activity: 0,\n        representative: {\n          name: \"Amy Elsner\",\n          image: \"amyelsner.png\"\n        }\n      }];\n    }\n  }, {\n    key: \"loadVirtualCustomers\",\n    value: function loadVirtualCustomers() {\n      this.setState({\n        virtualCustomers: this.loadChunk(0, 40),\n        lazyTotalRecords: 500,\n        virtualLoading: false\n      });\n    }\n  }, {\n    key: \"loadChunk\",\n    value: function loadChunk(index, length) {\n      var chunk = [];\n\n      for (var i = 0; i < length; i++) {\n        chunk[i] = _objectSpread({}, this.state.inmemoryData[i]);\n      }\n\n      return chunk;\n    }\n  }, {\n    key: \"onVirtualScroll\",\n    value: function onVirtualScroll(event) {\n      var _this3 = this;\n\n      //for demo purposes keep loading the same dataset\n      //in a real production application, this data should come from server by building the query with LazyLoadEvent options\n      setTimeout(function () {\n        //last chunk\n        if (event.first === 480) {\n          _this3.setState({\n            virtualCustomers: _this3.loadChunk(event.first, 20)\n          });\n        } else {\n          _this3.setState({\n            virtualCustomers: _this3.loadChunk(event.first, event.rows)\n          });\n        }\n      }, 250);\n    }\n  }, {\n    key: \"loadingText\",\n    value: function loadingText() {\n      return /*#__PURE__*/React.createElement(\"span\", {\n        className: \"loading-text\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 16\n        }\n      });\n    }\n  }, {\n    key: \"nameBodyTemplate\",\n    value: function nameBodyTemplate(rowData) {\n      return /*#__PURE__*/React.createElement(\"span\", {\n        style: {\n          fontWeight: '700'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 16\n        }\n      }, rowData.name);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"content-section introduction\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(AppInlineHeader, {\n        changelogText: \"dataTable\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(\"h1\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 25\n        }\n      }, \"DataTable \", /*#__PURE__*/React.createElement(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 39\n        }\n      }, \"Scroll\")), /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 25\n        }\n      }, \"Data scrolling with fixed header is available horizontally, vertically or both. ScrollHeight and ScrollWidth values can either be fixed pixels or percentages. Certain columns can be fixed as well. Virtual Scrolling mode is available to deal with large datasets by loading data on demand during scrolling.\"))), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"content-section implementation datatable-scroll-demo\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"card\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(\"h5\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 25\n        }\n      }, \"Vertical\"), /*#__PURE__*/React.createElement(DataTable, {\n        value: this.state.customers,\n        scrollable: true,\n        scrollHeight: \"200px\",\n        loading: this.state.loading,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(Column, {\n        field: \"name\",\n        header: \"Name\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 29\n        }\n      }), /*#__PURE__*/React.createElement(Column, {\n        field: \"country.name\",\n        header: \"Country\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 29\n        }\n      }), /*#__PURE__*/React.createElement(Column, {\n        field: \"representative.name\",\n        header: \"Representative\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 29\n        }\n      }), /*#__PURE__*/React.createElement(Column, {\n        field: \"status\",\n        header: \"Status\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 29\n        }\n      }))), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"card\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(\"h5\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 25\n        }\n      }, \"Virtual Scroll\"), /*#__PURE__*/React.createElement(DataTable, {\n        value: this.state.virtualCustomers,\n        scrollable: true,\n        scrollHeight: \"200px\",\n        lazy: true,\n        rows: 20,\n        loading: this.state.virtualLoading,\n        virtualScroll: true,\n        virtualRowHeight: 45,\n        onVirtualScroll: this.onVirtualScroll,\n        totalRecords: this.state.lazyTotalRecords,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(Column, {\n        field: \"name\",\n        header: \"Name\",\n        loadingBody: this.loadingText,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 29\n        }\n      }), /*#__PURE__*/React.createElement(Column, {\n        field: \"country.name\",\n        header: \"Country\",\n        loadingBody: this.loadingText,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 29\n        }\n      }), /*#__PURE__*/React.createElement(Column, {\n        field: \"representative.name\",\n        header: \"Representative\",\n        loadingBody: this.loadingText,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 29\n        }\n      }), /*#__PURE__*/React.createElement(Column, {\n        field: \"status\",\n        header: \"Status\",\n        loadingBody: this.loadingText,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 148,\n          columnNumber: 29\n        }\n      }))), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"card\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(\"h5\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 25\n        }\n      }, \"Horizontal and Vertical\"), /*#__PURE__*/React.createElement(DataTable, {\n        value: this.state.customers,\n        scrollable: true,\n        scrollHeight: \"200px\",\n        style: {\n          width: '600px'\n        },\n        loading: this.state.loading,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 154,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(Column, {\n        field: \"id\",\n        header: \"Id\",\n        headerStyle: {\n          width: '250px'\n        },\n        columnKey: \"id\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 29\n        }\n      }), /*#__PURE__*/React.createElement(Column, {\n        field: \"name\",\n        header: \"Name\",\n        headerStyle: {\n          width: '250px'\n        },\n        columnKey: \"name\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 29\n        }\n      }), /*#__PURE__*/React.createElement(Column, {\n        field: \"country.name\",\n        header: \"Country\",\n        headerStyle: {\n          width: '250px'\n        },\n        columnKey: \"country\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 157,\n          columnNumber: 29\n        }\n      }), /*#__PURE__*/React.createElement(Column, {\n        field: \"date\",\n        header: \"Date\",\n        headerStyle: {\n          width: '250px'\n        },\n        columnKey: \"date\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 158,\n          columnNumber: 29\n        }\n      }), /*#__PURE__*/React.createElement(Column, {\n        field: \"company\",\n        header: \"Company\",\n        headerStyle: {\n          width: '250px'\n        },\n        columnKey: \"company\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 159,\n          columnNumber: 29\n        }\n      }), /*#__PURE__*/React.createElement(Column, {\n        field: \"status\",\n        header: \"Status\",\n        headerStyle: {\n          width: '250px'\n        },\n        columnKey: \"status\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 160,\n          columnNumber: 29\n        }\n      }), /*#__PURE__*/React.createElement(Column, {\n        field: \"activity\",\n        header: \"Activity\",\n        headerStyle: {\n          width: '250px'\n        },\n        columnKey: \"activity\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 161,\n          columnNumber: 29\n        }\n      }), /*#__PURE__*/React.createElement(Column, {\n        field: \"representative.name\",\n        header: \"Representative\",\n        headerStyle: {\n          width: '250px'\n        },\n        columnKey: \"representative\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 162,\n          columnNumber: 29\n        }\n      }))), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"card\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 166,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(\"h5\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 167,\n          columnNumber: 25\n        }\n      }, \"Frozen Rows\"), /*#__PURE__*/React.createElement(DataTable, {\n        value: this.state.customers,\n        frozenValue: this.frozenValue,\n        scrollable: true,\n        scrollHeight: \"200px\",\n        loading: this.state.loading,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 168,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(Column, {\n        field: \"name\",\n        header: \"Name\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 169,\n          columnNumber: 29\n        }\n      }), /*#__PURE__*/React.createElement(Column, {\n        field: \"country.name\",\n        header: \"Country\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 170,\n          columnNumber: 29\n        }\n      }), /*#__PURE__*/React.createElement(Column, {\n        field: \"representative.name\",\n        header: \"Representative\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 171,\n          columnNumber: 29\n        }\n      }), /*#__PURE__*/React.createElement(Column, {\n        field: \"status\",\n        header: \"Status\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 172,\n          columnNumber: 29\n        }\n      }))), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"card\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 176,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(\"h5\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 177,\n          columnNumber: 25\n        }\n      }, \"Frozen Columns\"), /*#__PURE__*/React.createElement(DataTable, {\n        value: this.state.customers,\n        scrollable: true,\n        scrollHeight: \"200px\",\n        frozenWidth: \"300px\",\n        loading: this.state.loading,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 178,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(Column, {\n        field: \"name\",\n        header: \"Name\",\n        body: this.nameBodyTemplate,\n        headerStyle: {\n          width: '300px'\n        },\n        columnKey: \"name\",\n        frozen: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 179,\n          columnNumber: 29\n        }\n      }), /*#__PURE__*/React.createElement(Column, {\n        field: \"id\",\n        header: \"Id\",\n        headerStyle: {\n          width: '300px'\n        },\n        columnKey: \"id\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 180,\n          columnNumber: 29\n        }\n      }), /*#__PURE__*/React.createElement(Column, {\n        field: \"country.name\",\n        header: \"Country\",\n        headerStyle: {\n          width: '300px'\n        },\n        columnKey: \"country\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 181,\n          columnNumber: 29\n        }\n      }), /*#__PURE__*/React.createElement(Column, {\n        field: \"date\",\n        header: \"Date\",\n        headerStyle: {\n          width: '300px'\n        },\n        columnKey: \"date\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 182,\n          columnNumber: 29\n        }\n      }), /*#__PURE__*/React.createElement(Column, {\n        field: \"company\",\n        header: \"Country\",\n        headerStyle: {\n          width: '300px'\n        },\n        columnKey: \"company\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 183,\n          columnNumber: 29\n        }\n      }), /*#__PURE__*/React.createElement(Column, {\n        field: \"status\",\n        header: \"Status\",\n        headerStyle: {\n          width: '300px'\n        },\n        columnKey: \"status\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 184,\n          columnNumber: 29\n        }\n      }), /*#__PURE__*/React.createElement(Column, {\n        field: \"activity\",\n        header: \"Activity\",\n        headerStyle: {\n          width: '300px'\n        },\n        columnKey: \"activity\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 185,\n          columnNumber: 29\n        }\n      }), /*#__PURE__*/React.createElement(Column, {\n        field: \"representative.name\",\n        header: \"Representative\",\n        headerStyle: {\n          width: '300px'\n        },\n        columnKey: \"representative\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 186,\n          columnNumber: 29\n        }\n      })))), /*#__PURE__*/React.createElement(DataTableScrollDemoDoc, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 191,\n          columnNumber: 17\n        }\n      }));\n    }\n  }]);\n\n  return DataTableScrollDemo;\n}(Component);\nexport var DataTableScrollDemoDoc = /*#__PURE__*/function (_Component2) {\n  _inherits(DataTableScrollDemoDoc, _Component2);\n\n  var _super2 = _createSuper(DataTableScrollDemoDoc);\n\n  function DataTableScrollDemoDoc(props) {\n    var _this4;\n\n    _classCallCheck(this, DataTableScrollDemoDoc);\n\n    _this4 = _super2.call(this, props);\n    _this4.sources = {\n      'class': {\n        tabName: 'Class Source',\n        content: \"\\nimport React, { Component } from 'react';\\nimport { DataTable } from 'primereact/datatable';\\nimport { Column } from 'primereact/column';\\nimport { CustomerService } from '../service/CustomerService';\\nimport './DataTableDemo.css';\\n\\nexport class DataTableScrollDemo extends Component {\\n\\n    constructor(props) {\\n        super(props);\\n\\n        this.state = {\\n            customers: [],\\n            virtualCustomers: [],\\n            inmemoryData: [],\\n            lazyTotalRecords: 0,\\n            loading: false,\\n            virtualLoading: false\\n        };\\n\\n        this.customerService = new CustomerService();\\n        this.nameBodyTemplate = this.nameBodyTemplate.bind(this);\\n        this.onVirtualScroll = this.onVirtualScroll.bind(this);\\n    }\\n\\n    componentDidMount() {\\n        this.setState({ loading: true, virtualLoading: true });\\n\\n        this.customerService.getCustomersLarge().then(data => {\\n            this.setState({\\n                customers: data,\\n                loading: false\\n            });\\n        });\\n        this.customerService.getCustomersXLarge().then(data => this.setState({ inmemoryData: data }, this.loadVirtualCustomers));\\n\\n        this.frozenValue = [\\n            {\\n                id: 1255,\\n                name: \\\"James McAdams\\\",\\n                country: {\\n                    name: \\\"United States\\\",\\n                    code: \\\"us\\\"\\n                },\\n                company: \\\"McAdams Consulting Ltd\\\",\\n                date: \\\"2014-02-13\\\",\\n                status: \\\"qualified\\\",\\n                activity: 23,\\n                representative: {\\n                    name: \\\"Ioni Bowcher\\\",\\n                    image: \\\"ionibowcher.png\\\"\\n                }\\n            },\\n            {\\n                id: 5135,\\n                name: \\\"Geraldine Bisset\\\",\\n                country: {\\n                    name: \\\"France\\\",\\n                    code: \\\"fr\\\"\\n                },\\n                company: \\\"Bisset Group\\\",\\n                status: \\\"proposal\\\",\\n                date: \\\"2019-05-05\\\",\\n                activity: 0,\\n                representative: {\\n                    name: \\\"Amy Elsner\\\",\\n                    image: \\\"amyelsner.png\\\"\\n                }\\n            }\\n        ];\\n    }\\n\\n    loadVirtualCustomers() {\\n        this.setState({\\n            virtualCustomers: this.loadChunk(0, 40),\\n            lazyTotalRecords: 500,\\n            virtualLoading: false\\n        });\\n    }\\n\\n    loadChunk(index, length) {\\n        let chunk = [];\\n        for (let i = 0; i < length; i++) {\\n            chunk[i] = { ...this.state.inmemoryData[i]};\\n        }\\n\\n        return chunk;\\n    }\\n\\n    onVirtualScroll(event) {\\n        //for demo purposes keep loading the same dataset\\n        //in a real production application, this data should come from server by building the query with LazyLoadEvent options\\n        setTimeout(() => {\\n            //last chunk\\n            if (event.first === 480) {\\n                this.setState({\\n                    virtualCustomers: this.loadChunk(event.first, 20)\\n                });\\n            }\\n            else {\\n                this.setState({\\n                    virtualCustomers: this.loadChunk(event.first, event.rows)\\n                });\\n            }\\n        }, 250);\\n    }\\n\\n    loadingText() {\\n        return <span className=\\\"loading-text\\\"></span>;\\n    }\\n\\n    nameBodyTemplate(rowData) {\\n        return <span style={{ fontWeight: '700' }}>{rowData.name}</span>;\\n    }\\n\\n    render() {\\n        return (\\n            <div className=\\\"datatable-scroll-demo\\\">\\n                <div className=\\\"card\\\">\\n                    <h5>Vertical</h5>\\n                    <DataTable value={this.state.customers} scrollable scrollHeight=\\\"200px\\\" loading={this.state.loading}>\\n                        <Column field=\\\"name\\\" header=\\\"Name\\\"></Column>\\n                        <Column field=\\\"country.name\\\" header=\\\"Country\\\"></Column>\\n                        <Column field=\\\"representative.name\\\" header=\\\"Representative\\\"></Column>\\n                        <Column field=\\\"status\\\" header=\\\"Status\\\"></Column>\\n                    </DataTable>\\n                </div>\\n\\n                <div className=\\\"card\\\">\\n                    <h5>Virtual Scroll</h5>\\n                    <DataTable value={this.state.virtualCustomers} scrollable scrollHeight=\\\"200px\\\" lazy rows={20} loading={this.state.virtualLoading}\\n                        virtualScroll virtualRowHeight={45} onVirtualScroll={this.onVirtualScroll} totalRecords={this.state.lazyTotalRecords}>\\n                        <Column field=\\\"name\\\" header=\\\"Name\\\" loadingBody={this.loadingText}></Column>\\n                        <Column field=\\\"country.name\\\" header=\\\"Country\\\" loadingBody={this.loadingText}></Column>\\n                        <Column field=\\\"representative.name\\\" header=\\\"Representative\\\" loadingBody={this.loadingText}></Column>\\n                        <Column field=\\\"status\\\" header=\\\"Status\\\" loadingBody={this.loadingText}></Column>\\n                    </DataTable>\\n                </div>\\n\\n                <div className=\\\"card\\\">\\n                    <h5>Horizontal and Vertical</h5>\\n                    <DataTable value={this.state.customers} scrollable scrollHeight=\\\"200px\\\" style={{ width: '600px' }} loading={this.state.loading}>\\n                        <Column field=\\\"id\\\" header=\\\"Id\\\" headerStyle={{ width: '250px' }} columnKey=\\\"id\\\"></Column>\\n                        <Column field=\\\"name\\\" header=\\\"Name\\\" headerStyle={{ width: '250px' }} columnKey=\\\"name\\\"></Column>\\n                        <Column field=\\\"country.name\\\" header=\\\"Country\\\" headerStyle={{ width: '250px' }} columnKey=\\\"country\\\"></Column>\\n                        <Column field=\\\"date\\\" header=\\\"Date\\\" headerStyle={{ width: '250px' }} columnKey=\\\"date\\\"></Column>\\n                        <Column field=\\\"company\\\" header=\\\"Company\\\" headerStyle={{ width: '250px' }} columnKey=\\\"company\\\"></Column>\\n                        <Column field=\\\"status\\\" header=\\\"Status\\\" headerStyle={{ width: '250px' }} columnKey=\\\"status\\\"></Column>\\n                        <Column field=\\\"activity\\\" header=\\\"Activity\\\" headerStyle={{ width: '250px' }} columnKey=\\\"activity\\\"></Column>\\n                        <Column field=\\\"representative.name\\\" header=\\\"Representative\\\" headerStyle={{ width: '250px' }} columnKey=\\\"representative\\\"></Column>\\n                    </DataTable>\\n                </div>\\n\\n                <div className=\\\"card\\\">\\n                    <h5>Frozen Rows</h5>\\n                    <DataTable value={this.state.customers} frozenValue={this.frozenValue} scrollable scrollHeight=\\\"200px\\\" loading={this.state.loading}>\\n                        <Column field=\\\"name\\\" header=\\\"Name\\\"></Column>\\n                        <Column field=\\\"country.name\\\" header=\\\"Country\\\"></Column>\\n                        <Column field=\\\"representative.name\\\" header=\\\"Representative\\\"></Column>\\n                        <Column field=\\\"status\\\" header=\\\"Status\\\"></Column>\\n                    </DataTable>\\n                </div>\\n\\n                <div className=\\\"card\\\">\\n                    <h5>Frozen Columns</h5>\\n                    <DataTable value={this.state.customers} scrollable scrollHeight=\\\"200px\\\" frozenWidth=\\\"300px\\\" loading={this.state.loading}>\\n                        <Column field=\\\"name\\\" header=\\\"Name\\\" body={this.nameBodyTemplate} headerStyle={{ width: '300px' }} columnKey=\\\"name\\\" frozen></Column>\\n                        <Column field=\\\"id\\\" header=\\\"Id\\\" headerStyle={{ width: '300px' }} columnKey=\\\"id\\\"></Column>\\n                        <Column field=\\\"country.name\\\" header=\\\"Country\\\" headerStyle={{ width: '300px' }} columnKey=\\\"country\\\"></Column>\\n                        <Column field=\\\"date\\\" header=\\\"Date\\\" headerStyle={{ width: '300px' }} columnKey=\\\"date\\\"></Column>\\n                        <Column field=\\\"company\\\" header=\\\"Country\\\" headerStyle={{ width: '300px' }} columnKey=\\\"company\\\"></Column>\\n                        <Column field=\\\"status\\\" header=\\\"Status\\\" headerStyle={{ width: '300px' }} columnKey=\\\"status\\\"></Column>\\n                        <Column field=\\\"activity\\\" header=\\\"Activity\\\" headerStyle={{ width: '300px' }} columnKey=\\\"activity\\\"></Column>\\n                        <Column field=\\\"representative.name\\\" header=\\\"Representative\\\" headerStyle={{ width: '300px' }} columnKey=\\\"representative\\\"></Column>\\n                    </DataTable>\\n                </div>\\n            </div>\\n        );\\n    }\\n}\\n                \"\n      },\n      'hooks': {\n        tabName: 'Hooks Source',\n        content: \"\\nimport React, { useState, useEffect, useRef } from 'react';\\nimport { DataTable } from 'primereact/datatable';\\nimport { Column } from 'primereact/column';\\nimport { CustomerService } from '../service/CustomerService';\\nimport './DataTableDemo.css';\\n\\nconst DataTableScrollDemo = () => {\\n    const [customers, setCustomers] = useState([]);\\n    const [virtualCustomers, setVirtualCustomers] = useState([]);\\n    const [inmemoryData, setInMemoryData] = useState([]);\\n    const [lazyTotalRecords, setLazyTotalRecords] = useState(0);\\n    const [loading, setLoading] = useState(false);\\n    const [virtualLoading, setVirtualLoading] = useState(false);\\n    const isMounted = useRef(null);\\n    const customerService = new CustomerService();\\n\\n    const frozenValue = [\\n        {\\n            id: 1255,\\n            name: \\\"James McAdams\\\",\\n            country: {\\n                name: \\\"United States\\\",\\n                code: \\\"us\\\"\\n            },\\n            company: \\\"McAdams Consulting Ltd\\\",\\n            date: \\\"2014-02-13\\\",\\n            status: \\\"qualified\\\",\\n            activity: 23,\\n            representative: {\\n                name: \\\"Ioni Bowcher\\\",\\n                image: \\\"ionibowcher.png\\\"\\n            }\\n        },\\n        {\\n            id: 5135,\\n            name: \\\"Geraldine Bisset\\\",\\n            country: {\\n                name: \\\"France\\\",\\n                code: \\\"fr\\\"\\n            },\\n            company: \\\"Bisset Group\\\",\\n            status: \\\"proposal\\\",\\n            date: \\\"2019-05-05\\\",\\n            activity: 0,\\n            representative: {\\n                name: \\\"Amy Elsner\\\",\\n                image: \\\"amyelsner.png\\\"\\n            }\\n        }\\n    ];\\n\\n    useEffect(() => {\\n        if (isMounted.current) {\\n            loadVirtualCustomers();\\n        }\\n    }, [inmemoryData]);\\n\\n    useEffect(() => {\\n        isMounted.current = true;\\n        setLoading(true);\\n        setVirtualLoading(true);\\n\\n        customerService.getCustomersLarge().then(data => {\\n            setCustomers(data);\\n            setLoading(false);\\n        });\\n        customerService.getCustomersXLarge().then(data => setInMemoryData(data));\\n    }, []); // eslint-disable-line react-hooks/exhaustive-deps\\n\\n    const loadVirtualCustomers = () => {\\n        setVirtualCustomers(loadChunk(0, 40));\\n        setLazyTotalRecords(500);\\n        setVirtualLoading(false);\\n    }\\n\\n    const loadChunk = (index, length) => {\\n        let chunk = [];\\n        for (let i = 0; i < length; i++) {\\n            chunk[i] = { ...inmemoryData[i]};\\n        }\\n\\n        return chunk;\\n    }\\n\\n    const onVirtualScroll = (event) => {\\n        //for demo purposes keep loading the same dataset\\n        //in a real production application, this data should come from server by building the query with LazyLoadEvent options\\n        setTimeout(() => {\\n            //last chunk\\n            if (event.first === 480) {\\n                setVirtualCustomers(loadChunk(event.first, 20));\\n            }\\n            else {\\n                setVirtualCustomers(loadChunk(event.first, event.rows));\\n            }\\n        }, 250);\\n    }\\n\\n    const loadingText = () => {\\n        return <span className=\\\"loading-text\\\"></span>;\\n    }\\n\\n    const nameBodyTemplate = (rowData) => {\\n        return <span style={{ fontWeight: '700' }}>{rowData.name}</span>;\\n    }\\n\\n    return (\\n        <div className=\\\"datatable-scroll-demo\\\">\\n            <div className=\\\"card\\\">\\n                <h5>Vertical</h5>\\n                <DataTable value={customers} scrollable scrollHeight=\\\"200px\\\" loading={loading}>\\n                    <Column field=\\\"name\\\" header=\\\"Name\\\"></Column>\\n                    <Column field=\\\"country.name\\\" header=\\\"Country\\\"></Column>\\n                    <Column field=\\\"representative.name\\\" header=\\\"Representative\\\"></Column>\\n                    <Column field=\\\"status\\\" header=\\\"Status\\\"></Column>\\n                </DataTable>\\n            </div>\\n\\n            <div className=\\\"card\\\">\\n                <h5>Virtual Scroll</h5>\\n                <DataTable value={virtualCustomers} scrollable scrollHeight=\\\"200px\\\" lazy rows={20} loading={virtualLoading}\\n                    virtualScroll virtualRowHeight={45} onVirtualScroll={onVirtualScroll} totalRecords={lazyTotalRecords}>\\n                    <Column field=\\\"name\\\" header=\\\"Name\\\" loadingBody={loadingText}></Column>\\n                    <Column field=\\\"country.name\\\" header=\\\"Country\\\" loadingBody={loadingText}></Column>\\n                    <Column field=\\\"representative.name\\\" header=\\\"Representative\\\" loadingBody={loadingText}></Column>\\n                    <Column field=\\\"status\\\" header=\\\"Status\\\" loadingBody={loadingText}></Column>\\n                </DataTable>\\n            </div>\\n\\n            <div className=\\\"card\\\">\\n                <h5>Horizontal and Vertical</h5>\\n                <DataTable value={customers} scrollable scrollHeight=\\\"200px\\\" style={{ width: '600px' }} loading={loading}>\\n                    <Column field=\\\"id\\\" header=\\\"Id\\\" headerStyle={{ width: '250px' }} columnKey=\\\"id\\\"></Column>\\n                    <Column field=\\\"name\\\" header=\\\"Name\\\" headerStyle={{ width: '250px' }} columnKey=\\\"name\\\"></Column>\\n                    <Column field=\\\"country.name\\\" header=\\\"Country\\\" headerStyle={{ width: '250px' }} columnKey=\\\"country\\\"></Column>\\n                    <Column field=\\\"date\\\" header=\\\"Date\\\" headerStyle={{ width: '250px' }} columnKey=\\\"date\\\"></Column>\\n                    <Column field=\\\"company\\\" header=\\\"Company\\\" headerStyle={{ width: '250px' }} columnKey=\\\"company\\\"></Column>\\n                    <Column field=\\\"status\\\" header=\\\"Status\\\" headerStyle={{ width: '250px' }} columnKey=\\\"status\\\"></Column>\\n                    <Column field=\\\"activity\\\" header=\\\"Activity\\\" headerStyle={{ width: '250px' }} columnKey=\\\"activity\\\"></Column>\\n                    <Column field=\\\"representative.name\\\" header=\\\"Representative\\\" headerStyle={{ width: '250px' }} columnKey=\\\"representative\\\"></Column>\\n                </DataTable>\\n            </div>\\n\\n            <div className=\\\"card\\\">\\n                <h5>Frozen Rows</h5>\\n                <DataTable value={customers} frozenValue={frozenValue} scrollable scrollHeight=\\\"200px\\\" loading={loading}>\\n                    <Column field=\\\"name\\\" header=\\\"Name\\\"></Column>\\n                    <Column field=\\\"country.name\\\" header=\\\"Country\\\"></Column>\\n                    <Column field=\\\"representative.name\\\" header=\\\"Representative\\\"></Column>\\n                    <Column field=\\\"status\\\" header=\\\"Status\\\"></Column>\\n                </DataTable>\\n            </div>\\n\\n            <div className=\\\"card\\\">\\n                <h5>Frozen Columns</h5>\\n                <DataTable value={customers} scrollable scrollHeight=\\\"200px\\\" frozenWidth=\\\"300px\\\" loading={loading}>\\n                    <Column field=\\\"name\\\" header=\\\"Name\\\" body={nameBodyTemplate} headerStyle={{ width: '300px' }} columnKey=\\\"name\\\" frozen></Column>\\n                    <Column field=\\\"id\\\" header=\\\"Id\\\" headerStyle={{ width: '300px' }} columnKey=\\\"id\\\"></Column>\\n                    <Column field=\\\"country.name\\\" header=\\\"Country\\\" headerStyle={{ width: '300px' }} columnKey=\\\"country\\\"></Column>\\n                    <Column field=\\\"date\\\" header=\\\"Date\\\" headerStyle={{ width: '300px' }} columnKey=\\\"date\\\"></Column>\\n                    <Column field=\\\"company\\\" header=\\\"Country\\\" headerStyle={{ width: '300px' }} columnKey=\\\"company\\\"></Column>\\n                    <Column field=\\\"status\\\" header=\\\"Status\\\" headerStyle={{ width: '300px' }} columnKey=\\\"status\\\"></Column>\\n                    <Column field=\\\"activity\\\" header=\\\"Activity\\\" headerStyle={{ width: '300px' }} columnKey=\\\"activity\\\"></Column>\\n                    <Column field=\\\"representative.name\\\" header=\\\"Representative\\\" headerStyle={{ width: '300px' }} columnKey=\\\"representative\\\"></Column>\\n                </DataTable>\\n            </div>\\n        </div>\\n    );\\n}\\n                \"\n      },\n      'ts': {\n        tabName: 'TS Source',\n        content: \"\\nimport React, { useState, useEffect, useRef } from 'react';\\nimport { DataTable } from 'primereact/datatable';\\nimport { Column } from 'primereact/column';\\nimport { CustomerService } from '../service/CustomerService';\\nimport './DataTableDemo.css';\\n\\nconst DataTableScrollDemo = () => {\\n    const [customers, setCustomers] = useState([]);\\n    const [virtualCustomers, setVirtualCustomers] = useState([]);\\n    const [inmemoryData, setInMemoryData] = useState([]);\\n    const [lazyTotalRecords, setLazyTotalRecords] = useState(0);\\n    const [loading, setLoading] = useState(false);\\n    const [virtualLoading, setVirtualLoading] = useState(false);\\n    const isMounted = useRef(null);\\n    const customerService = new CustomerService();\\n\\n    const frozenValue = [\\n        {\\n            id: 1255,\\n            name: \\\"James McAdams\\\",\\n            country: {\\n                name: \\\"United States\\\",\\n                code: \\\"us\\\"\\n            },\\n            company: \\\"McAdams Consulting Ltd\\\",\\n            date: \\\"2014-02-13\\\",\\n            status: \\\"qualified\\\",\\n            activity: 23,\\n            representative: {\\n                name: \\\"Ioni Bowcher\\\",\\n                image: \\\"ionibowcher.png\\\"\\n            }\\n        },\\n        {\\n            id: 5135,\\n            name: \\\"Geraldine Bisset\\\",\\n            country: {\\n                name: \\\"France\\\",\\n                code: \\\"fr\\\"\\n            },\\n            company: \\\"Bisset Group\\\",\\n            status: \\\"proposal\\\",\\n            date: \\\"2019-05-05\\\",\\n            activity: 0,\\n            representative: {\\n                name: \\\"Amy Elsner\\\",\\n                image: \\\"amyelsner.png\\\"\\n            }\\n        }\\n    ];\\n\\n    useEffect(() => {\\n        if (isMounted.current) {\\n            loadVirtualCustomers();\\n        }\\n    }, [inmemoryData]);\\n\\n    useEffect(() => {\\n        isMounted.current = true;\\n        setLoading(true);\\n        setVirtualLoading(true);\\n\\n        customerService.getCustomersLarge().then(data => {\\n            setCustomers(data);\\n            setLoading(false);\\n        });\\n        customerService.getCustomersXLarge().then(data => setInMemoryData(data));\\n    }, []); // eslint-disable-line react-hooks/exhaustive-deps\\n\\n    const loadVirtualCustomers = () => {\\n        setVirtualCustomers(loadChunk(0, 40));\\n        setLazyTotalRecords(500);\\n        setVirtualLoading(false);\\n    }\\n\\n    const loadChunk = (index, length) => {\\n        let chunk = [];\\n        for (let i = 0; i < length; i++) {\\n            chunk[i] = { ...inmemoryData[i]};\\n        }\\n\\n        return chunk;\\n    }\\n\\n    const onVirtualScroll = (event) => {\\n        //for demo purposes keep loading the same dataset\\n        //in a real production application, this data should come from server by building the query with LazyLoadEvent options\\n        setTimeout(() => {\\n            //last chunk\\n            if (event.first === 480) {\\n                setVirtualCustomers(loadChunk(event.first, 20));\\n            }\\n            else {\\n                setVirtualCustomers(loadChunk(event.first, event.rows));\\n            }\\n        }, 250);\\n    }\\n\\n    const loadingText = () => {\\n        return <span className=\\\"loading-text\\\"></span>;\\n    }\\n\\n    const nameBodyTemplate = (rowData) => {\\n        return <span style={{ fontWeight: '700' }}>{rowData.name}</span>;\\n    }\\n\\n    return (\\n        <div className=\\\"datatable-scroll-demo\\\">\\n            <div className=\\\"card\\\">\\n                <h5>Vertical</h5>\\n                <DataTable value={customers} scrollable scrollHeight=\\\"200px\\\" loading={loading}>\\n                    <Column field=\\\"name\\\" header=\\\"Name\\\"></Column>\\n                    <Column field=\\\"country.name\\\" header=\\\"Country\\\"></Column>\\n                    <Column field=\\\"representative.name\\\" header=\\\"Representative\\\"></Column>\\n                    <Column field=\\\"status\\\" header=\\\"Status\\\"></Column>\\n                </DataTable>\\n            </div>\\n\\n            <div className=\\\"card\\\">\\n                <h5>Virtual Scroll</h5>\\n                <DataTable value={virtualCustomers} scrollable scrollHeight=\\\"200px\\\" lazy rows={20} loading={virtualLoading}\\n                    virtualScroll virtualRowHeight={45} onVirtualScroll={onVirtualScroll} totalRecords={lazyTotalRecords}>\\n                    <Column field=\\\"name\\\" header=\\\"Name\\\" loadingBody={loadingText}></Column>\\n                    <Column field=\\\"country.name\\\" header=\\\"Country\\\" loadingBody={loadingText}></Column>\\n                    <Column field=\\\"representative.name\\\" header=\\\"Representative\\\" loadingBody={loadingText}></Column>\\n                    <Column field=\\\"status\\\" header=\\\"Status\\\" loadingBody={loadingText}></Column>\\n                </DataTable>\\n            </div>\\n\\n            <div className=\\\"card\\\">\\n                <h5>Horizontal and Vertical</h5>\\n                <DataTable value={customers} scrollable scrollHeight=\\\"200px\\\" style={{ width: '600px' }} loading={loading}>\\n                    <Column field=\\\"id\\\" header=\\\"Id\\\" headerStyle={{ width: '250px' }} columnKey=\\\"id\\\"></Column>\\n                    <Column field=\\\"name\\\" header=\\\"Name\\\" headerStyle={{ width: '250px' }} columnKey=\\\"name\\\"></Column>\\n                    <Column field=\\\"country.name\\\" header=\\\"Country\\\" headerStyle={{ width: '250px' }} columnKey=\\\"country\\\"></Column>\\n                    <Column field=\\\"date\\\" header=\\\"Date\\\" headerStyle={{ width: '250px' }} columnKey=\\\"date\\\"></Column>\\n                    <Column field=\\\"company\\\" header=\\\"Company\\\" headerStyle={{ width: '250px' }} columnKey=\\\"company\\\"></Column>\\n                    <Column field=\\\"status\\\" header=\\\"Status\\\" headerStyle={{ width: '250px' }} columnKey=\\\"status\\\"></Column>\\n                    <Column field=\\\"activity\\\" header=\\\"Activity\\\" headerStyle={{ width: '250px' }} columnKey=\\\"activity\\\"></Column>\\n                    <Column field=\\\"representative.name\\\" header=\\\"Representative\\\" headerStyle={{ width: '250px' }} columnKey=\\\"representative\\\"></Column>\\n                </DataTable>\\n            </div>\\n\\n            <div className=\\\"card\\\">\\n                <h5>Frozen Rows</h5>\\n                <DataTable value={customers} frozenValue={frozenValue} scrollable scrollHeight=\\\"200px\\\" loading={loading}>\\n                    <Column field=\\\"name\\\" header=\\\"Name\\\"></Column>\\n                    <Column field=\\\"country.name\\\" header=\\\"Country\\\"></Column>\\n                    <Column field=\\\"representative.name\\\" header=\\\"Representative\\\"></Column>\\n                    <Column field=\\\"status\\\" header=\\\"Status\\\"></Column>\\n                </DataTable>\\n            </div>\\n\\n            <div className=\\\"card\\\">\\n                <h5>Frozen Columns</h5>\\n                <DataTable value={customers} scrollable scrollHeight=\\\"200px\\\" frozenWidth=\\\"300px\\\" loading={loading}>\\n                    <Column field=\\\"name\\\" header=\\\"Name\\\" body={nameBodyTemplate} headerStyle={{ width: '300px' }} columnKey=\\\"name\\\" frozen></Column>\\n                    <Column field=\\\"id\\\" header=\\\"Id\\\" headerStyle={{ width: '300px' }} columnKey=\\\"id\\\"></Column>\\n                    <Column field=\\\"country.name\\\" header=\\\"Country\\\" headerStyle={{ width: '300px' }} columnKey=\\\"country\\\"></Column>\\n                    <Column field=\\\"date\\\" header=\\\"Date\\\" headerStyle={{ width: '300px' }} columnKey=\\\"date\\\"></Column>\\n                    <Column field=\\\"company\\\" header=\\\"Country\\\" headerStyle={{ width: '300px' }} columnKey=\\\"company\\\"></Column>\\n                    <Column field=\\\"status\\\" header=\\\"Status\\\" headerStyle={{ width: '300px' }} columnKey=\\\"status\\\"></Column>\\n                    <Column field=\\\"activity\\\" header=\\\"Activity\\\" headerStyle={{ width: '300px' }} columnKey=\\\"activity\\\"></Column>\\n                    <Column field=\\\"representative.name\\\" header=\\\"Representative\\\" headerStyle={{ width: '300px' }} columnKey=\\\"representative\\\"></Column>\\n                </DataTable>\\n            </div>\\n        </div>\\n    );\\n}\\n                \"\n      }\n    };\n    _this4.extFiles = {\n      'src/demo/DataTableDemo.css': {\n        content: \"\\n.datatable-scroll-demo .loading-text {\\n    display: block;\\n    background-color: #f1f1f1;\\n    min-height: 19px;\\n    animation: pulse 1s infinite ease-in-out;\\n    text-indent: -99999px;\\n    overflow: hidden;\\n}\\n                \"\n      }\n    };\n    return _this4;\n  }\n\n  _createClass(DataTableScrollDemoDoc, [{\n    key: \"shouldComponentUpdate\",\n    value: function shouldComponentUpdate() {\n      return false;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"content-section documentation\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 760,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(TabView, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 761,\n          columnNumber: 17\n        }\n      }, useLiveEditorTabs({\n        name: 'DataTableScrollDemo',\n        sources: this.sources,\n        service: 'CustomerService',\n        data: 'customers-large,customers-xlarge',\n        extFiles: this.extFiles\n      })));\n    }\n  }]);\n\n  return DataTableScrollDemoDoc;\n}(Component);","map":{"version":3,"sources":["C:/Users/zura.ph/WebstormProjects/slotmaster-dashboard/src/showcase/datatable/DataTableScrollDemo.js"],"names":["React","Component","DataTable","Column","CustomerService","TabView","useLiveEditorTabs","AppInlineHeader","DataTableScrollDemo","props","state","customers","virtualCustomers","inmemoryData","lazyTotalRecords","loading","virtualLoading","customerService","nameBodyTemplate","bind","onVirtualScroll","setState","getCustomersLarge","then","data","getCustomersXLarge","loadVirtualCustomers","frozenValue","id","name","country","code","company","date","status","activity","representative","image","loadChunk","index","length","chunk","i","event","setTimeout","first","rows","rowData","fontWeight","loadingText","width","DataTableScrollDemoDoc","sources","tabName","content","extFiles","service"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,SAAT,QAA0B,sCAA1B;AACA,SAASC,MAAT,QAAuB,gCAAvB;AACA,SAASC,eAAT,QAAgC,4BAAhC;AACA,SAASC,OAAT,QAAwB,kCAAxB;AACA,SAASC,iBAAT,QAAiC,0BAAjC;AACA,SAASC,eAAT,QAAgC,uBAAhC;AACA,OAAO,sBAAP;AAEA,WAAaC,mBAAb;AAAA;;AAAA;;AAEI,+BAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACf,8BAAMA,KAAN;AAEA,UAAKC,KAAL,GAAa;AACTC,MAAAA,SAAS,EAAE,EADF;AAETC,MAAAA,gBAAgB,EAAE,EAFT;AAGTC,MAAAA,YAAY,EAAE,EAHL;AAITC,MAAAA,gBAAgB,EAAE,CAJT;AAKTC,MAAAA,OAAO,EAAE,KALA;AAMTC,MAAAA,cAAc,EAAE;AANP,KAAb;AASA,UAAKC,eAAL,GAAuB,IAAIb,eAAJ,EAAvB;AACA,UAAKc,gBAAL,GAAwB,MAAKA,gBAAL,CAAsBC,IAAtB,+BAAxB;AACA,UAAKC,eAAL,GAAuB,MAAKA,eAAL,CAAqBD,IAArB,+BAAvB;AAde;AAelB;;AAjBL;AAAA;AAAA,WAmBI,6BAAoB;AAAA;;AAChB,WAAKE,QAAL,CAAc;AAAEN,QAAAA,OAAO,EAAE,IAAX;AAAiBC,QAAAA,cAAc,EAAE;AAAjC,OAAd;AAEA,WAAKC,eAAL,CAAqBK,iBAArB,GAAyCC,IAAzC,CAA8C,UAAAC,IAAI,EAAI;AAClD,QAAA,MAAI,CAACH,QAAL,CAAc;AACVV,UAAAA,SAAS,EAAEa,IADD;AAEVT,UAAAA,OAAO,EAAE;AAFC,SAAd;AAIH,OALD;AAMA,WAAKE,eAAL,CAAqBQ,kBAArB,GAA0CF,IAA1C,CAA+C,UAAAC,IAAI;AAAA,eAAI,MAAI,CAACH,QAAL,CAAc;AAAER,UAAAA,YAAY,EAAEW;AAAhB,SAAd,EAAsC,MAAI,CAACE,oBAA3C,CAAJ;AAAA,OAAnD;AAEA,WAAKC,WAAL,GAAmB,CACf;AACIC,QAAAA,EAAE,EAAE,IADR;AAEIC,QAAAA,IAAI,EAAE,eAFV;AAGIC,QAAAA,OAAO,EAAE;AACLD,UAAAA,IAAI,EAAE,eADD;AAELE,UAAAA,IAAI,EAAE;AAFD,SAHb;AAOIC,QAAAA,OAAO,EAAE,wBAPb;AAQIC,QAAAA,IAAI,EAAE,YARV;AASIC,QAAAA,MAAM,EAAE,WATZ;AAUIC,QAAAA,QAAQ,EAAE,EAVd;AAWIC,QAAAA,cAAc,EAAE;AACZP,UAAAA,IAAI,EAAE,cADM;AAEZQ,UAAAA,KAAK,EAAE;AAFK;AAXpB,OADe,EAiBf;AACIT,QAAAA,EAAE,EAAE,IADR;AAEIC,QAAAA,IAAI,EAAE,kBAFV;AAGIC,QAAAA,OAAO,EAAE;AACLD,UAAAA,IAAI,EAAE,QADD;AAELE,UAAAA,IAAI,EAAE;AAFD,SAHb;AAOIC,QAAAA,OAAO,EAAE,cAPb;AAQIE,QAAAA,MAAM,EAAE,UARZ;AASID,QAAAA,IAAI,EAAE,YATV;AAUIE,QAAAA,QAAQ,EAAE,CAVd;AAWIC,QAAAA,cAAc,EAAE;AACZP,UAAAA,IAAI,EAAE,YADM;AAEZQ,UAAAA,KAAK,EAAE;AAFK;AAXpB,OAjBe,CAAnB;AAkCH;AAhEL;AAAA;AAAA,WAkEI,gCAAuB;AACnB,WAAKhB,QAAL,CAAc;AACVT,QAAAA,gBAAgB,EAAE,KAAK0B,SAAL,CAAe,CAAf,EAAkB,EAAlB,CADR;AAEVxB,QAAAA,gBAAgB,EAAE,GAFR;AAGVE,QAAAA,cAAc,EAAE;AAHN,OAAd;AAKH;AAxEL;AAAA;AAAA,WA0EI,mBAAUuB,KAAV,EAAiBC,MAAjB,EAAyB;AACrB,UAAIC,KAAK,GAAG,EAAZ;;AACA,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,MAApB,EAA4BE,CAAC,EAA7B,EAAiC;AAC7BD,QAAAA,KAAK,CAACC,CAAD,CAAL,qBAAgB,KAAKhC,KAAL,CAAWG,YAAX,CAAwB6B,CAAxB,CAAhB;AACH;;AAED,aAAOD,KAAP;AACH;AAjFL;AAAA;AAAA,WAmFI,yBAAgBE,KAAhB,EAAuB;AAAA;;AACnB;AACA;AACAC,MAAAA,UAAU,CAAC,YAAM;AACb;AACA,YAAID,KAAK,CAACE,KAAN,KAAgB,GAApB,EAAyB;AACrB,UAAA,MAAI,CAACxB,QAAL,CAAc;AACVT,YAAAA,gBAAgB,EAAE,MAAI,CAAC0B,SAAL,CAAeK,KAAK,CAACE,KAArB,EAA4B,EAA5B;AADR,WAAd;AAGH,SAJD,MAKK;AACD,UAAA,MAAI,CAACxB,QAAL,CAAc;AACVT,YAAAA,gBAAgB,EAAE,MAAI,CAAC0B,SAAL,CAAeK,KAAK,CAACE,KAArB,EAA4BF,KAAK,CAACG,IAAlC;AADR,WAAd;AAGH;AACJ,OAZS,EAYP,GAZO,CAAV;AAaH;AAnGL;AAAA;AAAA,WAqGI,uBAAc;AACV,0BAAO;AAAM,QAAA,SAAS,EAAC,cAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAP;AACH;AAvGL;AAAA;AAAA,WAyGI,0BAAiBC,OAAjB,EAA0B;AACtB,0BAAO;AAAM,QAAA,KAAK,EAAE;AAAEC,UAAAA,UAAU,EAAE;AAAd,SAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAqCD,OAAO,CAAClB,IAA7C,CAAP;AACH;AA3GL;AAAA;AAAA,WA6GI,kBAAS;AACL,0BACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI;AAAK,QAAA,SAAS,EAAC,8BAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI,oBAAC,eAAD;AAAiB,QAAA,aAAa,EAAC,WAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oCAAc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAd,CADJ,eAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4TAFJ,CADJ,CADJ,eASI;AAAK,QAAA,SAAS,EAAC,sDAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI;AAAK,QAAA,SAAS,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADJ,eAEI,oBAAC,SAAD;AAAW,QAAA,KAAK,EAAE,KAAKnB,KAAL,CAAWC,SAA7B;AAAwC,QAAA,UAAU,MAAlD;AAAmD,QAAA,YAAY,EAAC,OAAhE;AAAwE,QAAA,OAAO,EAAE,KAAKD,KAAL,CAAWK,OAA5F;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI,oBAAC,MAAD;AAAQ,QAAA,KAAK,EAAC,MAAd;AAAqB,QAAA,MAAM,EAAC,MAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,eAEI,oBAAC,MAAD;AAAQ,QAAA,KAAK,EAAC,cAAd;AAA6B,QAAA,MAAM,EAAC,SAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFJ,eAGI,oBAAC,MAAD;AAAQ,QAAA,KAAK,EAAC,qBAAd;AAAoC,QAAA,MAAM,EAAC,gBAA3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAHJ,eAII,oBAAC,MAAD;AAAQ,QAAA,KAAK,EAAC,QAAd;AAAuB,QAAA,MAAM,EAAC,QAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAJJ,CAFJ,CADJ,eAWI;AAAK,QAAA,SAAS,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BADJ,eAEI,oBAAC,SAAD;AAAW,QAAA,KAAK,EAAE,KAAKL,KAAL,CAAWE,gBAA7B;AAA+C,QAAA,UAAU,MAAzD;AAA0D,QAAA,YAAY,EAAC,OAAvE;AAA+E,QAAA,IAAI,MAAnF;AAAoF,QAAA,IAAI,EAAE,EAA1F;AAA8F,QAAA,OAAO,EAAE,KAAKF,KAAL,CAAWM,cAAlH;AACI,QAAA,aAAa,MADjB;AACkB,QAAA,gBAAgB,EAAE,EADpC;AACwC,QAAA,eAAe,EAAE,KAAKI,eAD9D;AAC+E,QAAA,YAAY,EAAE,KAAKV,KAAL,CAAWI,gBADxG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAEI,oBAAC,MAAD;AAAQ,QAAA,KAAK,EAAC,MAAd;AAAqB,QAAA,MAAM,EAAC,MAA5B;AAAmC,QAAA,WAAW,EAAE,KAAKmC,WAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFJ,eAGI,oBAAC,MAAD;AAAQ,QAAA,KAAK,EAAC,cAAd;AAA6B,QAAA,MAAM,EAAC,SAApC;AAA8C,QAAA,WAAW,EAAE,KAAKA,WAAhE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAHJ,eAII,oBAAC,MAAD;AAAQ,QAAA,KAAK,EAAC,qBAAd;AAAoC,QAAA,MAAM,EAAC,gBAA3C;AAA4D,QAAA,WAAW,EAAE,KAAKA,WAA9E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAJJ,eAKI,oBAAC,MAAD;AAAQ,QAAA,KAAK,EAAC,QAAd;AAAuB,QAAA,MAAM,EAAC,QAA9B;AAAuC,QAAA,WAAW,EAAE,KAAKA,WAAzD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QALJ,CAFJ,CAXJ,eAsBI;AAAK,QAAA,SAAS,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mCADJ,eAEI,oBAAC,SAAD;AAAW,QAAA,KAAK,EAAE,KAAKvC,KAAL,CAAWC,SAA7B;AAAwC,QAAA,UAAU,MAAlD;AAAmD,QAAA,YAAY,EAAC,OAAhE;AAAwE,QAAA,KAAK,EAAE;AAAEuC,UAAAA,KAAK,EAAE;AAAT,SAA/E;AAAmG,QAAA,OAAO,EAAE,KAAKxC,KAAL,CAAWK,OAAvH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI,oBAAC,MAAD;AAAQ,QAAA,KAAK,EAAC,IAAd;AAAmB,QAAA,MAAM,EAAC,IAA1B;AAA+B,QAAA,WAAW,EAAE;AAAEmC,UAAAA,KAAK,EAAE;AAAT,SAA5C;AAAgE,QAAA,SAAS,EAAC,IAA1E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,eAEI,oBAAC,MAAD;AAAQ,QAAA,KAAK,EAAC,MAAd;AAAqB,QAAA,MAAM,EAAC,MAA5B;AAAmC,QAAA,WAAW,EAAE;AAAEA,UAAAA,KAAK,EAAE;AAAT,SAAhD;AAAoE,QAAA,SAAS,EAAC,MAA9E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFJ,eAGI,oBAAC,MAAD;AAAQ,QAAA,KAAK,EAAC,cAAd;AAA6B,QAAA,MAAM,EAAC,SAApC;AAA8C,QAAA,WAAW,EAAE;AAAEA,UAAAA,KAAK,EAAE;AAAT,SAA3D;AAA+E,QAAA,SAAS,EAAC,SAAzF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAHJ,eAII,oBAAC,MAAD;AAAQ,QAAA,KAAK,EAAC,MAAd;AAAqB,QAAA,MAAM,EAAC,MAA5B;AAAmC,QAAA,WAAW,EAAE;AAAEA,UAAAA,KAAK,EAAE;AAAT,SAAhD;AAAoE,QAAA,SAAS,EAAC,MAA9E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAJJ,eAKI,oBAAC,MAAD;AAAQ,QAAA,KAAK,EAAC,SAAd;AAAwB,QAAA,MAAM,EAAC,SAA/B;AAAyC,QAAA,WAAW,EAAE;AAAEA,UAAAA,KAAK,EAAE;AAAT,SAAtD;AAA0E,QAAA,SAAS,EAAC,SAApF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QALJ,eAMI,oBAAC,MAAD;AAAQ,QAAA,KAAK,EAAC,QAAd;AAAuB,QAAA,MAAM,EAAC,QAA9B;AAAuC,QAAA,WAAW,EAAE;AAAEA,UAAAA,KAAK,EAAE;AAAT,SAApD;AAAwE,QAAA,SAAS,EAAC,QAAlF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QANJ,eAOI,oBAAC,MAAD;AAAQ,QAAA,KAAK,EAAC,UAAd;AAAyB,QAAA,MAAM,EAAC,UAAhC;AAA2C,QAAA,WAAW,EAAE;AAAEA,UAAAA,KAAK,EAAE;AAAT,SAAxD;AAA4E,QAAA,SAAS,EAAC,UAAtF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAPJ,eAQI,oBAAC,MAAD;AAAQ,QAAA,KAAK,EAAC,qBAAd;AAAoC,QAAA,MAAM,EAAC,gBAA3C;AAA4D,QAAA,WAAW,EAAE;AAAEA,UAAAA,KAAK,EAAE;AAAT,SAAzE;AAA6F,QAAA,SAAS,EAAC,gBAAvG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QARJ,CAFJ,CAtBJ,eAoCI;AAAK,QAAA,SAAS,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBADJ,eAEI,oBAAC,SAAD;AAAW,QAAA,KAAK,EAAE,KAAKxC,KAAL,CAAWC,SAA7B;AAAwC,QAAA,WAAW,EAAE,KAAKgB,WAA1D;AAAuE,QAAA,UAAU,MAAjF;AAAkF,QAAA,YAAY,EAAC,OAA/F;AAAuG,QAAA,OAAO,EAAE,KAAKjB,KAAL,CAAWK,OAA3H;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI,oBAAC,MAAD;AAAQ,QAAA,KAAK,EAAC,MAAd;AAAqB,QAAA,MAAM,EAAC,MAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,eAEI,oBAAC,MAAD;AAAQ,QAAA,KAAK,EAAC,cAAd;AAA6B,QAAA,MAAM,EAAC,SAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFJ,eAGI,oBAAC,MAAD;AAAQ,QAAA,KAAK,EAAC,qBAAd;AAAoC,QAAA,MAAM,EAAC,gBAA3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAHJ,eAII,oBAAC,MAAD;AAAQ,QAAA,KAAK,EAAC,QAAd;AAAuB,QAAA,MAAM,EAAC,QAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAJJ,CAFJ,CApCJ,eA8CI;AAAK,QAAA,SAAS,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BADJ,eAEI,oBAAC,SAAD;AAAW,QAAA,KAAK,EAAE,KAAKL,KAAL,CAAWC,SAA7B;AAAwC,QAAA,UAAU,MAAlD;AAAmD,QAAA,YAAY,EAAC,OAAhE;AAAwE,QAAA,WAAW,EAAC,OAApF;AAA4F,QAAA,OAAO,EAAE,KAAKD,KAAL,CAAWK,OAAhH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI,oBAAC,MAAD;AAAQ,QAAA,KAAK,EAAC,MAAd;AAAqB,QAAA,MAAM,EAAC,MAA5B;AAAmC,QAAA,IAAI,EAAE,KAAKG,gBAA9C;AAAgE,QAAA,WAAW,EAAE;AAAEgC,UAAAA,KAAK,EAAE;AAAT,SAA7E;AAAiG,QAAA,SAAS,EAAC,MAA3G;AAAkH,QAAA,MAAM,MAAxH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,eAEI,oBAAC,MAAD;AAAQ,QAAA,KAAK,EAAC,IAAd;AAAmB,QAAA,MAAM,EAAC,IAA1B;AAA+B,QAAA,WAAW,EAAE;AAAEA,UAAAA,KAAK,EAAE;AAAT,SAA5C;AAAgE,QAAA,SAAS,EAAC,IAA1E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFJ,eAGI,oBAAC,MAAD;AAAQ,QAAA,KAAK,EAAC,cAAd;AAA6B,QAAA,MAAM,EAAC,SAApC;AAA8C,QAAA,WAAW,EAAE;AAAEA,UAAAA,KAAK,EAAE;AAAT,SAA3D;AAA+E,QAAA,SAAS,EAAC,SAAzF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAHJ,eAII,oBAAC,MAAD;AAAQ,QAAA,KAAK,EAAC,MAAd;AAAqB,QAAA,MAAM,EAAC,MAA5B;AAAmC,QAAA,WAAW,EAAE;AAAEA,UAAAA,KAAK,EAAE;AAAT,SAAhD;AAAoE,QAAA,SAAS,EAAC,MAA9E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAJJ,eAKI,oBAAC,MAAD;AAAQ,QAAA,KAAK,EAAC,SAAd;AAAwB,QAAA,MAAM,EAAC,SAA/B;AAAyC,QAAA,WAAW,EAAE;AAAEA,UAAAA,KAAK,EAAE;AAAT,SAAtD;AAA0E,QAAA,SAAS,EAAC,SAApF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QALJ,eAMI,oBAAC,MAAD;AAAQ,QAAA,KAAK,EAAC,QAAd;AAAuB,QAAA,MAAM,EAAC,QAA9B;AAAuC,QAAA,WAAW,EAAE;AAAEA,UAAAA,KAAK,EAAE;AAAT,SAApD;AAAwE,QAAA,SAAS,EAAC,QAAlF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QANJ,eAOI,oBAAC,MAAD;AAAQ,QAAA,KAAK,EAAC,UAAd;AAAyB,QAAA,MAAM,EAAC,UAAhC;AAA2C,QAAA,WAAW,EAAE;AAAEA,UAAAA,KAAK,EAAE;AAAT,SAAxD;AAA4E,QAAA,SAAS,EAAC,UAAtF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAPJ,eAQI,oBAAC,MAAD;AAAQ,QAAA,KAAK,EAAC,qBAAd;AAAoC,QAAA,MAAM,EAAC,gBAA3C;AAA4D,QAAA,WAAW,EAAE;AAAEA,UAAAA,KAAK,EAAE;AAAT,SAAzE;AAA6F,QAAA,SAAS,EAAC,gBAAvG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QARJ,CAFJ,CA9CJ,CATJ,eAsEI,oBAAC,sBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAtEJ,CADJ;AA0EH;AAxLL;;AAAA;AAAA,EAAyCjD,SAAzC;AA2LA,WAAakD,sBAAb;AAAA;;AAAA;;AAEI,kCAAY1C,KAAZ,EAAmB;AAAA;;AAAA;;AACf,gCAAMA,KAAN;AAEA,WAAK2C,OAAL,GAAe;AACX,eAAS;AACLC,QAAAA,OAAO,EAAE,cADJ;AAELC,QAAAA,OAAO;AAFF,OADE;AA0LX,eAAS;AACLD,QAAAA,OAAO,EAAE,cADJ;AAELC,QAAAA,OAAO;AAFF,OA1LE;AAwWX,YAAM;AACFD,QAAAA,OAAO,EAAE,WADP;AAEFC,QAAAA,OAAO;AAFL;AAxWK,KAAf;AAwhBA,WAAKC,QAAL,GAAgB;AACZ,oCAA8B;AAC1BD,QAAAA,OAAO;AADmB;AADlB,KAAhB;AA3hBe;AAyiBlB;;AA3iBL;AAAA;AAAA,WA6iBI,iCAAwB;AACpB,aAAO,KAAP;AACH;AA/iBL;AAAA;AAAA,WAijBI,kBAAS;AACL,0BACI;AAAK,QAAA,SAAS,EAAC,+BAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAEQhD,iBAAiB,CAAC;AAAEuB,QAAAA,IAAI,EAAE,qBAAR;AAA+BuB,QAAAA,OAAO,EAAE,KAAKA,OAA7C;AAAsDI,QAAAA,OAAO,EAAE,iBAA/D;AAAkFhC,QAAAA,IAAI,EAAE,kCAAxF;AAA4H+B,QAAAA,QAAQ,EAAE,KAAKA;AAA3I,OAAD,CAFzB,CADJ,CADJ;AASH;AA3jBL;;AAAA;AAAA,EAA4CtD,SAA5C","sourcesContent":["import React, { Component } from 'react';\r\nimport { DataTable } from '../../components/datatable/DataTable';\r\nimport { Column } from '../../components/column/Column';\r\nimport { CustomerService } from '../service/CustomerService';\r\nimport { TabView } from '../../components/tabview/TabView';\r\nimport { useLiveEditorTabs }from '../liveeditor/LiveEditor';\r\nimport { AppInlineHeader } from '../../AppInlineHeader';\r\nimport './DataTableDemo.scss';\r\n\r\nexport class DataTableScrollDemo extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            customers: [],\r\n            virtualCustomers: [],\r\n            inmemoryData: [],\r\n            lazyTotalRecords: 0,\r\n            loading: false,\r\n            virtualLoading: false\r\n        };\r\n\r\n        this.customerService = new CustomerService();\r\n        this.nameBodyTemplate = this.nameBodyTemplate.bind(this);\r\n        this.onVirtualScroll = this.onVirtualScroll.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.setState({ loading: true, virtualLoading: true });\r\n\r\n        this.customerService.getCustomersLarge().then(data => {\r\n            this.setState({\r\n                customers: data,\r\n                loading: false\r\n            });\r\n        });\r\n        this.customerService.getCustomersXLarge().then(data => this.setState({ inmemoryData: data }, this.loadVirtualCustomers));\r\n\r\n        this.frozenValue = [\r\n            {\r\n                id: 1255,\r\n                name: \"James McAdams\",\r\n                country: {\r\n                    name: \"United States\",\r\n                    code: \"us\"\r\n                },\r\n                company: \"McAdams Consulting Ltd\",\r\n                date: \"2014-02-13\",\r\n                status: \"qualified\",\r\n                activity: 23,\r\n                representative: {\r\n                    name: \"Ioni Bowcher\",\r\n                    image: \"ionibowcher.png\"\r\n                }\r\n            },\r\n            {\r\n                id: 5135,\r\n                name: \"Geraldine Bisset\",\r\n                country: {\r\n                    name: \"France\",\r\n                    code: \"fr\"\r\n                },\r\n                company: \"Bisset Group\",\r\n                status: \"proposal\",\r\n                date: \"2019-05-05\",\r\n                activity: 0,\r\n                representative: {\r\n                    name: \"Amy Elsner\",\r\n                    image: \"amyelsner.png\"\r\n                }\r\n            }\r\n        ];\r\n    }\r\n\r\n    loadVirtualCustomers() {\r\n        this.setState({\r\n            virtualCustomers: this.loadChunk(0, 40),\r\n            lazyTotalRecords: 500,\r\n            virtualLoading: false\r\n        });\r\n    }\r\n\r\n    loadChunk(index, length) {\r\n        let chunk = [];\r\n        for (let i = 0; i < length; i++) {\r\n            chunk[i] = { ...this.state.inmemoryData[i]};\r\n        }\r\n\r\n        return chunk;\r\n    }\r\n\r\n    onVirtualScroll(event) {\r\n        //for demo purposes keep loading the same dataset\r\n        //in a real production application, this data should come from server by building the query with LazyLoadEvent options\r\n        setTimeout(() => {\r\n            //last chunk\r\n            if (event.first === 480) {\r\n                this.setState({\r\n                    virtualCustomers: this.loadChunk(event.first, 20)\r\n                });\r\n            }\r\n            else {\r\n                this.setState({\r\n                    virtualCustomers: this.loadChunk(event.first, event.rows)\r\n                });\r\n            }\r\n        }, 250);\r\n    }\r\n\r\n    loadingText() {\r\n        return <span className=\"loading-text\"></span>;\r\n    }\r\n\r\n    nameBodyTemplate(rowData) {\r\n        return <span style={{ fontWeight: '700' }}>{rowData.name}</span>;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div className=\"content-section introduction\">\r\n                    <AppInlineHeader changelogText=\"dataTable\">\r\n                        <h1>DataTable <span>Scroll</span></h1>\r\n                        <p>Data scrolling with fixed header is available horizontally, vertically or both. ScrollHeight and ScrollWidth values can either be fixed pixels or percentages. Certain columns can be fixed as well.\r\n                            Virtual Scrolling mode is available to deal with large datasets by loading data on demand during scrolling.</p>\r\n                    </AppInlineHeader>\r\n                </div>\r\n\r\n                <div className=\"content-section implementation datatable-scroll-demo\">\r\n                    <div className=\"card\">\r\n                        <h5>Vertical</h5>\r\n                        <DataTable value={this.state.customers} scrollable scrollHeight=\"200px\" loading={this.state.loading}>\r\n                            <Column field=\"name\" header=\"Name\"></Column>\r\n                            <Column field=\"country.name\" header=\"Country\"></Column>\r\n                            <Column field=\"representative.name\" header=\"Representative\"></Column>\r\n                            <Column field=\"status\" header=\"Status\"></Column>\r\n                        </DataTable>\r\n                    </div>\r\n\r\n                    <div className=\"card\">\r\n                        <h5>Virtual Scroll</h5>\r\n                        <DataTable value={this.state.virtualCustomers} scrollable scrollHeight=\"200px\" lazy rows={20} loading={this.state.virtualLoading}\r\n                            virtualScroll virtualRowHeight={45} onVirtualScroll={this.onVirtualScroll} totalRecords={this.state.lazyTotalRecords}>\r\n                            <Column field=\"name\" header=\"Name\" loadingBody={this.loadingText}></Column>\r\n                            <Column field=\"country.name\" header=\"Country\" loadingBody={this.loadingText}></Column>\r\n                            <Column field=\"representative.name\" header=\"Representative\" loadingBody={this.loadingText}></Column>\r\n                            <Column field=\"status\" header=\"Status\" loadingBody={this.loadingText}></Column>\r\n                        </DataTable>\r\n                    </div>\r\n\r\n                    <div className=\"card\">\r\n                        <h5>Horizontal and Vertical</h5>\r\n                        <DataTable value={this.state.customers} scrollable scrollHeight=\"200px\" style={{ width: '600px' }} loading={this.state.loading}>\r\n                            <Column field=\"id\" header=\"Id\" headerStyle={{ width: '250px' }} columnKey=\"id\"></Column>\r\n                            <Column field=\"name\" header=\"Name\" headerStyle={{ width: '250px' }} columnKey=\"name\"></Column>\r\n                            <Column field=\"country.name\" header=\"Country\" headerStyle={{ width: '250px' }} columnKey=\"country\"></Column>\r\n                            <Column field=\"date\" header=\"Date\" headerStyle={{ width: '250px' }} columnKey=\"date\"></Column>\r\n                            <Column field=\"company\" header=\"Company\" headerStyle={{ width: '250px' }} columnKey=\"company\"></Column>\r\n                            <Column field=\"status\" header=\"Status\" headerStyle={{ width: '250px' }} columnKey=\"status\"></Column>\r\n                            <Column field=\"activity\" header=\"Activity\" headerStyle={{ width: '250px' }} columnKey=\"activity\"></Column>\r\n                            <Column field=\"representative.name\" header=\"Representative\" headerStyle={{ width: '250px' }} columnKey=\"representative\"></Column>\r\n                        </DataTable>\r\n                    </div>\r\n\r\n                    <div className=\"card\">\r\n                        <h5>Frozen Rows</h5>\r\n                        <DataTable value={this.state.customers} frozenValue={this.frozenValue} scrollable scrollHeight=\"200px\" loading={this.state.loading}>\r\n                            <Column field=\"name\" header=\"Name\"></Column>\r\n                            <Column field=\"country.name\" header=\"Country\"></Column>\r\n                            <Column field=\"representative.name\" header=\"Representative\"></Column>\r\n                            <Column field=\"status\" header=\"Status\"></Column>\r\n                        </DataTable>\r\n                    </div>\r\n\r\n                    <div className=\"card\">\r\n                        <h5>Frozen Columns</h5>\r\n                        <DataTable value={this.state.customers} scrollable scrollHeight=\"200px\" frozenWidth=\"300px\" loading={this.state.loading}>\r\n                            <Column field=\"name\" header=\"Name\" body={this.nameBodyTemplate} headerStyle={{ width: '300px' }} columnKey=\"name\" frozen></Column>\r\n                            <Column field=\"id\" header=\"Id\" headerStyle={{ width: '300px' }} columnKey=\"id\"></Column>\r\n                            <Column field=\"country.name\" header=\"Country\" headerStyle={{ width: '300px' }} columnKey=\"country\"></Column>\r\n                            <Column field=\"date\" header=\"Date\" headerStyle={{ width: '300px' }} columnKey=\"date\"></Column>\r\n                            <Column field=\"company\" header=\"Country\" headerStyle={{ width: '300px' }} columnKey=\"company\"></Column>\r\n                            <Column field=\"status\" header=\"Status\" headerStyle={{ width: '300px' }} columnKey=\"status\"></Column>\r\n                            <Column field=\"activity\" header=\"Activity\" headerStyle={{ width: '300px' }} columnKey=\"activity\"></Column>\r\n                            <Column field=\"representative.name\" header=\"Representative\" headerStyle={{ width: '300px' }} columnKey=\"representative\"></Column>\r\n                        </DataTable>\r\n                    </div>\r\n                </div>\r\n\r\n                <DataTableScrollDemoDoc></DataTableScrollDemoDoc>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport class DataTableScrollDemoDoc extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.sources = {\r\n            'class': {\r\n                tabName: 'Class Source',\r\n                content: `\r\nimport React, { Component } from 'react';\r\nimport { DataTable } from 'primereact/datatable';\r\nimport { Column } from 'primereact/column';\r\nimport { CustomerService } from '../service/CustomerService';\r\nimport './DataTableDemo.css';\r\n\r\nexport class DataTableScrollDemo extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            customers: [],\r\n            virtualCustomers: [],\r\n            inmemoryData: [],\r\n            lazyTotalRecords: 0,\r\n            loading: false,\r\n            virtualLoading: false\r\n        };\r\n\r\n        this.customerService = new CustomerService();\r\n        this.nameBodyTemplate = this.nameBodyTemplate.bind(this);\r\n        this.onVirtualScroll = this.onVirtualScroll.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.setState({ loading: true, virtualLoading: true });\r\n\r\n        this.customerService.getCustomersLarge().then(data => {\r\n            this.setState({\r\n                customers: data,\r\n                loading: false\r\n            });\r\n        });\r\n        this.customerService.getCustomersXLarge().then(data => this.setState({ inmemoryData: data }, this.loadVirtualCustomers));\r\n\r\n        this.frozenValue = [\r\n            {\r\n                id: 1255,\r\n                name: \"James McAdams\",\r\n                country: {\r\n                    name: \"United States\",\r\n                    code: \"us\"\r\n                },\r\n                company: \"McAdams Consulting Ltd\",\r\n                date: \"2014-02-13\",\r\n                status: \"qualified\",\r\n                activity: 23,\r\n                representative: {\r\n                    name: \"Ioni Bowcher\",\r\n                    image: \"ionibowcher.png\"\r\n                }\r\n            },\r\n            {\r\n                id: 5135,\r\n                name: \"Geraldine Bisset\",\r\n                country: {\r\n                    name: \"France\",\r\n                    code: \"fr\"\r\n                },\r\n                company: \"Bisset Group\",\r\n                status: \"proposal\",\r\n                date: \"2019-05-05\",\r\n                activity: 0,\r\n                representative: {\r\n                    name: \"Amy Elsner\",\r\n                    image: \"amyelsner.png\"\r\n                }\r\n            }\r\n        ];\r\n    }\r\n\r\n    loadVirtualCustomers() {\r\n        this.setState({\r\n            virtualCustomers: this.loadChunk(0, 40),\r\n            lazyTotalRecords: 500,\r\n            virtualLoading: false\r\n        });\r\n    }\r\n\r\n    loadChunk(index, length) {\r\n        let chunk = [];\r\n        for (let i = 0; i < length; i++) {\r\n            chunk[i] = { ...this.state.inmemoryData[i]};\r\n        }\r\n\r\n        return chunk;\r\n    }\r\n\r\n    onVirtualScroll(event) {\r\n        //for demo purposes keep loading the same dataset\r\n        //in a real production application, this data should come from server by building the query with LazyLoadEvent options\r\n        setTimeout(() => {\r\n            //last chunk\r\n            if (event.first === 480) {\r\n                this.setState({\r\n                    virtualCustomers: this.loadChunk(event.first, 20)\r\n                });\r\n            }\r\n            else {\r\n                this.setState({\r\n                    virtualCustomers: this.loadChunk(event.first, event.rows)\r\n                });\r\n            }\r\n        }, 250);\r\n    }\r\n\r\n    loadingText() {\r\n        return <span className=\"loading-text\"></span>;\r\n    }\r\n\r\n    nameBodyTemplate(rowData) {\r\n        return <span style={{ fontWeight: '700' }}>{rowData.name}</span>;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"datatable-scroll-demo\">\r\n                <div className=\"card\">\r\n                    <h5>Vertical</h5>\r\n                    <DataTable value={this.state.customers} scrollable scrollHeight=\"200px\" loading={this.state.loading}>\r\n                        <Column field=\"name\" header=\"Name\"></Column>\r\n                        <Column field=\"country.name\" header=\"Country\"></Column>\r\n                        <Column field=\"representative.name\" header=\"Representative\"></Column>\r\n                        <Column field=\"status\" header=\"Status\"></Column>\r\n                    </DataTable>\r\n                </div>\r\n\r\n                <div className=\"card\">\r\n                    <h5>Virtual Scroll</h5>\r\n                    <DataTable value={this.state.virtualCustomers} scrollable scrollHeight=\"200px\" lazy rows={20} loading={this.state.virtualLoading}\r\n                        virtualScroll virtualRowHeight={45} onVirtualScroll={this.onVirtualScroll} totalRecords={this.state.lazyTotalRecords}>\r\n                        <Column field=\"name\" header=\"Name\" loadingBody={this.loadingText}></Column>\r\n                        <Column field=\"country.name\" header=\"Country\" loadingBody={this.loadingText}></Column>\r\n                        <Column field=\"representative.name\" header=\"Representative\" loadingBody={this.loadingText}></Column>\r\n                        <Column field=\"status\" header=\"Status\" loadingBody={this.loadingText}></Column>\r\n                    </DataTable>\r\n                </div>\r\n\r\n                <div className=\"card\">\r\n                    <h5>Horizontal and Vertical</h5>\r\n                    <DataTable value={this.state.customers} scrollable scrollHeight=\"200px\" style={{ width: '600px' }} loading={this.state.loading}>\r\n                        <Column field=\"id\" header=\"Id\" headerStyle={{ width: '250px' }} columnKey=\"id\"></Column>\r\n                        <Column field=\"name\" header=\"Name\" headerStyle={{ width: '250px' }} columnKey=\"name\"></Column>\r\n                        <Column field=\"country.name\" header=\"Country\" headerStyle={{ width: '250px' }} columnKey=\"country\"></Column>\r\n                        <Column field=\"date\" header=\"Date\" headerStyle={{ width: '250px' }} columnKey=\"date\"></Column>\r\n                        <Column field=\"company\" header=\"Company\" headerStyle={{ width: '250px' }} columnKey=\"company\"></Column>\r\n                        <Column field=\"status\" header=\"Status\" headerStyle={{ width: '250px' }} columnKey=\"status\"></Column>\r\n                        <Column field=\"activity\" header=\"Activity\" headerStyle={{ width: '250px' }} columnKey=\"activity\"></Column>\r\n                        <Column field=\"representative.name\" header=\"Representative\" headerStyle={{ width: '250px' }} columnKey=\"representative\"></Column>\r\n                    </DataTable>\r\n                </div>\r\n\r\n                <div className=\"card\">\r\n                    <h5>Frozen Rows</h5>\r\n                    <DataTable value={this.state.customers} frozenValue={this.frozenValue} scrollable scrollHeight=\"200px\" loading={this.state.loading}>\r\n                        <Column field=\"name\" header=\"Name\"></Column>\r\n                        <Column field=\"country.name\" header=\"Country\"></Column>\r\n                        <Column field=\"representative.name\" header=\"Representative\"></Column>\r\n                        <Column field=\"status\" header=\"Status\"></Column>\r\n                    </DataTable>\r\n                </div>\r\n\r\n                <div className=\"card\">\r\n                    <h5>Frozen Columns</h5>\r\n                    <DataTable value={this.state.customers} scrollable scrollHeight=\"200px\" frozenWidth=\"300px\" loading={this.state.loading}>\r\n                        <Column field=\"name\" header=\"Name\" body={this.nameBodyTemplate} headerStyle={{ width: '300px' }} columnKey=\"name\" frozen></Column>\r\n                        <Column field=\"id\" header=\"Id\" headerStyle={{ width: '300px' }} columnKey=\"id\"></Column>\r\n                        <Column field=\"country.name\" header=\"Country\" headerStyle={{ width: '300px' }} columnKey=\"country\"></Column>\r\n                        <Column field=\"date\" header=\"Date\" headerStyle={{ width: '300px' }} columnKey=\"date\"></Column>\r\n                        <Column field=\"company\" header=\"Country\" headerStyle={{ width: '300px' }} columnKey=\"company\"></Column>\r\n                        <Column field=\"status\" header=\"Status\" headerStyle={{ width: '300px' }} columnKey=\"status\"></Column>\r\n                        <Column field=\"activity\" header=\"Activity\" headerStyle={{ width: '300px' }} columnKey=\"activity\"></Column>\r\n                        <Column field=\"representative.name\" header=\"Representative\" headerStyle={{ width: '300px' }} columnKey=\"representative\"></Column>\r\n                    </DataTable>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n                `\r\n            },\r\n            'hooks': {\r\n                tabName: 'Hooks Source',\r\n                content: `\r\nimport React, { useState, useEffect, useRef } from 'react';\r\nimport { DataTable } from 'primereact/datatable';\r\nimport { Column } from 'primereact/column';\r\nimport { CustomerService } from '../service/CustomerService';\r\nimport './DataTableDemo.css';\r\n\r\nconst DataTableScrollDemo = () => {\r\n    const [customers, setCustomers] = useState([]);\r\n    const [virtualCustomers, setVirtualCustomers] = useState([]);\r\n    const [inmemoryData, setInMemoryData] = useState([]);\r\n    const [lazyTotalRecords, setLazyTotalRecords] = useState(0);\r\n    const [loading, setLoading] = useState(false);\r\n    const [virtualLoading, setVirtualLoading] = useState(false);\r\n    const isMounted = useRef(null);\r\n    const customerService = new CustomerService();\r\n\r\n    const frozenValue = [\r\n        {\r\n            id: 1255,\r\n            name: \"James McAdams\",\r\n            country: {\r\n                name: \"United States\",\r\n                code: \"us\"\r\n            },\r\n            company: \"McAdams Consulting Ltd\",\r\n            date: \"2014-02-13\",\r\n            status: \"qualified\",\r\n            activity: 23,\r\n            representative: {\r\n                name: \"Ioni Bowcher\",\r\n                image: \"ionibowcher.png\"\r\n            }\r\n        },\r\n        {\r\n            id: 5135,\r\n            name: \"Geraldine Bisset\",\r\n            country: {\r\n                name: \"France\",\r\n                code: \"fr\"\r\n            },\r\n            company: \"Bisset Group\",\r\n            status: \"proposal\",\r\n            date: \"2019-05-05\",\r\n            activity: 0,\r\n            representative: {\r\n                name: \"Amy Elsner\",\r\n                image: \"amyelsner.png\"\r\n            }\r\n        }\r\n    ];\r\n\r\n    useEffect(() => {\r\n        if (isMounted.current) {\r\n            loadVirtualCustomers();\r\n        }\r\n    }, [inmemoryData]);\r\n\r\n    useEffect(() => {\r\n        isMounted.current = true;\r\n        setLoading(true);\r\n        setVirtualLoading(true);\r\n\r\n        customerService.getCustomersLarge().then(data => {\r\n            setCustomers(data);\r\n            setLoading(false);\r\n        });\r\n        customerService.getCustomersXLarge().then(data => setInMemoryData(data));\r\n    }, []); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n    const loadVirtualCustomers = () => {\r\n        setVirtualCustomers(loadChunk(0, 40));\r\n        setLazyTotalRecords(500);\r\n        setVirtualLoading(false);\r\n    }\r\n\r\n    const loadChunk = (index, length) => {\r\n        let chunk = [];\r\n        for (let i = 0; i < length; i++) {\r\n            chunk[i] = { ...inmemoryData[i]};\r\n        }\r\n\r\n        return chunk;\r\n    }\r\n\r\n    const onVirtualScroll = (event) => {\r\n        //for demo purposes keep loading the same dataset\r\n        //in a real production application, this data should come from server by building the query with LazyLoadEvent options\r\n        setTimeout(() => {\r\n            //last chunk\r\n            if (event.first === 480) {\r\n                setVirtualCustomers(loadChunk(event.first, 20));\r\n            }\r\n            else {\r\n                setVirtualCustomers(loadChunk(event.first, event.rows));\r\n            }\r\n        }, 250);\r\n    }\r\n\r\n    const loadingText = () => {\r\n        return <span className=\"loading-text\"></span>;\r\n    }\r\n\r\n    const nameBodyTemplate = (rowData) => {\r\n        return <span style={{ fontWeight: '700' }}>{rowData.name}</span>;\r\n    }\r\n\r\n    return (\r\n        <div className=\"datatable-scroll-demo\">\r\n            <div className=\"card\">\r\n                <h5>Vertical</h5>\r\n                <DataTable value={customers} scrollable scrollHeight=\"200px\" loading={loading}>\r\n                    <Column field=\"name\" header=\"Name\"></Column>\r\n                    <Column field=\"country.name\" header=\"Country\"></Column>\r\n                    <Column field=\"representative.name\" header=\"Representative\"></Column>\r\n                    <Column field=\"status\" header=\"Status\"></Column>\r\n                </DataTable>\r\n            </div>\r\n\r\n            <div className=\"card\">\r\n                <h5>Virtual Scroll</h5>\r\n                <DataTable value={virtualCustomers} scrollable scrollHeight=\"200px\" lazy rows={20} loading={virtualLoading}\r\n                    virtualScroll virtualRowHeight={45} onVirtualScroll={onVirtualScroll} totalRecords={lazyTotalRecords}>\r\n                    <Column field=\"name\" header=\"Name\" loadingBody={loadingText}></Column>\r\n                    <Column field=\"country.name\" header=\"Country\" loadingBody={loadingText}></Column>\r\n                    <Column field=\"representative.name\" header=\"Representative\" loadingBody={loadingText}></Column>\r\n                    <Column field=\"status\" header=\"Status\" loadingBody={loadingText}></Column>\r\n                </DataTable>\r\n            </div>\r\n\r\n            <div className=\"card\">\r\n                <h5>Horizontal and Vertical</h5>\r\n                <DataTable value={customers} scrollable scrollHeight=\"200px\" style={{ width: '600px' }} loading={loading}>\r\n                    <Column field=\"id\" header=\"Id\" headerStyle={{ width: '250px' }} columnKey=\"id\"></Column>\r\n                    <Column field=\"name\" header=\"Name\" headerStyle={{ width: '250px' }} columnKey=\"name\"></Column>\r\n                    <Column field=\"country.name\" header=\"Country\" headerStyle={{ width: '250px' }} columnKey=\"country\"></Column>\r\n                    <Column field=\"date\" header=\"Date\" headerStyle={{ width: '250px' }} columnKey=\"date\"></Column>\r\n                    <Column field=\"company\" header=\"Company\" headerStyle={{ width: '250px' }} columnKey=\"company\"></Column>\r\n                    <Column field=\"status\" header=\"Status\" headerStyle={{ width: '250px' }} columnKey=\"status\"></Column>\r\n                    <Column field=\"activity\" header=\"Activity\" headerStyle={{ width: '250px' }} columnKey=\"activity\"></Column>\r\n                    <Column field=\"representative.name\" header=\"Representative\" headerStyle={{ width: '250px' }} columnKey=\"representative\"></Column>\r\n                </DataTable>\r\n            </div>\r\n\r\n            <div className=\"card\">\r\n                <h5>Frozen Rows</h5>\r\n                <DataTable value={customers} frozenValue={frozenValue} scrollable scrollHeight=\"200px\" loading={loading}>\r\n                    <Column field=\"name\" header=\"Name\"></Column>\r\n                    <Column field=\"country.name\" header=\"Country\"></Column>\r\n                    <Column field=\"representative.name\" header=\"Representative\"></Column>\r\n                    <Column field=\"status\" header=\"Status\"></Column>\r\n                </DataTable>\r\n            </div>\r\n\r\n            <div className=\"card\">\r\n                <h5>Frozen Columns</h5>\r\n                <DataTable value={customers} scrollable scrollHeight=\"200px\" frozenWidth=\"300px\" loading={loading}>\r\n                    <Column field=\"name\" header=\"Name\" body={nameBodyTemplate} headerStyle={{ width: '300px' }} columnKey=\"name\" frozen></Column>\r\n                    <Column field=\"id\" header=\"Id\" headerStyle={{ width: '300px' }} columnKey=\"id\"></Column>\r\n                    <Column field=\"country.name\" header=\"Country\" headerStyle={{ width: '300px' }} columnKey=\"country\"></Column>\r\n                    <Column field=\"date\" header=\"Date\" headerStyle={{ width: '300px' }} columnKey=\"date\"></Column>\r\n                    <Column field=\"company\" header=\"Country\" headerStyle={{ width: '300px' }} columnKey=\"company\"></Column>\r\n                    <Column field=\"status\" header=\"Status\" headerStyle={{ width: '300px' }} columnKey=\"status\"></Column>\r\n                    <Column field=\"activity\" header=\"Activity\" headerStyle={{ width: '300px' }} columnKey=\"activity\"></Column>\r\n                    <Column field=\"representative.name\" header=\"Representative\" headerStyle={{ width: '300px' }} columnKey=\"representative\"></Column>\r\n                </DataTable>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n                `\r\n            },\r\n            'ts': {\r\n                tabName: 'TS Source',\r\n                content: `\r\nimport React, { useState, useEffect, useRef } from 'react';\r\nimport { DataTable } from 'primereact/datatable';\r\nimport { Column } from 'primereact/column';\r\nimport { CustomerService } from '../service/CustomerService';\r\nimport './DataTableDemo.css';\r\n\r\nconst DataTableScrollDemo = () => {\r\n    const [customers, setCustomers] = useState([]);\r\n    const [virtualCustomers, setVirtualCustomers] = useState([]);\r\n    const [inmemoryData, setInMemoryData] = useState([]);\r\n    const [lazyTotalRecords, setLazyTotalRecords] = useState(0);\r\n    const [loading, setLoading] = useState(false);\r\n    const [virtualLoading, setVirtualLoading] = useState(false);\r\n    const isMounted = useRef(null);\r\n    const customerService = new CustomerService();\r\n\r\n    const frozenValue = [\r\n        {\r\n            id: 1255,\r\n            name: \"James McAdams\",\r\n            country: {\r\n                name: \"United States\",\r\n                code: \"us\"\r\n            },\r\n            company: \"McAdams Consulting Ltd\",\r\n            date: \"2014-02-13\",\r\n            status: \"qualified\",\r\n            activity: 23,\r\n            representative: {\r\n                name: \"Ioni Bowcher\",\r\n                image: \"ionibowcher.png\"\r\n            }\r\n        },\r\n        {\r\n            id: 5135,\r\n            name: \"Geraldine Bisset\",\r\n            country: {\r\n                name: \"France\",\r\n                code: \"fr\"\r\n            },\r\n            company: \"Bisset Group\",\r\n            status: \"proposal\",\r\n            date: \"2019-05-05\",\r\n            activity: 0,\r\n            representative: {\r\n                name: \"Amy Elsner\",\r\n                image: \"amyelsner.png\"\r\n            }\r\n        }\r\n    ];\r\n\r\n    useEffect(() => {\r\n        if (isMounted.current) {\r\n            loadVirtualCustomers();\r\n        }\r\n    }, [inmemoryData]);\r\n\r\n    useEffect(() => {\r\n        isMounted.current = true;\r\n        setLoading(true);\r\n        setVirtualLoading(true);\r\n\r\n        customerService.getCustomersLarge().then(data => {\r\n            setCustomers(data);\r\n            setLoading(false);\r\n        });\r\n        customerService.getCustomersXLarge().then(data => setInMemoryData(data));\r\n    }, []); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n    const loadVirtualCustomers = () => {\r\n        setVirtualCustomers(loadChunk(0, 40));\r\n        setLazyTotalRecords(500);\r\n        setVirtualLoading(false);\r\n    }\r\n\r\n    const loadChunk = (index, length) => {\r\n        let chunk = [];\r\n        for (let i = 0; i < length; i++) {\r\n            chunk[i] = { ...inmemoryData[i]};\r\n        }\r\n\r\n        return chunk;\r\n    }\r\n\r\n    const onVirtualScroll = (event) => {\r\n        //for demo purposes keep loading the same dataset\r\n        //in a real production application, this data should come from server by building the query with LazyLoadEvent options\r\n        setTimeout(() => {\r\n            //last chunk\r\n            if (event.first === 480) {\r\n                setVirtualCustomers(loadChunk(event.first, 20));\r\n            }\r\n            else {\r\n                setVirtualCustomers(loadChunk(event.first, event.rows));\r\n            }\r\n        }, 250);\r\n    }\r\n\r\n    const loadingText = () => {\r\n        return <span className=\"loading-text\"></span>;\r\n    }\r\n\r\n    const nameBodyTemplate = (rowData) => {\r\n        return <span style={{ fontWeight: '700' }}>{rowData.name}</span>;\r\n    }\r\n\r\n    return (\r\n        <div className=\"datatable-scroll-demo\">\r\n            <div className=\"card\">\r\n                <h5>Vertical</h5>\r\n                <DataTable value={customers} scrollable scrollHeight=\"200px\" loading={loading}>\r\n                    <Column field=\"name\" header=\"Name\"></Column>\r\n                    <Column field=\"country.name\" header=\"Country\"></Column>\r\n                    <Column field=\"representative.name\" header=\"Representative\"></Column>\r\n                    <Column field=\"status\" header=\"Status\"></Column>\r\n                </DataTable>\r\n            </div>\r\n\r\n            <div className=\"card\">\r\n                <h5>Virtual Scroll</h5>\r\n                <DataTable value={virtualCustomers} scrollable scrollHeight=\"200px\" lazy rows={20} loading={virtualLoading}\r\n                    virtualScroll virtualRowHeight={45} onVirtualScroll={onVirtualScroll} totalRecords={lazyTotalRecords}>\r\n                    <Column field=\"name\" header=\"Name\" loadingBody={loadingText}></Column>\r\n                    <Column field=\"country.name\" header=\"Country\" loadingBody={loadingText}></Column>\r\n                    <Column field=\"representative.name\" header=\"Representative\" loadingBody={loadingText}></Column>\r\n                    <Column field=\"status\" header=\"Status\" loadingBody={loadingText}></Column>\r\n                </DataTable>\r\n            </div>\r\n\r\n            <div className=\"card\">\r\n                <h5>Horizontal and Vertical</h5>\r\n                <DataTable value={customers} scrollable scrollHeight=\"200px\" style={{ width: '600px' }} loading={loading}>\r\n                    <Column field=\"id\" header=\"Id\" headerStyle={{ width: '250px' }} columnKey=\"id\"></Column>\r\n                    <Column field=\"name\" header=\"Name\" headerStyle={{ width: '250px' }} columnKey=\"name\"></Column>\r\n                    <Column field=\"country.name\" header=\"Country\" headerStyle={{ width: '250px' }} columnKey=\"country\"></Column>\r\n                    <Column field=\"date\" header=\"Date\" headerStyle={{ width: '250px' }} columnKey=\"date\"></Column>\r\n                    <Column field=\"company\" header=\"Company\" headerStyle={{ width: '250px' }} columnKey=\"company\"></Column>\r\n                    <Column field=\"status\" header=\"Status\" headerStyle={{ width: '250px' }} columnKey=\"status\"></Column>\r\n                    <Column field=\"activity\" header=\"Activity\" headerStyle={{ width: '250px' }} columnKey=\"activity\"></Column>\r\n                    <Column field=\"representative.name\" header=\"Representative\" headerStyle={{ width: '250px' }} columnKey=\"representative\"></Column>\r\n                </DataTable>\r\n            </div>\r\n\r\n            <div className=\"card\">\r\n                <h5>Frozen Rows</h5>\r\n                <DataTable value={customers} frozenValue={frozenValue} scrollable scrollHeight=\"200px\" loading={loading}>\r\n                    <Column field=\"name\" header=\"Name\"></Column>\r\n                    <Column field=\"country.name\" header=\"Country\"></Column>\r\n                    <Column field=\"representative.name\" header=\"Representative\"></Column>\r\n                    <Column field=\"status\" header=\"Status\"></Column>\r\n                </DataTable>\r\n            </div>\r\n\r\n            <div className=\"card\">\r\n                <h5>Frozen Columns</h5>\r\n                <DataTable value={customers} scrollable scrollHeight=\"200px\" frozenWidth=\"300px\" loading={loading}>\r\n                    <Column field=\"name\" header=\"Name\" body={nameBodyTemplate} headerStyle={{ width: '300px' }} columnKey=\"name\" frozen></Column>\r\n                    <Column field=\"id\" header=\"Id\" headerStyle={{ width: '300px' }} columnKey=\"id\"></Column>\r\n                    <Column field=\"country.name\" header=\"Country\" headerStyle={{ width: '300px' }} columnKey=\"country\"></Column>\r\n                    <Column field=\"date\" header=\"Date\" headerStyle={{ width: '300px' }} columnKey=\"date\"></Column>\r\n                    <Column field=\"company\" header=\"Country\" headerStyle={{ width: '300px' }} columnKey=\"company\"></Column>\r\n                    <Column field=\"status\" header=\"Status\" headerStyle={{ width: '300px' }} columnKey=\"status\"></Column>\r\n                    <Column field=\"activity\" header=\"Activity\" headerStyle={{ width: '300px' }} columnKey=\"activity\"></Column>\r\n                    <Column field=\"representative.name\" header=\"Representative\" headerStyle={{ width: '300px' }} columnKey=\"representative\"></Column>\r\n                </DataTable>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n                `\r\n            }\r\n        };\r\n\r\n        this.extFiles = {\r\n            'src/demo/DataTableDemo.css': {\r\n                content: `\r\n.datatable-scroll-demo .loading-text {\r\n    display: block;\r\n    background-color: #f1f1f1;\r\n    min-height: 19px;\r\n    animation: pulse 1s infinite ease-in-out;\r\n    text-indent: -99999px;\r\n    overflow: hidden;\r\n}\r\n                `\r\n            }\r\n        }\r\n    }\r\n\r\n    shouldComponentUpdate() {\r\n        return false;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"content-section documentation\">\r\n                <TabView>\r\n                    {\r\n                        useLiveEditorTabs({ name: 'DataTableScrollDemo', sources: this.sources, service: 'CustomerService', data: 'customers-large,customers-xlarge', extFiles: this.extFiles })\r\n                    }\r\n                </TabView>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}