{"ast":null,"code":"import _objectSpread from \"C:\\\\Users\\\\zura.ph\\\\WebstormProjects\\\\slotmaster-dashboard\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\nimport _classCallCheck from \"C:\\\\Users\\\\zura.ph\\\\WebstormProjects\\\\slotmaster-dashboard\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\zura.ph\\\\WebstormProjects\\\\slotmaster-dashboard\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"C:\\\\Users\\\\zura.ph\\\\WebstormProjects\\\\slotmaster-dashboard\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"C:\\\\Users\\\\zura.ph\\\\WebstormProjects\\\\slotmaster-dashboard\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _createSuper from \"C:\\\\Users\\\\zura.ph\\\\WebstormProjects\\\\slotmaster-dashboard\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"C:\\\\Users\\\\zura.ph\\\\WebstormProjects\\\\slotmaster-dashboard\\\\src\\\\components\\\\inputtextarea\\\\InputTextarea.js\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { classNames } from '../utils/ClassNames';\nimport { tip } from '../tooltip/Tooltip';\nimport DomHandler from '../utils/DomHandler';\nimport ObjectUtils from '../utils/ObjectUtils';\nexport var InputTextarea = /*#__PURE__*/function (_Component) {\n  _inherits(InputTextarea, _Component);\n\n  var _super = _createSuper(InputTextarea);\n\n  function InputTextarea(props) {\n    var _this;\n\n    _classCallCheck(this, InputTextarea);\n\n    _this = _super.call(this, props);\n    _this.onFocus = _this.onFocus.bind(_assertThisInitialized(_this));\n    _this.onBlur = _this.onBlur.bind(_assertThisInitialized(_this));\n    _this.onKeyUp = _this.onKeyUp.bind(_assertThisInitialized(_this));\n    _this.onInput = _this.onInput.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(InputTextarea, [{\n    key: \"onFocus\",\n    value: function onFocus(e) {\n      if (this.props.autoResize) {\n        this.resize();\n      }\n\n      if (this.props.onFocus) {\n        this.props.onFocus(e);\n      }\n    }\n  }, {\n    key: \"onBlur\",\n    value: function onBlur(e) {\n      if (this.props.autoResize) {\n        this.resize();\n      }\n\n      if (this.props.onBlur) {\n        this.props.onBlur(e);\n      }\n    }\n  }, {\n    key: \"onKeyUp\",\n    value: function onKeyUp(e) {\n      if (this.props.autoResize) {\n        this.resize();\n      }\n\n      if (this.props.onKeyUp) {\n        this.props.onKeyUp(e);\n      }\n    }\n  }, {\n    key: \"onInput\",\n    value: function onInput(e) {\n      if (this.props.autoResize) {\n        this.resize();\n      }\n\n      if (!this.props.onChange) {\n        if (e.target.value.length > 0) DomHandler.addClass(e.target, 'p-filled');else DomHandler.removeClass(e.target, 'p-filled');\n      }\n\n      if (this.props.onInput) {\n        this.props.onInput(e);\n      }\n    }\n  }, {\n    key: \"resize\",\n    value: function resize() {\n      if (DomHandler.isVisible(this.element)) {\n        if (!this.cachedScrollHeight) {\n          this.cachedScrollHeight = this.element.scrollHeight;\n          this.element.style.overflow = \"hidden\";\n        }\n\n        if (this.cachedScrollHeight !== this.element.scrollHeight) {\n          this.element.style.height = '';\n          this.element.style.height = this.element.scrollHeight + 'px';\n\n          if (parseFloat(this.element.style.height) >= parseFloat(this.element.style.maxHeight)) {\n            this.element.style.overflowY = \"scroll\";\n            this.element.style.height = this.element.style.maxHeight;\n          } else {\n            this.element.style.overflow = \"hidden\";\n          }\n\n          this.cachedScrollHeight = this.element.scrollHeight;\n        }\n      }\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      if (this.props.tooltip) {\n        this.renderTooltip();\n      }\n\n      if (this.props.autoResize) {\n        this.resize();\n      }\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      if (prevProps.tooltip !== this.props.tooltip || prevProps.tooltipOptions !== this.props.tooltipOptions) {\n        if (this.tooltip) this.tooltip.update(_objectSpread({\n          content: this.props.tooltip\n        }, this.props.tooltipOptions || {}));else this.renderTooltip();\n      }\n\n      if (this.props.autoResize) {\n        this.resize();\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      if (this.tooltip) {\n        this.tooltip.destroy();\n        this.tooltip = null;\n      }\n    }\n  }, {\n    key: \"renderTooltip\",\n    value: function renderTooltip() {\n      this.tooltip = tip({\n        target: this.element,\n        content: this.props.tooltip,\n        options: this.props.tooltipOptions\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var className = classNames('p-inputtextarea p-inputtext p-component', {\n        'p-disabled': this.props.disabled,\n        'p-filled': this.props.value != null && this.props.value.toString().length > 0 || this.props.defaultValue != null && this.props.defaultValue.toString().length > 0,\n        'p-inputtextarea-resizable': this.props.autoResize\n      }, this.props.className);\n      var textareaProps = ObjectUtils.findDiffKeys(this.props, InputTextarea.defaultProps);\n      return /*#__PURE__*/React.createElement(\"textarea\", Object.assign({}, textareaProps, {\n        className: className,\n        ref: function ref(input) {\n          return _this2.element = input;\n        },\n        onFocus: this.onFocus,\n        onBlur: this.onBlur,\n        onKeyUp: this.onKeyUp,\n        onInput: this.onInput,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 151,\n          columnNumber: 13\n        }\n      }));\n    }\n  }]);\n\n  return InputTextarea;\n}(Component);\nInputTextarea.defaultProps = {\n  autoResize: false,\n  onInput: null,\n  tooltip: null,\n  tooltipOptions: null\n};\nInputTextarea.propTypes = {\n  autoResize: PropTypes.bool,\n  onInput: PropTypes.func,\n  tooltip: PropTypes.string,\n  tooltipOptions: PropTypes.object\n};","map":{"version":3,"sources":["C:/Users/zura.ph/WebstormProjects/slotmaster-dashboard/src/components/inputtextarea/InputTextarea.js"],"names":["React","Component","PropTypes","classNames","tip","DomHandler","ObjectUtils","InputTextarea","props","onFocus","bind","onBlur","onKeyUp","onInput","e","autoResize","resize","onChange","target","value","length","addClass","removeClass","isVisible","element","cachedScrollHeight","scrollHeight","style","overflow","height","parseFloat","maxHeight","overflowY","tooltip","renderTooltip","prevProps","tooltipOptions","update","content","destroy","options","className","disabled","toString","defaultValue","textareaProps","findDiffKeys","defaultProps","input","propTypes","bool","func","string","object"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { classNames } from '../utils/ClassNames';\r\nimport { tip } from '../tooltip/Tooltip';\r\nimport DomHandler from '../utils/DomHandler';\r\nimport ObjectUtils from '../utils/ObjectUtils';\r\n\r\nexport class InputTextarea extends Component {\r\n\r\n    static defaultProps = {\r\n        autoResize: false,\r\n        onInput: null,\r\n        tooltip: null,\r\n        tooltipOptions: null\r\n    };\r\n\r\n    static propTypes = {\r\n        autoResize: PropTypes.bool,\r\n        onInput: PropTypes.func,\r\n        tooltip: PropTypes.string,\r\n        tooltipOptions: PropTypes.object\r\n    };\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.onFocus = this.onFocus.bind(this);\r\n        this.onBlur = this.onBlur.bind(this);\r\n        this.onKeyUp = this.onKeyUp.bind(this);\r\n        this.onInput = this.onInput.bind(this);\r\n    }\r\n\r\n    onFocus(e) {\r\n        if (this.props.autoResize) {\r\n            this.resize();\r\n        }\r\n\r\n        if (this.props.onFocus) {\r\n            this.props.onFocus(e);\r\n        }\r\n    }\r\n\r\n    onBlur(e) {\r\n        if (this.props.autoResize) {\r\n            this.resize();\r\n        }\r\n\r\n        if (this.props.onBlur) {\r\n            this.props.onBlur(e);\r\n        }\r\n    }\r\n\r\n    onKeyUp(e) {\r\n        if (this.props.autoResize) {\r\n            this.resize();\r\n        }\r\n\r\n        if (this.props.onKeyUp) {\r\n            this.props.onKeyUp(e);\r\n        }\r\n    }\r\n\r\n    onInput(e) {\r\n        if (this.props.autoResize) {\r\n            this.resize();\r\n        }\r\n\r\n        if (!this.props.onChange) {\r\n            if (e.target.value.length > 0)\r\n                DomHandler.addClass(e.target, 'p-filled');\r\n            else\r\n                DomHandler.removeClass(e.target, 'p-filled');\r\n        }\r\n\r\n        if (this.props.onInput) {\r\n            this.props.onInput(e);\r\n        }\r\n    }\r\n\r\n    resize() {\r\n        if (DomHandler.isVisible(this.element)) {\r\n            if (!this.cachedScrollHeight) {\r\n                this.cachedScrollHeight = this.element.scrollHeight;\r\n                this.element.style.overflow = \"hidden\";\r\n            }\r\n\r\n            if (this.cachedScrollHeight !== this.element.scrollHeight) {\r\n                this.element.style.height = ''\r\n                this.element.style.height = this.element.scrollHeight + 'px';\r\n\r\n                if (parseFloat(this.element.style.height) >= parseFloat(this.element.style.maxHeight)) {\r\n                    this.element.style.overflowY = \"scroll\";\r\n                    this.element.style.height = this.element.style.maxHeight;\r\n                }\r\n                else {\r\n                    this.element.style.overflow = \"hidden\";\r\n                }\r\n\r\n                this.cachedScrollHeight = this.element.scrollHeight;\r\n            }\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        if (this.props.tooltip) {\r\n            this.renderTooltip();\r\n        }\r\n\r\n        if (this.props.autoResize) {\r\n            this.resize();\r\n        }\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if (prevProps.tooltip !== this.props.tooltip || prevProps.tooltipOptions !== this.props.tooltipOptions) {\r\n            if (this.tooltip)\r\n                this.tooltip.update({ content: this.props.tooltip, ...(this.props.tooltipOptions || {}) });\r\n            else\r\n                this.renderTooltip();\r\n        }\r\n\r\n        if (this.props.autoResize) {\r\n            this.resize();\r\n        }\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        if (this.tooltip) {\r\n            this.tooltip.destroy();\r\n            this.tooltip = null;\r\n        }\r\n    }\r\n\r\n    renderTooltip() {\r\n        this.tooltip = tip({\r\n            target: this.element,\r\n            content: this.props.tooltip,\r\n            options: this.props.tooltipOptions\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const className = classNames('p-inputtextarea p-inputtext p-component', {\r\n            'p-disabled': this.props.disabled,\r\n            'p-filled': (this.props.value != null && this.props.value.toString().length > 0) || (this.props.defaultValue != null && this.props.defaultValue.toString().length > 0),\r\n            'p-inputtextarea-resizable': this.props.autoResize\r\n        }, this.props.className);\r\n\r\n        let textareaProps = ObjectUtils.findDiffKeys(this.props, InputTextarea.defaultProps);\r\n\r\n        return (\r\n            <textarea {...textareaProps} className={className} ref={input => this.element = input}\r\n                onFocus={this.onFocus} onBlur={this.onBlur} onKeyUp={this.onKeyUp} onInput={this.onInput}></textarea>\r\n        );\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}