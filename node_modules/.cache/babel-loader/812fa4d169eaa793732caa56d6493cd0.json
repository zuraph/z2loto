{"ast":null,"code":"import _classCallCheck from\"C:\\\\Users\\\\zura.ph\\\\WebstormProjects\\\\slotmaster-dashboard\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";import _createClass from\"C:\\\\Users\\\\zura.ph\\\\WebstormProjects\\\\slotmaster-dashboard\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";import _assertThisInitialized from\"C:\\\\Users\\\\zura.ph\\\\WebstormProjects\\\\slotmaster-dashboard\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/assertThisInitialized\";import _inherits from\"C:\\\\Users\\\\zura.ph\\\\WebstormProjects\\\\slotmaster-dashboard\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";import _createSuper from\"C:\\\\Users\\\\zura.ph\\\\WebstormProjects\\\\slotmaster-dashboard\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createSuper\";import React,{Component}from'react';import{TreeTable}from'../../components/treetable/TreeTable';import{Column}from'../../components/column/Column';import{NodeService}from'../service/NodeService';import{MultiSelect}from'../../components/multiselect/MultiSelect';import{TabView}from'../../components/tabview/TabView';import{useLiveEditorTabs}from'../liveeditor/LiveEditor';import{AppInlineHeader}from'../../AppInlineHeader';export var TreeTableColTogglerDemo=/*#__PURE__*/function(_Component){_inherits(TreeTableColTogglerDemo,_Component);var _super=_createSuper(TreeTableColTogglerDemo);function TreeTableColTogglerDemo(props){var _this;_classCallCheck(this,TreeTableColTogglerDemo);_this=_super.call(this,props);var columns=[{field:'size',header:'Size'},{field:'type',header:'Type'}];_this.colOptions=[];for(var _i=0,_columns=columns;_i<_columns.length;_i++){var col=_columns[_i];_this.colOptions.push({label:col.header,value:col});}_this.state={nodes:[],cols:columns};_this.nodeservice=new NodeService();_this.onColumnToggle=_this.onColumnToggle.bind(_assertThisInitialized(_this));return _this;}_createClass(TreeTableColTogglerDemo,[{key:\"componentDidMount\",value:function componentDidMount(){var _this2=this;this.nodeservice.getTreeTableNodes().then(function(data){return _this2.setState({nodes:data});});}},{key:\"onColumnToggle\",value:function onColumnToggle(event){this.setState({cols:event.value});}},{key:\"render\",value:function render(){var header=/*#__PURE__*/React.createElement(\"div\",{style:{textAlign:'left'}},/*#__PURE__*/React.createElement(MultiSelect,{value:this.state.cols,options:this.colOptions,onChange:this.onColumnToggle,style:{width:'250px'}}));var columns=this.state.cols.map(function(col,i){return/*#__PURE__*/React.createElement(Column,{key:col.field,field:col.field,header:col.header});});return/*#__PURE__*/React.createElement(\"div\",null,/*#__PURE__*/React.createElement(\"div\",{className:\"content-section introduction\"},/*#__PURE__*/React.createElement(AppInlineHeader,{changelogText:\"treeTable\"},/*#__PURE__*/React.createElement(\"h1\",null,\"TreeTable \",/*#__PURE__*/React.createElement(\"span\",null,\"Column Toggler\")),/*#__PURE__*/React.createElement(\"p\",null,\"MultiSelect component can be used to implement column toggler functionality.\"))),/*#__PURE__*/React.createElement(\"div\",{className:\"content-section implementation\"},/*#__PURE__*/React.createElement(\"div\",{className:\"card\"},/*#__PURE__*/React.createElement(TreeTable,{value:this.state.nodes,header:header},/*#__PURE__*/React.createElement(Column,{key:\"name\",field:\"name\",header:\"Name\",expander:true}),columns))),/*#__PURE__*/React.createElement(TreeTableColTogglerDemoDoc,null));}}]);return TreeTableColTogglerDemo;}(Component);var TreeTableColTogglerDemoDoc=/*#__PURE__*/function(_Component2){_inherits(TreeTableColTogglerDemoDoc,_Component2);var _super2=_createSuper(TreeTableColTogglerDemoDoc);function TreeTableColTogglerDemoDoc(props){var _this3;_classCallCheck(this,TreeTableColTogglerDemoDoc);_this3=_super2.call(this,props);_this3.sources={'class':{tabName:'Class Source',content:\"\\nimport React, { Component } from 'react';\\nimport { TreeTable } from 'primereact/treetable';\\nimport { Column } from 'primereact/column';\\nimport { NodeService } from '../service/NodeService';\\nimport { MultiSelect } from 'primereact/multiselect';\\n\\nexport class TreeTableColTogglerDemo extends Component {\\n\\n    constructor(props) {\\n        super(props);\\n        let columns = [\\n            { field: 'size', header: 'Size' },\\n            { field: 'type', header: 'Type' }\\n        ];\\n\\n        this.colOptions = [];\\n        for (let col of columns) {\\n            this.colOptions.push({ label: col.header, value: col });\\n        }\\n\\n        this.state = {\\n            nodes: [],\\n            cols: columns\\n        };\\n\\n        this.nodeservice = new NodeService();\\n        this.onColumnToggle = this.onColumnToggle.bind(this);\\n    }\\n\\n    componentDidMount() {\\n        this.nodeservice.getTreeTableNodes().then(data => this.setState({ nodes: data }));\\n    }\\n\\n    onColumnToggle(event) {\\n        this.setState({ cols: event.value });\\n    }\\n\\n    render() {\\n        const header = (\\n            <div style={{ textAlign: 'left' }}>\\n                <MultiSelect value={this.state.cols} options={this.colOptions} onChange={this.onColumnToggle}\\n                    style={{ width: '250px' }} />\\n            </div>\\n        );\\n\\n        const columns = this.state.cols.map((col, i) => {\\n            return <Column key={col.field} field={col.field} header={col.header} />;\\n        });\\n\\n        return (\\n            <div>\\n                <div className=\\\"card\\\">\\n                    <TreeTable value={this.state.nodes} header={header}>\\n                        <Column key=\\\"name\\\" field=\\\"name\\\" header=\\\"Name\\\" expander />\\n                        {columns}\\n                    </TreeTable>\\n                </div>\\n            </div>\\n        )\\n    }\\n}\\n                \"},'hooks':{tabName:'Hooks Source',content:\"\\nimport React, { useState, useEffect } from 'react';\\nimport { TreeTable } from 'primereact/treetable';\\nimport { Column } from 'primereact/column';\\nimport { NodeService } from '../service/NodeService';\\nimport { MultiSelect } from 'primereact/multiselect';\\n\\nconst TreeTableColTogglerDemo = () => {\\n    let columns = [\\n        { field: 'size', header: 'Size' },\\n        { field: 'type', header: 'Type' }\\n    ];\\n\\n    let colOptions = [];\\n    for (let col of columns) {\\n        colOptions.push({ label: col.header, value: col });\\n    }\\n\\n    const [nodes, setNodes] = useState([]);\\n    const [cols, setCols] = useState(columns);\\n\\n    const nodeservice = new NodeService();\\n\\n    useEffect(() => {\\n        nodeservice.getTreeTableNodes().then(data => setNodes(data));\\n    }, []); // eslint-disable-line react-hooks/exhaustive-deps\\n\\n    const onColumnToggle = (event) => {\\n        setCols(event.value);\\n    }\\n\\n    const header = (\\n        <div style={{ textAlign: 'left' }}>\\n            <MultiSelect value={cols} options={colOptions} onChange={onColumnToggle}\\n                style={{ width: '250px' }} />\\n        </div>\\n    );\\n\\n    const _columns = cols.map((col, i) => {\\n        return <Column key={col.field} field={col.field} header={col.header} />;\\n    });\\n\\n    return (\\n        <div>\\n            <div className=\\\"card\\\">\\n                <TreeTable value={nodes} header={header}>\\n                    <Column key=\\\"name\\\" field=\\\"name\\\" header=\\\"Name\\\" expander />\\n                    {_columns}\\n                </TreeTable>\\n            </div>\\n        </div>\\n    );\\n}\\n                \"},'ts':{tabName:'TS Source',content:\"\\nimport React, { useState, useEffect } from 'react';\\nimport { TreeTable } from 'primereact/treetable';\\nimport { Column } from 'primereact/column';\\nimport { NodeService } from '../service/NodeService';\\nimport { MultiSelect } from 'primereact/multiselect';\\n\\nconst TreeTableColTogglerDemo = () => {\\n    let columns = [\\n        { field: 'size', header: 'Size' },\\n        { field: 'type', header: 'Type' }\\n    ];\\n\\n    let colOptions = [];\\n    for (let col of columns) {\\n        colOptions.push({ label: col.header, value: col });\\n    }\\n\\n    const [nodes, setNodes] = useState([]);\\n    const [cols, setCols] = useState(columns);\\n\\n    const nodeservice = new NodeService();\\n\\n    useEffect(() => {\\n        nodeservice.getTreeTableNodes().then(data => setNodes(data));\\n    }, []); // eslint-disable-line react-hooks/exhaustive-deps\\n\\n    const onColumnToggle = (event) => {\\n        setCols(event.value);\\n    }\\n\\n    const header = (\\n        <div style={{ textAlign: 'left' }}>\\n            <MultiSelect value={cols} options={colOptions} onChange={onColumnToggle}\\n                style={{ width: '250px' }} />\\n        </div>\\n    );\\n\\n    const _columns = cols.map((col, i) => {\\n        return <Column key={col.field} field={col.field} header={col.header} />;\\n    });\\n\\n    return (\\n        <div>\\n            <div className=\\\"card\\\">\\n                <TreeTable value={nodes} header={header}>\\n                    <Column key=\\\"name\\\" field=\\\"name\\\" header=\\\"Name\\\" expander />\\n                    {_columns}\\n                </TreeTable>\\n            </div>\\n        </div>\\n    );\\n}\\n                \"}};return _this3;}_createClass(TreeTableColTogglerDemoDoc,[{key:\"shouldComponentUpdate\",value:function shouldComponentUpdate(){return false;}},{key:\"render\",value:function render(){return/*#__PURE__*/React.createElement(\"div\",{className:\"content-section documentation\"},/*#__PURE__*/React.createElement(TabView,null,useLiveEditorTabs({name:'TreeTableColTogglerDemo',sources:this.sources,service:'NodeService',data:'treetablenodes'})));}}]);return TreeTableColTogglerDemoDoc;}(Component);","map":{"version":3,"sources":["C:/Users/zura.ph/WebstormProjects/slotmaster-dashboard/src/showcase/treetable/TreeTableColTogglerDemo.js"],"names":["React","Component","TreeTable","Column","NodeService","MultiSelect","TabView","useLiveEditorTabs","AppInlineHeader","TreeTableColTogglerDemo","props","columns","field","header","colOptions","col","push","label","value","state","nodes","cols","nodeservice","onColumnToggle","bind","getTreeTableNodes","then","data","setState","event","textAlign","width","map","i","TreeTableColTogglerDemoDoc","sources","tabName","content","name","service"],"mappings":"84BAAA,MAAOA,CAAAA,KAAP,EAAgBC,SAAhB,KAAiC,OAAjC,CACA,OAASC,SAAT,KAA0B,sCAA1B,CACA,OAASC,MAAT,KAAuB,gCAAvB,CACA,OAASC,WAAT,KAA4B,wBAA5B,CACA,OAASC,WAAT,KAA4B,0CAA5B,CACA,OAASC,OAAT,KAAwB,kCAAxB,CACA,OAASC,iBAAT,KAAiC,0BAAjC,CACA,OAASC,eAAT,KAAgC,uBAAhC,CAEA,UAAaC,CAAAA,uBAAb,kIAEI,iCAAYC,KAAZ,CAAmB,yDACf,uBAAMA,KAAN,EACA,GAAIC,CAAAA,OAAO,CAAG,CACV,CAAEC,KAAK,CAAE,MAAT,CAAiBC,MAAM,CAAE,MAAzB,CADU,CAEV,CAAED,KAAK,CAAE,MAAT,CAAiBC,MAAM,CAAE,MAAzB,CAFU,CAAd,CAKA,MAAKC,UAAL,CAAkB,EAAlB,CACA,sBAAgBH,OAAhB,yBAAyB,CAApB,GAAII,CAAAA,GAAG,aAAP,CACD,MAAKD,UAAL,CAAgBE,IAAhB,CAAqB,CAAEC,KAAK,CAAEF,GAAG,CAACF,MAAb,CAAqBK,KAAK,CAAEH,GAA5B,CAArB,EACH,CAED,MAAKI,KAAL,CAAa,CACTC,KAAK,CAAE,EADE,CAETC,IAAI,CAAEV,OAFG,CAAb,CAKA,MAAKW,WAAL,CAAmB,GAAIlB,CAAAA,WAAJ,EAAnB,CACA,MAAKmB,cAAL,CAAsB,MAAKA,cAAL,CAAoBC,IAApB,+BAAtB,CAlBe,aAmBlB,CArBL,qEAuBI,4BAAoB,iBAChB,KAAKF,WAAL,CAAiBG,iBAAjB,GAAqCC,IAArC,CAA0C,SAAAC,IAAI,QAAI,CAAA,MAAI,CAACC,QAAL,CAAc,CAAER,KAAK,CAAEO,IAAT,CAAd,CAAJ,EAA9C,EACH,CAzBL,8BA2BI,wBAAeE,KAAf,CAAsB,CAClB,KAAKD,QAAL,CAAc,CAAEP,IAAI,CAAEQ,KAAK,CAACX,KAAd,CAAd,EACH,CA7BL,sBA+BI,iBAAS,CACL,GAAML,CAAAA,MAAM,cACR,2BAAK,KAAK,CAAE,CAAEiB,SAAS,CAAE,MAAb,CAAZ,eACI,oBAAC,WAAD,EAAa,KAAK,CAAE,KAAKX,KAAL,CAAWE,IAA/B,CAAqC,OAAO,CAAE,KAAKP,UAAnD,CAA+D,QAAQ,CAAE,KAAKS,cAA9E,CACI,KAAK,CAAE,CAAEQ,KAAK,CAAE,OAAT,CADX,EADJ,CADJ,CAOA,GAAMpB,CAAAA,OAAO,CAAG,KAAKQ,KAAL,CAAWE,IAAX,CAAgBW,GAAhB,CAAoB,SAACjB,GAAD,CAAMkB,CAAN,CAAY,CAC5C,mBAAO,oBAAC,MAAD,EAAQ,GAAG,CAAElB,GAAG,CAACH,KAAjB,CAAwB,KAAK,CAAEG,GAAG,CAACH,KAAnC,CAA0C,MAAM,CAAEG,GAAG,CAACF,MAAtD,EAAP,CACH,CAFe,CAAhB,CAIA,mBACI,4CACI,2BAAK,SAAS,CAAC,8BAAf,eACI,oBAAC,eAAD,EAAiB,aAAa,CAAC,WAA/B,eACI,wDAAc,iDAAd,CADJ,cAEI,4GAFJ,CADJ,CADJ,cAQI,2BAAK,SAAS,CAAC,gCAAf,eACI,2BAAK,SAAS,CAAC,MAAf,eACI,oBAAC,SAAD,EAAW,KAAK,CAAE,KAAKM,KAAL,CAAWC,KAA7B,CAAoC,MAAM,CAAEP,MAA5C,eACI,oBAAC,MAAD,EAAQ,GAAG,CAAC,MAAZ,CAAmB,KAAK,CAAC,MAAzB,CAAgC,MAAM,CAAC,MAAvC,CAA8C,QAAQ,KAAtD,EADJ,CAEKF,OAFL,CADJ,CADJ,CARJ,cAiBI,oBAAC,0BAAD,MAjBJ,CADJ,CAqBH,CAhEL,qCAA6CV,SAA7C,E,GAmEMiC,CAAAA,0B,2IAEF,oCAAYxB,KAAZ,CAAmB,6DACf,yBAAMA,KAAN,EAEA,OAAKyB,OAAL,CAAe,CACX,QAAS,CACLC,OAAO,CAAE,cADJ,CAELC,OAAO,q3DAFF,CADE,CAmEX,QAAS,CACLD,OAAO,CAAE,cADJ,CAELC,OAAO,mmDAFF,CAnEE,CA4HX,KAAM,CACFD,OAAO,CAAE,WADP,CAEFC,OAAO,mmDAFL,CA5HK,CAAf,CAHe,cAyLlB,C,4EAED,gCAAwB,CACpB,MAAO,MAAP,CACH,C,sBAED,iBAAS,CACL,mBACI,2BAAK,SAAS,CAAC,+BAAf,eACI,oBAAC,OAAD,MAEQ9B,iBAAiB,CAAC,CAAE+B,IAAI,CAAE,yBAAR,CAAmCH,OAAO,CAAE,KAAKA,OAAjD,CAA0DI,OAAO,CAAE,aAAnE,CAAkFZ,IAAI,CAAE,gBAAxF,CAAD,CAFzB,CADJ,CADJ,CASH,C,wCA3MoC1B,S","sourcesContent":["import React, { Component } from 'react';\r\nimport { TreeTable } from '../../components/treetable/TreeTable';\r\nimport { Column } from '../../components/column/Column';\r\nimport { NodeService } from '../service/NodeService';\r\nimport { MultiSelect } from '../../components/multiselect/MultiSelect';\r\nimport { TabView } from '../../components/tabview/TabView';\r\nimport { useLiveEditorTabs }from '../liveeditor/LiveEditor';\r\nimport { AppInlineHeader } from '../../AppInlineHeader';\r\n\r\nexport class TreeTableColTogglerDemo extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        let columns = [\r\n            { field: 'size', header: 'Size' },\r\n            { field: 'type', header: 'Type' }\r\n        ];\r\n\r\n        this.colOptions = [];\r\n        for (let col of columns) {\r\n            this.colOptions.push({ label: col.header, value: col });\r\n        }\r\n\r\n        this.state = {\r\n            nodes: [],\r\n            cols: columns\r\n        };\r\n\r\n        this.nodeservice = new NodeService();\r\n        this.onColumnToggle = this.onColumnToggle.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.nodeservice.getTreeTableNodes().then(data => this.setState({ nodes: data }));\r\n    }\r\n\r\n    onColumnToggle(event) {\r\n        this.setState({ cols: event.value });\r\n    }\r\n\r\n    render() {\r\n        const header = (\r\n            <div style={{ textAlign: 'left' }}>\r\n                <MultiSelect value={this.state.cols} options={this.colOptions} onChange={this.onColumnToggle}\r\n                    style={{ width: '250px' }} />\r\n            </div>\r\n        );\r\n\r\n        const columns = this.state.cols.map((col, i) => {\r\n            return <Column key={col.field} field={col.field} header={col.header} />;\r\n        });\r\n\r\n        return (\r\n            <div>\r\n                <div className=\"content-section introduction\">\r\n                    <AppInlineHeader changelogText=\"treeTable\">\r\n                        <h1>TreeTable <span>Column Toggler</span></h1>\r\n                        <p>MultiSelect component can be used to implement column toggler functionality.</p>\r\n                    </AppInlineHeader>\r\n                </div>\r\n\r\n                <div className=\"content-section implementation\">\r\n                    <div className=\"card\">\r\n                        <TreeTable value={this.state.nodes} header={header}>\r\n                            <Column key=\"name\" field=\"name\" header=\"Name\" expander />\r\n                            {columns}\r\n                        </TreeTable>\r\n                    </div>\r\n                </div>\r\n\r\n                <TreeTableColTogglerDemoDoc />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nclass TreeTableColTogglerDemoDoc extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.sources = {\r\n            'class': {\r\n                tabName: 'Class Source',\r\n                content: `\r\nimport React, { Component } from 'react';\r\nimport { TreeTable } from 'primereact/treetable';\r\nimport { Column } from 'primereact/column';\r\nimport { NodeService } from '../service/NodeService';\r\nimport { MultiSelect } from 'primereact/multiselect';\r\n\r\nexport class TreeTableColTogglerDemo extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        let columns = [\r\n            { field: 'size', header: 'Size' },\r\n            { field: 'type', header: 'Type' }\r\n        ];\r\n\r\n        this.colOptions = [];\r\n        for (let col of columns) {\r\n            this.colOptions.push({ label: col.header, value: col });\r\n        }\r\n\r\n        this.state = {\r\n            nodes: [],\r\n            cols: columns\r\n        };\r\n\r\n        this.nodeservice = new NodeService();\r\n        this.onColumnToggle = this.onColumnToggle.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.nodeservice.getTreeTableNodes().then(data => this.setState({ nodes: data }));\r\n    }\r\n\r\n    onColumnToggle(event) {\r\n        this.setState({ cols: event.value });\r\n    }\r\n\r\n    render() {\r\n        const header = (\r\n            <div style={{ textAlign: 'left' }}>\r\n                <MultiSelect value={this.state.cols} options={this.colOptions} onChange={this.onColumnToggle}\r\n                    style={{ width: '250px' }} />\r\n            </div>\r\n        );\r\n\r\n        const columns = this.state.cols.map((col, i) => {\r\n            return <Column key={col.field} field={col.field} header={col.header} />;\r\n        });\r\n\r\n        return (\r\n            <div>\r\n                <div className=\"card\">\r\n                    <TreeTable value={this.state.nodes} header={header}>\r\n                        <Column key=\"name\" field=\"name\" header=\"Name\" expander />\r\n                        {columns}\r\n                    </TreeTable>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n                `\r\n            },\r\n            'hooks': {\r\n                tabName: 'Hooks Source',\r\n                content: `\r\nimport React, { useState, useEffect } from 'react';\r\nimport { TreeTable } from 'primereact/treetable';\r\nimport { Column } from 'primereact/column';\r\nimport { NodeService } from '../service/NodeService';\r\nimport { MultiSelect } from 'primereact/multiselect';\r\n\r\nconst TreeTableColTogglerDemo = () => {\r\n    let columns = [\r\n        { field: 'size', header: 'Size' },\r\n        { field: 'type', header: 'Type' }\r\n    ];\r\n\r\n    let colOptions = [];\r\n    for (let col of columns) {\r\n        colOptions.push({ label: col.header, value: col });\r\n    }\r\n\r\n    const [nodes, setNodes] = useState([]);\r\n    const [cols, setCols] = useState(columns);\r\n\r\n    const nodeservice = new NodeService();\r\n\r\n    useEffect(() => {\r\n        nodeservice.getTreeTableNodes().then(data => setNodes(data));\r\n    }, []); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n    const onColumnToggle = (event) => {\r\n        setCols(event.value);\r\n    }\r\n\r\n    const header = (\r\n        <div style={{ textAlign: 'left' }}>\r\n            <MultiSelect value={cols} options={colOptions} onChange={onColumnToggle}\r\n                style={{ width: '250px' }} />\r\n        </div>\r\n    );\r\n\r\n    const _columns = cols.map((col, i) => {\r\n        return <Column key={col.field} field={col.field} header={col.header} />;\r\n    });\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"card\">\r\n                <TreeTable value={nodes} header={header}>\r\n                    <Column key=\"name\" field=\"name\" header=\"Name\" expander />\r\n                    {_columns}\r\n                </TreeTable>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n                `\r\n            },\r\n            'ts': {\r\n                tabName: 'TS Source',\r\n                content: `\r\nimport React, { useState, useEffect } from 'react';\r\nimport { TreeTable } from 'primereact/treetable';\r\nimport { Column } from 'primereact/column';\r\nimport { NodeService } from '../service/NodeService';\r\nimport { MultiSelect } from 'primereact/multiselect';\r\n\r\nconst TreeTableColTogglerDemo = () => {\r\n    let columns = [\r\n        { field: 'size', header: 'Size' },\r\n        { field: 'type', header: 'Type' }\r\n    ];\r\n\r\n    let colOptions = [];\r\n    for (let col of columns) {\r\n        colOptions.push({ label: col.header, value: col });\r\n    }\r\n\r\n    const [nodes, setNodes] = useState([]);\r\n    const [cols, setCols] = useState(columns);\r\n\r\n    const nodeservice = new NodeService();\r\n\r\n    useEffect(() => {\r\n        nodeservice.getTreeTableNodes().then(data => setNodes(data));\r\n    }, []); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n    const onColumnToggle = (event) => {\r\n        setCols(event.value);\r\n    }\r\n\r\n    const header = (\r\n        <div style={{ textAlign: 'left' }}>\r\n            <MultiSelect value={cols} options={colOptions} onChange={onColumnToggle}\r\n                style={{ width: '250px' }} />\r\n        </div>\r\n    );\r\n\r\n    const _columns = cols.map((col, i) => {\r\n        return <Column key={col.field} field={col.field} header={col.header} />;\r\n    });\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"card\">\r\n                <TreeTable value={nodes} header={header}>\r\n                    <Column key=\"name\" field=\"name\" header=\"Name\" expander />\r\n                    {_columns}\r\n                </TreeTable>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n                `\r\n            }\r\n        }\r\n    }\r\n\r\n    shouldComponentUpdate() {\r\n        return false;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"content-section documentation\">\r\n                <TabView>\r\n                    {\r\n                        useLiveEditorTabs({ name: 'TreeTableColTogglerDemo', sources: this.sources, service: 'NodeService', data: 'treetablenodes' })\r\n                    }\r\n                </TabView>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}