{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\zura.ph\\\\WebstormProjects\\\\zloto\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\zura.ph\\\\WebstormProjects\\\\zloto\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _inherits from \"C:\\\\Users\\\\zura.ph\\\\WebstormProjects\\\\zloto\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _createSuper from \"C:\\\\Users\\\\zura.ph\\\\WebstormProjects\\\\zloto\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"C:\\\\Users\\\\zura.ph\\\\WebstormProjects\\\\zloto\\\\src\\\\showcase\\\\checkbox\\\\CheckboxDoc.js\";\nimport React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport { TabView, TabPanel } from '../../components/tabview/TabView';\nimport { CodeHighlight } from '../codehighlight/CodeHighlight';\nimport { useLiveEditorTabs } from '../liveeditor/LiveEditor';\nexport var CheckboxDoc = /*#__PURE__*/function (_Component) {\n  _inherits(CheckboxDoc, _Component);\n\n  var _super = _createSuper(CheckboxDoc);\n\n  function CheckboxDoc(props) {\n    var _this;\n\n    _classCallCheck(this, CheckboxDoc);\n\n    _this = _super.call(this, props);\n    _this.sources = {\n      'class': {\n        tabName: 'Class Source',\n        content: \"\\nimport React, { Component } from 'react';\\nimport { Checkbox } from 'primereact/checkbox';\\n\\nexport class CheckboxDemo extends Component {\\n\\n    constructor(props) {\\n        super(props);\\n\\n        this.categories = [{name: 'Accounting', key: 'A'}, {name: 'Marketing', key: 'M'}, {name: 'Production', key: 'P'}, {name: 'Research', key: 'R'}];\\n\\n        this.state = {\\n            checked: false,\\n            cities: [],\\n            selectedCategories: this.categories.slice(1,3)\\n        };\\n\\n        this.onCityChange = this.onCityChange.bind(this);\\n        this.onCategoryChange = this.onCategoryChange.bind(this);\\n    }\\n\\n    onCategoryChange(e) {\\n        let selectedCategories = [...this.state.selectedCategories];\\n\\n        if (e.checked) {\\n            selectedCategories.push(e.value);\\n        }\\n        else {\\n            for (let i = 0; i < selectedCategories.length; i++) {\\n                const selectedCategory = selectedCategories[i];\\n\\n                if (selectedCategory.key === e.value.key) {\\n                    selectedCategories.splice(i, 1);\\n                    break;\\n                }\\n            }\\n        }\\n\\n        this.setState({ selectedCategories });\\n    }\\n\\n\\n    onCityChange(e) {\\n        let selectedCities = [...this.state.cities];\\n\\n        if (e.checked)\\n            selectedCities.push(e.value);\\n        else\\n            selectedCities.splice(selectedCities.indexOf(e.value), 1);\\n\\n        this.setState({ cities: selectedCities });\\n    }\\n\\n    render() {\\n        return (\\n            <div>\\n                <div className=\\\"card\\\">\\n                    <h5>Basic</h5>\\n                    <div className=\\\"p-field-checkbox\\\">\\n                        <Checkbox inputId=\\\"binary\\\" checked={this.state.checked} onChange={e => this.setState({ checked: e.checked })} />\\n                        <label htmlFor=\\\"binary\\\">{this.state.checked ? 'true' : 'false'}</label>\\n                    </div>\\n\\n                    <h5>Multiple</h5>\\n                    <div className=\\\"p-field-checkbox\\\">\\n                        <Checkbox inputId=\\\"city1\\\" name=\\\"city\\\" value=\\\"Chicago\\\" onChange={this.onCityChange} checked={this.state.cities.indexOf('Chicago') !== -1} />\\n                        <label htmlFor=\\\"city1\\\">Chicago</label>\\n                    </div>\\n                    <div className=\\\"p-field-checkbox\\\">\\n                        <Checkbox inputId=\\\"city2\\\" name=\\\"city\\\" value=\\\"Los Angeles\\\" onChange={this.onCityChange} checked={this.state.cities.indexOf('Los Angeles') !== -1} />\\n                        <label htmlFor=\\\"city2\\\">Los Angeles</label>\\n                    </div>\\n                    <div className=\\\"p-field-checkbox\\\">\\n                        <Checkbox inputId=\\\"city3\\\" name=\\\"city\\\" value=\\\"New York\\\" onChange={this.onCityChange} checked={this.state.cities.indexOf('New York') !== -1} />\\n                        <label htmlFor=\\\"city3\\\">New York</label>\\n                    </div>\\n                    <div className=\\\"p-field-checkbox\\\">\\n                        <Checkbox inputId=\\\"city4\\\" name=\\\"city\\\" value=\\\"San Francisco\\\" onChange={this.onCityChange} checked={this.state.cities.indexOf('San Francisco') !== -1} />\\n                        <label htmlFor=\\\"city4\\\">San Francisco</label>\\n                    </div>\\n\\n                    <h5>Dynamic Values, Preselection, Value Binding and Disabled Option</h5>\\n                    {\\n                        this.categories.map((category) => {\\n                            return (\\n                                <div key={category.key} className=\\\"p-field-checkbox\\\">\\n                                    <Checkbox inputId={category.key} name=\\\"category\\\" value={category} onChange={this.onCategoryChange} checked={this.state.selectedCategories.some((item) => item.key === category.key)} disabled={category.key === 'R'} />\\n                                    <label htmlFor={category.key}>{category.name}</label>\\n                                </div>\\n                            )\\n                        })\\n                    }\\n                </div>\\n            </div>\\n        )\\n    }\\n}\\n                \"\n      },\n      'hooks': {\n        tabName: 'Hooks Source',\n        content: \"\\nimport React, { useState } from 'react';\\nimport { Checkbox } from 'primereact/checkbox';\\n\\nconst CheckboxDemo = () => {\\n    const categories = [{name: 'Accounting', key: 'A'}, {name: 'Marketing', key: 'M'}, {name: 'Production', key: 'P'}, {name: 'Research', key: 'R'}];\\n    const [checked, setChecked] = useState(false);\\n    const [cities, setCities] = useState([]);\\n    const [selectedCategories, setSelectedCategories] = useState(categories.slice(1,3));\\n\\n    const onCategoryChange = (e) => {\\n        let _selectedCategories = [...selectedCategories];\\n\\n        if (e.checked) {\\n            _selectedCategories.push(e.value);\\n        }\\n        else {\\n            for (let i = 0; i < _selectedCategories.length; i++) {\\n                const selectedCategory = _selectedCategories[i];\\n\\n                if (selectedCategory.key === e.value.key) {\\n                    _selectedCategories.splice(i, 1);\\n                    break;\\n                }\\n            }\\n        }\\n\\n        setSelectedCategories(_selectedCategories);\\n    }\\n\\n\\n    const onCityChange = (e) => {\\n        let selectedCities = [...cities];\\n\\n        if (e.checked)\\n            selectedCities.push(e.value);\\n        else\\n            selectedCities.splice(selectedCities.indexOf(e.value), 1);\\n\\n        setCities(selectedCities);\\n    }\\n\\n    return (\\n        <div>\\n            <div className=\\\"card\\\">\\n                <h5>Basic</h5>\\n                <div className=\\\"p-field-checkbox\\\">\\n                    <Checkbox inputId=\\\"binary\\\" checked={checked} onChange={e => setChecked(e.checked)} />\\n                    <label htmlFor=\\\"binary\\\">{checked ? 'true' : 'false'}</label>\\n                </div>\\n\\n                <h5>Multiple</h5>\\n                <div className=\\\"p-field-checkbox\\\">\\n                    <Checkbox inputId=\\\"city1\\\" name=\\\"city\\\" value=\\\"Chicago\\\" onChange={onCityChange} checked={cities.indexOf('Chicago') !== -1} />\\n                    <label htmlFor=\\\"city1\\\">Chicago</label>\\n                </div>\\n                <div className=\\\"p-field-checkbox\\\">\\n                    <Checkbox inputId=\\\"city2\\\" name=\\\"city\\\" value=\\\"Los Angeles\\\" onChange={onCityChange} checked={cities.indexOf('Los Angeles') !== -1} />\\n                    <label htmlFor=\\\"city2\\\">Los Angeles</label>\\n                </div>\\n                <div className=\\\"p-field-checkbox\\\">\\n                    <Checkbox inputId=\\\"city3\\\" name=\\\"city\\\" value=\\\"New York\\\" onChange={onCityChange} checked={cities.indexOf('New York') !== -1} />\\n                    <label htmlFor=\\\"city3\\\">New York</label>\\n                </div>\\n                <div className=\\\"p-field-checkbox\\\">\\n                    <Checkbox inputId=\\\"city4\\\" name=\\\"city\\\" value=\\\"San Francisco\\\" onChange={onCityChange} checked={cities.indexOf('San Francisco') !== -1} />\\n                    <label htmlFor=\\\"city4\\\">San Francisco</label>\\n                </div>\\n\\n                <h5>Dynamic Values, Preselection, Value Binding and Disabled Option</h5>\\n                {\\n                    categories.map((category) => {\\n                        return (\\n                            <div key={category.key} className=\\\"p-field-checkbox\\\">\\n                                <Checkbox inputId={category.key} name=\\\"category\\\" value={category} onChange={onCategoryChange} checked={selectedCategories.some((item) => item.key === category.key)} disabled={category.key === 'R'} />\\n                                <label htmlFor={category.key}>{category.name}</label>\\n                            </div>\\n                        )\\n                    })\\n                }\\n            </div>\\n        </div>\\n    )\\n}\\n                \"\n      },\n      'ts': {\n        tabName: 'TS Source',\n        content: \"\\nimport React, { useState } from 'react';\\nimport { Checkbox } from 'primereact/checkbox';\\n\\nconst CheckboxDemo = () => {\\n    const categories = [{name: 'Accounting', key: 'A'}, {name: 'Marketing', key: 'M'}, {name: 'Production', key: 'P'}, {name: 'Research', key: 'R'}];\\n    const [checked, setChecked] = useState<boolean>(false);\\n    const [cities, setCities] = useState<any>([]);\\n    const [selectedCategories, setSelectedCategories] = useState<any>(categories.slice(1,3));\\n\\n    const onCategoryChange = (e: { value: any, checked: boolean }) => {\\n        let _selectedCategories = [...selectedCategories];\\n\\n        if (e.checked) {\\n            _selectedCategories.push(e.value);\\n        }\\n        else {\\n            for (let i = 0; i < _selectedCategories.length; i++) {\\n                const selectedCategory = _selectedCategories[i];\\n\\n                if (selectedCategory.key === e.value.key) {\\n                    _selectedCategories.splice(i, 1);\\n                    break;\\n                }\\n            }\\n        }\\n\\n        setSelectedCategories(_selectedCategories);\\n    }\\n\\n\\n    const onCityChange = (e: { value: any, checked: boolean }) => {\\n        let selectedCities = [...cities];\\n\\n        if (e.checked)\\n            selectedCities.push(e.value);\\n        else\\n            selectedCities.splice(selectedCities.indexOf(e.value), 1);\\n\\n        setCities(selectedCities);\\n    }\\n\\n    return (\\n        <div>\\n            <div className=\\\"card\\\">\\n                <h5>Basic</h5>\\n                <div className=\\\"p-field-checkbox\\\">\\n                    <Checkbox inputId=\\\"binary\\\" checked={checked} onChange={e => setChecked(e.checked)} />\\n                    <label htmlFor=\\\"binary\\\">{checked ? 'true' : 'false'}</label>\\n                </div>\\n\\n                <h5>Multiple</h5>\\n                <div className=\\\"p-field-checkbox\\\">\\n                    <Checkbox inputId=\\\"city1\\\" name=\\\"city\\\" value=\\\"Chicago\\\" onChange={onCityChange} checked={cities.indexOf('Chicago') !== -1} />\\n                    <label htmlFor=\\\"city1\\\">Chicago</label>\\n                </div>\\n                <div className=\\\"p-field-checkbox\\\">\\n                    <Checkbox inputId=\\\"city2\\\" name=\\\"city\\\" value=\\\"Los Angeles\\\" onChange={onCityChange} checked={cities.indexOf('Los Angeles') !== -1} />\\n                    <label htmlFor=\\\"city2\\\">Los Angeles</label>\\n                </div>\\n                <div className=\\\"p-field-checkbox\\\">\\n                    <Checkbox inputId=\\\"city3\\\" name=\\\"city\\\" value=\\\"New York\\\" onChange={onCityChange} checked={cities.indexOf('New York') !== -1} />\\n                    <label htmlFor=\\\"city3\\\">New York</label>\\n                </div>\\n                <div className=\\\"p-field-checkbox\\\">\\n                    <Checkbox inputId=\\\"city4\\\" name=\\\"city\\\" value=\\\"San Francisco\\\" onChange={onCityChange} checked={cities.indexOf('San Francisco') !== -1} />\\n                    <label htmlFor=\\\"city4\\\">San Francisco</label>\\n                </div>\\n\\n                <h5>Dynamic Values, Preselection, Value Binding and Disabled Option</h5>\\n                {\\n                    categories.map((category) => {\\n                        return (\\n                            <div key={category.key} className=\\\"p-field-checkbox\\\">\\n                                <Checkbox inputId={category.key} name=\\\"category\\\" value={category} onChange={onCategoryChange} checked={selectedCategories.some((item) => item.key === category.key)} disabled={category.key === 'R'} />\\n                                <label htmlFor={category.key}>{category.name}</label>\\n                            </div>\\n                        )\\n                    })\\n                }\\n            </div>\\n        </div>\\n    )\\n}\\n                \"\n      }\n    };\n    return _this;\n  }\n\n  _createClass(CheckboxDoc, [{\n    key: \"shouldComponentUpdate\",\n    value: function shouldComponentUpdate() {\n      return false;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"content-section documentation\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 299,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(TabView, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 300,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(TabPanel, {\n        header: \"Documentation\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 301,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(\"h5\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 302,\n          columnNumber: 25\n        }\n      }, \"Import\"), /*#__PURE__*/React.createElement(CodeHighlight, {\n        lang: \"js\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 303,\n          columnNumber: 1\n        }\n      }, \"\\nimport {Checkbox} from 'primereact/checkbox';\\n\"), /*#__PURE__*/React.createElement(\"h5\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 309,\n          columnNumber: 25\n        }\n      }, \"Getting Started\"), /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 310,\n          columnNumber: 25\n        }\n      }, \"Checkbox is used as a controlled input with \", /*#__PURE__*/React.createElement(\"i\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 310,\n          columnNumber: 72\n        }\n      }, \"checked\"), \" and \", /*#__PURE__*/React.createElement(\"i\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 310,\n          columnNumber: 91\n        }\n      }, \"onChange\"), \" properties.\"), /*#__PURE__*/React.createElement(CodeHighlight, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 311,\n          columnNumber: 1\n        }\n      }, \"\\n<Checkbox onChange={e => setChecked(e.checked)} checked={checked}></Checkbox>\\n\"), /*#__PURE__*/React.createElement(\"h5\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 317,\n          columnNumber: 25\n        }\n      }, \"Multiple Values\"), /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 318,\n          columnNumber: 25\n        }\n      }, \"Multiple checkboxes can be grouped using a list of values.\"), /*#__PURE__*/React.createElement(CodeHighlight, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 319,\n          columnNumber: 1\n        }\n      }, \"\\n<div className=\\\"p-col-12\\\">\\n    <Checkbox inputId=\\\"cb1\\\" value=\\\"New York\\\" onChange={onCityChange} checked={cities.includes('New York')}></Checkbox>\\n    <label htmlFor=\\\"cb1\\\" className=\\\"p-checkbox-label\\\">New York</label>\\n</div>\\n<div className=\\\"p-col-12\\\">\\n    <Checkbox inputId=\\\"cb2\\\" value=\\\"San Francisco\\\" onChange={onCityChange} checked={cities.includes('San Francisco')}></Checkbox>\\n    <label htmlFor=\\\"cb2\\\" className=\\\"p-checkbox-label\\\">San Francisco</label>\\n</div>\\n<div className=\\\"p-col-12\\\">\\n    <Checkbox inputId=\\\"cb3\\\" value=\\\"Los Angeles\\\" onChange={onCityChange} checked={cities.includes('Los Angeles')}></Checkbox>\\n    <label htmlFor=\\\"cb3\\\" className=\\\"p-checkbox-label\\\">Los Angeles</label>\\n</div>\\n\"), /*#__PURE__*/React.createElement(CodeHighlight, {\n        lang: \"js\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 336,\n          columnNumber: 1\n        }\n      }, \"\\nconst [cities, setCities] = useState([]);\\n\\nconst onCityChange = (e) => {\\n    let selectedCities = [...cities];\\n    if(e.checked)\\n        selectedCities.push(e.value);\\n    else\\n        selectedCities.splice(selectedCities.indexOf(e.value), 1);\\n\\n    setCities(selectedCities);\\n}\\n\"), /*#__PURE__*/React.createElement(\"h5\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 352,\n          columnNumber: 25\n        }\n      }, \"Properties\"), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"doc-tablewrapper\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 353,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(\"table\", {\n        className: \"doc-table\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 354,\n          columnNumber: 29\n        }\n      }, /*#__PURE__*/React.createElement(\"thead\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 355,\n          columnNumber: 33\n        }\n      }, /*#__PURE__*/React.createElement(\"tr\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 356,\n          columnNumber: 37\n        }\n      }, /*#__PURE__*/React.createElement(\"th\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 357,\n          columnNumber: 41\n        }\n      }, \"Name\"), /*#__PURE__*/React.createElement(\"th\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 358,\n          columnNumber: 41\n        }\n      }, \"Type\"), /*#__PURE__*/React.createElement(\"th\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 359,\n          columnNumber: 41\n        }\n      }, \"Default\"), /*#__PURE__*/React.createElement(\"th\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 360,\n          columnNumber: 41\n        }\n      }, \"Description\"))), /*#__PURE__*/React.createElement(\"tbody\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 363,\n          columnNumber: 33\n        }\n      }, /*#__PURE__*/React.createElement(\"tr\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 364,\n          columnNumber: 37\n        }\n      }, /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 365,\n          columnNumber: 41\n        }\n      }, \"id\"), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 366,\n          columnNumber: 41\n        }\n      }, \"string\"), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 367,\n          columnNumber: 41\n        }\n      }, \"null\"), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 368,\n          columnNumber: 41\n        }\n      }, \"Unique identifier of the element.\")), /*#__PURE__*/React.createElement(\"tr\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 370,\n          columnNumber: 37\n        }\n      }, /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 371,\n          columnNumber: 41\n        }\n      }, \"inputId\"), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 372,\n          columnNumber: 41\n        }\n      }, \"string\"), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 373,\n          columnNumber: 41\n        }\n      }, \"null\"), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 374,\n          columnNumber: 41\n        }\n      }, \"Unique identifier of the inner native radiobutton.\")), /*#__PURE__*/React.createElement(\"tr\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 376,\n          columnNumber: 37\n        }\n      }, /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 377,\n          columnNumber: 41\n        }\n      }, \"value\"), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 378,\n          columnNumber: 41\n        }\n      }, \"any\"), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 379,\n          columnNumber: 41\n        }\n      }, \"null\"), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 380,\n          columnNumber: 41\n        }\n      }, \"Value of the checkbox.\")), /*#__PURE__*/React.createElement(\"tr\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 382,\n          columnNumber: 37\n        }\n      }, /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 383,\n          columnNumber: 41\n        }\n      }, \"name\"), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 384,\n          columnNumber: 41\n        }\n      }, \"string\"), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 385,\n          columnNumber: 41\n        }\n      }, \"null\"), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 386,\n          columnNumber: 41\n        }\n      }, \"Name of the checkbox element .\")), /*#__PURE__*/React.createElement(\"tr\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 388,\n          columnNumber: 37\n        }\n      }, /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 389,\n          columnNumber: 41\n        }\n      }, \"checked\"), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 390,\n          columnNumber: 41\n        }\n      }, \"boolean\"), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 391,\n          columnNumber: 41\n        }\n      }, \"false\"), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 392,\n          columnNumber: 41\n        }\n      }, \"Specifies whether a checkbox should be checked or not.\")), /*#__PURE__*/React.createElement(\"tr\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 394,\n          columnNumber: 37\n        }\n      }, /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 395,\n          columnNumber: 41\n        }\n      }, \"style\"), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 396,\n          columnNumber: 41\n        }\n      }, \"string\"), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 397,\n          columnNumber: 41\n        }\n      }, \"null\"), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 398,\n          columnNumber: 41\n        }\n      }, \"Inline style of the element.\")), /*#__PURE__*/React.createElement(\"tr\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 400,\n          columnNumber: 37\n        }\n      }, /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 401,\n          columnNumber: 41\n        }\n      }, \"className\"), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 402,\n          columnNumber: 41\n        }\n      }, \"string\"), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 403,\n          columnNumber: 41\n        }\n      }, \"null\"), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 404,\n          columnNumber: 41\n        }\n      }, \"Style class of the element.\")), /*#__PURE__*/React.createElement(\"tr\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 406,\n          columnNumber: 37\n        }\n      }, /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 407,\n          columnNumber: 41\n        }\n      }, \"disabled\"), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 408,\n          columnNumber: 41\n        }\n      }, \"boolean\"), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 409,\n          columnNumber: 41\n        }\n      }, \"false\"), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 410,\n          columnNumber: 41\n        }\n      }, \"When present, it specifies that the element value cannot be altered.\")), /*#__PURE__*/React.createElement(\"tr\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 412,\n          columnNumber: 37\n        }\n      }, /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 413,\n          columnNumber: 41\n        }\n      }, \"required\"), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 414,\n          columnNumber: 41\n        }\n      }, \"boolean\"), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 415,\n          columnNumber: 41\n        }\n      }, \"false\"), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 416,\n          columnNumber: 41\n        }\n      }, \"When present, it specifies that an input field must be filled out before submitting the form.\")), /*#__PURE__*/React.createElement(\"tr\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 418,\n          columnNumber: 37\n        }\n      }, /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 419,\n          columnNumber: 41\n        }\n      }, \"readOnly\"), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 420,\n          columnNumber: 41\n        }\n      }, \"boolean\"), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 421,\n          columnNumber: 41\n        }\n      }, \"false\"), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 422,\n          columnNumber: 41\n        }\n      }, \"When present, it specifies that the element cannot be typed.\")), /*#__PURE__*/React.createElement(\"tr\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 424,\n          columnNumber: 37\n        }\n      }, /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 425,\n          columnNumber: 41\n        }\n      }, \"tabIndex\"), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 426,\n          columnNumber: 41\n        }\n      }, \"number\"), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 427,\n          columnNumber: 41\n        }\n      }, \"null\"), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 428,\n          columnNumber: 41\n        }\n      }, \"Index of the element in tabbing order.\")), /*#__PURE__*/React.createElement(\"tr\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 430,\n          columnNumber: 37\n        }\n      }, /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 431,\n          columnNumber: 41\n        }\n      }, \"tooltip\"), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 432,\n          columnNumber: 41\n        }\n      }, \"any\"), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 433,\n          columnNumber: 41\n        }\n      }, \"null\"), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 434,\n          columnNumber: 41\n        }\n      }, \"Content of the tooltip.\")), /*#__PURE__*/React.createElement(\"tr\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 436,\n          columnNumber: 37\n        }\n      }, /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 437,\n          columnNumber: 41\n        }\n      }, \"tooltipOptions\"), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 438,\n          columnNumber: 41\n        }\n      }, \"object\"), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 439,\n          columnNumber: 41\n        }\n      }, \"null\"), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 440,\n          columnNumber: 41\n        }\n      }, \"Configuration of the tooltip, refer to the tooltip documentation for more information.\")), /*#__PURE__*/React.createElement(\"tr\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 442,\n          columnNumber: 37\n        }\n      }, /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 443,\n          columnNumber: 41\n        }\n      }, \"ariaLabelledBy\"), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 444,\n          columnNumber: 41\n        }\n      }, \"string\"), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 445,\n          columnNumber: 41\n        }\n      }, \"null\"), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 446,\n          columnNumber: 41\n        }\n      }, \"Establishes relationships between the component and label(s) where its value should be one or more element IDs.\"))))), /*#__PURE__*/React.createElement(\"h5\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 452,\n          columnNumber: 25\n        }\n      }, \"Events\"), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"doc-tablewrapper\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 453,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(\"table\", {\n        className: \"doc-table\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 454,\n          columnNumber: 29\n        }\n      }, /*#__PURE__*/React.createElement(\"thead\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 455,\n          columnNumber: 33\n        }\n      }, /*#__PURE__*/React.createElement(\"tr\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 456,\n          columnNumber: 37\n        }\n      }, /*#__PURE__*/React.createElement(\"th\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 457,\n          columnNumber: 41\n        }\n      }, \"Name\"), /*#__PURE__*/React.createElement(\"th\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 458,\n          columnNumber: 41\n        }\n      }, \"Parameters\"), /*#__PURE__*/React.createElement(\"th\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 459,\n          columnNumber: 41\n        }\n      }, \"Description\"))), /*#__PURE__*/React.createElement(\"tbody\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 462,\n          columnNumber: 33\n        }\n      }, /*#__PURE__*/React.createElement(\"tr\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 463,\n          columnNumber: 37\n        }\n      }, /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 464,\n          columnNumber: 41\n        }\n      }, \"onChange\"), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 465,\n          columnNumber: 41\n        }\n      }, \"event.originalEvent: Original event \", /*#__PURE__*/React.createElement(\"br\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 465,\n          columnNumber: 81\n        }\n      }), \"event.value: Value of the checkbox \", /*#__PURE__*/React.createElement(\"br\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 466,\n          columnNumber: 76\n        }\n      }), \"event.checked: Checked state as a boolean.\"), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 468,\n          columnNumber: 41\n        }\n      }, \"Callback to invoke on value change\")), /*#__PURE__*/React.createElement(\"tr\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 470,\n          columnNumber: 37\n        }\n      }, /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 471,\n          columnNumber: 41\n        }\n      }, \"onMouseDown\"), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 472,\n          columnNumber: 41\n        }\n      }, \"event: Browser event\"), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 473,\n          columnNumber: 41\n        }\n      }, \"Callback to invoke to when a mouse button is pressed.\")), /*#__PURE__*/React.createElement(\"tr\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 475,\n          columnNumber: 37\n        }\n      }, /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 476,\n          columnNumber: 41\n        }\n      }, \"onContextMenu\"), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 477,\n          columnNumber: 41\n        }\n      }, \"event: Browser event\"), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 478,\n          columnNumber: 41\n        }\n      }, \"Callback to invoke on right-click.\"))))), /*#__PURE__*/React.createElement(\"h5\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 484,\n          columnNumber: 25\n        }\n      }, \"Styling\"), /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 485,\n          columnNumber: 25\n        }\n      }, \"Following is the list of structural style classes, for theming classes visit \", /*#__PURE__*/React.createElement(Link, {\n        to: \"/theming\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 485,\n          columnNumber: 105\n        }\n      }, \"theming\"), \" page.\"), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"doc-tablewrapper\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 486,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(\"table\", {\n        className: \"doc-table\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 487,\n          columnNumber: 29\n        }\n      }, /*#__PURE__*/React.createElement(\"thead\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 488,\n          columnNumber: 33\n        }\n      }, /*#__PURE__*/React.createElement(\"tr\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 489,\n          columnNumber: 37\n        }\n      }, /*#__PURE__*/React.createElement(\"th\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 490,\n          columnNumber: 41\n        }\n      }, \"Name\"), /*#__PURE__*/React.createElement(\"th\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 491,\n          columnNumber: 41\n        }\n      }, \"Element\"))), /*#__PURE__*/React.createElement(\"tbody\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 494,\n          columnNumber: 33\n        }\n      }, /*#__PURE__*/React.createElement(\"tr\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 495,\n          columnNumber: 37\n        }\n      }, /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 496,\n          columnNumber: 41\n        }\n      }, \"p-checkbox\"), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 497,\n          columnNumber: 41\n        }\n      }, \"Container element\")), /*#__PURE__*/React.createElement(\"tr\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 499,\n          columnNumber: 37\n        }\n      }, /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 500,\n          columnNumber: 41\n        }\n      }, \"p-checkbox-box\"), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 501,\n          columnNumber: 41\n        }\n      }, \"Container of icon.\")), /*#__PURE__*/React.createElement(\"tr\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 503,\n          columnNumber: 37\n        }\n      }, /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 504,\n          columnNumber: 41\n        }\n      }, \"p-checkbox-icon\"), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 505,\n          columnNumber: 41\n        }\n      }, \"Icon element.\")), /*#__PURE__*/React.createElement(\"tr\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 507,\n          columnNumber: 37\n        }\n      }, /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 508,\n          columnNumber: 41\n        }\n      }, \"p-checkbox-label\"), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 509,\n          columnNumber: 41\n        }\n      }, \"Label element and it is an external CSS class.\"))))), /*#__PURE__*/React.createElement(\"h5\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 515,\n          columnNumber: 25\n        }\n      }, \"Dependencies\"), /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 516,\n          columnNumber: 25\n        }\n      }, \"None.\")), useLiveEditorTabs({\n        name: 'CheckboxDemo',\n        sources: this.sources\n      })));\n    }\n  }]);\n\n  return CheckboxDoc;\n}(Component);","map":{"version":3,"sources":["C:/Users/zura.ph/WebstormProjects/zloto/src/showcase/checkbox/CheckboxDoc.js"],"names":["React","Component","Link","TabView","TabPanel","CodeHighlight","useLiveEditorTabs","CheckboxDoc","props","sources","tabName","content","name"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { TabView, TabPanel } from '../../components/tabview/TabView';\r\nimport { CodeHighlight } from '../codehighlight/CodeHighlight';\r\nimport { useLiveEditorTabs }from '../liveeditor/LiveEditor';\r\n\r\nexport class CheckboxDoc extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.sources = {\r\n            'class': {\r\n                tabName: 'Class Source',\r\n                content: `\r\nimport React, { Component } from 'react';\r\nimport { Checkbox } from 'primereact/checkbox';\r\n\r\nexport class CheckboxDemo extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.categories = [{name: 'Accounting', key: 'A'}, {name: 'Marketing', key: 'M'}, {name: 'Production', key: 'P'}, {name: 'Research', key: 'R'}];\r\n\r\n        this.state = {\r\n            checked: false,\r\n            cities: [],\r\n            selectedCategories: this.categories.slice(1,3)\r\n        };\r\n\r\n        this.onCityChange = this.onCityChange.bind(this);\r\n        this.onCategoryChange = this.onCategoryChange.bind(this);\r\n    }\r\n\r\n    onCategoryChange(e) {\r\n        let selectedCategories = [...this.state.selectedCategories];\r\n\r\n        if (e.checked) {\r\n            selectedCategories.push(e.value);\r\n        }\r\n        else {\r\n            for (let i = 0; i < selectedCategories.length; i++) {\r\n                const selectedCategory = selectedCategories[i];\r\n\r\n                if (selectedCategory.key === e.value.key) {\r\n                    selectedCategories.splice(i, 1);\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        this.setState({ selectedCategories });\r\n    }\r\n\r\n\r\n    onCityChange(e) {\r\n        let selectedCities = [...this.state.cities];\r\n\r\n        if (e.checked)\r\n            selectedCities.push(e.value);\r\n        else\r\n            selectedCities.splice(selectedCities.indexOf(e.value), 1);\r\n\r\n        this.setState({ cities: selectedCities });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div className=\"card\">\r\n                    <h5>Basic</h5>\r\n                    <div className=\"p-field-checkbox\">\r\n                        <Checkbox inputId=\"binary\" checked={this.state.checked} onChange={e => this.setState({ checked: e.checked })} />\r\n                        <label htmlFor=\"binary\">{this.state.checked ? 'true' : 'false'}</label>\r\n                    </div>\r\n\r\n                    <h5>Multiple</h5>\r\n                    <div className=\"p-field-checkbox\">\r\n                        <Checkbox inputId=\"city1\" name=\"city\" value=\"Chicago\" onChange={this.onCityChange} checked={this.state.cities.indexOf('Chicago') !== -1} />\r\n                        <label htmlFor=\"city1\">Chicago</label>\r\n                    </div>\r\n                    <div className=\"p-field-checkbox\">\r\n                        <Checkbox inputId=\"city2\" name=\"city\" value=\"Los Angeles\" onChange={this.onCityChange} checked={this.state.cities.indexOf('Los Angeles') !== -1} />\r\n                        <label htmlFor=\"city2\">Los Angeles</label>\r\n                    </div>\r\n                    <div className=\"p-field-checkbox\">\r\n                        <Checkbox inputId=\"city3\" name=\"city\" value=\"New York\" onChange={this.onCityChange} checked={this.state.cities.indexOf('New York') !== -1} />\r\n                        <label htmlFor=\"city3\">New York</label>\r\n                    </div>\r\n                    <div className=\"p-field-checkbox\">\r\n                        <Checkbox inputId=\"city4\" name=\"city\" value=\"San Francisco\" onChange={this.onCityChange} checked={this.state.cities.indexOf('San Francisco') !== -1} />\r\n                        <label htmlFor=\"city4\">San Francisco</label>\r\n                    </div>\r\n\r\n                    <h5>Dynamic Values, Preselection, Value Binding and Disabled Option</h5>\r\n                    {\r\n                        this.categories.map((category) => {\r\n                            return (\r\n                                <div key={category.key} className=\"p-field-checkbox\">\r\n                                    <Checkbox inputId={category.key} name=\"category\" value={category} onChange={this.onCategoryChange} checked={this.state.selectedCategories.some((item) => item.key === category.key)} disabled={category.key === 'R'} />\r\n                                    <label htmlFor={category.key}>{category.name}</label>\r\n                                </div>\r\n                            )\r\n                        })\r\n                    }\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n                `\r\n            },\r\n            'hooks': {\r\n                tabName: 'Hooks Source',\r\n                content: `\r\nimport React, { useState } from 'react';\r\nimport { Checkbox } from 'primereact/checkbox';\r\n\r\nconst CheckboxDemo = () => {\r\n    const categories = [{name: 'Accounting', key: 'A'}, {name: 'Marketing', key: 'M'}, {name: 'Production', key: 'P'}, {name: 'Research', key: 'R'}];\r\n    const [checked, setChecked] = useState(false);\r\n    const [cities, setCities] = useState([]);\r\n    const [selectedCategories, setSelectedCategories] = useState(categories.slice(1,3));\r\n\r\n    const onCategoryChange = (e) => {\r\n        let _selectedCategories = [...selectedCategories];\r\n\r\n        if (e.checked) {\r\n            _selectedCategories.push(e.value);\r\n        }\r\n        else {\r\n            for (let i = 0; i < _selectedCategories.length; i++) {\r\n                const selectedCategory = _selectedCategories[i];\r\n\r\n                if (selectedCategory.key === e.value.key) {\r\n                    _selectedCategories.splice(i, 1);\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        setSelectedCategories(_selectedCategories);\r\n    }\r\n\r\n\r\n    const onCityChange = (e) => {\r\n        let selectedCities = [...cities];\r\n\r\n        if (e.checked)\r\n            selectedCities.push(e.value);\r\n        else\r\n            selectedCities.splice(selectedCities.indexOf(e.value), 1);\r\n\r\n        setCities(selectedCities);\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"card\">\r\n                <h5>Basic</h5>\r\n                <div className=\"p-field-checkbox\">\r\n                    <Checkbox inputId=\"binary\" checked={checked} onChange={e => setChecked(e.checked)} />\r\n                    <label htmlFor=\"binary\">{checked ? 'true' : 'false'}</label>\r\n                </div>\r\n\r\n                <h5>Multiple</h5>\r\n                <div className=\"p-field-checkbox\">\r\n                    <Checkbox inputId=\"city1\" name=\"city\" value=\"Chicago\" onChange={onCityChange} checked={cities.indexOf('Chicago') !== -1} />\r\n                    <label htmlFor=\"city1\">Chicago</label>\r\n                </div>\r\n                <div className=\"p-field-checkbox\">\r\n                    <Checkbox inputId=\"city2\" name=\"city\" value=\"Los Angeles\" onChange={onCityChange} checked={cities.indexOf('Los Angeles') !== -1} />\r\n                    <label htmlFor=\"city2\">Los Angeles</label>\r\n                </div>\r\n                <div className=\"p-field-checkbox\">\r\n                    <Checkbox inputId=\"city3\" name=\"city\" value=\"New York\" onChange={onCityChange} checked={cities.indexOf('New York') !== -1} />\r\n                    <label htmlFor=\"city3\">New York</label>\r\n                </div>\r\n                <div className=\"p-field-checkbox\">\r\n                    <Checkbox inputId=\"city4\" name=\"city\" value=\"San Francisco\" onChange={onCityChange} checked={cities.indexOf('San Francisco') !== -1} />\r\n                    <label htmlFor=\"city4\">San Francisco</label>\r\n                </div>\r\n\r\n                <h5>Dynamic Values, Preselection, Value Binding and Disabled Option</h5>\r\n                {\r\n                    categories.map((category) => {\r\n                        return (\r\n                            <div key={category.key} className=\"p-field-checkbox\">\r\n                                <Checkbox inputId={category.key} name=\"category\" value={category} onChange={onCategoryChange} checked={selectedCategories.some((item) => item.key === category.key)} disabled={category.key === 'R'} />\r\n                                <label htmlFor={category.key}>{category.name}</label>\r\n                            </div>\r\n                        )\r\n                    })\r\n                }\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n                `\r\n            },\r\n            'ts': {\r\n                tabName: 'TS Source',\r\n                content: `\r\nimport React, { useState } from 'react';\r\nimport { Checkbox } from 'primereact/checkbox';\r\n\r\nconst CheckboxDemo = () => {\r\n    const categories = [{name: 'Accounting', key: 'A'}, {name: 'Marketing', key: 'M'}, {name: 'Production', key: 'P'}, {name: 'Research', key: 'R'}];\r\n    const [checked, setChecked] = useState<boolean>(false);\r\n    const [cities, setCities] = useState<any>([]);\r\n    const [selectedCategories, setSelectedCategories] = useState<any>(categories.slice(1,3));\r\n\r\n    const onCategoryChange = (e: { value: any, checked: boolean }) => {\r\n        let _selectedCategories = [...selectedCategories];\r\n\r\n        if (e.checked) {\r\n            _selectedCategories.push(e.value);\r\n        }\r\n        else {\r\n            for (let i = 0; i < _selectedCategories.length; i++) {\r\n                const selectedCategory = _selectedCategories[i];\r\n\r\n                if (selectedCategory.key === e.value.key) {\r\n                    _selectedCategories.splice(i, 1);\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        setSelectedCategories(_selectedCategories);\r\n    }\r\n\r\n\r\n    const onCityChange = (e: { value: any, checked: boolean }) => {\r\n        let selectedCities = [...cities];\r\n\r\n        if (e.checked)\r\n            selectedCities.push(e.value);\r\n        else\r\n            selectedCities.splice(selectedCities.indexOf(e.value), 1);\r\n\r\n        setCities(selectedCities);\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"card\">\r\n                <h5>Basic</h5>\r\n                <div className=\"p-field-checkbox\">\r\n                    <Checkbox inputId=\"binary\" checked={checked} onChange={e => setChecked(e.checked)} />\r\n                    <label htmlFor=\"binary\">{checked ? 'true' : 'false'}</label>\r\n                </div>\r\n\r\n                <h5>Multiple</h5>\r\n                <div className=\"p-field-checkbox\">\r\n                    <Checkbox inputId=\"city1\" name=\"city\" value=\"Chicago\" onChange={onCityChange} checked={cities.indexOf('Chicago') !== -1} />\r\n                    <label htmlFor=\"city1\">Chicago</label>\r\n                </div>\r\n                <div className=\"p-field-checkbox\">\r\n                    <Checkbox inputId=\"city2\" name=\"city\" value=\"Los Angeles\" onChange={onCityChange} checked={cities.indexOf('Los Angeles') !== -1} />\r\n                    <label htmlFor=\"city2\">Los Angeles</label>\r\n                </div>\r\n                <div className=\"p-field-checkbox\">\r\n                    <Checkbox inputId=\"city3\" name=\"city\" value=\"New York\" onChange={onCityChange} checked={cities.indexOf('New York') !== -1} />\r\n                    <label htmlFor=\"city3\">New York</label>\r\n                </div>\r\n                <div className=\"p-field-checkbox\">\r\n                    <Checkbox inputId=\"city4\" name=\"city\" value=\"San Francisco\" onChange={onCityChange} checked={cities.indexOf('San Francisco') !== -1} />\r\n                    <label htmlFor=\"city4\">San Francisco</label>\r\n                </div>\r\n\r\n                <h5>Dynamic Values, Preselection, Value Binding and Disabled Option</h5>\r\n                {\r\n                    categories.map((category) => {\r\n                        return (\r\n                            <div key={category.key} className=\"p-field-checkbox\">\r\n                                <Checkbox inputId={category.key} name=\"category\" value={category} onChange={onCategoryChange} checked={selectedCategories.some((item) => item.key === category.key)} disabled={category.key === 'R'} />\r\n                                <label htmlFor={category.key}>{category.name}</label>\r\n                            </div>\r\n                        )\r\n                    })\r\n                }\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n                `\r\n            }\r\n        }\r\n    }\r\n\r\n    shouldComponentUpdate() {\r\n        return false;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"content-section documentation\">\r\n                <TabView>\r\n                    <TabPanel header=\"Documentation\">\r\n                        <h5>Import</h5>\r\n<CodeHighlight lang=\"js\">\r\n{`\r\nimport {Checkbox} from 'primereact/checkbox';\r\n`}\r\n</CodeHighlight>\r\n\r\n                        <h5>Getting Started</h5>\r\n                        <p>Checkbox is used as a controlled input with <i>checked</i> and <i>onChange</i> properties.</p>\r\n<CodeHighlight>\r\n{`\r\n<Checkbox onChange={e => setChecked(e.checked)} checked={checked}></Checkbox>\r\n`}\r\n</CodeHighlight>\r\n\r\n                        <h5>Multiple Values</h5>\r\n                        <p>Multiple checkboxes can be grouped using a list of values.</p>\r\n<CodeHighlight>\r\n{`\r\n<div className=\"p-col-12\">\r\n    <Checkbox inputId=\"cb1\" value=\"New York\" onChange={onCityChange} checked={cities.includes('New York')}></Checkbox>\r\n    <label htmlFor=\"cb1\" className=\"p-checkbox-label\">New York</label>\r\n</div>\r\n<div className=\"p-col-12\">\r\n    <Checkbox inputId=\"cb2\" value=\"San Francisco\" onChange={onCityChange} checked={cities.includes('San Francisco')}></Checkbox>\r\n    <label htmlFor=\"cb2\" className=\"p-checkbox-label\">San Francisco</label>\r\n</div>\r\n<div className=\"p-col-12\">\r\n    <Checkbox inputId=\"cb3\" value=\"Los Angeles\" onChange={onCityChange} checked={cities.includes('Los Angeles')}></Checkbox>\r\n    <label htmlFor=\"cb3\" className=\"p-checkbox-label\">Los Angeles</label>\r\n</div>\r\n`}\r\n</CodeHighlight>\r\n\r\n<CodeHighlight lang=\"js\">\r\n{`\r\nconst [cities, setCities] = useState([]);\r\n\r\nconst onCityChange = (e) => {\r\n    let selectedCities = [...cities];\r\n    if(e.checked)\r\n        selectedCities.push(e.value);\r\n    else\r\n        selectedCities.splice(selectedCities.indexOf(e.value), 1);\r\n\r\n    setCities(selectedCities);\r\n}\r\n`}\r\n</CodeHighlight>\r\n\r\n                        <h5>Properties</h5>\r\n                        <div className=\"doc-tablewrapper\">\r\n                            <table className=\"doc-table\">\r\n                                <thead>\r\n                                    <tr>\r\n                                        <th>Name</th>\r\n                                        <th>Type</th>\r\n                                        <th>Default</th>\r\n                                        <th>Description</th>\r\n                                    </tr>\r\n                                </thead>\r\n                                <tbody>\r\n                                    <tr>\r\n                                        <td>id</td>\r\n                                        <td>string</td>\r\n                                        <td>null</td>\r\n                                        <td>Unique identifier of the element.</td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>inputId</td>\r\n                                        <td>string</td>\r\n                                        <td>null</td>\r\n                                        <td>Unique identifier of the inner native radiobutton.</td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>value</td>\r\n                                        <td>any</td>\r\n                                        <td>null</td>\r\n                                        <td>Value of the checkbox.</td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>name</td>\r\n                                        <td>string</td>\r\n                                        <td>null</td>\r\n                                        <td>Name of the checkbox element .</td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>checked</td>\r\n                                        <td>boolean</td>\r\n                                        <td>false</td>\r\n                                        <td>Specifies whether a checkbox should be checked or not.</td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>style</td>\r\n                                        <td>string</td>\r\n                                        <td>null</td>\r\n                                        <td>Inline style of the element.</td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>className</td>\r\n                                        <td>string</td>\r\n                                        <td>null</td>\r\n                                        <td>Style class of the element.</td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>disabled</td>\r\n                                        <td>boolean</td>\r\n                                        <td>false</td>\r\n                                        <td>When present, it specifies that the element value cannot be altered.</td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>required</td>\r\n                                        <td>boolean</td>\r\n                                        <td>false</td>\r\n                                        <td>When present, it specifies that an input field must be filled out before submitting the form.</td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>readOnly</td>\r\n                                        <td>boolean</td>\r\n                                        <td>false</td>\r\n                                        <td>When present, it specifies that the element cannot be typed.</td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>tabIndex</td>\r\n                                        <td>number</td>\r\n                                        <td>null</td>\r\n                                        <td>Index of the element in tabbing order.</td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>tooltip</td>\r\n                                        <td>any</td>\r\n                                        <td>null</td>\r\n                                        <td>Content of the tooltip.</td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>tooltipOptions</td>\r\n                                        <td>object</td>\r\n                                        <td>null</td>\r\n                                        <td>Configuration of the tooltip, refer to the tooltip documentation for more information.</td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>ariaLabelledBy</td>\r\n                                        <td>string</td>\r\n                                        <td>null</td>\r\n                                        <td>Establishes relationships between the component and label(s) where its value should be one or more element IDs.</td>\r\n                                    </tr>\r\n                                </tbody>\r\n                            </table>\r\n                        </div>\r\n\r\n                        <h5>Events</h5>\r\n                        <div className=\"doc-tablewrapper\">\r\n                            <table className=\"doc-table\">\r\n                                <thead>\r\n                                    <tr>\r\n                                        <th>Name</th>\r\n                                        <th>Parameters</th>\r\n                                        <th>Description</th>\r\n                                    </tr>\r\n                                </thead>\r\n                                <tbody>\r\n                                    <tr>\r\n                                        <td>onChange</td>\r\n                                        <td>event.originalEvent: Original event <br />\r\n                                        event.value: Value of the checkbox <br />\r\n                                        event.checked: Checked state as a boolean.</td>\r\n                                        <td>Callback to invoke on value change</td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>onMouseDown</td>\r\n                                        <td>event: Browser event</td>\r\n                                        <td>Callback to invoke to when a mouse button is pressed.</td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>onContextMenu</td>\r\n                                        <td>event: Browser event</td>\r\n                                        <td>Callback to invoke on right-click.</td>\r\n                                    </tr>\r\n                                </tbody>\r\n                            </table>\r\n                        </div>\r\n\r\n                        <h5>Styling</h5>\r\n                        <p>Following is the list of structural style classes, for theming classes visit <Link to=\"/theming\">theming</Link> page.</p>\r\n                        <div className=\"doc-tablewrapper\">\r\n                            <table className=\"doc-table\">\r\n                                <thead>\r\n                                    <tr>\r\n                                        <th>Name</th>\r\n                                        <th>Element</th>\r\n                                    </tr>\r\n                                </thead>\r\n                                <tbody>\r\n                                    <tr>\r\n                                        <td>p-checkbox</td>\r\n                                        <td>Container element</td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>p-checkbox-box</td>\r\n                                        <td>Container of icon.</td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>p-checkbox-icon</td>\r\n                                        <td>Icon element.</td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>p-checkbox-label</td>\r\n                                        <td>Label element and it is an external CSS class.</td>\r\n                                    </tr>\r\n                                </tbody>\r\n                            </table>\r\n                        </div>\r\n\r\n                        <h5>Dependencies</h5>\r\n                        <p>None.</p>\r\n                    </TabPanel>\r\n\r\n                    {\r\n                        useLiveEditorTabs({ name: 'CheckboxDemo', sources: this.sources })\r\n                    }\r\n                </TabView>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}