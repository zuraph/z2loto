{"ast":null,"code":"import _objectSpread from\"C:\\\\Users\\\\zura.ph\\\\WebstormProjects\\\\slotmaster-dashboard\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";import _classCallCheck from\"C:\\\\Users\\\\zura.ph\\\\WebstormProjects\\\\slotmaster-dashboard\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";import _createClass from\"C:\\\\Users\\\\zura.ph\\\\WebstormProjects\\\\slotmaster-dashboard\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";import _inherits from\"C:\\\\Users\\\\zura.ph\\\\WebstormProjects\\\\slotmaster-dashboard\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";import _createSuper from\"C:\\\\Users\\\\zura.ph\\\\WebstormProjects\\\\slotmaster-dashboard\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createSuper\";import React,{Component}from'react';import{Tree}from'../../components/tree/Tree';import{ContextMenu}from'../../components/contextmenu/ContextMenu';import{Toast}from'../../components/toast/Toast';import{NodeService}from'../service/NodeService';import{TabView}from'../../components/tabview/TabView';import{useLiveEditorTabs}from'../liveeditor/LiveEditor';import{AppInlineHeader}from'../../AppInlineHeader';export var TreeContextMenuDemo=/*#__PURE__*/function(_Component){_inherits(TreeContextMenuDemo,_Component);var _super=_createSuper(TreeContextMenuDemo);function TreeContextMenuDemo(props){var _this;_classCallCheck(this,TreeContextMenuDemo);_this=_super.call(this,props);_this.state={nodes:null,expandedKeys:{},selectedNodeKey:null};_this.menu=[{label:'View Key',icon:'pi pi-search',command:function command(){_this.toast.show({severity:'success',summary:'Node Key',detail:_this.state.selectedNodeKey});}},{label:'Toggle',icon:'pi pi-cog',command:function command(){var expandedKeys=_objectSpread({},_this.state.expandedKeys);if(expandedKeys[_this.state.selectedNodeKey])delete expandedKeys[_this.state.selectedNodeKey];else expandedKeys[_this.state.selectedNodeKey]=true;_this.setState({expandedKeys:expandedKeys});}}];_this.nodeService=new NodeService();return _this;}_createClass(TreeContextMenuDemo,[{key:\"componentDidMount\",value:function componentDidMount(){var _this2=this;this.nodeService.getTreeNodes().then(function(data){return _this2.setState({nodes:data});});}},{key:\"render\",value:function render(){var _this3=this;return/*#__PURE__*/React.createElement(\"div\",null,/*#__PURE__*/React.createElement(\"div\",{className:\"content-section introduction\"},/*#__PURE__*/React.createElement(AppInlineHeader,{changelogText:\"tree\"},/*#__PURE__*/React.createElement(\"h1\",null,\"Tree \",/*#__PURE__*/React.createElement(\"span\",null,\"ContextMenu\")),/*#__PURE__*/React.createElement(\"p\",null,\"Tree has exclusive integration with the ContextMenu component with support for different menus depending on the node.\"))),/*#__PURE__*/React.createElement(\"div\",{className:\"content-section implementation\"},/*#__PURE__*/React.createElement(Toast,{ref:function ref(el){return _this3.toast=el;}}),/*#__PURE__*/React.createElement(ContextMenu,{model:this.menu,ref:function ref(el){return _this3.cm=el;},onHide:function onHide(){return _this3.setState({selectedNodeKey:null});}}),/*#__PURE__*/React.createElement(\"div\",{className:\"card\"},/*#__PURE__*/React.createElement(Tree,{value:this.state.nodes,expandedKeys:this.state.expandedKeys,onToggle:function onToggle(e){return _this3.setState({expandedKeys:e.value});},contextMenuSelectionKey:this.state.selectedNodeKey,onContextMenuSelectionChange:function onContextMenuSelectionChange(event){return _this3.setState({selectedNodeKey:event.value});},onContextMenu:function onContextMenu(event){return _this3.cm.show(event.originalEvent);}}))),/*#__PURE__*/React.createElement(TreeContextMenuDemoDoc,null));}}]);return TreeContextMenuDemo;}(Component);export var TreeContextMenuDemoDoc=/*#__PURE__*/function(_Component2){_inherits(TreeContextMenuDemoDoc,_Component2);var _super2=_createSuper(TreeContextMenuDemoDoc);function TreeContextMenuDemoDoc(props){var _this4;_classCallCheck(this,TreeContextMenuDemoDoc);_this4=_super2.call(this,props);_this4.sources={'class':{tabName:'Class Source',content:\"\\nimport React, { Component } from 'react';\\nimport { Tree } from 'primereact/tree';\\nimport { ContextMenu } from 'primereact/contextmenu';\\nimport { Toast} from 'primereact/toast';\\nimport { NodeService } from '../service/NodeService';\\n\\nexport class TreeContextMenuDemo extends Component {\\n\\n    constructor(props) {\\n        super(props);\\n        this.state = {\\n            nodes: null,\\n            expandedKeys: {},\\n            selectedNodeKey: null\\n        };\\n\\n        this.menu = [\\n            {\\n                label: 'View Key',\\n                icon: 'pi pi-search',\\n                command: () => {\\n                    this.toast.show({severity: 'success', summary: 'Node Key', detail: this.state.selectedNodeKey});\\n                }\\n            },\\n            {\\n                label: 'Toggle',\\n                icon: 'pi pi-cog',\\n                command: () => {\\n                    let expandedKeys = {...this.state.expandedKeys};\\n                    if (expandedKeys[this.state.selectedNodeKey])\\n                        delete expandedKeys[this.state.selectedNodeKey];\\n                    else\\n                        expandedKeys[this.state.selectedNodeKey] = true;\\n\\n                    this.setState({expandedKeys: expandedKeys});\\n                }\\n            }\\n        ];\\n\\n        this.nodeService = new NodeService();\\n    }\\n\\n    componentDidMount() {\\n        this.nodeService.getTreeNodes().then(data => this.setState({ nodes: data }));\\n    }\\n\\n    render() {\\n        return (\\n            <div>\\n                <Toast ref={(el) => this.toast = el} />\\n\\n                <ContextMenu model={this.menu} ref={el => this.cm = el} onHide={() => this.setState({ selectedNodeKey: null })}/>\\n\\n                <div className=\\\"card\\\">\\n                    <Tree value={this.state.nodes} expandedKeys={this.state.expandedKeys} onToggle={e => this.setState({ expandedKeys: e.value })}\\n                        contextMenuSelectionKey={this.state.selectedNodeKey} onContextMenuSelectionChange={event => this.setState({ selectedNodeKey: event.value })}\\n                        onContextMenu={event => this.cm.show(event.originalEvent)} />\\n                </div>\\n            </div>\\n        )\\n    }\\n}\\n                \"},'hooks':{tabName:'Hooks Source',content:\"\\nimport React, { useState, useEffect, useRef } from 'react';\\nimport { Tree } from 'primereact/tree';\\nimport { ContextMenu } from 'primereact/contextmenu';\\nimport { Toast} from 'primereact/toast';\\nimport { NodeService } from '../service/NodeService';\\n\\nconst TreeContextMenuDemo = () => {\\n    const [nodes, setNodes] = useState(null);\\n    const [expandedKeys, setExpandedKeys] = useState({});\\n    const [selectedNodeKey, setSelectedNodeKey] = useState(null);\\n    const toast = useRef(null);\\n    const cm = useRef(null);\\n    const menu = [\\n        {\\n            label: 'View Key',\\n            icon: 'pi pi-search',\\n            command: () => {\\n                toast.current.show({severity: 'success', summary: 'Node Key', detail: selectedNodeKey});\\n            }\\n        },\\n        {\\n            label: 'Toggle',\\n            icon: 'pi pi-cog',\\n            command: () => {\\n                let _expandedKeys = {...expandedKeys};\\n                if (_expandedKeys[selectedNodeKey])\\n                    delete _expandedKeys[selectedNodeKey];\\n                else\\n                    _expandedKeys[selectedNodeKey] = true;\\n\\n                setExpandedKeys(_expandedKeys);\\n            }\\n        }\\n    ];\\n\\n    const nodeService = new NodeService();\\n\\n    useEffect(() => {\\n        nodeService.getTreeNodes().then(data => setNodes(data));\\n    }, []); // eslint-disable-line react-hooks/exhaustive-deps\\n\\n    return (\\n        <div>\\n            <Toast ref={toast} />\\n\\n            <ContextMenu model={menu} ref={cm} onHide={() => setSelectedNodeKey(null)}/>\\n\\n            <div className=\\\"card\\\">\\n                <Tree value={nodes} expandedKeys={expandedKeys} onToggle={e => setExpandedKeys(e.value)}\\n                    contextMenuSelectionKey={selectedNodeKey} onContextMenuSelectionChange={event => setSelectedNodeKey(event.value)}\\n                    onContextMenu={event => cm.current.show(event.originalEvent)} />\\n            </div>\\n        </div>\\n    )\\n}\\n                \"},'ts':{tabName:'TS Source',content:\"\\nimport React, { useState, useEffect, useRef } from 'react';\\nimport { Tree } from 'primereact/tree';\\nimport { ContextMenu } from 'primereact/contextmenu';\\nimport { Toast} from 'primereact/toast';\\nimport { NodeService } from '../service/NodeService';\\n\\nconst TreeContextMenuDemo = () => {\\n    const [nodes, setNodes] = useState(null);\\n    const [expandedKeys, setExpandedKeys] = useState({});\\n    const [selectedNodeKey, setSelectedNodeKey] = useState(null);\\n    const toast = useRef(null);\\n    const cm = useRef(null);\\n    const menu = [\\n        {\\n            label: 'View Key',\\n            icon: 'pi pi-search',\\n            command: () => {\\n                toast.current.show({severity: 'success', summary: 'Node Key', detail: selectedNodeKey});\\n            }\\n        },\\n        {\\n            label: 'Toggle',\\n            icon: 'pi pi-cog',\\n            command: () => {\\n                let _expandedKeys = {...expandedKeys};\\n                if (_expandedKeys[selectedNodeKey])\\n                    delete _expandedKeys[selectedNodeKey];\\n                else\\n                    _expandedKeys[selectedNodeKey] = true;\\n\\n                setExpandedKeys(_expandedKeys);\\n            }\\n        }\\n    ];\\n\\n    const nodeService = new NodeService();\\n\\n    useEffect(() => {\\n        nodeService.getTreeNodes().then(data => setNodes(data));\\n    }, []); // eslint-disable-line react-hooks/exhaustive-deps\\n\\n    return (\\n        <div>\\n            <Toast ref={toast} />\\n\\n            <ContextMenu model={menu} ref={cm} onHide={() => setSelectedNodeKey(null)}/>\\n\\n            <div className=\\\"card\\\">\\n                <Tree value={nodes} expandedKeys={expandedKeys} onToggle={e => setExpandedKeys(e.value)}\\n                    contextMenuSelectionKey={selectedNodeKey} onContextMenuSelectionChange={event => setSelectedNodeKey(event.value)}\\n                    onContextMenu={event => cm.current.show(event.originalEvent)} />\\n            </div>\\n        </div>\\n    )\\n}\\n                \"}};return _this4;}_createClass(TreeContextMenuDemoDoc,[{key:\"shouldComponentUpdate\",value:function shouldComponentUpdate(){return false;}},{key:\"render\",value:function render(){return/*#__PURE__*/React.createElement(\"div\",{className:\"content-section documentation\"},/*#__PURE__*/React.createElement(TabView,null,useLiveEditorTabs({name:'TreeContextMenuDemo',sources:this.sources,service:'NodeService',data:'treenodes'})));}}]);return TreeContextMenuDemoDoc;}(Component);","map":{"version":3,"sources":["C:/Users/zura.ph/WebstormProjects/slotmaster-dashboard/src/showcase/tree/TreeContextMenuDemo.js"],"names":["React","Component","Tree","ContextMenu","Toast","NodeService","TabView","useLiveEditorTabs","AppInlineHeader","TreeContextMenuDemo","props","state","nodes","expandedKeys","selectedNodeKey","menu","label","icon","command","toast","show","severity","summary","detail","setState","nodeService","getTreeNodes","then","data","el","cm","e","value","event","originalEvent","TreeContextMenuDemoDoc","sources","tabName","content","name","service"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { Tree } from '../../components/tree/Tree';\r\nimport { ContextMenu } from '../../components/contextmenu/ContextMenu';\r\nimport { Toast} from '../../components/toast/Toast';\r\nimport { NodeService } from '../service/NodeService';\r\nimport { TabView } from '../../components/tabview/TabView';\r\nimport { useLiveEditorTabs }from '../liveeditor/LiveEditor';\r\nimport { AppInlineHeader } from '../../AppInlineHeader';\r\n\r\nexport class TreeContextMenuDemo extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            nodes: null,\r\n            expandedKeys: {},\r\n            selectedNodeKey: null\r\n        };\r\n\r\n        this.menu = [\r\n            {\r\n                label: 'View Key',\r\n                icon: 'pi pi-search',\r\n                command: () => {\r\n                    this.toast.show({severity: 'success', summary: 'Node Key', detail: this.state.selectedNodeKey});\r\n                }\r\n            },\r\n            {\r\n                label: 'Toggle',\r\n                icon: 'pi pi-cog',\r\n                command: () => {\r\n                    let expandedKeys = {...this.state.expandedKeys};\r\n                    if (expandedKeys[this.state.selectedNodeKey])\r\n                        delete expandedKeys[this.state.selectedNodeKey];\r\n                    else\r\n                        expandedKeys[this.state.selectedNodeKey] = true;\r\n\r\n                    this.setState({expandedKeys: expandedKeys});\r\n                }\r\n            }\r\n        ];\r\n\r\n        this.nodeService = new NodeService();\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.nodeService.getTreeNodes().then(data => this.setState({ nodes: data }));\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div className=\"content-section introduction\">\r\n                    <AppInlineHeader changelogText=\"tree\">\r\n                        <h1>Tree <span>ContextMenu</span></h1>\r\n                        <p>Tree has exclusive integration with the ContextMenu component with support for different menus depending on the node.</p>\r\n                    </AppInlineHeader>\r\n                </div>\r\n\r\n                <div className=\"content-section implementation\">\r\n                    <Toast ref={(el) => this.toast = el} />\r\n\r\n                    <ContextMenu model={this.menu} ref={el => this.cm = el} onHide={() => this.setState({ selectedNodeKey: null })}/>\r\n\r\n                    <div className=\"card\">\r\n                        <Tree value={this.state.nodes} expandedKeys={this.state.expandedKeys} onToggle={e => this.setState({ expandedKeys: e.value })}\r\n                            contextMenuSelectionKey={this.state.selectedNodeKey} onContextMenuSelectionChange={event => this.setState({ selectedNodeKey: event.value })}\r\n                            onContextMenu={event => this.cm.show(event.originalEvent)} />\r\n                    </div>\r\n                </div>\r\n\r\n                <TreeContextMenuDemoDoc />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport class TreeContextMenuDemoDoc extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.sources = {\r\n            'class': {\r\n                tabName: 'Class Source',\r\n                content: `\r\nimport React, { Component } from 'react';\r\nimport { Tree } from 'primereact/tree';\r\nimport { ContextMenu } from 'primereact/contextmenu';\r\nimport { Toast} from 'primereact/toast';\r\nimport { NodeService } from '../service/NodeService';\r\n\r\nexport class TreeContextMenuDemo extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            nodes: null,\r\n            expandedKeys: {},\r\n            selectedNodeKey: null\r\n        };\r\n\r\n        this.menu = [\r\n            {\r\n                label: 'View Key',\r\n                icon: 'pi pi-search',\r\n                command: () => {\r\n                    this.toast.show({severity: 'success', summary: 'Node Key', detail: this.state.selectedNodeKey});\r\n                }\r\n            },\r\n            {\r\n                label: 'Toggle',\r\n                icon: 'pi pi-cog',\r\n                command: () => {\r\n                    let expandedKeys = {...this.state.expandedKeys};\r\n                    if (expandedKeys[this.state.selectedNodeKey])\r\n                        delete expandedKeys[this.state.selectedNodeKey];\r\n                    else\r\n                        expandedKeys[this.state.selectedNodeKey] = true;\r\n\r\n                    this.setState({expandedKeys: expandedKeys});\r\n                }\r\n            }\r\n        ];\r\n\r\n        this.nodeService = new NodeService();\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.nodeService.getTreeNodes().then(data => this.setState({ nodes: data }));\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Toast ref={(el) => this.toast = el} />\r\n\r\n                <ContextMenu model={this.menu} ref={el => this.cm = el} onHide={() => this.setState({ selectedNodeKey: null })}/>\r\n\r\n                <div className=\"card\">\r\n                    <Tree value={this.state.nodes} expandedKeys={this.state.expandedKeys} onToggle={e => this.setState({ expandedKeys: e.value })}\r\n                        contextMenuSelectionKey={this.state.selectedNodeKey} onContextMenuSelectionChange={event => this.setState({ selectedNodeKey: event.value })}\r\n                        onContextMenu={event => this.cm.show(event.originalEvent)} />\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n                `\r\n            },\r\n            'hooks': {\r\n                tabName: 'Hooks Source',\r\n                content: `\r\nimport React, { useState, useEffect, useRef } from 'react';\r\nimport { Tree } from 'primereact/tree';\r\nimport { ContextMenu } from 'primereact/contextmenu';\r\nimport { Toast} from 'primereact/toast';\r\nimport { NodeService } from '../service/NodeService';\r\n\r\nconst TreeContextMenuDemo = () => {\r\n    const [nodes, setNodes] = useState(null);\r\n    const [expandedKeys, setExpandedKeys] = useState({});\r\n    const [selectedNodeKey, setSelectedNodeKey] = useState(null);\r\n    const toast = useRef(null);\r\n    const cm = useRef(null);\r\n    const menu = [\r\n        {\r\n            label: 'View Key',\r\n            icon: 'pi pi-search',\r\n            command: () => {\r\n                toast.current.show({severity: 'success', summary: 'Node Key', detail: selectedNodeKey});\r\n            }\r\n        },\r\n        {\r\n            label: 'Toggle',\r\n            icon: 'pi pi-cog',\r\n            command: () => {\r\n                let _expandedKeys = {...expandedKeys};\r\n                if (_expandedKeys[selectedNodeKey])\r\n                    delete _expandedKeys[selectedNodeKey];\r\n                else\r\n                    _expandedKeys[selectedNodeKey] = true;\r\n\r\n                setExpandedKeys(_expandedKeys);\r\n            }\r\n        }\r\n    ];\r\n\r\n    const nodeService = new NodeService();\r\n\r\n    useEffect(() => {\r\n        nodeService.getTreeNodes().then(data => setNodes(data));\r\n    }, []); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n    return (\r\n        <div>\r\n            <Toast ref={toast} />\r\n\r\n            <ContextMenu model={menu} ref={cm} onHide={() => setSelectedNodeKey(null)}/>\r\n\r\n            <div className=\"card\">\r\n                <Tree value={nodes} expandedKeys={expandedKeys} onToggle={e => setExpandedKeys(e.value)}\r\n                    contextMenuSelectionKey={selectedNodeKey} onContextMenuSelectionChange={event => setSelectedNodeKey(event.value)}\r\n                    onContextMenu={event => cm.current.show(event.originalEvent)} />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n                `\r\n            },\r\n            'ts': {\r\n                tabName: 'TS Source',\r\n                content: `\r\nimport React, { useState, useEffect, useRef } from 'react';\r\nimport { Tree } from 'primereact/tree';\r\nimport { ContextMenu } from 'primereact/contextmenu';\r\nimport { Toast} from 'primereact/toast';\r\nimport { NodeService } from '../service/NodeService';\r\n\r\nconst TreeContextMenuDemo = () => {\r\n    const [nodes, setNodes] = useState(null);\r\n    const [expandedKeys, setExpandedKeys] = useState({});\r\n    const [selectedNodeKey, setSelectedNodeKey] = useState(null);\r\n    const toast = useRef(null);\r\n    const cm = useRef(null);\r\n    const menu = [\r\n        {\r\n            label: 'View Key',\r\n            icon: 'pi pi-search',\r\n            command: () => {\r\n                toast.current.show({severity: 'success', summary: 'Node Key', detail: selectedNodeKey});\r\n            }\r\n        },\r\n        {\r\n            label: 'Toggle',\r\n            icon: 'pi pi-cog',\r\n            command: () => {\r\n                let _expandedKeys = {...expandedKeys};\r\n                if (_expandedKeys[selectedNodeKey])\r\n                    delete _expandedKeys[selectedNodeKey];\r\n                else\r\n                    _expandedKeys[selectedNodeKey] = true;\r\n\r\n                setExpandedKeys(_expandedKeys);\r\n            }\r\n        }\r\n    ];\r\n\r\n    const nodeService = new NodeService();\r\n\r\n    useEffect(() => {\r\n        nodeService.getTreeNodes().then(data => setNodes(data));\r\n    }, []); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n    return (\r\n        <div>\r\n            <Toast ref={toast} />\r\n\r\n            <ContextMenu model={menu} ref={cm} onHide={() => setSelectedNodeKey(null)}/>\r\n\r\n            <div className=\"card\">\r\n                <Tree value={nodes} expandedKeys={expandedKeys} onToggle={e => setExpandedKeys(e.value)}\r\n                    contextMenuSelectionKey={selectedNodeKey} onContextMenuSelectionChange={event => setSelectedNodeKey(event.value)}\r\n                    onContextMenu={event => cm.current.show(event.originalEvent)} />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n                `\r\n            }\r\n        }\r\n    }\r\n\r\n    shouldComponentUpdate() {\r\n        return false;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"content-section documentation\">\r\n                <TabView>\r\n                    {\r\n                        useLiveEditorTabs({ name: 'TreeContextMenuDemo', sources: this.sources, service: 'NodeService', data: 'treenodes' })\r\n                    }\r\n                </TabView>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}