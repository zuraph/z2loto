{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\zura.ph\\\\WebstormProjects\\\\zz-regul\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\zura.ph\\\\WebstormProjects\\\\zz-regul\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"C:\\\\Users\\\\zura.ph\\\\WebstormProjects\\\\zz-regul\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"C:\\\\Users\\\\zura.ph\\\\WebstormProjects\\\\zz-regul\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _createSuper from \"C:\\\\Users\\\\zura.ph\\\\WebstormProjects\\\\zz-regul\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"C:\\\\Users\\\\zura.ph\\\\WebstormProjects\\\\zz-regul\\\\src\\\\showcase\\\\tree\\\\TreeSelectionDemo.js\";\nimport React, { Component } from 'react';\nimport { Tree } from '../../components/tree/Tree';\nimport { NodeService } from '../service/NodeService';\nimport { TabView } from '../../components/tabview/TabView';\nimport { Toast } from '../../components/toast/Toast';\nimport { useLiveEditorTabs } from '../liveeditor/LiveEditor';\nimport { AppInlineHeader } from '../../AppInlineHeader';\nexport var TreeSelectionDemo = /*#__PURE__*/function (_Component) {\n  _inherits(TreeSelectionDemo, _Component);\n\n  var _super = _createSuper(TreeSelectionDemo);\n\n  function TreeSelectionDemo(props) {\n    var _this;\n\n    _classCallCheck(this, TreeSelectionDemo);\n\n    _this = _super.call(this, props);\n    _this.state = {\n      nodes: null,\n      selectedKey: null,\n      selectedKeys1: null,\n      selectedKeys2: null,\n      selectedKeys3: null\n    };\n    _this.nodeService = new NodeService();\n    _this.onNodeSelect = _this.onNodeSelect.bind(_assertThisInitialized(_this));\n    _this.onNodeUnselect = _this.onNodeUnselect.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(TreeSelectionDemo, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      this.nodeService.getTreeNodes().then(function (data) {\n        return _this2.setState({\n          nodes: data\n        });\n      });\n    }\n  }, {\n    key: \"onNodeSelect\",\n    value: function onNodeSelect(node) {\n      this.toast.show({\n        severity: 'success',\n        summary: 'Node Selected',\n        detail: node.label,\n        life: 3000\n      });\n    }\n  }, {\n    key: \"onNodeUnselect\",\n    value: function onNodeUnselect(node) {\n      this.toast.show({\n        severity: 'success',\n        summary: 'Node Unselected',\n        detail: node.label,\n        life: 3000\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"content-section introduction\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(AppInlineHeader, {\n        changelogText: \"tree\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(\"h1\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 25\n        }\n      }, \"Tree \", /*#__PURE__*/React.createElement(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 34\n        }\n      }, \"Selection\")), /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 25\n        }\n      }, \"Tree supports \\\"single\\\", \\\"multiple\\\" and \\\"checkbox\\\" as selection modes.\"))), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"content-section implementation\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(Toast, {\n        ref: function ref(el) {\n          return _this3.toast = el;\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 21\n        }\n      }), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"card\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(\"h5\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 25\n        }\n      }, \"Single Selection\"), /*#__PURE__*/React.createElement(Tree, {\n        value: this.state.nodes,\n        selectionMode: \"single\",\n        selectionKeys: this.state.selectedKey,\n        onSelectionChange: function onSelectionChange(e) {\n          return _this3.setState({\n            selectedKey: e.value\n          });\n        },\n        onSelect: this.onNodeSelect,\n        onUnselect: this.onNodeUnselect,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 25\n        }\n      }), /*#__PURE__*/React.createElement(\"h5\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 25\n        }\n      }, \"Multiple Selection with MetaKey\"), /*#__PURE__*/React.createElement(Tree, {\n        value: this.state.nodes,\n        selectionMode: \"multiple\",\n        selectionKeys: this.state.selectedKeys1,\n        onSelectionChange: function onSelectionChange(e) {\n          return _this3.setState({\n            selectedKeys1: e.value\n          });\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 25\n        }\n      }), /*#__PURE__*/React.createElement(\"h5\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 25\n        }\n      }, \"Multiple Selection without MetaKey\"), /*#__PURE__*/React.createElement(Tree, {\n        value: this.state.nodes,\n        selectionMode: \"multiple\",\n        metaKeySelection: false,\n        selectionKeys: this.state.selectedKeys2,\n        onSelectionChange: function onSelectionChange(e) {\n          return _this3.setState({\n            selectedKeys2: e.value\n          });\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 25\n        }\n      }), /*#__PURE__*/React.createElement(\"h5\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 25\n        }\n      }, \"Checkbox Selection\"), /*#__PURE__*/React.createElement(Tree, {\n        value: this.state.nodes,\n        selectionMode: \"checkbox\",\n        selectionKeys: this.state.selectedKeys3,\n        onSelectionChange: function onSelectionChange(e) {\n          return _this3.setState({\n            selectedKeys3: e.value\n          });\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 25\n        }\n      }))), /*#__PURE__*/React.createElement(TreeSelectionDemoDoc, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 17\n        }\n      }));\n    }\n  }]);\n\n  return TreeSelectionDemo;\n}(Component);\nexport var TreeSelectionDemoDoc = /*#__PURE__*/function (_Component2) {\n  _inherits(TreeSelectionDemoDoc, _Component2);\n\n  var _super2 = _createSuper(TreeSelectionDemoDoc);\n\n  function TreeSelectionDemoDoc(props) {\n    var _this4;\n\n    _classCallCheck(this, TreeSelectionDemoDoc);\n\n    _this4 = _super2.call(this, props);\n    _this4.sources = {\n      'class': {\n        tabName: 'Class Source',\n        content: \"\\nimport React, { Component } from 'react';\\nimport { Tree } from 'primereact/tree';\\nimport { Toast } from 'primereact/toast';\\nimport { NodeService } from '../service/NodeService';\\n\\nexport class TreeSelectionDemo extends Component {\\n\\n    constructor(props) {\\n        super(props);\\n        this.state = {\\n            nodes: null,\\n            selectedKey: null,\\n            selectedKeys1: null,\\n            selectedKeys2: null,\\n            selectedKeys3: null\\n        };\\n\\n        this.nodeService = new NodeService();\\n        this.onNodeSelect = this.onNodeSelect.bind(this);\\n        this.onNodeUnselect = this.onNodeUnselect.bind(this);\\n    }\\n\\n    componentDidMount() {\\n        this.nodeService.getTreeNodes().then(data => this.setState({ nodes: data }));\\n    }\\n\\n    onNodeSelect(node) {\\n        this.toast.show({ severity: 'success', summary: 'Node Selected', detail: node.label, life: 3000 });\\n    }\\n\\n    onNodeUnselect(node) {\\n        this.toast.show({ severity: 'success', summary: 'Node Unselected', detail: node.label, life: 3000 });\\n    }\\n\\n    render() {\\n        return (\\n            <div>\\n                <Toast ref={(el) => this.toast = el} />\\n                <div className=\\\"card\\\">\\n                    <h5>Single Selection</h5>\\n                    <Tree value={this.state.nodes} selectionMode=\\\"single\\\" selectionKeys={this.state.selectedKey} onSelectionChange={e => this.setState({ selectedKey: e.value })} onSelect={this.onNodeSelect} onUnselect={this.onNodeUnselect}/>\\n\\n                    <h5>Multiple Selection with MetaKey</h5>\\n                    <Tree value={this.state.nodes} selectionMode=\\\"multiple\\\" selectionKeys={this.state.selectedKeys1} onSelectionChange={e => this.setState({ selectedKeys1: e.value })} />\\n\\n                    <h5>Multiple Selection without MetaKey</h5>\\n                    <Tree value={this.state.nodes} selectionMode=\\\"multiple\\\" metaKeySelection={false} selectionKeys={this.state.selectedKeys2} onSelectionChange={e => this.setState({ selectedKeys2: e.value })} />\\n\\n                    <h5>Checkbox Selection</h5>\\n                    <Tree value={this.state.nodes} selectionMode=\\\"checkbox\\\" selectionKeys={this.state.selectedKeys3} onSelectionChange={e => this.setState({ selectedKeys3: e.value })} />\\n                </div>\\n            </div>\\n        )\\n    }\\n}\\n                \"\n      },\n      'hooks': {\n        tabName: 'Hooks Source',\n        content: \"\\nimport React, { useState, useEffect, useRef } from 'react';\\nimport { Tree } from 'primereact/tree';\\nimport { Toast } from 'primereact/toast';\\nimport { NodeService } from '../service/NodeService';\\n\\nconst TreeSelectionDemo = () => {\\n    const [nodes, setNodes] = useState(null);\\n    const [selectedKey, setSelectedKey] = useState(null);\\n    const [selectedKeys1, setSelectedKeys1] = useState(null);\\n    const [selectedKeys2, setSelectedKeys2] = useState(null);\\n    const [selectedKeys3, setSelectedKeys3] = useState(null);\\n    const toast = useRef(null);\\n    const nodeService = new NodeService();\\n\\n    useEffect(() => {\\n        nodeService.getTreeNodes().then(data => setNodes(data));\\n    }, []); // eslint-disable-line react-hooks/exhaustive-deps\\n\\n    const onNodeSelect = (node) => {\\n        toast.current.show({ severity: 'success', summary: 'Node Selected', detail: node.label, life: 3000 });\\n    }\\n\\n    const onNodeUnselect = (node) => {\\n        toast.current.show({ severity: 'success', summary: 'Node Unselected', detail: node.label, life: 3000 });\\n    }\\n\\n    return (\\n        <div>\\n            <Toast ref={toast} />\\n            <div className=\\\"card\\\">\\n                <h5>Single Selection</h5>\\n                <Tree value={nodes} selectionMode=\\\"single\\\" selectionKeys={selectedKey} onSelectionChange={e => setSelectedKey(e.value)} onSelect={onNodeSelect} onUnselect={onNodeUnselect}/>\\n\\n                <h5>Multiple Selection with MetaKey</h5>\\n                <Tree value={nodes} selectionMode=\\\"multiple\\\" selectionKeys={selectedKeys1} onSelectionChange={e => setSelectedKeys1(e.value)} />\\n\\n                <h5>Multiple Selection without MetaKey</h5>\\n                <Tree value={nodes} selectionMode=\\\"multiple\\\" metaKeySelection={false} selectionKeys={selectedKeys2} onSelectionChange={e => setSelectedKeys2(e.value)} />\\n\\n                <h5>Checkbox Selection</h5>\\n                <Tree value={nodes} selectionMode=\\\"checkbox\\\" selectionKeys={selectedKeys3} onSelectionChange={e => setSelectedKeys3(e.value)} />\\n            </div>\\n        </div>\\n    )\\n}\\n                \"\n      },\n      'ts': {\n        tabName: 'TS Source',\n        content: \"\\nimport React, { useState, useEffect, useRef } from 'react';\\nimport { Tree } from 'primereact/tree';\\nimport { Toast } from 'primereact/toast';\\nimport { NodeService } from '../service/NodeService';\\n\\nconst TreeSelectionDemo = () => {\\n    const [nodes, setNodes] = useState(null);\\n    const [selectedKey, setSelectedKey] = useState(null);\\n    const [selectedKeys1, setSelectedKeys1] = useState(null);\\n    const [selectedKeys2, setSelectedKeys2] = useState(null);\\n    const [selectedKeys3, setSelectedKeys3] = useState(null);\\n    const toast = useRef(null);\\n    const nodeService = new NodeService();\\n\\n    useEffect(() => {\\n        nodeService.getTreeNodes().then(data => setNodes(data));\\n    }, []); // eslint-disable-line react-hooks/exhaustive-deps\\n\\n    const onNodeSelect = (node) => {\\n        toast.current.show({ severity: 'success', summary: 'Node Selected', detail: node.label, life: 3000 });\\n    }\\n\\n    const onNodeUnselect = (node) => {\\n        toast.current.show({ severity: 'success', summary: 'Node Unselected', detail: node.label, life: 3000 });\\n    }\\n\\n    return (\\n        <div>\\n            <Toast ref={toast} />\\n            <div className=\\\"card\\\">\\n                <h5>Single Selection</h5>\\n                <Tree value={nodes} selectionMode=\\\"single\\\" selectionKeys={selectedKey} onSelectionChange={e => setSelectedKey(e.value)} onSelect={onNodeSelect} onUnselect={onNodeUnselect}/>\\n\\n                <h5>Multiple Selection with MetaKey</h5>\\n                <Tree value={nodes} selectionMode=\\\"multiple\\\" selectionKeys={selectedKeys1} onSelectionChange={e => setSelectedKeys1(e.value)} />\\n\\n                <h5>Multiple Selection without MetaKey</h5>\\n                <Tree value={nodes} selectionMode=\\\"multiple\\\" metaKeySelection={false} selectionKeys={selectedKeys2} onSelectionChange={e => setSelectedKeys2(e.value)} />\\n\\n                <h5>Checkbox Selection</h5>\\n                <Tree value={nodes} selectionMode=\\\"checkbox\\\" selectionKeys={selectedKeys3} onSelectionChange={e => setSelectedKeys3(e.value)} />\\n            </div>\\n        </div>\\n    )\\n}\\n                \"\n      }\n    };\n    return _this4;\n  }\n\n  _createClass(TreeSelectionDemoDoc, [{\n    key: \"shouldComponentUpdate\",\n    value: function shouldComponentUpdate() {\n      return false;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"content-section documentation\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 245,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(TabView, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 246,\n          columnNumber: 17\n        }\n      }, useLiveEditorTabs({\n        name: 'TreeSelectionDemo',\n        sources: this.sources,\n        service: 'NodeService',\n        data: 'treenodes'\n      })));\n    }\n  }]);\n\n  return TreeSelectionDemoDoc;\n}(Component);","map":{"version":3,"sources":["C:/Users/zura.ph/WebstormProjects/zz-regul/src/showcase/tree/TreeSelectionDemo.js"],"names":["React","Component","Tree","NodeService","TabView","Toast","useLiveEditorTabs","AppInlineHeader","TreeSelectionDemo","props","state","nodes","selectedKey","selectedKeys1","selectedKeys2","selectedKeys3","nodeService","onNodeSelect","bind","onNodeUnselect","getTreeNodes","then","data","setState","node","toast","show","severity","summary","detail","label","life","el","e","value","TreeSelectionDemoDoc","sources","tabName","content","name","service"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { Tree } from '../../components/tree/Tree';\r\nimport { NodeService } from '../service/NodeService';\r\nimport { TabView } from '../../components/tabview/TabView';\r\nimport { Toast } from '../../components/toast/Toast';\r\nimport { useLiveEditorTabs }from '../liveeditor/LiveEditor';\r\nimport { AppInlineHeader } from '../../AppInlineHeader';\r\n\r\nexport class TreeSelectionDemo extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            nodes: null,\r\n            selectedKey: null,\r\n            selectedKeys1: null,\r\n            selectedKeys2: null,\r\n            selectedKeys3: null\r\n        };\r\n\r\n        this.nodeService = new NodeService();\r\n        this.onNodeSelect = this.onNodeSelect.bind(this);\r\n        this.onNodeUnselect = this.onNodeUnselect.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.nodeService.getTreeNodes().then(data => this.setState({ nodes: data }));\r\n    }\r\n\r\n    onNodeSelect(node) {\r\n        this.toast.show({ severity: 'success', summary: 'Node Selected', detail: node.label, life: 3000 });\r\n    }\r\n\r\n    onNodeUnselect(node) {\r\n        this.toast.show({ severity: 'success', summary: 'Node Unselected', detail: node.label, life: 3000 });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div className=\"content-section introduction\">\r\n                    <AppInlineHeader changelogText=\"tree\">\r\n                        <h1>Tree <span>Selection</span></h1>\r\n                        <p>Tree supports \"single\", \"multiple\" and \"checkbox\" as selection modes.</p>\r\n                    </AppInlineHeader>\r\n                </div>\r\n\r\n                <div className=\"content-section implementation\">\r\n                    <Toast ref={(el) => this.toast = el} />\r\n                    <div className=\"card\">\r\n                        <h5>Single Selection</h5>\r\n                        <Tree value={this.state.nodes} selectionMode=\"single\" selectionKeys={this.state.selectedKey} onSelectionChange={e => this.setState({ selectedKey: e.value })} onSelect={this.onNodeSelect} onUnselect={this.onNodeUnselect}/>\r\n\r\n                        <h5>Multiple Selection with MetaKey</h5>\r\n                        <Tree value={this.state.nodes} selectionMode=\"multiple\" selectionKeys={this.state.selectedKeys1} onSelectionChange={e => this.setState({ selectedKeys1: e.value })} />\r\n\r\n                        <h5>Multiple Selection without MetaKey</h5>\r\n                        <Tree value={this.state.nodes} selectionMode=\"multiple\" metaKeySelection={false} selectionKeys={this.state.selectedKeys2} onSelectionChange={e => this.setState({ selectedKeys2: e.value })} />\r\n\r\n                        <h5>Checkbox Selection</h5>\r\n                        <Tree value={this.state.nodes} selectionMode=\"checkbox\" selectionKeys={this.state.selectedKeys3} onSelectionChange={e => this.setState({ selectedKeys3: e.value })} />\r\n                    </div>\r\n                </div>\r\n                <TreeSelectionDemoDoc />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport class TreeSelectionDemoDoc extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.sources = {\r\n            'class': {\r\n                tabName: 'Class Source',\r\n                content: `\r\nimport React, { Component } from 'react';\r\nimport { Tree } from 'primereact/tree';\r\nimport { Toast } from 'primereact/toast';\r\nimport { NodeService } from '../service/NodeService';\r\n\r\nexport class TreeSelectionDemo extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            nodes: null,\r\n            selectedKey: null,\r\n            selectedKeys1: null,\r\n            selectedKeys2: null,\r\n            selectedKeys3: null\r\n        };\r\n\r\n        this.nodeService = new NodeService();\r\n        this.onNodeSelect = this.onNodeSelect.bind(this);\r\n        this.onNodeUnselect = this.onNodeUnselect.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.nodeService.getTreeNodes().then(data => this.setState({ nodes: data }));\r\n    }\r\n\r\n    onNodeSelect(node) {\r\n        this.toast.show({ severity: 'success', summary: 'Node Selected', detail: node.label, life: 3000 });\r\n    }\r\n\r\n    onNodeUnselect(node) {\r\n        this.toast.show({ severity: 'success', summary: 'Node Unselected', detail: node.label, life: 3000 });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Toast ref={(el) => this.toast = el} />\r\n                <div className=\"card\">\r\n                    <h5>Single Selection</h5>\r\n                    <Tree value={this.state.nodes} selectionMode=\"single\" selectionKeys={this.state.selectedKey} onSelectionChange={e => this.setState({ selectedKey: e.value })} onSelect={this.onNodeSelect} onUnselect={this.onNodeUnselect}/>\r\n\r\n                    <h5>Multiple Selection with MetaKey</h5>\r\n                    <Tree value={this.state.nodes} selectionMode=\"multiple\" selectionKeys={this.state.selectedKeys1} onSelectionChange={e => this.setState({ selectedKeys1: e.value })} />\r\n\r\n                    <h5>Multiple Selection without MetaKey</h5>\r\n                    <Tree value={this.state.nodes} selectionMode=\"multiple\" metaKeySelection={false} selectionKeys={this.state.selectedKeys2} onSelectionChange={e => this.setState({ selectedKeys2: e.value })} />\r\n\r\n                    <h5>Checkbox Selection</h5>\r\n                    <Tree value={this.state.nodes} selectionMode=\"checkbox\" selectionKeys={this.state.selectedKeys3} onSelectionChange={e => this.setState({ selectedKeys3: e.value })} />\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n                `\r\n            },\r\n            'hooks': {\r\n                tabName: 'Hooks Source',\r\n                content: `\r\nimport React, { useState, useEffect, useRef } from 'react';\r\nimport { Tree } from 'primereact/tree';\r\nimport { Toast } from 'primereact/toast';\r\nimport { NodeService } from '../service/NodeService';\r\n\r\nconst TreeSelectionDemo = () => {\r\n    const [nodes, setNodes] = useState(null);\r\n    const [selectedKey, setSelectedKey] = useState(null);\r\n    const [selectedKeys1, setSelectedKeys1] = useState(null);\r\n    const [selectedKeys2, setSelectedKeys2] = useState(null);\r\n    const [selectedKeys3, setSelectedKeys3] = useState(null);\r\n    const toast = useRef(null);\r\n    const nodeService = new NodeService();\r\n\r\n    useEffect(() => {\r\n        nodeService.getTreeNodes().then(data => setNodes(data));\r\n    }, []); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n    const onNodeSelect = (node) => {\r\n        toast.current.show({ severity: 'success', summary: 'Node Selected', detail: node.label, life: 3000 });\r\n    }\r\n\r\n    const onNodeUnselect = (node) => {\r\n        toast.current.show({ severity: 'success', summary: 'Node Unselected', detail: node.label, life: 3000 });\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Toast ref={toast} />\r\n            <div className=\"card\">\r\n                <h5>Single Selection</h5>\r\n                <Tree value={nodes} selectionMode=\"single\" selectionKeys={selectedKey} onSelectionChange={e => setSelectedKey(e.value)} onSelect={onNodeSelect} onUnselect={onNodeUnselect}/>\r\n\r\n                <h5>Multiple Selection with MetaKey</h5>\r\n                <Tree value={nodes} selectionMode=\"multiple\" selectionKeys={selectedKeys1} onSelectionChange={e => setSelectedKeys1(e.value)} />\r\n\r\n                <h5>Multiple Selection without MetaKey</h5>\r\n                <Tree value={nodes} selectionMode=\"multiple\" metaKeySelection={false} selectionKeys={selectedKeys2} onSelectionChange={e => setSelectedKeys2(e.value)} />\r\n\r\n                <h5>Checkbox Selection</h5>\r\n                <Tree value={nodes} selectionMode=\"checkbox\" selectionKeys={selectedKeys3} onSelectionChange={e => setSelectedKeys3(e.value)} />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n                `\r\n            },\r\n            'ts': {\r\n                tabName: 'TS Source',\r\n                content: `\r\nimport React, { useState, useEffect, useRef } from 'react';\r\nimport { Tree } from 'primereact/tree';\r\nimport { Toast } from 'primereact/toast';\r\nimport { NodeService } from '../service/NodeService';\r\n\r\nconst TreeSelectionDemo = () => {\r\n    const [nodes, setNodes] = useState(null);\r\n    const [selectedKey, setSelectedKey] = useState(null);\r\n    const [selectedKeys1, setSelectedKeys1] = useState(null);\r\n    const [selectedKeys2, setSelectedKeys2] = useState(null);\r\n    const [selectedKeys3, setSelectedKeys3] = useState(null);\r\n    const toast = useRef(null);\r\n    const nodeService = new NodeService();\r\n\r\n    useEffect(() => {\r\n        nodeService.getTreeNodes().then(data => setNodes(data));\r\n    }, []); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n    const onNodeSelect = (node) => {\r\n        toast.current.show({ severity: 'success', summary: 'Node Selected', detail: node.label, life: 3000 });\r\n    }\r\n\r\n    const onNodeUnselect = (node) => {\r\n        toast.current.show({ severity: 'success', summary: 'Node Unselected', detail: node.label, life: 3000 });\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Toast ref={toast} />\r\n            <div className=\"card\">\r\n                <h5>Single Selection</h5>\r\n                <Tree value={nodes} selectionMode=\"single\" selectionKeys={selectedKey} onSelectionChange={e => setSelectedKey(e.value)} onSelect={onNodeSelect} onUnselect={onNodeUnselect}/>\r\n\r\n                <h5>Multiple Selection with MetaKey</h5>\r\n                <Tree value={nodes} selectionMode=\"multiple\" selectionKeys={selectedKeys1} onSelectionChange={e => setSelectedKeys1(e.value)} />\r\n\r\n                <h5>Multiple Selection without MetaKey</h5>\r\n                <Tree value={nodes} selectionMode=\"multiple\" metaKeySelection={false} selectionKeys={selectedKeys2} onSelectionChange={e => setSelectedKeys2(e.value)} />\r\n\r\n                <h5>Checkbox Selection</h5>\r\n                <Tree value={nodes} selectionMode=\"checkbox\" selectionKeys={selectedKeys3} onSelectionChange={e => setSelectedKeys3(e.value)} />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n                `\r\n            }\r\n        }\r\n    }\r\n\r\n    shouldComponentUpdate() {\r\n        return false;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"content-section documentation\">\r\n                <TabView>\r\n                    {\r\n                        useLiveEditorTabs({ name: 'TreeSelectionDemo', sources: this.sources, service: 'NodeService', data: 'treenodes' })\r\n                    }\r\n                </TabView>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}