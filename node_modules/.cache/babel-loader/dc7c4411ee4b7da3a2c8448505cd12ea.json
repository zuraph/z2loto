{"ast":null,"code":"import _objectSpread from \"C:\\\\Users\\\\zura.ph\\\\WebstormProjects\\\\zloto\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\nimport _toConsumableArray from \"C:\\\\Users\\\\zura.ph\\\\WebstormProjects\\\\zloto\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"C:\\\\Users\\\\zura.ph\\\\WebstormProjects\\\\zloto\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\zura.ph\\\\WebstormProjects\\\\zloto\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"C:\\\\Users\\\\zura.ph\\\\WebstormProjects\\\\zloto\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"C:\\\\Users\\\\zura.ph\\\\WebstormProjects\\\\zloto\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _createSuper from \"C:\\\\Users\\\\zura.ph\\\\WebstormProjects\\\\zloto\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"C:\\\\Users\\\\zura.ph\\\\WebstormProjects\\\\zloto\\\\src\\\\showcase\\\\datatable\\\\DataTableCrudDemo.js\";\nimport React, { Component } from 'react';\nimport classNames from 'classnames';\nimport { DataTable } from '../../components/datatable/DataTable';\nimport { Column } from '../../components/column/Column';\nimport ProductService from '../service/ProductService';\nimport { TabView } from '../../components/tabview/TabView';\nimport { Toast } from '../../components/toast/Toast';\nimport { Button } from '../../components/button/Button';\nimport { FileUpload } from '../../components/fileupload/FileUpload';\nimport { Rating } from '../../components/rating/Rating';\nimport { Toolbar } from '../../components/toolbar/Toolbar';\nimport { InputTextarea } from '../../components/inputtextarea/InputTextarea';\nimport { RadioButton } from '../../components/radiobutton/RadioButton';\nimport { InputNumber } from '../../components/inputnumber/InputNumber';\nimport { Dialog } from '../../components/dialog/Dialog';\nimport { InputText } from '../../components/inputtext/InputText';\nimport { useLiveEditorTabs } from '../liveeditor/LiveEditor';\nimport { AppInlineHeader } from '../../AppInlineHeader';\nimport './DataTableDemo.scss';\nexport var DataTableCrudDemo = /*#__PURE__*/function (_Component) {\n  _inherits(DataTableCrudDemo, _Component);\n\n  var _super = _createSuper(DataTableCrudDemo);\n\n  function DataTableCrudDemo(props) {\n    var _this;\n\n    _classCallCheck(this, DataTableCrudDemo);\n\n    _this = _super.call(this, props);\n    _this.emptyProduct = {\n      id: null,\n      name: '',\n      image: null,\n      description: '',\n      category: null,\n      price: 0,\n      quantity: 0,\n      rating: 0,\n      inventoryStatus: 'INSTOCK'\n    };\n    _this.state = {\n      products: null,\n      productDialog: false,\n      deleteProductDialog: false,\n      deleteProductsDialog: false,\n      product: _this.emptyProduct,\n      selectedProducts: null,\n      submitted: false,\n      globalFilter: null\n    };\n    _this.productService = new ProductService();\n    _this.leftToolbarTemplate = _this.leftToolbarTemplate.bind(_assertThisInitialized(_this));\n    _this.rightToolbarTemplate = _this.rightToolbarTemplate.bind(_assertThisInitialized(_this));\n    _this.imageBodyTemplate = _this.imageBodyTemplate.bind(_assertThisInitialized(_this));\n    _this.priceBodyTemplate = _this.priceBodyTemplate.bind(_assertThisInitialized(_this));\n    _this.ratingBodyTemplate = _this.ratingBodyTemplate.bind(_assertThisInitialized(_this));\n    _this.statusBodyTemplate = _this.statusBodyTemplate.bind(_assertThisInitialized(_this));\n    _this.actionBodyTemplate = _this.actionBodyTemplate.bind(_assertThisInitialized(_this));\n    _this.openNew = _this.openNew.bind(_assertThisInitialized(_this));\n    _this.hideDialog = _this.hideDialog.bind(_assertThisInitialized(_this));\n    _this.saveProduct = _this.saveProduct.bind(_assertThisInitialized(_this));\n    _this.editProduct = _this.editProduct.bind(_assertThisInitialized(_this));\n    _this.confirmDeleteProduct = _this.confirmDeleteProduct.bind(_assertThisInitialized(_this));\n    _this.deleteProduct = _this.deleteProduct.bind(_assertThisInitialized(_this));\n    _this.exportCSV = _this.exportCSV.bind(_assertThisInitialized(_this));\n    _this.confirmDeleteSelected = _this.confirmDeleteSelected.bind(_assertThisInitialized(_this));\n    _this.deleteSelectedProducts = _this.deleteSelectedProducts.bind(_assertThisInitialized(_this));\n    _this.onCategoryChange = _this.onCategoryChange.bind(_assertThisInitialized(_this));\n    _this.onInputChange = _this.onInputChange.bind(_assertThisInitialized(_this));\n    _this.onInputNumberChange = _this.onInputNumberChange.bind(_assertThisInitialized(_this));\n    _this.hideDeleteProductDialog = _this.hideDeleteProductDialog.bind(_assertThisInitialized(_this));\n    _this.hideDeleteProductsDialog = _this.hideDeleteProductsDialog.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(DataTableCrudDemo, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      this.productService.getProducts().then(function (data) {\n        return _this2.setState({\n          products: data\n        });\n      });\n    }\n  }, {\n    key: \"formatCurrency\",\n    value: function formatCurrency(value) {\n      return value.toLocaleString('en-US', {\n        style: 'currency',\n        currency: 'USD'\n      });\n    }\n  }, {\n    key: \"openNew\",\n    value: function openNew() {\n      this.setState({\n        product: this.emptyProduct,\n        submitted: false,\n        productDialog: true\n      });\n    }\n  }, {\n    key: \"hideDialog\",\n    value: function hideDialog() {\n      this.setState({\n        submitted: false,\n        productDialog: false\n      });\n    }\n  }, {\n    key: \"hideDeleteProductDialog\",\n    value: function hideDeleteProductDialog() {\n      this.setState({\n        deleteProductDialog: false\n      });\n    }\n  }, {\n    key: \"hideDeleteProductsDialog\",\n    value: function hideDeleteProductsDialog() {\n      this.setState({\n        deleteProductsDialog: false\n      });\n    }\n  }, {\n    key: \"saveProduct\",\n    value: function saveProduct() {\n      var state = {\n        submitted: true\n      };\n\n      if (this.state.product.name.trim()) {\n        var products = _toConsumableArray(this.state.products);\n\n        var product = _objectSpread({}, this.state.product);\n\n        if (this.state.product.id) {\n          var index = this.findIndexById(this.state.product.id);\n          products[index] = product;\n          this.toast.show({\n            severity: 'success',\n            summary: 'Successful',\n            detail: 'Product Updated',\n            life: 3000\n          });\n        } else {\n          product.id = this.createId();\n          product.image = 'product-placeholder.svg';\n          products.push(product);\n          this.toast.show({\n            severity: 'success',\n            summary: 'Successful',\n            detail: 'Product Created',\n            life: 3000\n          });\n        }\n\n        state = _objectSpread(_objectSpread({}, state), {}, {\n          products: products,\n          productDialog: false,\n          product: this.emptyProduct\n        });\n      }\n\n      this.setState(state);\n    }\n  }, {\n    key: \"editProduct\",\n    value: function editProduct(product) {\n      this.setState({\n        product: _objectSpread({}, product),\n        productDialog: true\n      });\n    }\n  }, {\n    key: \"confirmDeleteProduct\",\n    value: function confirmDeleteProduct(product) {\n      this.setState({\n        product: product,\n        deleteProductDialog: true\n      });\n    }\n  }, {\n    key: \"deleteProduct\",\n    value: function deleteProduct() {\n      var _this3 = this;\n\n      var products = this.state.products.filter(function (val) {\n        return val.id !== _this3.state.product.id;\n      });\n      this.setState({\n        products: products,\n        deleteProductDialog: false,\n        product: this.emptyProduct\n      });\n      this.toast.show({\n        severity: 'success',\n        summary: 'Successful',\n        detail: 'Product Deleted',\n        life: 3000\n      });\n    }\n  }, {\n    key: \"findIndexById\",\n    value: function findIndexById(id) {\n      var index = -1;\n\n      for (var i = 0; i < this.state.products.length; i++) {\n        if (this.state.products[i].id === id) {\n          index = i;\n          break;\n        }\n      }\n\n      return index;\n    }\n  }, {\n    key: \"createId\",\n    value: function createId() {\n      var id = '';\n      var chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n\n      for (var i = 0; i < 5; i++) {\n        id += chars.charAt(Math.floor(Math.random() * chars.length));\n      }\n\n      return id;\n    }\n  }, {\n    key: \"exportCSV\",\n    value: function exportCSV() {\n      this.dt.exportCSV();\n    }\n  }, {\n    key: \"confirmDeleteSelected\",\n    value: function confirmDeleteSelected() {\n      this.setState({\n        deleteProductsDialog: true\n      });\n    }\n  }, {\n    key: \"deleteSelectedProducts\",\n    value: function deleteSelectedProducts() {\n      var _this4 = this;\n\n      var products = this.state.products.filter(function (val) {\n        return !_this4.state.selectedProducts.includes(val);\n      });\n      this.setState({\n        products: products,\n        deleteProductsDialog: false,\n        selectedProducts: null\n      });\n      this.toast.show({\n        severity: 'success',\n        summary: 'Successful',\n        detail: 'Products Deleted',\n        life: 3000\n      });\n    }\n  }, {\n    key: \"onCategoryChange\",\n    value: function onCategoryChange(e) {\n      var product = _objectSpread({}, this.state.product);\n\n      product['category'] = e.value;\n      this.setState({\n        product: product\n      });\n    }\n  }, {\n    key: \"onInputChange\",\n    value: function onInputChange(e, name) {\n      var val = e.target && e.target.value || '';\n\n      var product = _objectSpread({}, this.state.product);\n\n      product[\"\".concat(name)] = val;\n      this.setState({\n        product: product\n      });\n    }\n  }, {\n    key: \"onInputNumberChange\",\n    value: function onInputNumberChange(e, name) {\n      var val = e.value || 0;\n\n      var product = _objectSpread({}, this.state.product);\n\n      product[\"\".concat(name)] = val;\n      this.setState({\n        product: product\n      });\n    }\n  }, {\n    key: \"leftToolbarTemplate\",\n    value: function leftToolbarTemplate() {\n      return /*#__PURE__*/React.createElement(React.Fragment, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 222,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(Button, {\n        label: \"New\",\n        icon: \"pi pi-plus\",\n        className: \"p-button-success p-mr-2\",\n        onClick: this.openNew,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 223,\n          columnNumber: 17\n        }\n      }), /*#__PURE__*/React.createElement(Button, {\n        label: \"Delete\",\n        icon: \"pi pi-trash\",\n        className: \"p-button-danger\",\n        onClick: this.confirmDeleteSelected,\n        disabled: !this.state.selectedProducts || !this.state.selectedProducts.length,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 224,\n          columnNumber: 17\n        }\n      }));\n    }\n  }, {\n    key: \"rightToolbarTemplate\",\n    value: function rightToolbarTemplate() {\n      return /*#__PURE__*/React.createElement(React.Fragment, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 231,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(FileUpload, {\n        mode: \"basic\",\n        accept: \"image/*\",\n        maxFileSize: 1000000,\n        label: \"Import\",\n        chooseLabel: \"Import\",\n        className: \"p-mr-2 p-d-inline-block\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 232,\n          columnNumber: 17\n        }\n      }), /*#__PURE__*/React.createElement(Button, {\n        label: \"Export\",\n        icon: \"pi pi-upload\",\n        className: \"p-button-help\",\n        onClick: this.exportCSV,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 233,\n          columnNumber: 17\n        }\n      }));\n    }\n  }, {\n    key: \"imageBodyTemplate\",\n    value: function imageBodyTemplate(rowData) {\n      return /*#__PURE__*/React.createElement(\"img\", {\n        src: \"showcase/demo/images/product/\".concat(rowData.image),\n        onError: function onError(e) {\n          return e.target.src = 'https://www.primefaces.org/wp-content/uploads/2020/05/placeholder.png';\n        },\n        alt: rowData.image,\n        className: \"product-image\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 239,\n          columnNumber: 16\n        }\n      });\n    }\n  }, {\n    key: \"priceBodyTemplate\",\n    value: function priceBodyTemplate(rowData) {\n      return this.formatCurrency(rowData.price);\n    }\n  }, {\n    key: \"ratingBodyTemplate\",\n    value: function ratingBodyTemplate(rowData) {\n      return /*#__PURE__*/React.createElement(Rating, {\n        value: rowData.rating,\n        readOnly: true,\n        cancel: false,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 247,\n          columnNumber: 16\n        }\n      });\n    }\n  }, {\n    key: \"statusBodyTemplate\",\n    value: function statusBodyTemplate(rowData) {\n      return /*#__PURE__*/React.createElement(\"span\", {\n        className: \"product-badge status-\".concat(rowData.inventoryStatus.toLowerCase()),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 251,\n          columnNumber: 16\n        }\n      }, rowData.inventoryStatus);\n    }\n  }, {\n    key: \"actionBodyTemplate\",\n    value: function actionBodyTemplate(rowData) {\n      var _this5 = this;\n\n      return /*#__PURE__*/React.createElement(React.Fragment, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 256,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(Button, {\n        icon: \"pi pi-pencil\",\n        className: \"p-button-rounded p-button-success p-mr-2\",\n        onClick: function onClick() {\n          return _this5.editProduct(rowData);\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 257,\n          columnNumber: 17\n        }\n      }), /*#__PURE__*/React.createElement(Button, {\n        icon: \"pi pi-trash\",\n        className: \"p-button-rounded p-button-warning\",\n        onClick: function onClick() {\n          return _this5.confirmDeleteProduct(rowData);\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 258,\n          columnNumber: 17\n        }\n      }));\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this6 = this;\n\n      var header = /*#__PURE__*/React.createElement(\"div\", {\n        className: \"table-header\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 265,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"h5\", {\n        className: \"p-m-0\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 266,\n          columnNumber: 17\n        }\n      }, \"Manage Products\"), /*#__PURE__*/React.createElement(\"span\", {\n        className: \"p-input-icon-left\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 267,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"i\", {\n        className: \"pi pi-search\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 268,\n          columnNumber: 21\n        }\n      }), /*#__PURE__*/React.createElement(InputText, {\n        type: \"search\",\n        onInput: function onInput(e) {\n          return _this6.setState({\n            globalFilter: e.target.value\n          });\n        },\n        placeholder: \"Search...\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 269,\n          columnNumber: 21\n        }\n      })));\n      var productDialogFooter = /*#__PURE__*/React.createElement(React.Fragment, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 274,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(Button, {\n        label: \"Cancel\",\n        icon: \"pi pi-times\",\n        className: \"p-button-text\",\n        onClick: this.hideDialog,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 275,\n          columnNumber: 17\n        }\n      }), /*#__PURE__*/React.createElement(Button, {\n        label: \"Save\",\n        icon: \"pi pi-check\",\n        className: \"p-button-text\",\n        onClick: this.saveProduct,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 276,\n          columnNumber: 17\n        }\n      }));\n      var deleteProductDialogFooter = /*#__PURE__*/React.createElement(React.Fragment, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 280,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(Button, {\n        label: \"No\",\n        icon: \"pi pi-times\",\n        className: \"p-button-text\",\n        onClick: this.hideDeleteProductDialog,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 281,\n          columnNumber: 17\n        }\n      }), /*#__PURE__*/React.createElement(Button, {\n        label: \"Yes\",\n        icon: \"pi pi-check\",\n        className: \"p-button-text\",\n        onClick: this.deleteProduct,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 282,\n          columnNumber: 17\n        }\n      }));\n      var deleteProductsDialogFooter = /*#__PURE__*/React.createElement(React.Fragment, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 286,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(Button, {\n        label: \"No\",\n        icon: \"pi pi-times\",\n        className: \"p-button-text\",\n        onClick: this.hideDeleteProductsDialog,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 287,\n          columnNumber: 17\n        }\n      }), /*#__PURE__*/React.createElement(Button, {\n        label: \"Yes\",\n        icon: \"pi pi-check\",\n        className: \"p-button-text\",\n        onClick: this.deleteSelectedProducts,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 288,\n          columnNumber: 17\n        }\n      }));\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 293,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"content-section introduction\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 294,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(AppInlineHeader, {\n        changelogText: \"dataTable\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 295,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(\"h1\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 296,\n          columnNumber: 25\n        }\n      }, \"DataTable \", /*#__PURE__*/React.createElement(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 296,\n          columnNumber: 39\n        }\n      }, \"Crud\")), /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 297,\n          columnNumber: 25\n        }\n      }, \"This samples demonstrates a CRUD implementation using various PrimeReact components.\"))), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"content-section implementation datatable-crud-demo\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 301,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(Toast, {\n        ref: function ref(el) {\n          return _this6.toast = el;\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 302,\n          columnNumber: 21\n        }\n      }), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"card\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 304,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(Toolbar, {\n        className: \"p-mb-4\",\n        left: this.leftToolbarTemplate,\n        right: this.rightToolbarTemplate,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 305,\n          columnNumber: 25\n        }\n      }), /*#__PURE__*/React.createElement(DataTable, {\n        ref: function ref(el) {\n          return _this6.dt = el;\n        },\n        value: this.state.products,\n        selection: this.state.selectedProducts,\n        onSelectionChange: function onSelectionChange(e) {\n          return _this6.setState({\n            selectedProducts: e.value\n          });\n        },\n        dataKey: \"id\",\n        paginator: true,\n        rows: 10,\n        rowsPerPageOptions: [5, 10, 25],\n        paginatorTemplate: \"FirstPageLink PrevPageLink PageLinks NextPageLink LastPageLink CurrentPageReport RowsPerPageDropdown\",\n        currentPageReportTemplate: \"Showing {first} to {last} of {totalRecords} products\",\n        globalFilter: this.state.globalFilter,\n        header: header,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 307,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(Column, {\n        selectionMode: \"multiple\",\n        headerStyle: {\n          width: '3rem'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 314,\n          columnNumber: 29\n        }\n      }), /*#__PURE__*/React.createElement(Column, {\n        field: \"code\",\n        header: \"Code\",\n        sortable: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 315,\n          columnNumber: 29\n        }\n      }), /*#__PURE__*/React.createElement(Column, {\n        field: \"name\",\n        header: \"Name\",\n        sortable: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 316,\n          columnNumber: 29\n        }\n      }), /*#__PURE__*/React.createElement(Column, {\n        header: \"Image\",\n        body: this.imageBodyTemplate,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 317,\n          columnNumber: 29\n        }\n      }), /*#__PURE__*/React.createElement(Column, {\n        field: \"price\",\n        header: \"Price\",\n        body: this.priceBodyTemplate,\n        sortable: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 318,\n          columnNumber: 29\n        }\n      }), /*#__PURE__*/React.createElement(Column, {\n        field: \"category\",\n        header: \"Category\",\n        sortable: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 319,\n          columnNumber: 29\n        }\n      }), /*#__PURE__*/React.createElement(Column, {\n        field: \"rating\",\n        header: \"Reviews\",\n        body: this.ratingBodyTemplate,\n        sortable: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 320,\n          columnNumber: 29\n        }\n      }), /*#__PURE__*/React.createElement(Column, {\n        field: \"inventoryStatus\",\n        header: \"Status\",\n        body: this.statusBodyTemplate,\n        sortable: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 321,\n          columnNumber: 29\n        }\n      }), /*#__PURE__*/React.createElement(Column, {\n        body: this.actionBodyTemplate,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 322,\n          columnNumber: 29\n        }\n      }))), /*#__PURE__*/React.createElement(Dialog, {\n        visible: this.state.productDialog,\n        style: {\n          width: '450px'\n        },\n        header: \"Product Details\",\n        modal: true,\n        className: \"p-fluid\",\n        footer: productDialogFooter,\n        onHide: this.hideDialog,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 326,\n          columnNumber: 21\n        }\n      }, this.state.product.image && /*#__PURE__*/React.createElement(\"img\", {\n        src: \"showcase/demo/images/product/\".concat(this.state.product.image),\n        onError: function onError(e) {\n          return e.target.src = 'https://www.primefaces.org/wp-content/uploads/2020/05/placeholder.png';\n        },\n        alt: this.state.product.image,\n        className: \"product-image\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 327,\n          columnNumber: 54\n        }\n      }), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"p-field\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 328,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(\"label\", {\n        htmlFor: \"name\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 329,\n          columnNumber: 29\n        }\n      }, \"Name\"), /*#__PURE__*/React.createElement(InputText, {\n        id: \"name\",\n        value: this.state.product.name,\n        onChange: function onChange(e) {\n          return _this6.onInputChange(e, 'name');\n        },\n        required: true,\n        autoFocus: true,\n        className: classNames({\n          'p-invalid': this.state.submitted && !this.state.product.name\n        }),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 330,\n          columnNumber: 29\n        }\n      }), this.state.submitted && !this.state.product.name && /*#__PURE__*/React.createElement(\"small\", {\n        className: \"p-error\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 331,\n          columnNumber: 82\n        }\n      }, \"Name is required.\")), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"p-field\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 333,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(\"label\", {\n        htmlFor: \"description\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 334,\n          columnNumber: 29\n        }\n      }, \"Description\"), /*#__PURE__*/React.createElement(InputTextarea, {\n        id: \"description\",\n        value: this.state.product.description,\n        onChange: function onChange(e) {\n          return _this6.onInputChange(e, 'description');\n        },\n        required: true,\n        rows: 3,\n        cols: 20,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 335,\n          columnNumber: 29\n        }\n      })), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"p-field\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 338,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(\"label\", {\n        className: \"p-mb-3\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 339,\n          columnNumber: 29\n        }\n      }, \"Category\"), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"p-formgrid p-grid\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 340,\n          columnNumber: 29\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"p-field-radiobutton p-col-6\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 341,\n          columnNumber: 33\n        }\n      }, /*#__PURE__*/React.createElement(RadioButton, {\n        inputId: \"category1\",\n        name: \"category\",\n        value: \"Accessories\",\n        onChange: this.onCategoryChange,\n        checked: this.state.product.category === 'Accessories',\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 342,\n          columnNumber: 37\n        }\n      }), /*#__PURE__*/React.createElement(\"label\", {\n        htmlFor: \"category1\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 343,\n          columnNumber: 37\n        }\n      }, \"Accessories\")), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"p-field-radiobutton p-col-6\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 345,\n          columnNumber: 33\n        }\n      }, /*#__PURE__*/React.createElement(RadioButton, {\n        inputId: \"category2\",\n        name: \"category\",\n        value: \"Clothing\",\n        onChange: this.onCategoryChange,\n        checked: this.state.product.category === 'Clothing',\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 346,\n          columnNumber: 37\n        }\n      }), /*#__PURE__*/React.createElement(\"label\", {\n        htmlFor: \"category2\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 347,\n          columnNumber: 37\n        }\n      }, \"Clothing\")), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"p-field-radiobutton p-col-6\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 349,\n          columnNumber: 33\n        }\n      }, /*#__PURE__*/React.createElement(RadioButton, {\n        inputId: \"category3\",\n        name: \"category\",\n        value: \"Electronics\",\n        onChange: this.onCategoryChange,\n        checked: this.state.product.category === 'Electronics',\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 350,\n          columnNumber: 37\n        }\n      }), /*#__PURE__*/React.createElement(\"label\", {\n        htmlFor: \"category3\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 351,\n          columnNumber: 37\n        }\n      }, \"Electronics\")), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"p-field-radiobutton p-col-6\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 353,\n          columnNumber: 33\n        }\n      }, /*#__PURE__*/React.createElement(RadioButton, {\n        inputId: \"category4\",\n        name: \"category\",\n        value: \"Fitness\",\n        onChange: this.onCategoryChange,\n        checked: this.state.product.category === 'Fitness',\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 354,\n          columnNumber: 37\n        }\n      }), /*#__PURE__*/React.createElement(\"label\", {\n        htmlFor: \"category4\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 355,\n          columnNumber: 37\n        }\n      }, \"Fitness\")))), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"p-formgrid p-grid\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 360,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"p-field p-col\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 361,\n          columnNumber: 29\n        }\n      }, /*#__PURE__*/React.createElement(\"label\", {\n        htmlFor: \"price\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 362,\n          columnNumber: 33\n        }\n      }, \"Price\"), /*#__PURE__*/React.createElement(InputNumber, {\n        id: \"price\",\n        value: this.state.product.price,\n        onValueChange: function onValueChange(e) {\n          return _this6.onInputNumberChange(e, 'price');\n        },\n        mode: \"currency\",\n        currency: \"USD\",\n        locale: \"en-US\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 363,\n          columnNumber: 33\n        }\n      })), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"p-field p-col\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 365,\n          columnNumber: 29\n        }\n      }, /*#__PURE__*/React.createElement(\"label\", {\n        htmlFor: \"quantity\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 366,\n          columnNumber: 33\n        }\n      }, \"Quantity\"), /*#__PURE__*/React.createElement(InputNumber, {\n        id: \"quantity\",\n        value: this.state.product.quantity,\n        onValueChange: function onValueChange(e) {\n          return _this6.onInputNumberChange(e, 'quantity');\n        },\n        integeronly: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 367,\n          columnNumber: 33\n        }\n      })))), /*#__PURE__*/React.createElement(Dialog, {\n        visible: this.state.deleteProductDialog,\n        style: {\n          width: '450px'\n        },\n        header: \"Confirm\",\n        modal: true,\n        footer: deleteProductDialogFooter,\n        onHide: this.hideDeleteProductDialog,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 372,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"confirmation-content\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 373,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(\"i\", {\n        className: \"pi pi-exclamation-triangle p-mr-3\",\n        style: {\n          fontSize: '2rem'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 374,\n          columnNumber: 29\n        }\n      }), this.state.product && /*#__PURE__*/React.createElement(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 375,\n          columnNumber: 52\n        }\n      }, \"Are you sure you want to delete \", /*#__PURE__*/React.createElement(\"b\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 375,\n          columnNumber: 90\n        }\n      }, this.state.product.name), \"?\"))), /*#__PURE__*/React.createElement(Dialog, {\n        visible: this.state.deleteProductsDialog,\n        style: {\n          width: '450px'\n        },\n        header: \"Confirm\",\n        modal: true,\n        footer: deleteProductsDialogFooter,\n        onHide: this.hideDeleteProductsDialog,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 379,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"confirmation-content\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 380,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(\"i\", {\n        className: \"pi pi-exclamation-triangle p-mr-3\",\n        style: {\n          fontSize: '2rem'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 381,\n          columnNumber: 29\n        }\n      }), this.state.product && /*#__PURE__*/React.createElement(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 382,\n          columnNumber: 52\n        }\n      }, \"Are you sure you want to delete the selected products?\")))), /*#__PURE__*/React.createElement(DataTableCrudDoc, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 387,\n          columnNumber: 17\n        }\n      }));\n    }\n  }]);\n\n  return DataTableCrudDemo;\n}(Component);\nexport var DataTableCrudDoc = /*#__PURE__*/function (_Component2) {\n  _inherits(DataTableCrudDoc, _Component2);\n\n  var _super2 = _createSuper(DataTableCrudDoc);\n\n  function DataTableCrudDoc(props) {\n    var _this7;\n\n    _classCallCheck(this, DataTableCrudDoc);\n\n    _this7 = _super2.call(this, props);\n    _this7.sources = {\n      'class': {\n        tabName: 'Class Source',\n        content: \"\\nimport React, { Component } from 'react';\\nimport classNames from 'classnames';\\nimport { DataTable } from 'primereact/datatable';\\nimport { Column } from 'primereact/column';\\nimport ProductService from '../service/ProductService';\\nimport { Toast } from 'primereact/toast';\\nimport { Button } from 'primereact/button';\\nimport { FileUpload } from 'primereact/fileupload';\\nimport { Rating } from 'primereact/rating';\\nimport { Toolbar } from 'primereact/toolbar';\\nimport { InputTextarea } from 'primereact/inputtextarea';\\nimport { RadioButton } from 'primereact/radiobutton';\\nimport { InputNumber } from 'primereact/inputnumber';\\nimport { Dialog } from 'primereact/dialog';\\nimport { InputText } from 'primereact/inputtext';\\nimport './DataTableDemo.css';\\n\\nexport class DataTableCrudDemo extends Component {\\n\\n    emptyProduct = {\\n        id: null,\\n        name: '',\\n        image: null,\\n        description: '',\\n        category: null,\\n        price: 0,\\n        quantity: 0,\\n        rating: 0,\\n        inventoryStatus: 'INSTOCK'\\n    };\\n\\n    constructor(props) {\\n        super(props);\\n\\n        this.state = {\\n            products: null,\\n            productDialog: false,\\n            deleteProductDialog: false,\\n            deleteProductsDialog: false,\\n            product: this.emptyProduct,\\n            selectedProducts: null,\\n            submitted: false,\\n            globalFilter: null\\n        };\\n\\n        this.productService = new ProductService();\\n        this.leftToolbarTemplate = this.leftToolbarTemplate.bind(this);\\n        this.rightToolbarTemplate = this.rightToolbarTemplate.bind(this);\\n        this.imageBodyTemplate = this.imageBodyTemplate.bind(this);\\n        this.priceBodyTemplate = this.priceBodyTemplate.bind(this);\\n        this.ratingBodyTemplate = this.ratingBodyTemplate.bind(this);\\n        this.statusBodyTemplate = this.statusBodyTemplate.bind(this);\\n        this.actionBodyTemplate = this.actionBodyTemplate.bind(this);\\n\\n        this.openNew = this.openNew.bind(this);\\n        this.hideDialog = this.hideDialog.bind(this);\\n        this.saveProduct = this.saveProduct.bind(this);\\n        this.editProduct = this.editProduct.bind(this);\\n        this.confirmDeleteProduct = this.confirmDeleteProduct.bind(this);\\n        this.deleteProduct = this.deleteProduct.bind(this);\\n        this.exportCSV = this.exportCSV.bind(this);\\n        this.confirmDeleteSelected = this.confirmDeleteSelected.bind(this);\\n        this.deleteSelectedProducts = this.deleteSelectedProducts.bind(this);\\n        this.onCategoryChange = this.onCategoryChange.bind(this);\\n        this.onInputChange = this.onInputChange.bind(this);\\n        this.onInputNumberChange = this.onInputNumberChange.bind(this);\\n        this.hideDeleteProductDialog = this.hideDeleteProductDialog.bind(this);\\n        this.hideDeleteProductsDialog = this.hideDeleteProductsDialog.bind(this);\\n    }\\n\\n    componentDidMount() {\\n        this.productService.getProducts().then(data => this.setState({ products: data }));\\n    }\\n\\n    formatCurrency(value) {\\n        return value.toLocaleString('en-US', { style: 'currency', currency: 'USD' });\\n    }\\n\\n    openNew() {\\n        this.setState({\\n            product: this.emptyProduct,\\n            submitted: false,\\n            productDialog: true\\n        });\\n    }\\n\\n    hideDialog() {\\n        this.setState({\\n            submitted: false,\\n            productDialog: false\\n        });\\n    }\\n\\n    hideDeleteProductDialog() {\\n        this.setState({ deleteProductDialog: false });\\n    }\\n\\n    hideDeleteProductsDialog() {\\n        this.setState({ deleteProductsDialog: false });\\n    }\\n\\n    saveProduct() {\\n        let state = { submitted: true };\\n\\n        if (this.state.product.name.trim()) {\\n            let products = [...this.state.products];\\n            let product = {...this.state.product};\\n            if (this.state.product.id) {\\n                const index = this.findIndexById(this.state.product.id);\\n\\n                products[index] = product;\\n                this.toast.show({ severity: 'success', summary: 'Successful', detail: 'Product Updated', life: 3000 });\\n            }\\n            else {\\n                product.id = this.createId();\\n                product.image = 'product-placeholder.svg';\\n                products.push(product);\\n                this.toast.show({ severity: 'success', summary: 'Successful', detail: 'Product Created', life: 3000 });\\n            }\\n\\n            state = {\\n                ...state,\\n                products,\\n                productDialog: false,\\n                product: this.emptyProduct\\n            };\\n        }\\n\\n        this.setState(state);\\n    }\\n\\n    editProduct(product) {\\n        this.setState({\\n            product: { ...product },\\n            productDialog: true\\n        });\\n    }\\n\\n    confirmDeleteProduct(product) {\\n        this.setState({\\n            product,\\n            deleteProductDialog: true\\n        });\\n    }\\n\\n    deleteProduct() {\\n        let products = this.state.products.filter(val => val.id !== this.state.product.id);\\n        this.setState({\\n            products,\\n            deleteProductDialog: false,\\n            product: this.emptyProduct\\n        });\\n        this.toast.show({ severity: 'success', summary: 'Successful', detail: 'Product Deleted', life: 3000 });\\n    }\\n\\n    findIndexById(id) {\\n        let index = -1;\\n        for (let i = 0; i < this.state.products.length; i++) {\\n            if (this.state.products[i].id === id) {\\n                index = i;\\n                break;\\n            }\\n        }\\n\\n        return index;\\n    }\\n\\n    createId() {\\n        let id = '';\\n        let chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\\n        for (let i = 0; i < 5; i++) {\\n            id += chars.charAt(Math.floor(Math.random() * chars.length));\\n        }\\n        return id;\\n    }\\n\\n    exportCSV() {\\n        this.dt.exportCSV();\\n    }\\n\\n    confirmDeleteSelected() {\\n        this.setState({ deleteProductsDialog: true });\\n    }\\n\\n    deleteSelectedProducts() {\\n        let products = this.state.products.filter(val => !this.state.selectedProducts.includes(val));\\n        this.setState({\\n            products,\\n            deleteProductsDialog: false,\\n            selectedProducts: null\\n        });\\n        this.toast.show({ severity: 'success', summary: 'Successful', detail: 'Products Deleted', life: 3000 });\\n    }\\n\\n    onCategoryChange(e) {\\n        let product = {...this.state.product};\\n        product['category'] = e.value;\\n        this.setState({ product });\\n    }\\n\\n    onInputChange(e, name) {\\n        const val = (e.target && e.target.value) || '';\\n        let product = {...this.state.product};\\n        product[`${name}`] = val;\\n\\n        this.setState({ product });\\n    }\\n\\n    onInputNumberChange(e, name) {\\n        const val = e.value || 0;\\n        let product = {...this.state.product};\\n        product[`${name}`] = val;\\n\\n        this.setState({ product });\\n    }\\n\\n    leftToolbarTemplate() {\\n        return (\\n            <React.Fragment>\\n                <Button label=\\\"New\\\" icon=\\\"pi pi-plus\\\" className=\\\"p-button-success p-mr-2\\\" onClick={this.openNew} />\\n                <Button label=\\\"Delete\\\" icon=\\\"pi pi-trash\\\" className=\\\"p-button-danger\\\" onClick={this.confirmDeleteSelected} disabled={!this.state.selectedProducts || !this.state.selectedProducts.length} />\\n            </React.Fragment>\\n        )\\n    }\\n\\n    rightToolbarTemplate() {\\n        return (\\n            <React.Fragment>\\n                <FileUpload mode=\\\"basic\\\" accept=\\\"image/*\\\" maxFileSize={1000000} label=\\\"Import\\\" chooseLabel=\\\"Import\\\" className=\\\"p-mr-2 p-d-inline-block\\\" />\\n                <Button label=\\\"Export\\\" icon=\\\"pi pi-upload\\\" className=\\\"p-button-help\\\" onClick={this.exportCSV} />\\n            </React.Fragment>\\n        )\\n    }\\n\\n    imageBodyTemplate(rowData) {\\n        return <img src={`showcase/demo/images/product/${rowData.image}`} onError={(e) => e.target.src='https://www.primefaces.org/wp-content/uploads/2020/05/placeholder.png'} alt={rowData.image} className=\\\"product-image\\\" />\\n    }\\n\\n    priceBodyTemplate(rowData) {\\n        return this.formatCurrency(rowData.price);\\n    }\\n\\n    ratingBodyTemplate(rowData) {\\n        return <Rating value={rowData.rating} readOnly cancel={false} />;\\n    }\\n\\n    statusBodyTemplate(rowData) {\\n        return <span className={`product-badge status-${rowData.inventoryStatus.toLowerCase()}`}>{rowData.inventoryStatus}</span>;\\n    }\\n\\n    actionBodyTemplate(rowData) {\\n        return (\\n            <React.Fragment>\\n                <Button icon=\\\"pi pi-pencil\\\" className=\\\"p-button-rounded p-button-success p-mr-2\\\" onClick={() => this.editProduct(rowData)} />\\n                <Button icon=\\\"pi pi-trash\\\" className=\\\"p-button-rounded p-button-warning\\\" onClick={() => this.confirmDeleteProduct(rowData)} />\\n            </React.Fragment>\\n        );\\n    }\\n\\n    render() {\\n        const header = (\\n            <div className=\\\"table-header\\\">\\n                <h5 className=\\\"p-m-0\\\">Manage Products</h5>\\n                <span className=\\\"p-input-icon-left\\\">\\n                    <i className=\\\"pi pi-search\\\" />\\n                    <InputText type=\\\"search\\\" onInput={(e) => this.setState({ globalFilter: e.target.value })} placeholder=\\\"Search...\\\" />\\n                </span>\\n            </div>\\n        );\\n        const productDialogFooter = (\\n            <React.Fragment>\\n                <Button label=\\\"Cancel\\\" icon=\\\"pi pi-times\\\" className=\\\"p-button-text\\\" onClick={this.hideDialog} />\\n                <Button label=\\\"Save\\\" icon=\\\"pi pi-check\\\" className=\\\"p-button-text\\\" onClick={this.saveProduct} />\\n            </React.Fragment>\\n        );\\n        const deleteProductDialogFooter = (\\n            <React.Fragment>\\n                <Button label=\\\"No\\\" icon=\\\"pi pi-times\\\" className=\\\"p-button-text\\\" onClick={this.hideDeleteProductDialog} />\\n                <Button label=\\\"Yes\\\" icon=\\\"pi pi-check\\\" className=\\\"p-button-text\\\" onClick={this.deleteProduct} />\\n            </React.Fragment>\\n        );\\n        const deleteProductsDialogFooter = (\\n            <React.Fragment>\\n                <Button label=\\\"No\\\" icon=\\\"pi pi-times\\\" className=\\\"p-button-text\\\" onClick={this.hideDeleteProductsDialog} />\\n                <Button label=\\\"Yes\\\" icon=\\\"pi pi-check\\\" className=\\\"p-button-text\\\" onClick={this.deleteSelectedProducts} />\\n            </React.Fragment>\\n        );\\n\\n        return (\\n            <div className=\\\"datatable-crud-demo\\\">\\n                <Toast ref={(el) => this.toast = el} />\\n\\n                <div className=\\\"card\\\">\\n                    <Toolbar className=\\\"p-mb-4\\\" left={this.leftToolbarTemplate} right={this.rightToolbarTemplate}></Toolbar>\\n\\n                    <DataTable ref={(el) => this.dt = el} value={this.state.products} selection={this.state.selectedProducts} onSelectionChange={(e) => this.setState({ selectedProducts: e.value })}\\n                        dataKey=\\\"id\\\" paginator rows={10} rowsPerPageOptions={[5, 10, 25]}\\n                        paginatorTemplate=\\\"FirstPageLink PrevPageLink PageLinks NextPageLink LastPageLink CurrentPageReport RowsPerPageDropdown\\\"\\n                        currentPageReportTemplate=\\\"Showing {first} to {last} of {totalRecords} products\\\"\\n                        globalFilter={this.state.globalFilter}\\n                        header={header}>\\n\\n                        <Column selectionMode=\\\"multiple\\\" headerStyle={{ width: '3rem' }}></Column>\\n                        <Column field=\\\"code\\\" header=\\\"Code\\\" sortable></Column>\\n                        <Column field=\\\"name\\\" header=\\\"Name\\\" sortable></Column>\\n                        <Column header=\\\"Image\\\" body={this.imageBodyTemplate}></Column>\\n                        <Column field=\\\"price\\\" header=\\\"Price\\\" body={this.priceBodyTemplate} sortable></Column>\\n                        <Column field=\\\"category\\\" header=\\\"Category\\\" sortable></Column>\\n                        <Column field=\\\"rating\\\" header=\\\"Reviews\\\" body={this.ratingBodyTemplate} sortable></Column>\\n                        <Column field=\\\"inventoryStatus\\\" header=\\\"Status\\\" body={this.statusBodyTemplate} sortable></Column>\\n                        <Column body={this.actionBodyTemplate}></Column>\\n                    </DataTable>\\n                </div>\\n\\n                <Dialog visible={this.state.productDialog} style={{ width: '450px' }} header=\\\"Product Details\\\" modal className=\\\"p-fluid\\\" footer={productDialogFooter} onHide={this.hideDialog}>\\n                    {this.state.product.image && <img src={`showcase/demo/images/product/${this.state.product.image}`} onError={(e) => e.target.src='https://www.primefaces.org/wp-content/uploads/2020/05/placeholder.png'} alt={this.state.product.image} className=\\\"product-image\\\" />}\\n                    <div className=\\\"p-field\\\">\\n                        <label htmlFor=\\\"name\\\">Name</label>\\n                        <InputText id=\\\"name\\\" value={this.state.product.name} onChange={(e) => this.onInputChange(e, 'name')} required autoFocus className={classNames({ 'p-invalid': this.state.submitted && !this.state.product.name })} />\\n                        {this.state.submitted && !this.state.product.name && <small className=\\\"p-error\\\">Name is required.</small>}\\n                    </div>\\n                    <div className=\\\"p-field\\\">\\n                        <label htmlFor=\\\"description\\\">Description</label>\\n                        <InputTextarea id=\\\"description\\\" value={this.state.product.description} onChange={(e) => this.onInputChange(e, 'description')} required rows={3} cols={20} />\\n                    </div>\\n\\n                    <div className=\\\"p-field\\\">\\n                        <label className=\\\"p-mb-3\\\">Category</label>\\n                        <div className=\\\"p-formgrid p-grid\\\">\\n                            <div className=\\\"p-field-radiobutton p-col-6\\\">\\n                                <RadioButton inputId=\\\"category1\\\" name=\\\"category\\\" value=\\\"Accessories\\\" onChange={this.onCategoryChange} checked={this.state.product.category === 'Accessories'} />\\n                                <label htmlFor=\\\"category1\\\">Accessories</label>\\n                            </div>\\n                            <div className=\\\"p-field-radiobutton p-col-6\\\">\\n                                <RadioButton inputId=\\\"category2\\\" name=\\\"category\\\" value=\\\"Clothing\\\" onChange={this.onCategoryChange} checked={this.state.product.category === 'Clothing'} />\\n                                <label htmlFor=\\\"category2\\\">Clothing</label>\\n                            </div>\\n                            <div className=\\\"p-field-radiobutton p-col-6\\\">\\n                                <RadioButton inputId=\\\"category3\\\" name=\\\"category\\\" value=\\\"Electronics\\\" onChange={this.onCategoryChange} checked={this.state.product.category === 'Electronics'} />\\n                                <label htmlFor=\\\"category3\\\">Electronics</label>\\n                            </div>\\n                            <div className=\\\"p-field-radiobutton p-col-6\\\">\\n                                <RadioButton inputId=\\\"category4\\\" name=\\\"category\\\" value=\\\"Fitness\\\" onChange={this.onCategoryChange} checked={this.state.product.category === 'Fitness'} />\\n                                <label htmlFor=\\\"category4\\\">Fitness</label>\\n                            </div>\\n                        </div>\\n                    </div>\\n\\n                    <div className=\\\"p-formgrid p-grid\\\">\\n                        <div className=\\\"p-field p-col\\\">\\n                            <label htmlFor=\\\"price\\\">Price</label>\\n                            <InputNumber id=\\\"price\\\" value={this.state.product.price} onValueChange={(e) => this.onInputNumberChange(e, 'price')} mode=\\\"currency\\\" currency=\\\"USD\\\" locale=\\\"en-US\\\" />\\n                        </div>\\n                        <div className=\\\"p-field p-col\\\">\\n                            <label htmlFor=\\\"quantity\\\">Quantity</label>\\n                            <InputNumber id=\\\"quantity\\\" value={this.state.product.quantity} onValueChange={(e) => this.onInputNumberChange(e, 'quantity')} integeronly />\\n                        </div>\\n                    </div>\\n                </Dialog>\\n\\n                <Dialog visible={this.state.deleteProductDialog} style={{ width: '450px' }} header=\\\"Confirm\\\" modal footer={deleteProductDialogFooter} onHide={this.hideDeleteProductDialog}>\\n                    <div className=\\\"confirmation-content\\\">\\n                        <i className=\\\"pi pi-exclamation-triangle p-mr-3\\\" style={{ fontSize: '2rem'}} />\\n                        {this.state.product && <span>Are you sure you want to delete <b>{this.state.product.name}</b>?</span>}\\n                    </div>\\n                </Dialog>\\n\\n                <Dialog visible={this.state.deleteProductsDialog} style={{ width: '450px' }} header=\\\"Confirm\\\" modal footer={deleteProductsDialogFooter} onHide={this.hideDeleteProductsDialog}>\\n                    <div className=\\\"confirmation-content\\\">\\n                        <i className=\\\"pi pi-exclamation-triangle p-mr-3\\\" style={{ fontSize: '2rem'}} />\\n                        {this.state.product && <span>Are you sure you want to delete the selected products?</span>}\\n                    </div>\\n                </Dialog>\\n            </div>\\n        );\\n    }\\n}\\n                \"\n      },\n      'hooks': {\n        tabName: 'Hooks Source',\n        content: \"\\nimport React, { useState, useEffect, useRef } from 'react';\\nimport classNames from 'classnames';\\nimport { DataTable } from 'primereact/datatable';\\nimport { Column } from 'primereact/column';\\nimport ProductService from '../service/ProductService';\\nimport { Toast } from 'primereact/toast';\\nimport { Button } from 'primereact/button';\\nimport { FileUpload } from 'primereact/fileupload';\\nimport { Rating } from 'primereact/rating';\\nimport { Toolbar } from 'primereact/toolbar';\\nimport { InputTextarea } from 'primereact/inputtextarea';\\nimport { RadioButton } from 'primereact/radiobutton';\\nimport { InputNumber } from 'primereact/inputnumber';\\nimport { Dialog } from 'primereact/dialog';\\nimport { InputText } from 'primereact/inputtext';\\nimport './DataTableDemo.css';\\n\\nconst DataTableCrudDemo = () => {\\n\\n    let emptyProduct = {\\n        id: null,\\n        name: '',\\n        image: null,\\n        description: '',\\n        category: null,\\n        price: 0,\\n        quantity: 0,\\n        rating: 0,\\n        inventoryStatus: 'INSTOCK'\\n    };\\n\\n    const [products, setProducts] = useState(null);\\n    const [productDialog, setProductDialog] = useState(false);\\n    const [deleteProductDialog, setDeleteProductDialog] = useState(false);\\n    const [deleteProductsDialog, setDeleteProductsDialog] = useState(false);\\n    const [product, setProduct] = useState(emptyProduct);\\n    const [selectedProducts, setSelectedProducts] = useState(null);\\n    const [submitted, setSubmitted] = useState(false);\\n    const [globalFilter, setGlobalFilter] = useState(null);\\n    const toast = useRef(null);\\n    const dt = useRef(null);\\n    const productService = new ProductService();\\n\\n    useEffect(() => {\\n        productService.getProducts().then(data => setProducts(data));\\n    }, []); // eslint-disable-line react-hooks/exhaustive-deps\\n\\n    const formatCurrency = (value) => {\\n        return value.toLocaleString('en-US', { style: 'currency', currency: 'USD' });\\n    }\\n\\n    const openNew = () => {\\n        setProduct(emptyProduct);\\n        setSubmitted(false);\\n        setProductDialog(true);\\n    }\\n\\n    const hideDialog = () => {\\n        setSubmitted(false);\\n        setProductDialog(false);\\n    }\\n\\n    const hideDeleteProductDialog = () => {\\n        setDeleteProductDialog(false);\\n    }\\n\\n    const hideDeleteProductsDialog = () => {\\n        setDeleteProductsDialog(false);\\n    }\\n\\n    const saveProduct = () => {\\n        setSubmitted(true);\\n\\n        if (product.name.trim()) {\\n            let _products = [...products];\\n            let _product = {...product};\\n            if (product.id) {\\n                const index = findIndexById(product.id);\\n\\n                _products[index] = _product;\\n                toast.current.show({ severity: 'success', summary: 'Successful', detail: 'Product Updated', life: 3000 });\\n            }\\n            else {\\n                _product.id = createId();\\n                _product.image = 'product-placeholder.svg';\\n                _products.push(_product);\\n                toast.current.show({ severity: 'success', summary: 'Successful', detail: 'Product Created', life: 3000 });\\n            }\\n\\n            setProducts(_products);\\n            setProductDialog(false);\\n            setProduct(emptyProduct);\\n        }\\n    }\\n\\n    const editProduct = (product) => {\\n        setProduct({...product});\\n        setProductDialog(true);\\n    }\\n\\n    const confirmDeleteProduct = (product) => {\\n        setProduct(product);\\n        setDeleteProductDialog(true);\\n    }\\n\\n    const deleteProduct = () => {\\n        let _products = products.filter(val => val.id !== product.id);\\n        setProduct(_products);\\n        setDeleteProductDialog(false);\\n        setProduct(emptyProduct);\\n        toast.current.show({ severity: 'success', summary: 'Successful', detail: 'Product Deleted', life: 3000 });\\n    }\\n\\n    const findIndexById = (id) => {\\n        let index = -1;\\n        for (let i = 0; i < products.length; i++) {\\n            if (products[i].id === id) {\\n                index = i;\\n                break;\\n            }\\n        }\\n\\n        return index;\\n    }\\n\\n    const createId = () => {\\n        let id = '';\\n        let chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\\n        for (let i = 0; i < 5; i++) {\\n            id += chars.charAt(Math.floor(Math.random() * chars.length));\\n        }\\n        return id;\\n    }\\n\\n    const exportCSV = () => {\\n        dt.current.exportCSV();\\n    }\\n\\n    const confirmDeleteSelected = () => {\\n        setDeleteProductsDialog(true);\\n    }\\n\\n    const deleteSelectedProducts = () => {\\n        let _products = products.filter(val => !selectedProducts.includes(val));\\n        setProducts(_products);\\n        setDeleteProductsDialog(false);\\n        setSelectedProducts(null);\\n        toast.current.show({ severity: 'success', summary: 'Successful', detail: 'Products Deleted', life: 3000 });\\n    }\\n\\n    const onCategoryChange = (e) => {\\n        let _product = {...product};\\n        _product['category'] = e.value;\\n        setProduct(_product);\\n    }\\n\\n    const onInputChange = (e, name) => {\\n        const val = (e.target && e.target.value) || '';\\n        let _product = {...product};\\n        _product[`${name}`] = val;\\n\\n        setProduct(_product);\\n    }\\n\\n    const onInputNumberChange = (e, name) => {\\n        const val = e.value || 0;\\n        let _product = {...product};\\n        _product[`${name}`] = val;\\n\\n        setProduct(_product);\\n    }\\n\\n    const leftToolbarTemplate = () => {\\n        return (\\n            <React.Fragment>\\n                <Button label=\\\"New\\\" icon=\\\"pi pi-plus\\\" className=\\\"p-button-success p-mr-2\\\" onClick={openNew} />\\n                <Button label=\\\"Delete\\\" icon=\\\"pi pi-trash\\\" className=\\\"p-button-danger\\\" onClick={confirmDeleteSelected} disabled={!selectedProducts || !selectedProducts.length} />\\n            </React.Fragment>\\n        )\\n    }\\n\\n    const rightToolbarTemplate = () => {\\n        return (\\n            <React.Fragment>\\n                <FileUpload mode=\\\"basic\\\" accept=\\\"image/*\\\" maxFileSize={1000000} label=\\\"Import\\\" chooseLabel=\\\"Import\\\" className=\\\"p-mr-2 p-d-inline-block\\\" />\\n                <Button label=\\\"Export\\\" icon=\\\"pi pi-upload\\\" className=\\\"p-button-help\\\" onClick={exportCSV} />\\n            </React.Fragment>\\n        )\\n    }\\n\\n    const imageBodyTemplate = (rowData) => {\\n        return <img src={`showcase/demo/images/product/${rowData.image}`} onError={(e) => e.target.src='https://www.primefaces.org/wp-content/uploads/2020/05/placeholder.png'} alt={rowData.image} className=\\\"product-image\\\" />\\n    }\\n\\n    const priceBodyTemplate = (rowData) => {\\n        return formatCurrency(rowData.price);\\n    }\\n\\n    const ratingBodyTemplate = (rowData) => {\\n        return <Rating value={rowData.rating} readOnly cancel={false} />;\\n    }\\n\\n    const statusBodyTemplate = (rowData) => {\\n        return <span className={`product-badge status-${rowData.inventoryStatus.toLowerCase()}`}>{rowData.inventoryStatus}</span>;\\n    }\\n\\n    const actionBodyTemplate = (rowData) => {\\n        return (\\n            <React.Fragment>\\n                <Button icon=\\\"pi pi-pencil\\\" className=\\\"p-button-rounded p-button-success p-mr-2\\\" onClick={() => editProduct(rowData)} />\\n                <Button icon=\\\"pi pi-trash\\\" className=\\\"p-button-rounded p-button-warning\\\" onClick={() => confirmDeleteProduct(rowData)} />\\n            </React.Fragment>\\n        );\\n    }\\n\\n    const header = (\\n        <div className=\\\"table-header\\\">\\n            <h5 className=\\\"p-m-0\\\">Manage Products</h5>\\n            <span className=\\\"p-input-icon-left\\\">\\n                <i className=\\\"pi pi-search\\\" />\\n                <InputText type=\\\"search\\\" onInput={(e) => setGlobalFilter(e.target.value)} placeholder=\\\"Search...\\\" />\\n            </span>\\n        </div>\\n    );\\n    const productDialogFooter = (\\n        <React.Fragment>\\n            <Button label=\\\"Cancel\\\" icon=\\\"pi pi-times\\\" className=\\\"p-button-text\\\" onClick={hideDialog} />\\n            <Button label=\\\"Save\\\" icon=\\\"pi pi-check\\\" className=\\\"p-button-text\\\" onClick={saveProduct} />\\n        </React.Fragment>\\n    );\\n    const deleteProductDialogFooter = (\\n        <React.Fragment>\\n            <Button label=\\\"No\\\" icon=\\\"pi pi-times\\\" className=\\\"p-button-text\\\" onClick={hideDeleteProductDialog} />\\n            <Button label=\\\"Yes\\\" icon=\\\"pi pi-check\\\" className=\\\"p-button-text\\\" onClick={deleteProduct} />\\n        </React.Fragment>\\n    );\\n    const deleteProductsDialogFooter = (\\n        <React.Fragment>\\n            <Button label=\\\"No\\\" icon=\\\"pi pi-times\\\" className=\\\"p-button-text\\\" onClick={hideDeleteProductsDialog} />\\n            <Button label=\\\"Yes\\\" icon=\\\"pi pi-check\\\" className=\\\"p-button-text\\\" onClick={deleteSelectedProducts} />\\n        </React.Fragment>\\n    );\\n\\n    return (\\n        <div className=\\\"datatable-crud-demo\\\">\\n            <Toast ref={toast} />\\n\\n            <div className=\\\"card\\\">\\n                <Toolbar className=\\\"p-mb-4\\\" left={leftToolbarTemplate} right={rightToolbarTemplate}></Toolbar>\\n\\n                <DataTable ref={dt} value={products} selection={selectedProducts} onSelectionChange={(e) => setSelectedProducts(e.value)}\\n                    dataKey=\\\"id\\\" paginator rows={10} rowsPerPageOptions={[5, 10, 25]}\\n                    paginatorTemplate=\\\"FirstPageLink PrevPageLink PageLinks NextPageLink LastPageLink CurrentPageReport RowsPerPageDropdown\\\"\\n                    currentPageReportTemplate=\\\"Showing {first} to {last} of {totalRecords} products\\\"\\n                    globalFilter={globalFilter}\\n                    header={header}>\\n\\n                    <Column selectionMode=\\\"multiple\\\" headerStyle={{ width: '3rem' }}></Column>\\n                    <Column field=\\\"code\\\" header=\\\"Code\\\" sortable></Column>\\n                    <Column field=\\\"name\\\" header=\\\"Name\\\" sortable></Column>\\n                    <Column header=\\\"Image\\\" body={imageBodyTemplate}></Column>\\n                    <Column field=\\\"price\\\" header=\\\"Price\\\" body={priceBodyTemplate} sortable></Column>\\n                    <Column field=\\\"category\\\" header=\\\"Category\\\" sortable></Column>\\n                    <Column field=\\\"rating\\\" header=\\\"Reviews\\\" body={ratingBodyTemplate} sortable></Column>\\n                    <Column field=\\\"inventoryStatus\\\" header=\\\"Status\\\" body={statusBodyTemplate} sortable></Column>\\n                    <Column body={actionBodyTemplate}></Column>\\n                </DataTable>\\n            </div>\\n\\n            <Dialog visible={productDialog} style={{ width: '450px' }} header=\\\"Product Details\\\" modal className=\\\"p-fluid\\\" footer={productDialogFooter} onHide={hideDialog}>\\n                {product.image && <img src={`showcase/demo/images/product/${product.image}`} onError={(e) => e.target.src='https://www.primefaces.org/wp-content/uploads/2020/05/placeholder.png'} alt={product.image} className=\\\"product-image\\\" />}\\n                <div className=\\\"p-field\\\">\\n                    <label htmlFor=\\\"name\\\">Name</label>\\n                    <InputText id=\\\"name\\\" value={product.name} onChange={(e) => onInputChange(e, 'name')} required autoFocus className={classNames({ 'p-invalid': submitted && !product.name })} />\\n                    {submitted && !product.name && <small className=\\\"p-error\\\">Name is required.</small>}\\n                </div>\\n                <div className=\\\"p-field\\\">\\n                    <label htmlFor=\\\"description\\\">Description</label>\\n                    <InputTextarea id=\\\"description\\\" value={product.description} onChange={(e) => onInputChange(e, 'description')} required rows={3} cols={20} />\\n                </div>\\n\\n                <div className=\\\"p-field\\\">\\n                    <label className=\\\"p-mb-3\\\">Category</label>\\n                    <div className=\\\"p-formgrid p-grid\\\">\\n                        <div className=\\\"p-field-radiobutton p-col-6\\\">\\n                            <RadioButton inputId=\\\"category1\\\" name=\\\"category\\\" value=\\\"Accessories\\\" onChange={onCategoryChange} checked={product.category === 'Accessories'} />\\n                            <label htmlFor=\\\"category1\\\">Accessories</label>\\n                        </div>\\n                        <div className=\\\"p-field-radiobutton p-col-6\\\">\\n                            <RadioButton inputId=\\\"category2\\\" name=\\\"category\\\" value=\\\"Clothing\\\" onChange={onCategoryChange} checked={product.category === 'Clothing'} />\\n                            <label htmlFor=\\\"category2\\\">Clothing</label>\\n                        </div>\\n                        <div className=\\\"p-field-radiobutton p-col-6\\\">\\n                            <RadioButton inputId=\\\"category3\\\" name=\\\"category\\\" value=\\\"Electronics\\\" onChange={onCategoryChange} checked={product.category === 'Electronics'} />\\n                            <label htmlFor=\\\"category3\\\">Electronics</label>\\n                        </div>\\n                        <div className=\\\"p-field-radiobutton p-col-6\\\">\\n                            <RadioButton inputId=\\\"category4\\\" name=\\\"category\\\" value=\\\"Fitness\\\" onChange={onCategoryChange} checked={product.category === 'Fitness'} />\\n                            <label htmlFor=\\\"category4\\\">Fitness</label>\\n                        </div>\\n                    </div>\\n                </div>\\n\\n                <div className=\\\"p-formgrid p-grid\\\">\\n                    <div className=\\\"p-field p-col\\\">\\n                        <label htmlFor=\\\"price\\\">Price</label>\\n                        <InputNumber id=\\\"price\\\" value={product.price} onValueChange={(e) => onInputNumberChange(e, 'price')} mode=\\\"currency\\\" currency=\\\"USD\\\" locale=\\\"en-US\\\" />\\n                    </div>\\n                    <div className=\\\"p-field p-col\\\">\\n                        <label htmlFor=\\\"quantity\\\">Quantity</label>\\n                        <InputNumber id=\\\"quantity\\\" value={product.quantity} onValueChange={(e) => onInputNumberChange(e, 'quantity')} integeronly />\\n                    </div>\\n                </div>\\n            </Dialog>\\n\\n            <Dialog visible={deleteProductDialog} style={{ width: '450px' }} header=\\\"Confirm\\\" modal footer={deleteProductDialogFooter} onHide={hideDeleteProductDialog}>\\n                <div className=\\\"confirmation-content\\\">\\n                    <i className=\\\"pi pi-exclamation-triangle p-mr-3\\\" style={{ fontSize: '2rem'}} />\\n                    {product && <span>Are you sure you want to delete <b>{product.name}</b>?</span>}\\n                </div>\\n            </Dialog>\\n\\n            <Dialog visible={deleteProductsDialog} style={{ width: '450px' }} header=\\\"Confirm\\\" modal footer={deleteProductsDialogFooter} onHide={hideDeleteProductsDialog}>\\n                <div className=\\\"confirmation-content\\\">\\n                    <i className=\\\"pi pi-exclamation-triangle p-mr-3\\\" style={{ fontSize: '2rem'}} />\\n                    {product && <span>Are you sure you want to delete the selected products?</span>}\\n                </div>\\n            </Dialog>\\n        </div>\\n    );\\n}\\n                \"\n      },\n      'ts': {\n        tabName: 'TS Source',\n        content: \"\\nimport React, { useState, useEffect, useRef } from 'react';\\nimport classNames from 'classnames';\\nimport { DataTable } from 'primereact/datatable';\\nimport { Column } from 'primereact/column';\\nimport ProductService from '../service/ProductService';\\nimport { Toast } from 'primereact/toast';\\nimport { Button } from 'primereact/button';\\nimport { FileUpload } from 'primereact/fileupload';\\nimport { Rating } from 'primereact/rating';\\nimport { Toolbar } from 'primereact/toolbar';\\nimport { InputTextarea } from 'primereact/inputtextarea';\\nimport { RadioButton } from 'primereact/radiobutton';\\nimport { InputNumber } from 'primereact/inputnumber';\\nimport { Dialog } from 'primereact/dialog';\\nimport { InputText } from 'primereact/inputtext';\\nimport './DataTableDemo.css';\\n\\nconst DataTableCrudDemo = () => {\\n\\n    let emptyProduct = {\\n        id: null,\\n        name: '',\\n        image: null,\\n        description: '',\\n        category: null,\\n        price: 0,\\n        quantity: 0,\\n        rating: 0,\\n        inventoryStatus: 'INSTOCK'\\n    };\\n\\n    const [products, setProducts] = useState(null);\\n    const [productDialog, setProductDialog] = useState(false);\\n    const [deleteProductDialog, setDeleteProductDialog] = useState(false);\\n    const [deleteProductsDialog, setDeleteProductsDialog] = useState(false);\\n    const [product, setProduct] = useState(emptyProduct);\\n    const [selectedProducts, setSelectedProducts] = useState(null);\\n    const [submitted, setSubmitted] = useState(false);\\n    const [globalFilter, setGlobalFilter] = useState(null);\\n    const toast = useRef(null);\\n    const dt = useRef(null);\\n    const productService = new ProductService();\\n\\n    useEffect(() => {\\n        productService.getProducts().then(data => setProducts(data));\\n    }, []); // eslint-disable-line react-hooks/exhaustive-deps\\n\\n    const formatCurrency = (value) => {\\n        return value.toLocaleString('en-US', { style: 'currency', currency: 'USD' });\\n    }\\n\\n    const openNew = () => {\\n        setProduct(emptyProduct);\\n        setSubmitted(false);\\n        setProductDialog(true);\\n    }\\n\\n    const hideDialog = () => {\\n        setSubmitted(false);\\n        setProductDialog(false);\\n    }\\n\\n    const hideDeleteProductDialog = () => {\\n        setDeleteProductDialog(false);\\n    }\\n\\n    const hideDeleteProductsDialog = () => {\\n        setDeleteProductsDialog(false);\\n    }\\n\\n    const saveProduct = () => {\\n        setSubmitted(true);\\n\\n        if (product.name.trim()) {\\n            let _products = [...products];\\n            let _product = {...product};\\n            if (product.id) {\\n                const index = findIndexById(product.id);\\n\\n                _products[index] = _product;\\n                toast.current.show({ severity: 'success', summary: 'Successful', detail: 'Product Updated', life: 3000 });\\n            }\\n            else {\\n                _product.id = createId();\\n                _product.image = 'product-placeholder.svg';\\n                _products.push(_product);\\n                toast.current.show({ severity: 'success', summary: 'Successful', detail: 'Product Created', life: 3000 });\\n            }\\n\\n            setProducts(_products);\\n            setProductDialog(false);\\n            setProduct(emptyProduct);\\n        }\\n    }\\n\\n    const editProduct = (product) => {\\n        setProduct({...product});\\n        setProductDialog(true);\\n    }\\n\\n    const confirmDeleteProduct = (product) => {\\n        setProduct(product);\\n        setDeleteProductDialog(true);\\n    }\\n\\n    const deleteProduct = () => {\\n        let _products = products.filter(val => val.id !== product.id);\\n        setProduct(_products);\\n        setDeleteProductDialog(false);\\n        setProduct(emptyProduct);\\n        toast.current.show({ severity: 'success', summary: 'Successful', detail: 'Product Deleted', life: 3000 });\\n    }\\n\\n    const findIndexById = (id) => {\\n        let index = -1;\\n        for (let i = 0; i < products.length; i++) {\\n            if (products[i].id === id) {\\n                index = i;\\n                break;\\n            }\\n        }\\n\\n        return index;\\n    }\\n\\n    const createId = () => {\\n        let id = '';\\n        let chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\\n        for (let i = 0; i < 5; i++) {\\n            id += chars.charAt(Math.floor(Math.random() * chars.length));\\n        }\\n        return id;\\n    }\\n\\n    const exportCSV = () => {\\n        dt.current.exportCSV();\\n    }\\n\\n    const confirmDeleteSelected = () => {\\n        setDeleteProductsDialog(true);\\n    }\\n\\n    const deleteSelectedProducts = () => {\\n        let _products = products.filter(val => !selectedProducts.includes(val));\\n        setProducts(_products);\\n        setDeleteProductsDialog(false);\\n        setSelectedProducts(null);\\n        toast.current.show({ severity: 'success', summary: 'Successful', detail: 'Products Deleted', life: 3000 });\\n    }\\n\\n    const onCategoryChange = (e) => {\\n        let _product = {...product};\\n        _product['category'] = e.value;\\n        setProduct(_product);\\n    }\\n\\n    const onInputChange = (e, name) => {\\n        const val = (e.target && e.target.value) || '';\\n        let _product = {...product};\\n        _product[`${name}`] = val;\\n\\n        setProduct(_product);\\n    }\\n\\n    const onInputNumberChange = (e, name) => {\\n        const val = e.value || 0;\\n        let _product = {...product};\\n        _product[`${name}`] = val;\\n\\n        setProduct(_product);\\n    }\\n\\n    const leftToolbarTemplate = () => {\\n        return (\\n            <React.Fragment>\\n                <Button label=\\\"New\\\" icon=\\\"pi pi-plus\\\" className=\\\"p-button-success p-mr-2\\\" onClick={openNew} />\\n                <Button label=\\\"Delete\\\" icon=\\\"pi pi-trash\\\" className=\\\"p-button-danger\\\" onClick={confirmDeleteSelected} disabled={!selectedProducts || !selectedProducts.length} />\\n            </React.Fragment>\\n        )\\n    }\\n\\n    const rightToolbarTemplate = () => {\\n        return (\\n            <React.Fragment>\\n                <FileUpload mode=\\\"basic\\\" accept=\\\"image/*\\\" maxFileSize={1000000} label=\\\"Import\\\" chooseLabel=\\\"Import\\\" className=\\\"p-mr-2 p-d-inline-block\\\" />\\n                <Button label=\\\"Export\\\" icon=\\\"pi pi-upload\\\" className=\\\"p-button-help\\\" onClick={exportCSV} />\\n            </React.Fragment>\\n        )\\n    }\\n\\n    const imageBodyTemplate = (rowData) => {\\n        return <img src={`showcase/demo/images/product/${rowData.image}`} onError={(e) => e.target.src='https://www.primefaces.org/wp-content/uploads/2020/05/placeholder.png'} alt={rowData.image} className=\\\"product-image\\\" />\\n    }\\n\\n    const priceBodyTemplate = (rowData) => {\\n        return formatCurrency(rowData.price);\\n    }\\n\\n    const ratingBodyTemplate = (rowData) => {\\n        return <Rating value={rowData.rating} readOnly cancel={false} />;\\n    }\\n\\n    const statusBodyTemplate = (rowData) => {\\n        return <span className={`product-badge status-${rowData.inventoryStatus.toLowerCase()}`}>{rowData.inventoryStatus}</span>;\\n    }\\n\\n    const actionBodyTemplate = (rowData) => {\\n        return (\\n            <React.Fragment>\\n                <Button icon=\\\"pi pi-pencil\\\" className=\\\"p-button-rounded p-button-success p-mr-2\\\" onClick={() => editProduct(rowData)} />\\n                <Button icon=\\\"pi pi-trash\\\" className=\\\"p-button-rounded p-button-warning\\\" onClick={() => confirmDeleteProduct(rowData)} />\\n            </React.Fragment>\\n        );\\n    }\\n\\n    const header = (\\n        <div className=\\\"table-header\\\">\\n            <h5 className=\\\"p-m-0\\\">Manage Products</h5>\\n            <span className=\\\"p-input-icon-left\\\">\\n                <i className=\\\"pi pi-search\\\" />\\n                <InputText type=\\\"search\\\" onInput={(e) => setGlobalFilter(e.target.value)} placeholder=\\\"Search...\\\" />\\n            </span>\\n        </div>\\n    );\\n    const productDialogFooter = (\\n        <React.Fragment>\\n            <Button label=\\\"Cancel\\\" icon=\\\"pi pi-times\\\" className=\\\"p-button-text\\\" onClick={hideDialog} />\\n            <Button label=\\\"Save\\\" icon=\\\"pi pi-check\\\" className=\\\"p-button-text\\\" onClick={saveProduct} />\\n        </React.Fragment>\\n    );\\n    const deleteProductDialogFooter = (\\n        <React.Fragment>\\n            <Button label=\\\"No\\\" icon=\\\"pi pi-times\\\" className=\\\"p-button-text\\\" onClick={hideDeleteProductDialog} />\\n            <Button label=\\\"Yes\\\" icon=\\\"pi pi-check\\\" className=\\\"p-button-text\\\" onClick={deleteProduct} />\\n        </React.Fragment>\\n    );\\n    const deleteProductsDialogFooter = (\\n        <React.Fragment>\\n            <Button label=\\\"No\\\" icon=\\\"pi pi-times\\\" className=\\\"p-button-text\\\" onClick={hideDeleteProductsDialog} />\\n            <Button label=\\\"Yes\\\" icon=\\\"pi pi-check\\\" className=\\\"p-button-text\\\" onClick={deleteSelectedProducts} />\\n        </React.Fragment>\\n    );\\n\\n    return (\\n        <div className=\\\"datatable-crud-demo\\\">\\n            <Toast ref={toast} />\\n\\n            <div className=\\\"card\\\">\\n                <Toolbar className=\\\"p-mb-4\\\" left={leftToolbarTemplate} right={rightToolbarTemplate}></Toolbar>\\n\\n                <DataTable ref={dt} value={products} selection={selectedProducts} onSelectionChange={(e) => setSelectedProducts(e.value)}\\n                    dataKey=\\\"id\\\" paginator rows={10} rowsPerPageOptions={[5, 10, 25]}\\n                    paginatorTemplate=\\\"FirstPageLink PrevPageLink PageLinks NextPageLink LastPageLink CurrentPageReport RowsPerPageDropdown\\\"\\n                    currentPageReportTemplate=\\\"Showing {first} to {last} of {totalRecords} products\\\"\\n                    globalFilter={globalFilter}\\n                    header={header}>\\n\\n                    <Column selectionMode=\\\"multiple\\\" headerStyle={{ width: '3rem' }}></Column>\\n                    <Column field=\\\"code\\\" header=\\\"Code\\\" sortable></Column>\\n                    <Column field=\\\"name\\\" header=\\\"Name\\\" sortable></Column>\\n                    <Column header=\\\"Image\\\" body={imageBodyTemplate}></Column>\\n                    <Column field=\\\"price\\\" header=\\\"Price\\\" body={priceBodyTemplate} sortable></Column>\\n                    <Column field=\\\"category\\\" header=\\\"Category\\\" sortable></Column>\\n                    <Column field=\\\"rating\\\" header=\\\"Reviews\\\" body={ratingBodyTemplate} sortable></Column>\\n                    <Column field=\\\"inventoryStatus\\\" header=\\\"Status\\\" body={statusBodyTemplate} sortable></Column>\\n                    <Column body={actionBodyTemplate}></Column>\\n                </DataTable>\\n            </div>\\n\\n            <Dialog visible={productDialog} style={{ width: '450px' }} header=\\\"Product Details\\\" modal className=\\\"p-fluid\\\" footer={productDialogFooter} onHide={hideDialog}>\\n                {product.image && <img src={`showcase/demo/images/product/${product.image}`} onError={(e) => e.target.src='https://www.primefaces.org/wp-content/uploads/2020/05/placeholder.png'} alt={product.image} className=\\\"product-image\\\" />}\\n                <div className=\\\"p-field\\\">\\n                    <label htmlFor=\\\"name\\\">Name</label>\\n                    <InputText id=\\\"name\\\" value={product.name} onChange={(e) => onInputChange(e, 'name')} required autoFocus className={classNames({ 'p-invalid': submitted && !product.name })} />\\n                    {submitted && !product.name && <small className=\\\"p-error\\\">Name is required.</small>}\\n                </div>\\n                <div className=\\\"p-field\\\">\\n                    <label htmlFor=\\\"description\\\">Description</label>\\n                    <InputTextarea id=\\\"description\\\" value={product.description} onChange={(e) => onInputChange(e, 'description')} required rows={3} cols={20} />\\n                </div>\\n\\n                <div className=\\\"p-field\\\">\\n                    <label className=\\\"p-mb-3\\\">Category</label>\\n                    <div className=\\\"p-formgrid p-grid\\\">\\n                        <div className=\\\"p-field-radiobutton p-col-6\\\">\\n                            <RadioButton inputId=\\\"category1\\\" name=\\\"category\\\" value=\\\"Accessories\\\" onChange={onCategoryChange} checked={product.category === 'Accessories'} />\\n                            <label htmlFor=\\\"category1\\\">Accessories</label>\\n                        </div>\\n                        <div className=\\\"p-field-radiobutton p-col-6\\\">\\n                            <RadioButton inputId=\\\"category2\\\" name=\\\"category\\\" value=\\\"Clothing\\\" onChange={onCategoryChange} checked={product.category === 'Clothing'} />\\n                            <label htmlFor=\\\"category2\\\">Clothing</label>\\n                        </div>\\n                        <div className=\\\"p-field-radiobutton p-col-6\\\">\\n                            <RadioButton inputId=\\\"category3\\\" name=\\\"category\\\" value=\\\"Electronics\\\" onChange={onCategoryChange} checked={product.category === 'Electronics'} />\\n                            <label htmlFor=\\\"category3\\\">Electronics</label>\\n                        </div>\\n                        <div className=\\\"p-field-radiobutton p-col-6\\\">\\n                            <RadioButton inputId=\\\"category4\\\" name=\\\"category\\\" value=\\\"Fitness\\\" onChange={onCategoryChange} checked={product.category === 'Fitness'} />\\n                            <label htmlFor=\\\"category4\\\">Fitness</label>\\n                        </div>\\n                    </div>\\n                </div>\\n\\n                <div className=\\\"p-formgrid p-grid\\\">\\n                    <div className=\\\"p-field p-col\\\">\\n                        <label htmlFor=\\\"price\\\">Price</label>\\n                        <InputNumber id=\\\"price\\\" value={product.price} onValueChange={(e) => onInputNumberChange(e, 'price')} mode=\\\"currency\\\" currency=\\\"USD\\\" locale=\\\"en-US\\\" />\\n                    </div>\\n                    <div className=\\\"p-field p-col\\\">\\n                        <label htmlFor=\\\"quantity\\\">Quantity</label>\\n                        <InputNumber id=\\\"quantity\\\" value={product.quantity} onValueChange={(e) => onInputNumberChange(e, 'quantity')} integeronly />\\n                    </div>\\n                </div>\\n            </Dialog>\\n\\n            <Dialog visible={deleteProductDialog} style={{ width: '450px' }} header=\\\"Confirm\\\" modal footer={deleteProductDialogFooter} onHide={hideDeleteProductDialog}>\\n                <div className=\\\"confirmation-content\\\">\\n                    <i className=\\\"pi pi-exclamation-triangle p-mr-3\\\" style={{ fontSize: '2rem'}} />\\n                    {product && <span>Are you sure you want to delete <b>{product.name}</b>?</span>}\\n                </div>\\n            </Dialog>\\n\\n            <Dialog visible={deleteProductsDialog} style={{ width: '450px' }} header=\\\"Confirm\\\" modal footer={deleteProductsDialogFooter} onHide={hideDeleteProductsDialog}>\\n                <div className=\\\"confirmation-content\\\">\\n                    <i className=\\\"pi pi-exclamation-triangle p-mr-3\\\" style={{ fontSize: '2rem'}} />\\n                    {product && <span>Are you sure you want to delete the selected products?</span>}\\n                </div>\\n            </Dialog>\\n        </div>\\n    );\\n}\\n                \"\n      }\n    };\n    _this7.extFiles = {\n      'src/demo/DataTableDemo.css': {\n        content: \"\\n.datatable-crud-demo .table-header {\\n    display: flex;\\n    align-items: center;\\n    justify-content: space-between;\\n}\\n\\n.datatable-crud-demo .product-image {\\n    width: 100px;\\n    box-shadow: 0 3px 6px rgba(0, 0, 0, 0.16), 0 3px 6px rgba(0, 0, 0, 0.23);\\n}\\n\\n.datatable-crud-demo .p-dialog .product-image {\\n    width: 150px;\\n    margin: 0 auto 2rem auto;\\n    display: block;\\n}\\n\\n.datatable-crud-demo .confirmation-content {\\n    display: flex;\\n    align-items: center;\\n    justify-content: center;\\n}\\n                \"\n      }\n    };\n    return _this7;\n  }\n\n  _createClass(DataTableCrudDoc, [{\n    key: \"shouldComponentUpdate\",\n    value: function shouldComponentUpdate() {\n      return false;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"content-section documentation\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1492,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(TabView, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1493,\n          columnNumber: 17\n        }\n      }, useLiveEditorTabs({\n        name: 'DataTableCrudDemo',\n        sources: this.sources,\n        service: 'ProductService',\n        data: 'products',\n        extFiles: this.extFiles\n      })));\n    }\n  }]);\n\n  return DataTableCrudDoc;\n}(Component);","map":{"version":3,"sources":["C:/Users/zura.ph/WebstormProjects/zloto/src/showcase/datatable/DataTableCrudDemo.js"],"names":["React","Component","classNames","DataTable","Column","ProductService","TabView","Toast","Button","FileUpload","Rating","Toolbar","InputTextarea","RadioButton","InputNumber","Dialog","InputText","useLiveEditorTabs","AppInlineHeader","DataTableCrudDemo","props","emptyProduct","id","name","image","description","category","price","quantity","rating","inventoryStatus","state","products","productDialog","deleteProductDialog","deleteProductsDialog","product","selectedProducts","submitted","globalFilter","productService","leftToolbarTemplate","bind","rightToolbarTemplate","imageBodyTemplate","priceBodyTemplate","ratingBodyTemplate","statusBodyTemplate","actionBodyTemplate","openNew","hideDialog","saveProduct","editProduct","confirmDeleteProduct","deleteProduct","exportCSV","confirmDeleteSelected","deleteSelectedProducts","onCategoryChange","onInputChange","onInputNumberChange","hideDeleteProductDialog","hideDeleteProductsDialog","getProducts","then","data","setState","value","toLocaleString","style","currency","trim","index","findIndexById","toast","show","severity","summary","detail","life","createId","push","filter","val","i","length","chars","charAt","Math","floor","random","dt","includes","e","target","rowData","src","formatCurrency","toLowerCase","header","productDialogFooter","deleteProductDialogFooter","deleteProductsDialogFooter","el","width","fontSize","DataTableCrudDoc","sources","tabName","content","extFiles","service"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport classNames from 'classnames';\r\nimport { DataTable } from '../../components/datatable/DataTable';\r\nimport { Column } from '../../components/column/Column';\r\nimport ProductService from '../service/ProductService';\r\nimport { TabView } from '../../components/tabview/TabView';\r\nimport { Toast } from '../../components/toast/Toast';\r\nimport { Button } from '../../components/button/Button';\r\nimport { FileUpload } from '../../components/fileupload/FileUpload';\r\nimport { Rating } from '../../components/rating/Rating';\r\nimport { Toolbar } from '../../components/toolbar/Toolbar';\r\nimport { InputTextarea } from '../../components/inputtextarea/InputTextarea';\r\nimport { RadioButton } from '../../components/radiobutton/RadioButton';\r\nimport { InputNumber } from '../../components/inputnumber/InputNumber';\r\nimport { Dialog } from '../../components/dialog/Dialog';\r\nimport { InputText } from '../../components/inputtext/InputText';\r\nimport { useLiveEditorTabs }from '../liveeditor/LiveEditor';\r\nimport { AppInlineHeader } from '../../AppInlineHeader';\r\nimport './DataTableDemo.scss';\r\n\r\nexport class DataTableCrudDemo extends Component {\r\n\r\n    emptyProduct = {\r\n        id: null,\r\n        name: '',\r\n        image: null,\r\n        description: '',\r\n        category: null,\r\n        price: 0,\r\n        quantity: 0,\r\n        rating: 0,\r\n        inventoryStatus: 'INSTOCK'\r\n    };\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            products: null,\r\n            productDialog: false,\r\n            deleteProductDialog: false,\r\n            deleteProductsDialog: false,\r\n            product: this.emptyProduct,\r\n            selectedProducts: null,\r\n            submitted: false,\r\n            globalFilter: null\r\n        };\r\n\r\n        this.productService = new ProductService();\r\n        this.leftToolbarTemplate = this.leftToolbarTemplate.bind(this);\r\n        this.rightToolbarTemplate = this.rightToolbarTemplate.bind(this);\r\n        this.imageBodyTemplate = this.imageBodyTemplate.bind(this);\r\n        this.priceBodyTemplate = this.priceBodyTemplate.bind(this);\r\n        this.ratingBodyTemplate = this.ratingBodyTemplate.bind(this);\r\n        this.statusBodyTemplate = this.statusBodyTemplate.bind(this);\r\n        this.actionBodyTemplate = this.actionBodyTemplate.bind(this);\r\n\r\n        this.openNew = this.openNew.bind(this);\r\n        this.hideDialog = this.hideDialog.bind(this);\r\n        this.saveProduct = this.saveProduct.bind(this);\r\n        this.editProduct = this.editProduct.bind(this);\r\n        this.confirmDeleteProduct = this.confirmDeleteProduct.bind(this);\r\n        this.deleteProduct = this.deleteProduct.bind(this);\r\n        this.exportCSV = this.exportCSV.bind(this);\r\n        this.confirmDeleteSelected = this.confirmDeleteSelected.bind(this);\r\n        this.deleteSelectedProducts = this.deleteSelectedProducts.bind(this);\r\n        this.onCategoryChange = this.onCategoryChange.bind(this);\r\n        this.onInputChange = this.onInputChange.bind(this);\r\n        this.onInputNumberChange = this.onInputNumberChange.bind(this);\r\n        this.hideDeleteProductDialog = this.hideDeleteProductDialog.bind(this);\r\n        this.hideDeleteProductsDialog = this.hideDeleteProductsDialog.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.productService.getProducts().then(data => this.setState({ products: data }));\r\n    }\r\n\r\n    formatCurrency(value) {\r\n        return value.toLocaleString('en-US', { style: 'currency', currency: 'USD' });\r\n    }\r\n\r\n    openNew() {\r\n        this.setState({\r\n            product: this.emptyProduct,\r\n            submitted: false,\r\n            productDialog: true\r\n        });\r\n    }\r\n\r\n    hideDialog() {\r\n        this.setState({\r\n            submitted: false,\r\n            productDialog: false\r\n        });\r\n    }\r\n\r\n    hideDeleteProductDialog() {\r\n        this.setState({ deleteProductDialog: false });\r\n    }\r\n\r\n    hideDeleteProductsDialog() {\r\n        this.setState({ deleteProductsDialog: false });\r\n    }\r\n\r\n    saveProduct() {\r\n        let state = { submitted: true };\r\n\r\n        if (this.state.product.name.trim()) {\r\n            let products = [...this.state.products];\r\n            let product = {...this.state.product};\r\n            if (this.state.product.id) {\r\n                const index = this.findIndexById(this.state.product.id);\r\n\r\n                products[index] = product;\r\n                this.toast.show({ severity: 'success', summary: 'Successful', detail: 'Product Updated', life: 3000 });\r\n            }\r\n            else {\r\n                product.id = this.createId();\r\n                product.image = 'product-placeholder.svg';\r\n                products.push(product);\r\n                this.toast.show({ severity: 'success', summary: 'Successful', detail: 'Product Created', life: 3000 });\r\n            }\r\n\r\n            state = {\r\n                ...state,\r\n                products,\r\n                productDialog: false,\r\n                product: this.emptyProduct\r\n            };\r\n        }\r\n\r\n        this.setState(state);\r\n    }\r\n\r\n    editProduct(product) {\r\n        this.setState({\r\n            product: { ...product },\r\n            productDialog: true\r\n        });\r\n    }\r\n\r\n    confirmDeleteProduct(product) {\r\n        this.setState({\r\n            product,\r\n            deleteProductDialog: true\r\n        });\r\n    }\r\n\r\n    deleteProduct() {\r\n        let products = this.state.products.filter(val => val.id !== this.state.product.id);\r\n        this.setState({\r\n            products,\r\n            deleteProductDialog: false,\r\n            product: this.emptyProduct\r\n        });\r\n        this.toast.show({ severity: 'success', summary: 'Successful', detail: 'Product Deleted', life: 3000 });\r\n    }\r\n\r\n    findIndexById(id) {\r\n        let index = -1;\r\n        for (let i = 0; i < this.state.products.length; i++) {\r\n            if (this.state.products[i].id === id) {\r\n                index = i;\r\n                break;\r\n            }\r\n        }\r\n\r\n        return index;\r\n    }\r\n\r\n    createId() {\r\n        let id = '';\r\n        let chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r\n        for (let i = 0; i < 5; i++) {\r\n            id += chars.charAt(Math.floor(Math.random() * chars.length));\r\n        }\r\n        return id;\r\n    }\r\n\r\n    exportCSV() {\r\n        this.dt.exportCSV();\r\n    }\r\n\r\n    confirmDeleteSelected() {\r\n        this.setState({ deleteProductsDialog: true });\r\n    }\r\n\r\n    deleteSelectedProducts() {\r\n        let products = this.state.products.filter(val => !this.state.selectedProducts.includes(val));\r\n        this.setState({\r\n            products,\r\n            deleteProductsDialog: false,\r\n            selectedProducts: null\r\n        });\r\n        this.toast.show({ severity: 'success', summary: 'Successful', detail: 'Products Deleted', life: 3000 });\r\n    }\r\n\r\n    onCategoryChange(e) {\r\n        let product = {...this.state.product};\r\n        product['category'] = e.value;\r\n        this.setState({ product });\r\n    }\r\n\r\n    onInputChange(e, name) {\r\n        const val = (e.target && e.target.value) || '';\r\n        let product = {...this.state.product};\r\n        product[`${name}`] = val;\r\n\r\n        this.setState({ product });\r\n    }\r\n\r\n    onInputNumberChange(e, name) {\r\n        const val = e.value || 0;\r\n        let product = {...this.state.product};\r\n        product[`${name}`] = val;\r\n\r\n        this.setState({ product });\r\n    }\r\n\r\n    leftToolbarTemplate() {\r\n        return (\r\n            <React.Fragment>\r\n                <Button label=\"New\" icon=\"pi pi-plus\" className=\"p-button-success p-mr-2\" onClick={this.openNew} />\r\n                <Button label=\"Delete\" icon=\"pi pi-trash\" className=\"p-button-danger\" onClick={this.confirmDeleteSelected} disabled={!this.state.selectedProducts || !this.state.selectedProducts.length} />\r\n            </React.Fragment>\r\n        )\r\n    }\r\n\r\n    rightToolbarTemplate() {\r\n        return (\r\n            <React.Fragment>\r\n                <FileUpload mode=\"basic\" accept=\"image/*\" maxFileSize={1000000} label=\"Import\" chooseLabel=\"Import\" className=\"p-mr-2 p-d-inline-block\" />\r\n                <Button label=\"Export\" icon=\"pi pi-upload\" className=\"p-button-help\" onClick={this.exportCSV} />\r\n            </React.Fragment>\r\n        )\r\n    }\r\n\r\n    imageBodyTemplate(rowData) {\r\n        return <img src={`showcase/demo/images/product/${rowData.image}`} onError={(e) => e.target.src='https://www.primefaces.org/wp-content/uploads/2020/05/placeholder.png'} alt={rowData.image} className=\"product-image\" />\r\n    }\r\n\r\n    priceBodyTemplate(rowData) {\r\n        return this.formatCurrency(rowData.price);\r\n    }\r\n\r\n    ratingBodyTemplate(rowData) {\r\n        return <Rating value={rowData.rating} readOnly cancel={false} />;\r\n    }\r\n\r\n    statusBodyTemplate(rowData) {\r\n        return <span className={`product-badge status-${rowData.inventoryStatus.toLowerCase()}`}>{rowData.inventoryStatus}</span>;\r\n    }\r\n\r\n    actionBodyTemplate(rowData) {\r\n        return (\r\n            <React.Fragment>\r\n                <Button icon=\"pi pi-pencil\" className=\"p-button-rounded p-button-success p-mr-2\" onClick={() => this.editProduct(rowData)} />\r\n                <Button icon=\"pi pi-trash\" className=\"p-button-rounded p-button-warning\" onClick={() => this.confirmDeleteProduct(rowData)} />\r\n            </React.Fragment>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        const header = (\r\n            <div className=\"table-header\">\r\n                <h5 className=\"p-m-0\">Manage Products</h5>\r\n                <span className=\"p-input-icon-left\">\r\n                    <i className=\"pi pi-search\" />\r\n                    <InputText type=\"search\" onInput={(e) => this.setState({ globalFilter: e.target.value })} placeholder=\"Search...\" />\r\n                </span>\r\n            </div>\r\n        );\r\n        const productDialogFooter = (\r\n            <React.Fragment>\r\n                <Button label=\"Cancel\" icon=\"pi pi-times\" className=\"p-button-text\" onClick={this.hideDialog} />\r\n                <Button label=\"Save\" icon=\"pi pi-check\" className=\"p-button-text\" onClick={this.saveProduct} />\r\n            </React.Fragment>\r\n        );\r\n        const deleteProductDialogFooter = (\r\n            <React.Fragment>\r\n                <Button label=\"No\" icon=\"pi pi-times\" className=\"p-button-text\" onClick={this.hideDeleteProductDialog} />\r\n                <Button label=\"Yes\" icon=\"pi pi-check\" className=\"p-button-text\" onClick={this.deleteProduct} />\r\n            </React.Fragment>\r\n        );\r\n        const deleteProductsDialogFooter = (\r\n            <React.Fragment>\r\n                <Button label=\"No\" icon=\"pi pi-times\" className=\"p-button-text\" onClick={this.hideDeleteProductsDialog} />\r\n                <Button label=\"Yes\" icon=\"pi pi-check\" className=\"p-button-text\" onClick={this.deleteSelectedProducts} />\r\n            </React.Fragment>\r\n        );\r\n\r\n        return (\r\n            <div>\r\n                <div className=\"content-section introduction\">\r\n                    <AppInlineHeader changelogText=\"dataTable\">\r\n                        <h1>DataTable <span>Crud</span></h1>\r\n                        <p>This samples demonstrates a CRUD implementation using various PrimeReact components.</p>\r\n                    </AppInlineHeader>\r\n                </div>\r\n\r\n                <div className=\"content-section implementation datatable-crud-demo\">\r\n                    <Toast ref={(el) => this.toast = el} />\r\n\r\n                    <div className=\"card\">\r\n                        <Toolbar className=\"p-mb-4\" left={this.leftToolbarTemplate} right={this.rightToolbarTemplate}></Toolbar>\r\n\r\n                        <DataTable ref={(el) => this.dt = el} value={this.state.products} selection={this.state.selectedProducts} onSelectionChange={(e) => this.setState({ selectedProducts: e.value })}\r\n                            dataKey=\"id\" paginator rows={10} rowsPerPageOptions={[5, 10, 25]}\r\n                            paginatorTemplate=\"FirstPageLink PrevPageLink PageLinks NextPageLink LastPageLink CurrentPageReport RowsPerPageDropdown\"\r\n                            currentPageReportTemplate=\"Showing {first} to {last} of {totalRecords} products\"\r\n                            globalFilter={this.state.globalFilter}\r\n                            header={header}>\r\n\r\n                            <Column selectionMode=\"multiple\" headerStyle={{ width: '3rem' }}></Column>\r\n                            <Column field=\"code\" header=\"Code\" sortable></Column>\r\n                            <Column field=\"name\" header=\"Name\" sortable></Column>\r\n                            <Column header=\"Image\" body={this.imageBodyTemplate}></Column>\r\n                            <Column field=\"price\" header=\"Price\" body={this.priceBodyTemplate} sortable></Column>\r\n                            <Column field=\"category\" header=\"Category\" sortable></Column>\r\n                            <Column field=\"rating\" header=\"Reviews\" body={this.ratingBodyTemplate} sortable></Column>\r\n                            <Column field=\"inventoryStatus\" header=\"Status\" body={this.statusBodyTemplate} sortable></Column>\r\n                            <Column body={this.actionBodyTemplate}></Column>\r\n                        </DataTable>\r\n                    </div>\r\n\r\n                    <Dialog visible={this.state.productDialog} style={{ width: '450px' }} header=\"Product Details\" modal className=\"p-fluid\" footer={productDialogFooter} onHide={this.hideDialog}>\r\n                        {this.state.product.image && <img src={`showcase/demo/images/product/${this.state.product.image}`} onError={(e) => e.target.src='https://www.primefaces.org/wp-content/uploads/2020/05/placeholder.png'} alt={this.state.product.image} className=\"product-image\" />}\r\n                        <div className=\"p-field\">\r\n                            <label htmlFor=\"name\">Name</label>\r\n                            <InputText id=\"name\" value={this.state.product.name} onChange={(e) => this.onInputChange(e, 'name')} required autoFocus className={classNames({ 'p-invalid': this.state.submitted && !this.state.product.name })} />\r\n                            {this.state.submitted && !this.state.product.name && <small className=\"p-error\">Name is required.</small>}\r\n                        </div>\r\n                        <div className=\"p-field\">\r\n                            <label htmlFor=\"description\">Description</label>\r\n                            <InputTextarea id=\"description\" value={this.state.product.description} onChange={(e) => this.onInputChange(e, 'description')} required rows={3} cols={20} />\r\n                        </div>\r\n\r\n                        <div className=\"p-field\">\r\n                            <label className=\"p-mb-3\">Category</label>\r\n                            <div className=\"p-formgrid p-grid\">\r\n                                <div className=\"p-field-radiobutton p-col-6\">\r\n                                    <RadioButton inputId=\"category1\" name=\"category\" value=\"Accessories\" onChange={this.onCategoryChange} checked={this.state.product.category === 'Accessories'} />\r\n                                    <label htmlFor=\"category1\">Accessories</label>\r\n                                </div>\r\n                                <div className=\"p-field-radiobutton p-col-6\">\r\n                                    <RadioButton inputId=\"category2\" name=\"category\" value=\"Clothing\" onChange={this.onCategoryChange} checked={this.state.product.category === 'Clothing'} />\r\n                                    <label htmlFor=\"category2\">Clothing</label>\r\n                                </div>\r\n                                <div className=\"p-field-radiobutton p-col-6\">\r\n                                    <RadioButton inputId=\"category3\" name=\"category\" value=\"Electronics\" onChange={this.onCategoryChange} checked={this.state.product.category === 'Electronics'} />\r\n                                    <label htmlFor=\"category3\">Electronics</label>\r\n                                </div>\r\n                                <div className=\"p-field-radiobutton p-col-6\">\r\n                                    <RadioButton inputId=\"category4\" name=\"category\" value=\"Fitness\" onChange={this.onCategoryChange} checked={this.state.product.category === 'Fitness'} />\r\n                                    <label htmlFor=\"category4\">Fitness</label>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div className=\"p-formgrid p-grid\">\r\n                            <div className=\"p-field p-col\">\r\n                                <label htmlFor=\"price\">Price</label>\r\n                                <InputNumber id=\"price\" value={this.state.product.price} onValueChange={(e) => this.onInputNumberChange(e, 'price')} mode=\"currency\" currency=\"USD\" locale=\"en-US\" />\r\n                            </div>\r\n                            <div className=\"p-field p-col\">\r\n                                <label htmlFor=\"quantity\">Quantity</label>\r\n                                <InputNumber id=\"quantity\" value={this.state.product.quantity} onValueChange={(e) => this.onInputNumberChange(e, 'quantity')} integeronly />\r\n                            </div>\r\n                        </div>\r\n                    </Dialog>\r\n\r\n                    <Dialog visible={this.state.deleteProductDialog} style={{ width: '450px' }} header=\"Confirm\" modal footer={deleteProductDialogFooter} onHide={this.hideDeleteProductDialog}>\r\n                        <div className=\"confirmation-content\">\r\n                            <i className=\"pi pi-exclamation-triangle p-mr-3\" style={{ fontSize: '2rem'}} />\r\n                            {this.state.product && <span>Are you sure you want to delete <b>{this.state.product.name}</b>?</span>}\r\n                        </div>\r\n                    </Dialog>\r\n\r\n                    <Dialog visible={this.state.deleteProductsDialog} style={{ width: '450px' }} header=\"Confirm\" modal footer={deleteProductsDialogFooter} onHide={this.hideDeleteProductsDialog}>\r\n                        <div className=\"confirmation-content\">\r\n                            <i className=\"pi pi-exclamation-triangle p-mr-3\" style={{ fontSize: '2rem'}} />\r\n                            {this.state.product && <span>Are you sure you want to delete the selected products?</span>}\r\n                        </div>\r\n                    </Dialog>\r\n                </div>\r\n\r\n                <DataTableCrudDoc />\r\n\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport class DataTableCrudDoc extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.sources = {\r\n            'class': {\r\n                tabName: 'Class Source',\r\n                content: `\r\nimport React, { Component } from 'react';\r\nimport classNames from 'classnames';\r\nimport { DataTable } from 'primereact/datatable';\r\nimport { Column } from 'primereact/column';\r\nimport ProductService from '../service/ProductService';\r\nimport { Toast } from 'primereact/toast';\r\nimport { Button } from 'primereact/button';\r\nimport { FileUpload } from 'primereact/fileupload';\r\nimport { Rating } from 'primereact/rating';\r\nimport { Toolbar } from 'primereact/toolbar';\r\nimport { InputTextarea } from 'primereact/inputtextarea';\r\nimport { RadioButton } from 'primereact/radiobutton';\r\nimport { InputNumber } from 'primereact/inputnumber';\r\nimport { Dialog } from 'primereact/dialog';\r\nimport { InputText } from 'primereact/inputtext';\r\nimport './DataTableDemo.css';\r\n\r\nexport class DataTableCrudDemo extends Component {\r\n\r\n    emptyProduct = {\r\n        id: null,\r\n        name: '',\r\n        image: null,\r\n        description: '',\r\n        category: null,\r\n        price: 0,\r\n        quantity: 0,\r\n        rating: 0,\r\n        inventoryStatus: 'INSTOCK'\r\n    };\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            products: null,\r\n            productDialog: false,\r\n            deleteProductDialog: false,\r\n            deleteProductsDialog: false,\r\n            product: this.emptyProduct,\r\n            selectedProducts: null,\r\n            submitted: false,\r\n            globalFilter: null\r\n        };\r\n\r\n        this.productService = new ProductService();\r\n        this.leftToolbarTemplate = this.leftToolbarTemplate.bind(this);\r\n        this.rightToolbarTemplate = this.rightToolbarTemplate.bind(this);\r\n        this.imageBodyTemplate = this.imageBodyTemplate.bind(this);\r\n        this.priceBodyTemplate = this.priceBodyTemplate.bind(this);\r\n        this.ratingBodyTemplate = this.ratingBodyTemplate.bind(this);\r\n        this.statusBodyTemplate = this.statusBodyTemplate.bind(this);\r\n        this.actionBodyTemplate = this.actionBodyTemplate.bind(this);\r\n\r\n        this.openNew = this.openNew.bind(this);\r\n        this.hideDialog = this.hideDialog.bind(this);\r\n        this.saveProduct = this.saveProduct.bind(this);\r\n        this.editProduct = this.editProduct.bind(this);\r\n        this.confirmDeleteProduct = this.confirmDeleteProduct.bind(this);\r\n        this.deleteProduct = this.deleteProduct.bind(this);\r\n        this.exportCSV = this.exportCSV.bind(this);\r\n        this.confirmDeleteSelected = this.confirmDeleteSelected.bind(this);\r\n        this.deleteSelectedProducts = this.deleteSelectedProducts.bind(this);\r\n        this.onCategoryChange = this.onCategoryChange.bind(this);\r\n        this.onInputChange = this.onInputChange.bind(this);\r\n        this.onInputNumberChange = this.onInputNumberChange.bind(this);\r\n        this.hideDeleteProductDialog = this.hideDeleteProductDialog.bind(this);\r\n        this.hideDeleteProductsDialog = this.hideDeleteProductsDialog.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.productService.getProducts().then(data => this.setState({ products: data }));\r\n    }\r\n\r\n    formatCurrency(value) {\r\n        return value.toLocaleString('en-US', { style: 'currency', currency: 'USD' });\r\n    }\r\n\r\n    openNew() {\r\n        this.setState({\r\n            product: this.emptyProduct,\r\n            submitted: false,\r\n            productDialog: true\r\n        });\r\n    }\r\n\r\n    hideDialog() {\r\n        this.setState({\r\n            submitted: false,\r\n            productDialog: false\r\n        });\r\n    }\r\n\r\n    hideDeleteProductDialog() {\r\n        this.setState({ deleteProductDialog: false });\r\n    }\r\n\r\n    hideDeleteProductsDialog() {\r\n        this.setState({ deleteProductsDialog: false });\r\n    }\r\n\r\n    saveProduct() {\r\n        let state = { submitted: true };\r\n\r\n        if (this.state.product.name.trim()) {\r\n            let products = [...this.state.products];\r\n            let product = {...this.state.product};\r\n            if (this.state.product.id) {\r\n                const index = this.findIndexById(this.state.product.id);\r\n\r\n                products[index] = product;\r\n                this.toast.show({ severity: 'success', summary: 'Successful', detail: 'Product Updated', life: 3000 });\r\n            }\r\n            else {\r\n                product.id = this.createId();\r\n                product.image = 'product-placeholder.svg';\r\n                products.push(product);\r\n                this.toast.show({ severity: 'success', summary: 'Successful', detail: 'Product Created', life: 3000 });\r\n            }\r\n\r\n            state = {\r\n                ...state,\r\n                products,\r\n                productDialog: false,\r\n                product: this.emptyProduct\r\n            };\r\n        }\r\n\r\n        this.setState(state);\r\n    }\r\n\r\n    editProduct(product) {\r\n        this.setState({\r\n            product: { ...product },\r\n            productDialog: true\r\n        });\r\n    }\r\n\r\n    confirmDeleteProduct(product) {\r\n        this.setState({\r\n            product,\r\n            deleteProductDialog: true\r\n        });\r\n    }\r\n\r\n    deleteProduct() {\r\n        let products = this.state.products.filter(val => val.id !== this.state.product.id);\r\n        this.setState({\r\n            products,\r\n            deleteProductDialog: false,\r\n            product: this.emptyProduct\r\n        });\r\n        this.toast.show({ severity: 'success', summary: 'Successful', detail: 'Product Deleted', life: 3000 });\r\n    }\r\n\r\n    findIndexById(id) {\r\n        let index = -1;\r\n        for (let i = 0; i < this.state.products.length; i++) {\r\n            if (this.state.products[i].id === id) {\r\n                index = i;\r\n                break;\r\n            }\r\n        }\r\n\r\n        return index;\r\n    }\r\n\r\n    createId() {\r\n        let id = '';\r\n        let chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r\n        for (let i = 0; i < 5; i++) {\r\n            id += chars.charAt(Math.floor(Math.random() * chars.length));\r\n        }\r\n        return id;\r\n    }\r\n\r\n    exportCSV() {\r\n        this.dt.exportCSV();\r\n    }\r\n\r\n    confirmDeleteSelected() {\r\n        this.setState({ deleteProductsDialog: true });\r\n    }\r\n\r\n    deleteSelectedProducts() {\r\n        let products = this.state.products.filter(val => !this.state.selectedProducts.includes(val));\r\n        this.setState({\r\n            products,\r\n            deleteProductsDialog: false,\r\n            selectedProducts: null\r\n        });\r\n        this.toast.show({ severity: 'success', summary: 'Successful', detail: 'Products Deleted', life: 3000 });\r\n    }\r\n\r\n    onCategoryChange(e) {\r\n        let product = {...this.state.product};\r\n        product['category'] = e.value;\r\n        this.setState({ product });\r\n    }\r\n\r\n    onInputChange(e, name) {\r\n        const val = (e.target && e.target.value) || '';\r\n        let product = {...this.state.product};\r\n        product[\\`\\${name}\\`] = val;\r\n\r\n        this.setState({ product });\r\n    }\r\n\r\n    onInputNumberChange(e, name) {\r\n        const val = e.value || 0;\r\n        let product = {...this.state.product};\r\n        product[\\`\\${name}\\`] = val;\r\n\r\n        this.setState({ product });\r\n    }\r\n\r\n    leftToolbarTemplate() {\r\n        return (\r\n            <React.Fragment>\r\n                <Button label=\"New\" icon=\"pi pi-plus\" className=\"p-button-success p-mr-2\" onClick={this.openNew} />\r\n                <Button label=\"Delete\" icon=\"pi pi-trash\" className=\"p-button-danger\" onClick={this.confirmDeleteSelected} disabled={!this.state.selectedProducts || !this.state.selectedProducts.length} />\r\n            </React.Fragment>\r\n        )\r\n    }\r\n\r\n    rightToolbarTemplate() {\r\n        return (\r\n            <React.Fragment>\r\n                <FileUpload mode=\"basic\" accept=\"image/*\" maxFileSize={1000000} label=\"Import\" chooseLabel=\"Import\" className=\"p-mr-2 p-d-inline-block\" />\r\n                <Button label=\"Export\" icon=\"pi pi-upload\" className=\"p-button-help\" onClick={this.exportCSV} />\r\n            </React.Fragment>\r\n        )\r\n    }\r\n\r\n    imageBodyTemplate(rowData) {\r\n        return <img src={\\`showcase/demo/images/product/\\${rowData.image}\\`} onError={(e) => e.target.src='https://www.primefaces.org/wp-content/uploads/2020/05/placeholder.png'} alt={rowData.image} className=\"product-image\" />\r\n    }\r\n\r\n    priceBodyTemplate(rowData) {\r\n        return this.formatCurrency(rowData.price);\r\n    }\r\n\r\n    ratingBodyTemplate(rowData) {\r\n        return <Rating value={rowData.rating} readOnly cancel={false} />;\r\n    }\r\n\r\n    statusBodyTemplate(rowData) {\r\n        return <span className={\\`product-badge status-\\${rowData.inventoryStatus.toLowerCase()}\\`}>{rowData.inventoryStatus}</span>;\r\n    }\r\n\r\n    actionBodyTemplate(rowData) {\r\n        return (\r\n            <React.Fragment>\r\n                <Button icon=\"pi pi-pencil\" className=\"p-button-rounded p-button-success p-mr-2\" onClick={() => this.editProduct(rowData)} />\r\n                <Button icon=\"pi pi-trash\" className=\"p-button-rounded p-button-warning\" onClick={() => this.confirmDeleteProduct(rowData)} />\r\n            </React.Fragment>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        const header = (\r\n            <div className=\"table-header\">\r\n                <h5 className=\"p-m-0\">Manage Products</h5>\r\n                <span className=\"p-input-icon-left\">\r\n                    <i className=\"pi pi-search\" />\r\n                    <InputText type=\"search\" onInput={(e) => this.setState({ globalFilter: e.target.value })} placeholder=\"Search...\" />\r\n                </span>\r\n            </div>\r\n        );\r\n        const productDialogFooter = (\r\n            <React.Fragment>\r\n                <Button label=\"Cancel\" icon=\"pi pi-times\" className=\"p-button-text\" onClick={this.hideDialog} />\r\n                <Button label=\"Save\" icon=\"pi pi-check\" className=\"p-button-text\" onClick={this.saveProduct} />\r\n            </React.Fragment>\r\n        );\r\n        const deleteProductDialogFooter = (\r\n            <React.Fragment>\r\n                <Button label=\"No\" icon=\"pi pi-times\" className=\"p-button-text\" onClick={this.hideDeleteProductDialog} />\r\n                <Button label=\"Yes\" icon=\"pi pi-check\" className=\"p-button-text\" onClick={this.deleteProduct} />\r\n            </React.Fragment>\r\n        );\r\n        const deleteProductsDialogFooter = (\r\n            <React.Fragment>\r\n                <Button label=\"No\" icon=\"pi pi-times\" className=\"p-button-text\" onClick={this.hideDeleteProductsDialog} />\r\n                <Button label=\"Yes\" icon=\"pi pi-check\" className=\"p-button-text\" onClick={this.deleteSelectedProducts} />\r\n            </React.Fragment>\r\n        );\r\n\r\n        return (\r\n            <div className=\"datatable-crud-demo\">\r\n                <Toast ref={(el) => this.toast = el} />\r\n\r\n                <div className=\"card\">\r\n                    <Toolbar className=\"p-mb-4\" left={this.leftToolbarTemplate} right={this.rightToolbarTemplate}></Toolbar>\r\n\r\n                    <DataTable ref={(el) => this.dt = el} value={this.state.products} selection={this.state.selectedProducts} onSelectionChange={(e) => this.setState({ selectedProducts: e.value })}\r\n                        dataKey=\"id\" paginator rows={10} rowsPerPageOptions={[5, 10, 25]}\r\n                        paginatorTemplate=\"FirstPageLink PrevPageLink PageLinks NextPageLink LastPageLink CurrentPageReport RowsPerPageDropdown\"\r\n                        currentPageReportTemplate=\"Showing {first} to {last} of {totalRecords} products\"\r\n                        globalFilter={this.state.globalFilter}\r\n                        header={header}>\r\n\r\n                        <Column selectionMode=\"multiple\" headerStyle={{ width: '3rem' }}></Column>\r\n                        <Column field=\"code\" header=\"Code\" sortable></Column>\r\n                        <Column field=\"name\" header=\"Name\" sortable></Column>\r\n                        <Column header=\"Image\" body={this.imageBodyTemplate}></Column>\r\n                        <Column field=\"price\" header=\"Price\" body={this.priceBodyTemplate} sortable></Column>\r\n                        <Column field=\"category\" header=\"Category\" sortable></Column>\r\n                        <Column field=\"rating\" header=\"Reviews\" body={this.ratingBodyTemplate} sortable></Column>\r\n                        <Column field=\"inventoryStatus\" header=\"Status\" body={this.statusBodyTemplate} sortable></Column>\r\n                        <Column body={this.actionBodyTemplate}></Column>\r\n                    </DataTable>\r\n                </div>\r\n\r\n                <Dialog visible={this.state.productDialog} style={{ width: '450px' }} header=\"Product Details\" modal className=\"p-fluid\" footer={productDialogFooter} onHide={this.hideDialog}>\r\n                    {this.state.product.image && <img src={\\`showcase/demo/images/product/\\${this.state.product.image}\\`} onError={(e) => e.target.src='https://www.primefaces.org/wp-content/uploads/2020/05/placeholder.png'} alt={this.state.product.image} className=\"product-image\" />}\r\n                    <div className=\"p-field\">\r\n                        <label htmlFor=\"name\">Name</label>\r\n                        <InputText id=\"name\" value={this.state.product.name} onChange={(e) => this.onInputChange(e, 'name')} required autoFocus className={classNames({ 'p-invalid': this.state.submitted && !this.state.product.name })} />\r\n                        {this.state.submitted && !this.state.product.name && <small className=\"p-error\">Name is required.</small>}\r\n                    </div>\r\n                    <div className=\"p-field\">\r\n                        <label htmlFor=\"description\">Description</label>\r\n                        <InputTextarea id=\"description\" value={this.state.product.description} onChange={(e) => this.onInputChange(e, 'description')} required rows={3} cols={20} />\r\n                    </div>\r\n\r\n                    <div className=\"p-field\">\r\n                        <label className=\"p-mb-3\">Category</label>\r\n                        <div className=\"p-formgrid p-grid\">\r\n                            <div className=\"p-field-radiobutton p-col-6\">\r\n                                <RadioButton inputId=\"category1\" name=\"category\" value=\"Accessories\" onChange={this.onCategoryChange} checked={this.state.product.category === 'Accessories'} />\r\n                                <label htmlFor=\"category1\">Accessories</label>\r\n                            </div>\r\n                            <div className=\"p-field-radiobutton p-col-6\">\r\n                                <RadioButton inputId=\"category2\" name=\"category\" value=\"Clothing\" onChange={this.onCategoryChange} checked={this.state.product.category === 'Clothing'} />\r\n                                <label htmlFor=\"category2\">Clothing</label>\r\n                            </div>\r\n                            <div className=\"p-field-radiobutton p-col-6\">\r\n                                <RadioButton inputId=\"category3\" name=\"category\" value=\"Electronics\" onChange={this.onCategoryChange} checked={this.state.product.category === 'Electronics'} />\r\n                                <label htmlFor=\"category3\">Electronics</label>\r\n                            </div>\r\n                            <div className=\"p-field-radiobutton p-col-6\">\r\n                                <RadioButton inputId=\"category4\" name=\"category\" value=\"Fitness\" onChange={this.onCategoryChange} checked={this.state.product.category === 'Fitness'} />\r\n                                <label htmlFor=\"category4\">Fitness</label>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div className=\"p-formgrid p-grid\">\r\n                        <div className=\"p-field p-col\">\r\n                            <label htmlFor=\"price\">Price</label>\r\n                            <InputNumber id=\"price\" value={this.state.product.price} onValueChange={(e) => this.onInputNumberChange(e, 'price')} mode=\"currency\" currency=\"USD\" locale=\"en-US\" />\r\n                        </div>\r\n                        <div className=\"p-field p-col\">\r\n                            <label htmlFor=\"quantity\">Quantity</label>\r\n                            <InputNumber id=\"quantity\" value={this.state.product.quantity} onValueChange={(e) => this.onInputNumberChange(e, 'quantity')} integeronly />\r\n                        </div>\r\n                    </div>\r\n                </Dialog>\r\n\r\n                <Dialog visible={this.state.deleteProductDialog} style={{ width: '450px' }} header=\"Confirm\" modal footer={deleteProductDialogFooter} onHide={this.hideDeleteProductDialog}>\r\n                    <div className=\"confirmation-content\">\r\n                        <i className=\"pi pi-exclamation-triangle p-mr-3\" style={{ fontSize: '2rem'}} />\r\n                        {this.state.product && <span>Are you sure you want to delete <b>{this.state.product.name}</b>?</span>}\r\n                    </div>\r\n                </Dialog>\r\n\r\n                <Dialog visible={this.state.deleteProductsDialog} style={{ width: '450px' }} header=\"Confirm\" modal footer={deleteProductsDialogFooter} onHide={this.hideDeleteProductsDialog}>\r\n                    <div className=\"confirmation-content\">\r\n                        <i className=\"pi pi-exclamation-triangle p-mr-3\" style={{ fontSize: '2rem'}} />\r\n                        {this.state.product && <span>Are you sure you want to delete the selected products?</span>}\r\n                    </div>\r\n                </Dialog>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n                `\r\n            },\r\n            'hooks': {\r\n                tabName: 'Hooks Source',\r\n                content: `\r\nimport React, { useState, useEffect, useRef } from 'react';\r\nimport classNames from 'classnames';\r\nimport { DataTable } from 'primereact/datatable';\r\nimport { Column } from 'primereact/column';\r\nimport ProductService from '../service/ProductService';\r\nimport { Toast } from 'primereact/toast';\r\nimport { Button } from 'primereact/button';\r\nimport { FileUpload } from 'primereact/fileupload';\r\nimport { Rating } from 'primereact/rating';\r\nimport { Toolbar } from 'primereact/toolbar';\r\nimport { InputTextarea } from 'primereact/inputtextarea';\r\nimport { RadioButton } from 'primereact/radiobutton';\r\nimport { InputNumber } from 'primereact/inputnumber';\r\nimport { Dialog } from 'primereact/dialog';\r\nimport { InputText } from 'primereact/inputtext';\r\nimport './DataTableDemo.css';\r\n\r\nconst DataTableCrudDemo = () => {\r\n\r\n    let emptyProduct = {\r\n        id: null,\r\n        name: '',\r\n        image: null,\r\n        description: '',\r\n        category: null,\r\n        price: 0,\r\n        quantity: 0,\r\n        rating: 0,\r\n        inventoryStatus: 'INSTOCK'\r\n    };\r\n\r\n    const [products, setProducts] = useState(null);\r\n    const [productDialog, setProductDialog] = useState(false);\r\n    const [deleteProductDialog, setDeleteProductDialog] = useState(false);\r\n    const [deleteProductsDialog, setDeleteProductsDialog] = useState(false);\r\n    const [product, setProduct] = useState(emptyProduct);\r\n    const [selectedProducts, setSelectedProducts] = useState(null);\r\n    const [submitted, setSubmitted] = useState(false);\r\n    const [globalFilter, setGlobalFilter] = useState(null);\r\n    const toast = useRef(null);\r\n    const dt = useRef(null);\r\n    const productService = new ProductService();\r\n\r\n    useEffect(() => {\r\n        productService.getProducts().then(data => setProducts(data));\r\n    }, []); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n    const formatCurrency = (value) => {\r\n        return value.toLocaleString('en-US', { style: 'currency', currency: 'USD' });\r\n    }\r\n\r\n    const openNew = () => {\r\n        setProduct(emptyProduct);\r\n        setSubmitted(false);\r\n        setProductDialog(true);\r\n    }\r\n\r\n    const hideDialog = () => {\r\n        setSubmitted(false);\r\n        setProductDialog(false);\r\n    }\r\n\r\n    const hideDeleteProductDialog = () => {\r\n        setDeleteProductDialog(false);\r\n    }\r\n\r\n    const hideDeleteProductsDialog = () => {\r\n        setDeleteProductsDialog(false);\r\n    }\r\n\r\n    const saveProduct = () => {\r\n        setSubmitted(true);\r\n\r\n        if (product.name.trim()) {\r\n            let _products = [...products];\r\n            let _product = {...product};\r\n            if (product.id) {\r\n                const index = findIndexById(product.id);\r\n\r\n                _products[index] = _product;\r\n                toast.current.show({ severity: 'success', summary: 'Successful', detail: 'Product Updated', life: 3000 });\r\n            }\r\n            else {\r\n                _product.id = createId();\r\n                _product.image = 'product-placeholder.svg';\r\n                _products.push(_product);\r\n                toast.current.show({ severity: 'success', summary: 'Successful', detail: 'Product Created', life: 3000 });\r\n            }\r\n\r\n            setProducts(_products);\r\n            setProductDialog(false);\r\n            setProduct(emptyProduct);\r\n        }\r\n    }\r\n\r\n    const editProduct = (product) => {\r\n        setProduct({...product});\r\n        setProductDialog(true);\r\n    }\r\n\r\n    const confirmDeleteProduct = (product) => {\r\n        setProduct(product);\r\n        setDeleteProductDialog(true);\r\n    }\r\n\r\n    const deleteProduct = () => {\r\n        let _products = products.filter(val => val.id !== product.id);\r\n        setProduct(_products);\r\n        setDeleteProductDialog(false);\r\n        setProduct(emptyProduct);\r\n        toast.current.show({ severity: 'success', summary: 'Successful', detail: 'Product Deleted', life: 3000 });\r\n    }\r\n\r\n    const findIndexById = (id) => {\r\n        let index = -1;\r\n        for (let i = 0; i < products.length; i++) {\r\n            if (products[i].id === id) {\r\n                index = i;\r\n                break;\r\n            }\r\n        }\r\n\r\n        return index;\r\n    }\r\n\r\n    const createId = () => {\r\n        let id = '';\r\n        let chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r\n        for (let i = 0; i < 5; i++) {\r\n            id += chars.charAt(Math.floor(Math.random() * chars.length));\r\n        }\r\n        return id;\r\n    }\r\n\r\n    const exportCSV = () => {\r\n        dt.current.exportCSV();\r\n    }\r\n\r\n    const confirmDeleteSelected = () => {\r\n        setDeleteProductsDialog(true);\r\n    }\r\n\r\n    const deleteSelectedProducts = () => {\r\n        let _products = products.filter(val => !selectedProducts.includes(val));\r\n        setProducts(_products);\r\n        setDeleteProductsDialog(false);\r\n        setSelectedProducts(null);\r\n        toast.current.show({ severity: 'success', summary: 'Successful', detail: 'Products Deleted', life: 3000 });\r\n    }\r\n\r\n    const onCategoryChange = (e) => {\r\n        let _product = {...product};\r\n        _product['category'] = e.value;\r\n        setProduct(_product);\r\n    }\r\n\r\n    const onInputChange = (e, name) => {\r\n        const val = (e.target && e.target.value) || '';\r\n        let _product = {...product};\r\n        _product[\\`\\${name}\\`] = val;\r\n\r\n        setProduct(_product);\r\n    }\r\n\r\n    const onInputNumberChange = (e, name) => {\r\n        const val = e.value || 0;\r\n        let _product = {...product};\r\n        _product[\\`\\${name}\\`] = val;\r\n\r\n        setProduct(_product);\r\n    }\r\n\r\n    const leftToolbarTemplate = () => {\r\n        return (\r\n            <React.Fragment>\r\n                <Button label=\"New\" icon=\"pi pi-plus\" className=\"p-button-success p-mr-2\" onClick={openNew} />\r\n                <Button label=\"Delete\" icon=\"pi pi-trash\" className=\"p-button-danger\" onClick={confirmDeleteSelected} disabled={!selectedProducts || !selectedProducts.length} />\r\n            </React.Fragment>\r\n        )\r\n    }\r\n\r\n    const rightToolbarTemplate = () => {\r\n        return (\r\n            <React.Fragment>\r\n                <FileUpload mode=\"basic\" accept=\"image/*\" maxFileSize={1000000} label=\"Import\" chooseLabel=\"Import\" className=\"p-mr-2 p-d-inline-block\" />\r\n                <Button label=\"Export\" icon=\"pi pi-upload\" className=\"p-button-help\" onClick={exportCSV} />\r\n            </React.Fragment>\r\n        )\r\n    }\r\n\r\n    const imageBodyTemplate = (rowData) => {\r\n        return <img src={\\`showcase/demo/images/product/\\${rowData.image}\\`} onError={(e) => e.target.src='https://www.primefaces.org/wp-content/uploads/2020/05/placeholder.png'} alt={rowData.image} className=\"product-image\" />\r\n    }\r\n\r\n    const priceBodyTemplate = (rowData) => {\r\n        return formatCurrency(rowData.price);\r\n    }\r\n\r\n    const ratingBodyTemplate = (rowData) => {\r\n        return <Rating value={rowData.rating} readOnly cancel={false} />;\r\n    }\r\n\r\n    const statusBodyTemplate = (rowData) => {\r\n        return <span className={\\`product-badge status-\\${rowData.inventoryStatus.toLowerCase()}\\`}>{rowData.inventoryStatus}</span>;\r\n    }\r\n\r\n    const actionBodyTemplate = (rowData) => {\r\n        return (\r\n            <React.Fragment>\r\n                <Button icon=\"pi pi-pencil\" className=\"p-button-rounded p-button-success p-mr-2\" onClick={() => editProduct(rowData)} />\r\n                <Button icon=\"pi pi-trash\" className=\"p-button-rounded p-button-warning\" onClick={() => confirmDeleteProduct(rowData)} />\r\n            </React.Fragment>\r\n        );\r\n    }\r\n\r\n    const header = (\r\n        <div className=\"table-header\">\r\n            <h5 className=\"p-m-0\">Manage Products</h5>\r\n            <span className=\"p-input-icon-left\">\r\n                <i className=\"pi pi-search\" />\r\n                <InputText type=\"search\" onInput={(e) => setGlobalFilter(e.target.value)} placeholder=\"Search...\" />\r\n            </span>\r\n        </div>\r\n    );\r\n    const productDialogFooter = (\r\n        <React.Fragment>\r\n            <Button label=\"Cancel\" icon=\"pi pi-times\" className=\"p-button-text\" onClick={hideDialog} />\r\n            <Button label=\"Save\" icon=\"pi pi-check\" className=\"p-button-text\" onClick={saveProduct} />\r\n        </React.Fragment>\r\n    );\r\n    const deleteProductDialogFooter = (\r\n        <React.Fragment>\r\n            <Button label=\"No\" icon=\"pi pi-times\" className=\"p-button-text\" onClick={hideDeleteProductDialog} />\r\n            <Button label=\"Yes\" icon=\"pi pi-check\" className=\"p-button-text\" onClick={deleteProduct} />\r\n        </React.Fragment>\r\n    );\r\n    const deleteProductsDialogFooter = (\r\n        <React.Fragment>\r\n            <Button label=\"No\" icon=\"pi pi-times\" className=\"p-button-text\" onClick={hideDeleteProductsDialog} />\r\n            <Button label=\"Yes\" icon=\"pi pi-check\" className=\"p-button-text\" onClick={deleteSelectedProducts} />\r\n        </React.Fragment>\r\n    );\r\n\r\n    return (\r\n        <div className=\"datatable-crud-demo\">\r\n            <Toast ref={toast} />\r\n\r\n            <div className=\"card\">\r\n                <Toolbar className=\"p-mb-4\" left={leftToolbarTemplate} right={rightToolbarTemplate}></Toolbar>\r\n\r\n                <DataTable ref={dt} value={products} selection={selectedProducts} onSelectionChange={(e) => setSelectedProducts(e.value)}\r\n                    dataKey=\"id\" paginator rows={10} rowsPerPageOptions={[5, 10, 25]}\r\n                    paginatorTemplate=\"FirstPageLink PrevPageLink PageLinks NextPageLink LastPageLink CurrentPageReport RowsPerPageDropdown\"\r\n                    currentPageReportTemplate=\"Showing {first} to {last} of {totalRecords} products\"\r\n                    globalFilter={globalFilter}\r\n                    header={header}>\r\n\r\n                    <Column selectionMode=\"multiple\" headerStyle={{ width: '3rem' }}></Column>\r\n                    <Column field=\"code\" header=\"Code\" sortable></Column>\r\n                    <Column field=\"name\" header=\"Name\" sortable></Column>\r\n                    <Column header=\"Image\" body={imageBodyTemplate}></Column>\r\n                    <Column field=\"price\" header=\"Price\" body={priceBodyTemplate} sortable></Column>\r\n                    <Column field=\"category\" header=\"Category\" sortable></Column>\r\n                    <Column field=\"rating\" header=\"Reviews\" body={ratingBodyTemplate} sortable></Column>\r\n                    <Column field=\"inventoryStatus\" header=\"Status\" body={statusBodyTemplate} sortable></Column>\r\n                    <Column body={actionBodyTemplate}></Column>\r\n                </DataTable>\r\n            </div>\r\n\r\n            <Dialog visible={productDialog} style={{ width: '450px' }} header=\"Product Details\" modal className=\"p-fluid\" footer={productDialogFooter} onHide={hideDialog}>\r\n                {product.image && <img src={\\`showcase/demo/images/product/\\${product.image}\\`} onError={(e) => e.target.src='https://www.primefaces.org/wp-content/uploads/2020/05/placeholder.png'} alt={product.image} className=\"product-image\" />}\r\n                <div className=\"p-field\">\r\n                    <label htmlFor=\"name\">Name</label>\r\n                    <InputText id=\"name\" value={product.name} onChange={(e) => onInputChange(e, 'name')} required autoFocus className={classNames({ 'p-invalid': submitted && !product.name })} />\r\n                    {submitted && !product.name && <small className=\"p-error\">Name is required.</small>}\r\n                </div>\r\n                <div className=\"p-field\">\r\n                    <label htmlFor=\"description\">Description</label>\r\n                    <InputTextarea id=\"description\" value={product.description} onChange={(e) => onInputChange(e, 'description')} required rows={3} cols={20} />\r\n                </div>\r\n\r\n                <div className=\"p-field\">\r\n                    <label className=\"p-mb-3\">Category</label>\r\n                    <div className=\"p-formgrid p-grid\">\r\n                        <div className=\"p-field-radiobutton p-col-6\">\r\n                            <RadioButton inputId=\"category1\" name=\"category\" value=\"Accessories\" onChange={onCategoryChange} checked={product.category === 'Accessories'} />\r\n                            <label htmlFor=\"category1\">Accessories</label>\r\n                        </div>\r\n                        <div className=\"p-field-radiobutton p-col-6\">\r\n                            <RadioButton inputId=\"category2\" name=\"category\" value=\"Clothing\" onChange={onCategoryChange} checked={product.category === 'Clothing'} />\r\n                            <label htmlFor=\"category2\">Clothing</label>\r\n                        </div>\r\n                        <div className=\"p-field-radiobutton p-col-6\">\r\n                            <RadioButton inputId=\"category3\" name=\"category\" value=\"Electronics\" onChange={onCategoryChange} checked={product.category === 'Electronics'} />\r\n                            <label htmlFor=\"category3\">Electronics</label>\r\n                        </div>\r\n                        <div className=\"p-field-radiobutton p-col-6\">\r\n                            <RadioButton inputId=\"category4\" name=\"category\" value=\"Fitness\" onChange={onCategoryChange} checked={product.category === 'Fitness'} />\r\n                            <label htmlFor=\"category4\">Fitness</label>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"p-formgrid p-grid\">\r\n                    <div className=\"p-field p-col\">\r\n                        <label htmlFor=\"price\">Price</label>\r\n                        <InputNumber id=\"price\" value={product.price} onValueChange={(e) => onInputNumberChange(e, 'price')} mode=\"currency\" currency=\"USD\" locale=\"en-US\" />\r\n                    </div>\r\n                    <div className=\"p-field p-col\">\r\n                        <label htmlFor=\"quantity\">Quantity</label>\r\n                        <InputNumber id=\"quantity\" value={product.quantity} onValueChange={(e) => onInputNumberChange(e, 'quantity')} integeronly />\r\n                    </div>\r\n                </div>\r\n            </Dialog>\r\n\r\n            <Dialog visible={deleteProductDialog} style={{ width: '450px' }} header=\"Confirm\" modal footer={deleteProductDialogFooter} onHide={hideDeleteProductDialog}>\r\n                <div className=\"confirmation-content\">\r\n                    <i className=\"pi pi-exclamation-triangle p-mr-3\" style={{ fontSize: '2rem'}} />\r\n                    {product && <span>Are you sure you want to delete <b>{product.name}</b>?</span>}\r\n                </div>\r\n            </Dialog>\r\n\r\n            <Dialog visible={deleteProductsDialog} style={{ width: '450px' }} header=\"Confirm\" modal footer={deleteProductsDialogFooter} onHide={hideDeleteProductsDialog}>\r\n                <div className=\"confirmation-content\">\r\n                    <i className=\"pi pi-exclamation-triangle p-mr-3\" style={{ fontSize: '2rem'}} />\r\n                    {product && <span>Are you sure you want to delete the selected products?</span>}\r\n                </div>\r\n            </Dialog>\r\n        </div>\r\n    );\r\n}\r\n                `\r\n            },\r\n            'ts': {\r\n                tabName: 'TS Source',\r\n                content: `\r\nimport React, { useState, useEffect, useRef } from 'react';\r\nimport classNames from 'classnames';\r\nimport { DataTable } from 'primereact/datatable';\r\nimport { Column } from 'primereact/column';\r\nimport ProductService from '../service/ProductService';\r\nimport { Toast } from 'primereact/toast';\r\nimport { Button } from 'primereact/button';\r\nimport { FileUpload } from 'primereact/fileupload';\r\nimport { Rating } from 'primereact/rating';\r\nimport { Toolbar } from 'primereact/toolbar';\r\nimport { InputTextarea } from 'primereact/inputtextarea';\r\nimport { RadioButton } from 'primereact/radiobutton';\r\nimport { InputNumber } from 'primereact/inputnumber';\r\nimport { Dialog } from 'primereact/dialog';\r\nimport { InputText } from 'primereact/inputtext';\r\nimport './DataTableDemo.css';\r\n\r\nconst DataTableCrudDemo = () => {\r\n\r\n    let emptyProduct = {\r\n        id: null,\r\n        name: '',\r\n        image: null,\r\n        description: '',\r\n        category: null,\r\n        price: 0,\r\n        quantity: 0,\r\n        rating: 0,\r\n        inventoryStatus: 'INSTOCK'\r\n    };\r\n\r\n    const [products, setProducts] = useState(null);\r\n    const [productDialog, setProductDialog] = useState(false);\r\n    const [deleteProductDialog, setDeleteProductDialog] = useState(false);\r\n    const [deleteProductsDialog, setDeleteProductsDialog] = useState(false);\r\n    const [product, setProduct] = useState(emptyProduct);\r\n    const [selectedProducts, setSelectedProducts] = useState(null);\r\n    const [submitted, setSubmitted] = useState(false);\r\n    const [globalFilter, setGlobalFilter] = useState(null);\r\n    const toast = useRef(null);\r\n    const dt = useRef(null);\r\n    const productService = new ProductService();\r\n\r\n    useEffect(() => {\r\n        productService.getProducts().then(data => setProducts(data));\r\n    }, []); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n    const formatCurrency = (value) => {\r\n        return value.toLocaleString('en-US', { style: 'currency', currency: 'USD' });\r\n    }\r\n\r\n    const openNew = () => {\r\n        setProduct(emptyProduct);\r\n        setSubmitted(false);\r\n        setProductDialog(true);\r\n    }\r\n\r\n    const hideDialog = () => {\r\n        setSubmitted(false);\r\n        setProductDialog(false);\r\n    }\r\n\r\n    const hideDeleteProductDialog = () => {\r\n        setDeleteProductDialog(false);\r\n    }\r\n\r\n    const hideDeleteProductsDialog = () => {\r\n        setDeleteProductsDialog(false);\r\n    }\r\n\r\n    const saveProduct = () => {\r\n        setSubmitted(true);\r\n\r\n        if (product.name.trim()) {\r\n            let _products = [...products];\r\n            let _product = {...product};\r\n            if (product.id) {\r\n                const index = findIndexById(product.id);\r\n\r\n                _products[index] = _product;\r\n                toast.current.show({ severity: 'success', summary: 'Successful', detail: 'Product Updated', life: 3000 });\r\n            }\r\n            else {\r\n                _product.id = createId();\r\n                _product.image = 'product-placeholder.svg';\r\n                _products.push(_product);\r\n                toast.current.show({ severity: 'success', summary: 'Successful', detail: 'Product Created', life: 3000 });\r\n            }\r\n\r\n            setProducts(_products);\r\n            setProductDialog(false);\r\n            setProduct(emptyProduct);\r\n        }\r\n    }\r\n\r\n    const editProduct = (product) => {\r\n        setProduct({...product});\r\n        setProductDialog(true);\r\n    }\r\n\r\n    const confirmDeleteProduct = (product) => {\r\n        setProduct(product);\r\n        setDeleteProductDialog(true);\r\n    }\r\n\r\n    const deleteProduct = () => {\r\n        let _products = products.filter(val => val.id !== product.id);\r\n        setProduct(_products);\r\n        setDeleteProductDialog(false);\r\n        setProduct(emptyProduct);\r\n        toast.current.show({ severity: 'success', summary: 'Successful', detail: 'Product Deleted', life: 3000 });\r\n    }\r\n\r\n    const findIndexById = (id) => {\r\n        let index = -1;\r\n        for (let i = 0; i < products.length; i++) {\r\n            if (products[i].id === id) {\r\n                index = i;\r\n                break;\r\n            }\r\n        }\r\n\r\n        return index;\r\n    }\r\n\r\n    const createId = () => {\r\n        let id = '';\r\n        let chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r\n        for (let i = 0; i < 5; i++) {\r\n            id += chars.charAt(Math.floor(Math.random() * chars.length));\r\n        }\r\n        return id;\r\n    }\r\n\r\n    const exportCSV = () => {\r\n        dt.current.exportCSV();\r\n    }\r\n\r\n    const confirmDeleteSelected = () => {\r\n        setDeleteProductsDialog(true);\r\n    }\r\n\r\n    const deleteSelectedProducts = () => {\r\n        let _products = products.filter(val => !selectedProducts.includes(val));\r\n        setProducts(_products);\r\n        setDeleteProductsDialog(false);\r\n        setSelectedProducts(null);\r\n        toast.current.show({ severity: 'success', summary: 'Successful', detail: 'Products Deleted', life: 3000 });\r\n    }\r\n\r\n    const onCategoryChange = (e) => {\r\n        let _product = {...product};\r\n        _product['category'] = e.value;\r\n        setProduct(_product);\r\n    }\r\n\r\n    const onInputChange = (e, name) => {\r\n        const val = (e.target && e.target.value) || '';\r\n        let _product = {...product};\r\n        _product[\\`\\${name}\\`] = val;\r\n\r\n        setProduct(_product);\r\n    }\r\n\r\n    const onInputNumberChange = (e, name) => {\r\n        const val = e.value || 0;\r\n        let _product = {...product};\r\n        _product[\\`\\${name}\\`] = val;\r\n\r\n        setProduct(_product);\r\n    }\r\n\r\n    const leftToolbarTemplate = () => {\r\n        return (\r\n            <React.Fragment>\r\n                <Button label=\"New\" icon=\"pi pi-plus\" className=\"p-button-success p-mr-2\" onClick={openNew} />\r\n                <Button label=\"Delete\" icon=\"pi pi-trash\" className=\"p-button-danger\" onClick={confirmDeleteSelected} disabled={!selectedProducts || !selectedProducts.length} />\r\n            </React.Fragment>\r\n        )\r\n    }\r\n\r\n    const rightToolbarTemplate = () => {\r\n        return (\r\n            <React.Fragment>\r\n                <FileUpload mode=\"basic\" accept=\"image/*\" maxFileSize={1000000} label=\"Import\" chooseLabel=\"Import\" className=\"p-mr-2 p-d-inline-block\" />\r\n                <Button label=\"Export\" icon=\"pi pi-upload\" className=\"p-button-help\" onClick={exportCSV} />\r\n            </React.Fragment>\r\n        )\r\n    }\r\n\r\n    const imageBodyTemplate = (rowData) => {\r\n        return <img src={\\`showcase/demo/images/product/\\${rowData.image}\\`} onError={(e) => e.target.src='https://www.primefaces.org/wp-content/uploads/2020/05/placeholder.png'} alt={rowData.image} className=\"product-image\" />\r\n    }\r\n\r\n    const priceBodyTemplate = (rowData) => {\r\n        return formatCurrency(rowData.price);\r\n    }\r\n\r\n    const ratingBodyTemplate = (rowData) => {\r\n        return <Rating value={rowData.rating} readOnly cancel={false} />;\r\n    }\r\n\r\n    const statusBodyTemplate = (rowData) => {\r\n        return <span className={\\`product-badge status-\\${rowData.inventoryStatus.toLowerCase()}\\`}>{rowData.inventoryStatus}</span>;\r\n    }\r\n\r\n    const actionBodyTemplate = (rowData) => {\r\n        return (\r\n            <React.Fragment>\r\n                <Button icon=\"pi pi-pencil\" className=\"p-button-rounded p-button-success p-mr-2\" onClick={() => editProduct(rowData)} />\r\n                <Button icon=\"pi pi-trash\" className=\"p-button-rounded p-button-warning\" onClick={() => confirmDeleteProduct(rowData)} />\r\n            </React.Fragment>\r\n        );\r\n    }\r\n\r\n    const header = (\r\n        <div className=\"table-header\">\r\n            <h5 className=\"p-m-0\">Manage Products</h5>\r\n            <span className=\"p-input-icon-left\">\r\n                <i className=\"pi pi-search\" />\r\n                <InputText type=\"search\" onInput={(e) => setGlobalFilter(e.target.value)} placeholder=\"Search...\" />\r\n            </span>\r\n        </div>\r\n    );\r\n    const productDialogFooter = (\r\n        <React.Fragment>\r\n            <Button label=\"Cancel\" icon=\"pi pi-times\" className=\"p-button-text\" onClick={hideDialog} />\r\n            <Button label=\"Save\" icon=\"pi pi-check\" className=\"p-button-text\" onClick={saveProduct} />\r\n        </React.Fragment>\r\n    );\r\n    const deleteProductDialogFooter = (\r\n        <React.Fragment>\r\n            <Button label=\"No\" icon=\"pi pi-times\" className=\"p-button-text\" onClick={hideDeleteProductDialog} />\r\n            <Button label=\"Yes\" icon=\"pi pi-check\" className=\"p-button-text\" onClick={deleteProduct} />\r\n        </React.Fragment>\r\n    );\r\n    const deleteProductsDialogFooter = (\r\n        <React.Fragment>\r\n            <Button label=\"No\" icon=\"pi pi-times\" className=\"p-button-text\" onClick={hideDeleteProductsDialog} />\r\n            <Button label=\"Yes\" icon=\"pi pi-check\" className=\"p-button-text\" onClick={deleteSelectedProducts} />\r\n        </React.Fragment>\r\n    );\r\n\r\n    return (\r\n        <div className=\"datatable-crud-demo\">\r\n            <Toast ref={toast} />\r\n\r\n            <div className=\"card\">\r\n                <Toolbar className=\"p-mb-4\" left={leftToolbarTemplate} right={rightToolbarTemplate}></Toolbar>\r\n\r\n                <DataTable ref={dt} value={products} selection={selectedProducts} onSelectionChange={(e) => setSelectedProducts(e.value)}\r\n                    dataKey=\"id\" paginator rows={10} rowsPerPageOptions={[5, 10, 25]}\r\n                    paginatorTemplate=\"FirstPageLink PrevPageLink PageLinks NextPageLink LastPageLink CurrentPageReport RowsPerPageDropdown\"\r\n                    currentPageReportTemplate=\"Showing {first} to {last} of {totalRecords} products\"\r\n                    globalFilter={globalFilter}\r\n                    header={header}>\r\n\r\n                    <Column selectionMode=\"multiple\" headerStyle={{ width: '3rem' }}></Column>\r\n                    <Column field=\"code\" header=\"Code\" sortable></Column>\r\n                    <Column field=\"name\" header=\"Name\" sortable></Column>\r\n                    <Column header=\"Image\" body={imageBodyTemplate}></Column>\r\n                    <Column field=\"price\" header=\"Price\" body={priceBodyTemplate} sortable></Column>\r\n                    <Column field=\"category\" header=\"Category\" sortable></Column>\r\n                    <Column field=\"rating\" header=\"Reviews\" body={ratingBodyTemplate} sortable></Column>\r\n                    <Column field=\"inventoryStatus\" header=\"Status\" body={statusBodyTemplate} sortable></Column>\r\n                    <Column body={actionBodyTemplate}></Column>\r\n                </DataTable>\r\n            </div>\r\n\r\n            <Dialog visible={productDialog} style={{ width: '450px' }} header=\"Product Details\" modal className=\"p-fluid\" footer={productDialogFooter} onHide={hideDialog}>\r\n                {product.image && <img src={\\`showcase/demo/images/product/\\${product.image}\\`} onError={(e) => e.target.src='https://www.primefaces.org/wp-content/uploads/2020/05/placeholder.png'} alt={product.image} className=\"product-image\" />}\r\n                <div className=\"p-field\">\r\n                    <label htmlFor=\"name\">Name</label>\r\n                    <InputText id=\"name\" value={product.name} onChange={(e) => onInputChange(e, 'name')} required autoFocus className={classNames({ 'p-invalid': submitted && !product.name })} />\r\n                    {submitted && !product.name && <small className=\"p-error\">Name is required.</small>}\r\n                </div>\r\n                <div className=\"p-field\">\r\n                    <label htmlFor=\"description\">Description</label>\r\n                    <InputTextarea id=\"description\" value={product.description} onChange={(e) => onInputChange(e, 'description')} required rows={3} cols={20} />\r\n                </div>\r\n\r\n                <div className=\"p-field\">\r\n                    <label className=\"p-mb-3\">Category</label>\r\n                    <div className=\"p-formgrid p-grid\">\r\n                        <div className=\"p-field-radiobutton p-col-6\">\r\n                            <RadioButton inputId=\"category1\" name=\"category\" value=\"Accessories\" onChange={onCategoryChange} checked={product.category === 'Accessories'} />\r\n                            <label htmlFor=\"category1\">Accessories</label>\r\n                        </div>\r\n                        <div className=\"p-field-radiobutton p-col-6\">\r\n                            <RadioButton inputId=\"category2\" name=\"category\" value=\"Clothing\" onChange={onCategoryChange} checked={product.category === 'Clothing'} />\r\n                            <label htmlFor=\"category2\">Clothing</label>\r\n                        </div>\r\n                        <div className=\"p-field-radiobutton p-col-6\">\r\n                            <RadioButton inputId=\"category3\" name=\"category\" value=\"Electronics\" onChange={onCategoryChange} checked={product.category === 'Electronics'} />\r\n                            <label htmlFor=\"category3\">Electronics</label>\r\n                        </div>\r\n                        <div className=\"p-field-radiobutton p-col-6\">\r\n                            <RadioButton inputId=\"category4\" name=\"category\" value=\"Fitness\" onChange={onCategoryChange} checked={product.category === 'Fitness'} />\r\n                            <label htmlFor=\"category4\">Fitness</label>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"p-formgrid p-grid\">\r\n                    <div className=\"p-field p-col\">\r\n                        <label htmlFor=\"price\">Price</label>\r\n                        <InputNumber id=\"price\" value={product.price} onValueChange={(e) => onInputNumberChange(e, 'price')} mode=\"currency\" currency=\"USD\" locale=\"en-US\" />\r\n                    </div>\r\n                    <div className=\"p-field p-col\">\r\n                        <label htmlFor=\"quantity\">Quantity</label>\r\n                        <InputNumber id=\"quantity\" value={product.quantity} onValueChange={(e) => onInputNumberChange(e, 'quantity')} integeronly />\r\n                    </div>\r\n                </div>\r\n            </Dialog>\r\n\r\n            <Dialog visible={deleteProductDialog} style={{ width: '450px' }} header=\"Confirm\" modal footer={deleteProductDialogFooter} onHide={hideDeleteProductDialog}>\r\n                <div className=\"confirmation-content\">\r\n                    <i className=\"pi pi-exclamation-triangle p-mr-3\" style={{ fontSize: '2rem'}} />\r\n                    {product && <span>Are you sure you want to delete <b>{product.name}</b>?</span>}\r\n                </div>\r\n            </Dialog>\r\n\r\n            <Dialog visible={deleteProductsDialog} style={{ width: '450px' }} header=\"Confirm\" modal footer={deleteProductsDialogFooter} onHide={hideDeleteProductsDialog}>\r\n                <div className=\"confirmation-content\">\r\n                    <i className=\"pi pi-exclamation-triangle p-mr-3\" style={{ fontSize: '2rem'}} />\r\n                    {product && <span>Are you sure you want to delete the selected products?</span>}\r\n                </div>\r\n            </Dialog>\r\n        </div>\r\n    );\r\n}\r\n                `\r\n            }\r\n        };\r\n\r\n        this.extFiles = {\r\n            'src/demo/DataTableDemo.css': {\r\n                content: `\r\n.datatable-crud-demo .table-header {\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: space-between;\r\n}\r\n\r\n.datatable-crud-demo .product-image {\r\n    width: 100px;\r\n    box-shadow: 0 3px 6px rgba(0, 0, 0, 0.16), 0 3px 6px rgba(0, 0, 0, 0.23);\r\n}\r\n\r\n.datatable-crud-demo .p-dialog .product-image {\r\n    width: 150px;\r\n    margin: 0 auto 2rem auto;\r\n    display: block;\r\n}\r\n\r\n.datatable-crud-demo .confirmation-content {\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n}\r\n                `\r\n            }\r\n        }\r\n    }\r\n\r\n    shouldComponentUpdate() {\r\n        return false;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"content-section documentation\">\r\n                <TabView>\r\n                    {\r\n                        useLiveEditorTabs({ name: 'DataTableCrudDemo', sources: this.sources, service: 'ProductService', data: 'products', extFiles: this.extFiles })\r\n                    }\r\n                </TabView>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}