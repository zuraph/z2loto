{"ast":null,"code":"import _classCallCheck from\"C:\\\\Users\\\\zura.ph\\\\WebstormProjects\\\\zz-regul\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";import _createClass from\"C:\\\\Users\\\\zura.ph\\\\WebstormProjects\\\\zz-regul\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";import _inherits from\"C:\\\\Users\\\\zura.ph\\\\WebstormProjects\\\\zz-regul\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";import _createSuper from\"C:\\\\Users\\\\zura.ph\\\\WebstormProjects\\\\zz-regul\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createSuper\";import React,{Component}from'react';import{Link}from'react-router-dom';import{TabView,TabPanel}from'../../components/tabview/TabView';import{CodeHighlight}from'../codehighlight/CodeHighlight';import{useLiveEditorTabs}from'../liveeditor/LiveEditor';export var ProgressBarDoc=/*#__PURE__*/function(_Component){_inherits(ProgressBarDoc,_Component);var _super=_createSuper(ProgressBarDoc);function ProgressBarDoc(props){var _this;_classCallCheck(this,ProgressBarDoc);_this=_super.call(this,props);_this.sources={'class':{tabName:'Class Source',content:\"\\nimport React, { Component } from 'react';\\nimport { ProgressBar } from 'primereact/progressbar';\\nimport { Toast } from 'primereact/toast';\\n\\nexport class ProgressBarDemo extends Component {\\n\\n    constructor(props) {\\n        super(props);\\n        this.state = {\\n            value1: 0\\n        };\\n\\n        this.displayValueTemplate = this.displayValueTemplate.bind(this);\\n    }\\n\\n    displayValueTemplate(value) {\\n        return (\\n            <React.Fragment>\\n                {value}/<b>100</b>\\n            </React.Fragment>\\n        );\\n    }\\n\\n    componentDidMount() {\\n        let val = this.state.value1;\\n        this.interval = setInterval(() => {\\n            val += Math.floor(Math.random() * 10) + 1;\\n\\n            if (val >= 100) {\\n                val = 100;\\n                this.toast.show({ severity: 'info', summary: 'Success', detail: 'Process Completed' });\\n                clearInterval(this.interval);\\n            }\\n\\n            this.setState({\\n                value1: val\\n            });\\n        }, 2000);\\n    }\\n\\n    componentWillUnmount() {\\n        if (this.interval) {\\n            clearInterval(this.interval);\\n            this.interval = null;\\n        }\\n    }\\n\\n    render() {\\n        return (\\n            <div>\\n                <Toast ref={(el) => this.toast = el}></Toast>\\n\\n                <div className=\\\"card\\\">\\n                    <h5>Dynamic</h5>\\n                    <ProgressBar value={this.state.value1}></ProgressBar>\\n\\n                    <h5>Static</h5>\\n                    <ProgressBar value={50}></ProgressBar>\\n\\n                    <h5>Custom display value</h5>\\n                    <ProgressBar value={40} displayValueTemplate={this.displayValueTemplate}></ProgressBar>\\n\\n                    <h5>Indeterminate</h5>\\n                    <ProgressBar mode=\\\"indeterminate\\\" style={{ height: '6px' }}></ProgressBar>\\n                </div>\\n            </div>\\n        );\\n    }\\n}\\n                \"},'hooks':{tabName:'Hooks Source',content:\"\\nimport React, { useState, useEffect, useRef } from 'react';\\nimport { ProgressBar } from 'primereact/progressbar';\\nimport { Toast } from 'primereact/toast';\\n\\nconst ProgressBarDemo = () => {\\n    const [value1, setValue1] = useState(0);\\n    const toast = useRef(null);\\n    const interval = useRef(null);\\n\\n    const displayValueTemplate = (value) => {\\n        return (\\n            <React.Fragment>\\n                {value}/<b>100</b>\\n            </React.Fragment>\\n        );\\n    }\\n\\n    useEffect(() => {\\n        let val = value1;\\n        interval.current = setInterval(() => {\\n            val += Math.floor(Math.random() * 10) + 1;\\n\\n            if (val >= 100) {\\n                val = 100;\\n                toast.current.show({ severity: 'info', summary: 'Success', detail: 'Process Completed' });\\n                clearInterval(interval.current);\\n            }\\n\\n            setValue1(val);\\n        }, 2000);\\n\\n        return () => {\\n            if (interval.current) {\\n                clearInterval(interval.current);\\n                interval.current = null;\\n            }\\n        }\\n    }, []); // eslint-disable-line react-hooks/exhaustive-deps\\n\\n    return (\\n        <div>\\n            <Toast ref={toast}></Toast>\\n\\n            <div className=\\\"card\\\">\\n                <h5>Dynamic</h5>\\n                <ProgressBar value={value1}></ProgressBar>\\n\\n                <h5>Static</h5>\\n                <ProgressBar value={50}></ProgressBar>\\n\\n                <h5>Custom display value</h5>\\n                <ProgressBar value={40} displayValueTemplate={displayValueTemplate}></ProgressBar>\\n\\n                <h5>Indeterminate</h5>\\n                <ProgressBar mode=\\\"indeterminate\\\" style={{ height: '6px' }}></ProgressBar>\\n            </div>\\n        </div>\\n    );\\n}\\n                \"},'ts':{tabName:'TS Source',content:\"\\nimport React, { useState, useEffect, useRef } from 'react';\\nimport { ProgressBar } from 'primereact/progressbar';\\nimport { Toast } from 'primereact/toast';\\n\\nconst ProgressBarDemo = () => {\\n    const [value1, setValue1] = useState(0);\\n    const toast = useRef(null);\\n    const interval = useRef(null);\\n\\n    const displayValueTemplate = (value) => {\\n        return (\\n            <React.Fragment>\\n                {value}/<b>100</b>\\n            </React.Fragment>\\n        );\\n    }\\n\\n    useEffect(() => {\\n        let val = value1;\\n        interval.current = setInterval(() => {\\n            val += Math.floor(Math.random() * 10) + 1;\\n\\n            if (val >= 100) {\\n                val = 100;\\n                toast.current.show({ severity: 'info', summary: 'Success', detail: 'Process Completed' });\\n                clearInterval(interval.current);\\n            }\\n\\n            setValue1(val);\\n        }, 2000);\\n\\n        return () => {\\n            if (interval.current) {\\n                clearInterval(interval.current);\\n                interval.current = null;\\n            }\\n        }\\n    }, []); // eslint-disable-line react-hooks/exhaustive-deps\\n\\n    return (\\n        <div>\\n            <Toast ref={toast}></Toast>\\n\\n            <div className=\\\"card\\\">\\n                <h5>Dynamic</h5>\\n                <ProgressBar value={value1}></ProgressBar>\\n\\n                <h5>Static</h5>\\n                <ProgressBar value={50}></ProgressBar>\\n\\n                <h5>Custom display value</h5>\\n                <ProgressBar value={40} displayValueTemplate={displayValueTemplate}></ProgressBar>\\n\\n                <h5>Indeterminate</h5>\\n                <ProgressBar mode=\\\"indeterminate\\\" style={{ height: '6px' }}></ProgressBar>\\n            </div>\\n        </div>\\n    );\\n}\\n                \"}};return _this;}_createClass(ProgressBarDoc,[{key:\"shouldComponentUpdate\",value:function shouldComponentUpdate(){return false;}},{key:\"render\",value:function render(){return/*#__PURE__*/React.createElement(\"div\",{className:\"content-section documentation\"},/*#__PURE__*/React.createElement(TabView,null,/*#__PURE__*/React.createElement(TabPanel,{header:\"Documentation\"},/*#__PURE__*/React.createElement(\"h5\",null,\"Import\"),/*#__PURE__*/React.createElement(CodeHighlight,{lang:\"js\"},\"\\nimport { ProgressBar } from 'primereact/progressbar';\\n\"),/*#__PURE__*/React.createElement(\"h5\",null,\"Getting Started\"),/*#__PURE__*/React.createElement(\"p\",null,\"ProgressBar has two modes; \\\"determinate\\\" (default) and \\\"indeterminate\\\". In determinate mode, a value between 0 and 100 is required to display the progress.\"),/*#__PURE__*/React.createElement(CodeHighlight,null,\"\\n<ProgressBar value={value} />\\n\"),/*#__PURE__*/React.createElement(\"p\",null,\"Indeterminate is simplly enabled using \",/*#__PURE__*/React.createElement(\"i\",null,\"mode\"),\" property.\"),/*#__PURE__*/React.createElement(CodeHighlight,null,\"\\n<ProgressBar mode=\\\"indeterminate\\\" />\\n\"),/*#__PURE__*/React.createElement(\"h5\",null,\"Properties\"),/*#__PURE__*/React.createElement(\"div\",{className:\"doc-tablewrapper\"},/*#__PURE__*/React.createElement(\"table\",{className:\"doc-table\"},/*#__PURE__*/React.createElement(\"thead\",null,/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"th\",null,\"Name\"),/*#__PURE__*/React.createElement(\"th\",null,\"Type\"),/*#__PURE__*/React.createElement(\"th\",null,\"Default\"),/*#__PURE__*/React.createElement(\"th\",null,\"Description\"))),/*#__PURE__*/React.createElement(\"tbody\",null,/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"td\",null,\"id\"),/*#__PURE__*/React.createElement(\"td\",null,\"string\"),/*#__PURE__*/React.createElement(\"td\",null,\"null\"),/*#__PURE__*/React.createElement(\"td\",null,\"Unique identifier of the element.\")),/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"td\",null,\"value\"),/*#__PURE__*/React.createElement(\"td\",null,\"number\"),/*#__PURE__*/React.createElement(\"td\",null,\"null\"),/*#__PURE__*/React.createElement(\"td\",null,\"Current value of the progress.\")),/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"td\",null,\"showValue\"),/*#__PURE__*/React.createElement(\"td\",null,\"boolean\"),/*#__PURE__*/React.createElement(\"td\",null,\"true\"),/*#__PURE__*/React.createElement(\"td\",null,\"Show or hide progress bar value.\")),/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"td\",null,\"unit\"),/*#__PURE__*/React.createElement(\"td\",null,\"string\"),/*#__PURE__*/React.createElement(\"td\",null,\"%\"),/*#__PURE__*/React.createElement(\"td\",null,\"Unit sign appended to the value.\")),/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"td\",null,\"style\"),/*#__PURE__*/React.createElement(\"td\",null,\"string\"),/*#__PURE__*/React.createElement(\"td\",null,\"null\"),/*#__PURE__*/React.createElement(\"td\",null,\"Inline style of the element.\")),/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"td\",null,\"className\"),/*#__PURE__*/React.createElement(\"td\",null,\"string\"),/*#__PURE__*/React.createElement(\"td\",null,\"null\"),/*#__PURE__*/React.createElement(\"td\",null,\"Style class of the element.\")),/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"td\",null,\"mode\"),/*#__PURE__*/React.createElement(\"td\",null,\"string\"),/*#__PURE__*/React.createElement(\"td\",null,\"determinate\"),/*#__PURE__*/React.createElement(\"td\",null,\"Defines the mode of the progress, valid values are \\\"determinate\\\" and \\\"indeterminate\\\".\")),/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"td\",null,\"color\"),/*#__PURE__*/React.createElement(\"td\",null,\"string\"),/*#__PURE__*/React.createElement(\"td\",null,\"null\"),/*#__PURE__*/React.createElement(\"td\",null,\"Color for the background of the progress.\")),/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"td\",null,\"displayValueTemplate\"),/*#__PURE__*/React.createElement(\"td\",null,\"Element\"),/*#__PURE__*/React.createElement(\"td\",null,\"null\"),/*#__PURE__*/React.createElement(\"td\",null,\"Custom display value template\"))))),/*#__PURE__*/React.createElement(\"h5\",null,\"Styling\"),/*#__PURE__*/React.createElement(\"p\",null,\"Following is the list of structural style classes, for theming classes visit \",/*#__PURE__*/React.createElement(Link,{to:\"/theming\"},\" theming\"),\" page.\"),/*#__PURE__*/React.createElement(\"div\",{className:\"doc-tablewrapper\"},/*#__PURE__*/React.createElement(\"table\",{className:\"doc-table\"},/*#__PURE__*/React.createElement(\"thead\",null,/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"th\",null,\"Name\"),/*#__PURE__*/React.createElement(\"th\",null,\"Element\"))),/*#__PURE__*/React.createElement(\"tbody\",null,/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"td\",null,\"p-progressbar\"),/*#__PURE__*/React.createElement(\"td\",null,\"Container element.\")),/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"td\",null,\"p-progressbar-determinate\"),/*#__PURE__*/React.createElement(\"td\",null,\"Container element of a determinate progressbar.\")),/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"td\",null,\"p-progressbar-indeterminate\"),/*#__PURE__*/React.createElement(\"td\",null,\"Container element of an indeterminate progressbar.\")),/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"td\",null,\"p-progressbar-value\"),/*#__PURE__*/React.createElement(\"td\",null,\"Element whose width changes according to value.\")),/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"td\",null,\"p-progressbar-label\"),/*#__PURE__*/React.createElement(\"td\",null,\"Label element that displays the current value.\")))),/*#__PURE__*/React.createElement(\"h5\",null,\"Dependencies\"),/*#__PURE__*/React.createElement(\"p\",null,\"None.\"))),useLiveEditorTabs({name:'ProgressBarDemo',sources:this.sources})));}}]);return ProgressBarDoc;}(Component);","map":{"version":3,"sources":["C:/Users/zura.ph/WebstormProjects/zz-regul/src/showcase/progressbar/ProgressBarDoc.js"],"names":["React","Component","Link","TabView","TabPanel","CodeHighlight","useLiveEditorTabs","ProgressBarDoc","props","sources","tabName","content","name"],"mappings":"wpBAAA,MAAOA,CAAAA,KAAP,EAAgBC,SAAhB,KAAiC,OAAjC,CACA,OAASC,IAAT,KAAqB,kBAArB,CACA,OAASC,OAAT,CAAkBC,QAAlB,KAAkC,kCAAlC,CACA,OAASC,aAAT,KAA8B,gCAA9B,CACA,OAASC,iBAAT,KAAiC,0BAAjC,CAEA,UAAaC,CAAAA,cAAb,gHAEI,wBAAYC,KAAZ,CAAmB,gDACf,uBAAMA,KAAN,EAEA,MAAKC,OAAL,CAAe,CACX,QAAS,CACLC,OAAO,CAAE,cADJ,CAELC,OAAO,87DAFF,CADE,CA2EX,QAAS,CACLD,OAAO,CAAE,cADJ,CAELC,OAAO,myDAFF,CA3EE,CA2IX,KAAM,CACFD,OAAO,CAAE,WADP,CAEFC,OAAO,myDAFL,CA3IK,CAAf,CAHe,aA+MlB,CAjNL,gEAmNI,gCAAwB,CACpB,MAAO,MAAP,CACH,CArNL,sBAuNI,iBAAS,CACL,mBACI,2BAAK,SAAS,CAAC,+BAAf,eACI,oBAAC,OAAD,mBACI,oBAAC,QAAD,EAAU,MAAM,CAAC,eAAjB,eACI,uCADJ,cAEpB,oBAAC,aAAD,EAAe,IAAI,CAAC,IAApB,8DAFoB,cAQI,gDARJ,cASI,+LATJ,cAUpB,oBAAC,aAAD,0CAVoB,cAeI,oFAA0C,oCAA1C,cAfJ,cAgBpB,oBAAC,aAAD,mDAhBoB,cAsBI,2CAtBJ,cAuBI,2BAAK,SAAS,CAAC,kBAAf,eACI,6BAAO,SAAS,CAAC,WAAjB,eACI,8CACI,2CACI,qCADJ,cAEI,qCAFJ,cAGI,wCAHJ,cAII,4CAJJ,CADJ,CADJ,cASI,8CACI,2CACI,mCADJ,cAEI,uCAFJ,cAGI,qCAHJ,cAII,kEAJJ,CADJ,cAOI,2CACI,sCADJ,cAEI,uCAFJ,cAGI,qCAHJ,cAII,+DAJJ,CAPJ,cAaI,2CACI,0CADJ,cAEI,wCAFJ,cAGI,qCAHJ,cAII,iEAJJ,CAbJ,cAmBI,2CACI,qCADJ,cAEI,uCAFJ,cAGI,kCAHJ,cAII,iEAJJ,CAnBJ,cAyBI,2CACI,sCADJ,cAEI,uCAFJ,cAGI,qCAHJ,cAII,6DAJJ,CAzBJ,cA+BI,2CACI,0CADJ,cAEI,uCAFJ,cAGI,qCAHJ,cAII,4DAJJ,CA/BJ,cAqCI,2CACI,qCADJ,cAEI,uCAFJ,cAGI,4CAHJ,cAII,0HAJJ,CArCJ,cA2CI,2CACI,sCADJ,cAEI,uCAFJ,cAGI,qCAHJ,cAII,0EAJJ,CA3CJ,cAiDI,2CACI,qDADJ,cAEI,wCAFJ,cAGI,qCAHJ,cAII,8DAJJ,CAjDJ,CATJ,CADJ,CAvBJ,cA4FI,wCA5FJ,cA6FI,0HAAgF,oBAAC,IAAD,EAAM,EAAE,CAAC,UAAT,aAAhF,UA7FJ,cA8FI,2BAAK,SAAS,CAAC,kBAAf,eACI,6BAAO,SAAS,CAAC,WAAjB,eACI,8CACI,2CACI,qCADJ,cAEI,wCAFJ,CADJ,CADJ,cAOI,8CACI,2CACI,8CADJ,cAEI,mDAFJ,CADJ,cAKI,2CACI,0DADJ,cAEI,gFAFJ,CALJ,cASI,2CACI,4DADJ,cAEI,mFAFJ,CATJ,cAaI,2CACI,oDADJ,cAEI,gFAFJ,CAbJ,cAiBI,2CACI,oDADJ,cAEI,+EAFJ,CAjBJ,CAPJ,CADJ,cAgCI,6CAhCJ,cAiCI,qCAjCJ,CA9FJ,CADJ,CAqIQL,iBAAiB,CAAC,CAAEM,IAAI,CAAE,iBAAR,CAA2BH,OAAO,CAAE,KAAKA,OAAzC,CAAD,CArIzB,CADJ,CADJ,CA4IH,CApWL,4BAAoCR,SAApC","sourcesContent":["import React, { Component } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { TabView, TabPanel } from '../../components/tabview/TabView';\r\nimport { CodeHighlight } from '../codehighlight/CodeHighlight';\r\nimport { useLiveEditorTabs }from '../liveeditor/LiveEditor';\r\n\r\nexport class ProgressBarDoc extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.sources = {\r\n            'class': {\r\n                tabName: 'Class Source',\r\n                content: `\r\nimport React, { Component } from 'react';\r\nimport { ProgressBar } from 'primereact/progressbar';\r\nimport { Toast } from 'primereact/toast';\r\n\r\nexport class ProgressBarDemo extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            value1: 0\r\n        };\r\n\r\n        this.displayValueTemplate = this.displayValueTemplate.bind(this);\r\n    }\r\n\r\n    displayValueTemplate(value) {\r\n        return (\r\n            <React.Fragment>\r\n                {value}/<b>100</b>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n\r\n    componentDidMount() {\r\n        let val = this.state.value1;\r\n        this.interval = setInterval(() => {\r\n            val += Math.floor(Math.random() * 10) + 1;\r\n\r\n            if (val >= 100) {\r\n                val = 100;\r\n                this.toast.show({ severity: 'info', summary: 'Success', detail: 'Process Completed' });\r\n                clearInterval(this.interval);\r\n            }\r\n\r\n            this.setState({\r\n                value1: val\r\n            });\r\n        }, 2000);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        if (this.interval) {\r\n            clearInterval(this.interval);\r\n            this.interval = null;\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Toast ref={(el) => this.toast = el}></Toast>\r\n\r\n                <div className=\"card\">\r\n                    <h5>Dynamic</h5>\r\n                    <ProgressBar value={this.state.value1}></ProgressBar>\r\n\r\n                    <h5>Static</h5>\r\n                    <ProgressBar value={50}></ProgressBar>\r\n\r\n                    <h5>Custom display value</h5>\r\n                    <ProgressBar value={40} displayValueTemplate={this.displayValueTemplate}></ProgressBar>\r\n\r\n                    <h5>Indeterminate</h5>\r\n                    <ProgressBar mode=\"indeterminate\" style={{ height: '6px' }}></ProgressBar>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n                `\r\n            },\r\n            'hooks': {\r\n                tabName: 'Hooks Source',\r\n                content: `\r\nimport React, { useState, useEffect, useRef } from 'react';\r\nimport { ProgressBar } from 'primereact/progressbar';\r\nimport { Toast } from 'primereact/toast';\r\n\r\nconst ProgressBarDemo = () => {\r\n    const [value1, setValue1] = useState(0);\r\n    const toast = useRef(null);\r\n    const interval = useRef(null);\r\n\r\n    const displayValueTemplate = (value) => {\r\n        return (\r\n            <React.Fragment>\r\n                {value}/<b>100</b>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n\r\n    useEffect(() => {\r\n        let val = value1;\r\n        interval.current = setInterval(() => {\r\n            val += Math.floor(Math.random() * 10) + 1;\r\n\r\n            if (val >= 100) {\r\n                val = 100;\r\n                toast.current.show({ severity: 'info', summary: 'Success', detail: 'Process Completed' });\r\n                clearInterval(interval.current);\r\n            }\r\n\r\n            setValue1(val);\r\n        }, 2000);\r\n\r\n        return () => {\r\n            if (interval.current) {\r\n                clearInterval(interval.current);\r\n                interval.current = null;\r\n            }\r\n        }\r\n    }, []); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n    return (\r\n        <div>\r\n            <Toast ref={toast}></Toast>\r\n\r\n            <div className=\"card\">\r\n                <h5>Dynamic</h5>\r\n                <ProgressBar value={value1}></ProgressBar>\r\n\r\n                <h5>Static</h5>\r\n                <ProgressBar value={50}></ProgressBar>\r\n\r\n                <h5>Custom display value</h5>\r\n                <ProgressBar value={40} displayValueTemplate={displayValueTemplate}></ProgressBar>\r\n\r\n                <h5>Indeterminate</h5>\r\n                <ProgressBar mode=\"indeterminate\" style={{ height: '6px' }}></ProgressBar>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n                `\r\n            },\r\n            'ts': {\r\n                tabName: 'TS Source',\r\n                content: `\r\nimport React, { useState, useEffect, useRef } from 'react';\r\nimport { ProgressBar } from 'primereact/progressbar';\r\nimport { Toast } from 'primereact/toast';\r\n\r\nconst ProgressBarDemo = () => {\r\n    const [value1, setValue1] = useState(0);\r\n    const toast = useRef(null);\r\n    const interval = useRef(null);\r\n\r\n    const displayValueTemplate = (value) => {\r\n        return (\r\n            <React.Fragment>\r\n                {value}/<b>100</b>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n\r\n    useEffect(() => {\r\n        let val = value1;\r\n        interval.current = setInterval(() => {\r\n            val += Math.floor(Math.random() * 10) + 1;\r\n\r\n            if (val >= 100) {\r\n                val = 100;\r\n                toast.current.show({ severity: 'info', summary: 'Success', detail: 'Process Completed' });\r\n                clearInterval(interval.current);\r\n            }\r\n\r\n            setValue1(val);\r\n        }, 2000);\r\n\r\n        return () => {\r\n            if (interval.current) {\r\n                clearInterval(interval.current);\r\n                interval.current = null;\r\n            }\r\n        }\r\n    }, []); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n    return (\r\n        <div>\r\n            <Toast ref={toast}></Toast>\r\n\r\n            <div className=\"card\">\r\n                <h5>Dynamic</h5>\r\n                <ProgressBar value={value1}></ProgressBar>\r\n\r\n                <h5>Static</h5>\r\n                <ProgressBar value={50}></ProgressBar>\r\n\r\n                <h5>Custom display value</h5>\r\n                <ProgressBar value={40} displayValueTemplate={displayValueTemplate}></ProgressBar>\r\n\r\n                <h5>Indeterminate</h5>\r\n                <ProgressBar mode=\"indeterminate\" style={{ height: '6px' }}></ProgressBar>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n                `\r\n            }\r\n        }\r\n    }\r\n\r\n    shouldComponentUpdate() {\r\n        return false;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"content-section documentation\">\r\n                <TabView>\r\n                    <TabPanel header=\"Documentation\">\r\n                        <h5>Import</h5>\r\n<CodeHighlight lang=\"js\">\r\n{`\r\nimport { ProgressBar } from 'primereact/progressbar';\r\n`}\r\n</CodeHighlight>\r\n\r\n                        <h5>Getting Started</h5>\r\n                        <p>ProgressBar has two modes; \"determinate\" (default) and \"indeterminate\". In determinate mode, a value between 0 and 100 is required to display the progress.</p>\r\n<CodeHighlight>\r\n{`\r\n<ProgressBar value={value} />\r\n`}\r\n</CodeHighlight>\r\n                        <p>Indeterminate is simplly enabled using <i>mode</i> property.</p>\r\n<CodeHighlight>\r\n{`\r\n<ProgressBar mode=\"indeterminate\" />\r\n`}\r\n</CodeHighlight>\r\n\r\n                        <h5>Properties</h5>\r\n                        <div className=\"doc-tablewrapper\">\r\n                            <table className=\"doc-table\">\r\n                                <thead>\r\n                                    <tr>\r\n                                        <th>Name</th>\r\n                                        <th>Type</th>\r\n                                        <th>Default</th>\r\n                                        <th>Description</th>\r\n                                    </tr>\r\n                                </thead>\r\n                                <tbody>\r\n                                    <tr>\r\n                                        <td>id</td>\r\n                                        <td>string</td>\r\n                                        <td>null</td>\r\n                                        <td>Unique identifier of the element.</td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>value</td>\r\n                                        <td>number</td>\r\n                                        <td>null</td>\r\n                                        <td>Current value of the progress.</td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>showValue</td>\r\n                                        <td>boolean</td>\r\n                                        <td>true</td>\r\n                                        <td>Show or hide progress bar value.</td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>unit</td>\r\n                                        <td>string</td>\r\n                                        <td>%</td>\r\n                                        <td>Unit sign appended to the value.</td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>style</td>\r\n                                        <td>string</td>\r\n                                        <td>null</td>\r\n                                        <td>Inline style of the element.</td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>className</td>\r\n                                        <td>string</td>\r\n                                        <td>null</td>\r\n                                        <td>Style class of the element.</td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>mode</td>\r\n                                        <td>string</td>\r\n                                        <td>determinate</td>\r\n                                        <td>Defines the mode of the progress, valid values are \"determinate\" and \"indeterminate\".</td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>color</td>\r\n                                        <td>string</td>\r\n                                        <td>null</td>\r\n                                        <td>Color for the background of the progress.</td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>displayValueTemplate</td>\r\n                                        <td>Element</td>\r\n                                        <td>null</td>\r\n                                        <td>Custom display value template</td>\r\n                                    </tr>\r\n                                </tbody>\r\n                            </table>\r\n                        </div>\r\n\r\n                        <h5>Styling</h5>\r\n                        <p>Following is the list of structural style classes, for theming classes visit <Link to=\"/theming\"> theming</Link> page.</p>\r\n                        <div className=\"doc-tablewrapper\">\r\n                            <table className=\"doc-table\">\r\n                                <thead>\r\n                                    <tr>\r\n                                        <th>Name</th>\r\n                                        <th>Element</th>\r\n                                    </tr>\r\n                                </thead>\r\n                                <tbody>\r\n                                    <tr>\r\n                                        <td>p-progressbar</td>\r\n                                        <td>Container element.</td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>p-progressbar-determinate</td>\r\n                                        <td>Container element of a determinate progressbar.</td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>p-progressbar-indeterminate</td>\r\n                                        <td>Container element of an indeterminate progressbar.</td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>p-progressbar-value</td>\r\n                                        <td>Element whose width changes according to value.</td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>p-progressbar-label</td>\r\n                                        <td>Label element that displays the current value.</td>\r\n                                    </tr>\r\n                                </tbody>\r\n                            </table>\r\n\r\n                            <h5>Dependencies</h5>\r\n                            <p>None.</p>\r\n                        </div>\r\n                    </TabPanel>\r\n\r\n                    {\r\n                        useLiveEditorTabs({ name: 'ProgressBarDemo', sources: this.sources })\r\n                    }\r\n                </TabView>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}