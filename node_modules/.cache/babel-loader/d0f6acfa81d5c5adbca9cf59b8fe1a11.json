{"ast":null,"code":"import _classCallCheck from\"C:\\\\Users\\\\zura.ph\\\\WebstormProjects\\\\zz-regul\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";import _createClass from\"C:\\\\Users\\\\zura.ph\\\\WebstormProjects\\\\zz-regul\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";import _inherits from\"C:\\\\Users\\\\zura.ph\\\\WebstormProjects\\\\zz-regul\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";import _createSuper from\"C:\\\\Users\\\\zura.ph\\\\WebstormProjects\\\\zz-regul\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createSuper\";import React,{Component}from'react';import{Link}from'react-router-dom';import{TabView,TabPanel}from'../../components/tabview/TabView';import{useLiveEditorTabs}from'../liveeditor/LiveEditor';import{CodeHighlight}from'../codehighlight/CodeHighlight';export var InputMaskDoc=/*#__PURE__*/function(_Component){_inherits(InputMaskDoc,_Component);var _super=_createSuper(InputMaskDoc);function InputMaskDoc(props){var _this;_classCallCheck(this,InputMaskDoc);_this=_super.call(this,props);_this.sources={'class':{tabName:'Class Source',content:\"\\nimport React, { Component } from 'react';\\nimport { InputMask } from 'primereact/inputmask';\\n\\nexport class InputMaskDemo extends Component {\\n\\n    constructor(props) {\\n        super(props);\\n        this.state = {\\n            val1: null,\\n            val2: null,\\n            val3: null,\\n            val4: null,\\n            val5: null,\\n            val6: null\\n        };\\n    }\\n\\n    render() {\\n        return (\\n            <div>\\n                <div className=\\\"card\\\">\\n                    <div className=\\\"p-fluid p-formgrid p-grid\\\">\\n                        <div className=\\\"p-field p-col-12 p-md-4\\\">\\n                            <label htmlFor=\\\"basic\\\">Basic</label>\\n                            <InputMask id=\\\"basic\\\" mask=\\\"99-999999\\\" value={this.state.val1} placeholder=\\\"99-999999\\\" onChange={(e) => this.setState({val1: e.value})}></InputMask>\\n                        </div>\\n\\n                        <div className=\\\"p-field p-col-12 p-md-4\\\">\\n                            <label htmlFor=\\\"ssn\\\">SSN</label>\\n                            <InputMask id=\\\"ssn\\\" mask=\\\"999-99-9999\\\" value={this.state.val2} placeholder=\\\"999-99-9999\\\" onChange={(e) => this.setState({val2: e.value})}></InputMask>\\n                        </div>\\n\\n                        <div className=\\\"p-field p-col-12 p-md-4\\\">\\n                            <label htmlFor=\\\"date\\\">Date</label>\\n                            <InputMask id=\\\"date\\\" mask=\\\"99/99/9999\\\" value={this.state.val3} placeholder=\\\"99/99/9999\\\" slotChar=\\\"mm/dd/yyyy\\\" onChange={(e) => this.setState({val3: e.value})}></InputMask>\\n                        </div>\\n\\n                        <div className=\\\"p-field p-col-12 p-md-4\\\">\\n                            <label htmlFor=\\\"phone\\\">Phone</label>\\n                            <InputMask id=\\\"phone\\\" mask=\\\"(999) 999-9999\\\" value={this.state.val4} placeholder=\\\"(999) 999-9999\\\" onChange={(e) => this.setState({val4: e.value})}></InputMask>\\n                        </div>\\n\\n                        <div className=\\\"p-field p-col-12 p-md-4\\\">\\n                            <label htmlFor=\\\"phoneext\\\">Phone Ext</label>\\n                            <InputMask id=\\\"phoneext\\\" mask=\\\"(999) 999-9999? x99999\\\" value={this.state.val5} placeholder=\\\"(999) 999-9999? x99999\\\" onChange={(e) => this.setState({val5: e.value})}></InputMask>\\n                        </div>\\n\\n                        <div className=\\\"p-field p-col-12 p-md-4\\\">\\n                            <label htmlFor=\\\"serial\\\">Serial</label>\\n                            <InputMask id=\\\"serial\\\" mask=\\\"a*-999-a999\\\" value={this.state.val6} placeholder=\\\"a*-999-a999\\\" onChange={(e) => this.setState({val6: e.value})}></InputMask>\\n                        </div>\\n                    </div>\\n                </div>\\n            </div>\\n        );\\n    }\\n}\\n                \"},'hooks':{tabName:'Hooks Source',content:\"\\nimport React, { useState } from 'react';\\nimport { InputMask } from 'primereact/inputmask';\\n\\nconst InputMaskDemo = () => {\\n    const [val1, setVal1] = useState();\\n    const [val2, setVal2] = useState();\\n    const [val3, setVal3] = useState();\\n    const [val4, setVal4] = useState();\\n    const [val5, setVal5] = useState();\\n    const [val6, setVal6] = useState();\\n\\n    return (\\n        <div>\\n            <div className=\\\"card\\\">\\n                <div className=\\\"p-fluid p-formgrid p-grid\\\">\\n                    <div className=\\\"p-field p-col-12 p-md-4\\\">\\n                        <label htmlFor=\\\"basic\\\">Basic</label>\\n                        <InputMask id=\\\"basic\\\" mask=\\\"99-999999\\\" value={val1} placeholder=\\\"99-999999\\\" onChange={(e) => setVal1(e.value)}></InputMask>\\n                    </div>\\n\\n                    <div className=\\\"p-field p-col-12 p-md-4\\\">\\n                        <label htmlFor=\\\"ssn\\\">SSN</label>\\n                        <InputMask id=\\\"ssn\\\" mask=\\\"999-99-9999\\\" value={val2} placeholder=\\\"999-99-9999\\\" onChange={(e) => setVal2(e.value)}></InputMask>\\n                    </div>\\n\\n                    <div className=\\\"p-field p-col-12 p-md-4\\\">\\n                        <label htmlFor=\\\"date\\\">Date</label>\\n                        <InputMask id=\\\"date\\\" mask=\\\"99/99/9999\\\" value={val3} placeholder=\\\"99/99/9999\\\" slotChar=\\\"mm/dd/yyyy\\\" onChange={(e) => setVal3(e.value)}></InputMask>\\n                    </div>\\n\\n                    <div className=\\\"p-field p-col-12 p-md-4\\\">\\n                        <label htmlFor=\\\"phone\\\">Phone</label>\\n                        <InputMask id=\\\"phone\\\" mask=\\\"(999) 999-9999\\\" value={val4} placeholder=\\\"(999) 999-9999\\\" onChange={(e) => setVal4(e.value)}></InputMask>\\n                    </div>\\n\\n                    <div className=\\\"p-field p-col-12 p-md-4\\\">\\n                        <label htmlFor=\\\"phoneext\\\">Phone Ext</label>\\n                        <InputMask id=\\\"phoneext\\\" mask=\\\"(999) 999-9999? x99999\\\" value={val5} placeholder=\\\"(999) 999-9999? x99999\\\" onChange={(e) => setVal5(e.value)}></InputMask>\\n                    </div>\\n\\n                    <div className=\\\"p-field p-col-12 p-md-4\\\">\\n                        <label htmlFor=\\\"serial\\\">Serial</label>\\n                        <InputMask id=\\\"serial\\\" mask=\\\"a*-999-a999\\\" value={val6} placeholder=\\\"a*-999-a999\\\" onChange={(e) => setVal6(e.value)}></InputMask>\\n                    </div>\\n                </div>\\n            </div>\\n        </div>\\n    );\\n}\\n                \"},'ts':{tabName:'TS Source',content:\"\\nimport React, { useState } from 'react';\\nimport { InputMask } from 'primereact/inputmask';\\n\\nconst InputMaskDemo = () => {\\n    const [val1, setVal1] = useState();\\n    const [val2, setVal2] = useState();\\n    const [val3, setVal3] = useState();\\n    const [val4, setVal4] = useState();\\n    const [val5, setVal5] = useState();\\n    const [val6, setVal6] = useState();\\n\\n    return (\\n        <div>\\n            <div className=\\\"card\\\">\\n                <div className=\\\"p-fluid p-formgrid p-grid\\\">\\n                    <div className=\\\"p-field p-col-12 p-md-4\\\">\\n                        <label htmlFor=\\\"basic\\\">Basic</label>\\n                        <InputMask id=\\\"basic\\\" mask=\\\"99-999999\\\" value={val1} placeholder=\\\"99-999999\\\" onChange={(e) => setVal1(e.value)}></InputMask>\\n                    </div>\\n\\n                    <div className=\\\"p-field p-col-12 p-md-4\\\">\\n                        <label htmlFor=\\\"ssn\\\">SSN</label>\\n                        <InputMask id=\\\"ssn\\\" mask=\\\"999-99-9999\\\" value={val2} placeholder=\\\"999-99-9999\\\" onChange={(e) => setVal2(e.value)}></InputMask>\\n                    </div>\\n\\n                    <div className=\\\"p-field p-col-12 p-md-4\\\">\\n                        <label htmlFor=\\\"date\\\">Date</label>\\n                        <InputMask id=\\\"date\\\" mask=\\\"99/99/9999\\\" value={val3} placeholder=\\\"99/99/9999\\\" slotChar=\\\"mm/dd/yyyy\\\" onChange={(e) => setVal3(e.value)}></InputMask>\\n                    </div>\\n\\n                    <div className=\\\"p-field p-col-12 p-md-4\\\">\\n                        <label htmlFor=\\\"phone\\\">Phone</label>\\n                        <InputMask id=\\\"phone\\\" mask=\\\"(999) 999-9999\\\" value={val4} placeholder=\\\"(999) 999-9999\\\" onChange={(e) => setVal4(e.value)}></InputMask>\\n                    </div>\\n\\n                    <div className=\\\"p-field p-col-12 p-md-4\\\">\\n                        <label htmlFor=\\\"phoneext\\\">Phone Ext</label>\\n                        <InputMask id=\\\"phoneext\\\" mask=\\\"(999) 999-9999? x99999\\\" value={val5} placeholder=\\\"(999) 999-9999? x99999\\\" onChange={(e) => setVal5(e.value)}></InputMask>\\n                    </div>\\n\\n                    <div className=\\\"p-field p-col-12 p-md-4\\\">\\n                        <label htmlFor=\\\"serial\\\">Serial</label>\\n                        <InputMask id=\\\"serial\\\" mask=\\\"a*-999-a999\\\" value={val6} placeholder=\\\"a*-999-a999\\\" onChange={(e) => setVal6(e.value)}></InputMask>\\n                    </div>\\n                </div>\\n            </div>\\n        </div>\\n    );\\n}\\n                \"}};return _this;}_createClass(InputMaskDoc,[{key:\"shouldComponentUpdate\",value:function shouldComponentUpdate(){return false;}},{key:\"render\",value:function render(){return/*#__PURE__*/React.createElement(\"div\",{className:\"content-section documentation\"},/*#__PURE__*/React.createElement(TabView,null,/*#__PURE__*/React.createElement(TabPanel,{header:\"Documentation\"},/*#__PURE__*/React.createElement(\"h5\",null,\"Import\"),/*#__PURE__*/React.createElement(CodeHighlight,{lang:\"js\"},\"\\nimport { InputMask } from 'primereact/inputmask';\\n\"),/*#__PURE__*/React.createElement(\"h5\",null,\"Getting Started\"),/*#__PURE__*/React.createElement(\"p\",null,\"InputMask is used as a controlled component with \",/*#__PURE__*/React.createElement(\"i\",null,\"value\"),\" and \",/*#__PURE__*/React.createElement(\"i\",null,\"onChange\"),\" properties.\"),/*#__PURE__*/React.createElement(CodeHighlight,null,\"\\n<InputMask mask=\\\"99-999999\\\" value={value} onChange={(e) => setValue(e.value)}></InputMask>\\n\"),/*#__PURE__*/React.createElement(\"h5\",null,\"Mask\"),/*#__PURE__*/React.createElement(\"p\",null,\"Mask format can be a combination of the the following built-in definitions.\"),/*#__PURE__*/React.createElement(\"ul\",null,/*#__PURE__*/React.createElement(\"li\",null,\"a - Alpha character (A-Z,a-z)\"),/*#__PURE__*/React.createElement(\"li\",null,\"9 - Numeric character (0-9)\"),/*#__PURE__*/React.createElement(\"li\",null,\"* - Alpha numberic character (A-Z,a-z,0-9)\")),/*#__PURE__*/React.createElement(CodeHighlight,null,\"\\n<InputMask mask=\\\"a*-999-a999\\\" value={value} onChange={(e) => setValue(e.value)}></InputMask>\\n\"),/*#__PURE__*/React.createElement(\"h5\",null,\"SlotChar\"),/*#__PURE__*/React.createElement(\"p\",null,\"Underscore is the default placeholder for a mask and this can be customized using \",/*#__PURE__*/React.createElement(\"i\",null,\"slotChart\"),\" option.\"),/*#__PURE__*/React.createElement(CodeHighlight,null,\"\\n<InputMask mask=\\\"99/99/9999\\\" slotChar=\\\"mm/dd/yyyy\\\" value={value} onChange={(e) => setValue(e.value)}></InputMask>\\n\"),/*#__PURE__*/React.createElement(\"h5\",null,\"Optional Values\"),/*#__PURE__*/React.createElement(\"p\",null,\"If the input does not complete the mask definition, it is cleared by default. Use \",/*#__PURE__*/React.createElement(\"i\",null,\"autoClear\"),\" property to control this behavior. In addition, certain part of a mask can be made optional by using ? symbol where anything after the question mark becomes optional.\"),/*#__PURE__*/React.createElement(CodeHighlight,null,\"\\n<InputMask mask=\\\"(999) 999-9999? x99999\\\" value={value} onChange={(e) => setValue(e.value)}></InputMask>\\n\"),/*#__PURE__*/React.createElement(\"h5\",null,\"Properties\"),/*#__PURE__*/React.createElement(\"div\",{className:\"doc-tablewrapper\"},/*#__PURE__*/React.createElement(\"table\",{className:\"doc-table\"},/*#__PURE__*/React.createElement(\"thead\",null,/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"th\",null,\"Name\"),/*#__PURE__*/React.createElement(\"th\",null,\"Type\"),/*#__PURE__*/React.createElement(\"th\",null,\"Default\"),/*#__PURE__*/React.createElement(\"th\",null,\"Description\"))),/*#__PURE__*/React.createElement(\"tbody\",null,/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"td\",null,\"id\"),/*#__PURE__*/React.createElement(\"td\",null,\"string\"),/*#__PURE__*/React.createElement(\"td\",null,\"null\"),/*#__PURE__*/React.createElement(\"td\",null,\"Unique identifier of the element.\")),/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"td\",null,\"value\"),/*#__PURE__*/React.createElement(\"td\",null,\"string\"),/*#__PURE__*/React.createElement(\"td\",null,\"null\"),/*#__PURE__*/React.createElement(\"td\",null,\"Value of the component.\")),/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"td\",null,\"type\"),/*#__PURE__*/React.createElement(\"td\",null,\"string\"),/*#__PURE__*/React.createElement(\"td\",null,\"text\"),/*#__PURE__*/React.createElement(\"td\",null,\"HTML5 input type\")),/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"td\",null,\"mask\"),/*#__PURE__*/React.createElement(\"td\",null,\"string\"),/*#__PURE__*/React.createElement(\"td\",null,\"null\"),/*#__PURE__*/React.createElement(\"td\",null,\"Mask pattern.\")),/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"td\",null,\"slotChar\"),/*#__PURE__*/React.createElement(\"td\",null,\"string\"),/*#__PURE__*/React.createElement(\"td\",null,\"-\"),/*#__PURE__*/React.createElement(\"td\",null,\"Placeholder character in mask, default is underscore.\")),/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"td\",null,\"autoClear\"),/*#__PURE__*/React.createElement(\"td\",null,\"boolean\"),/*#__PURE__*/React.createElement(\"td\",null,\"true\"),/*#__PURE__*/React.createElement(\"td\",null,\"Clears the incomplete value on blur.\")),/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"td\",null,\"unmask\"),/*#__PURE__*/React.createElement(\"td\",null,\"boolean\"),/*#__PURE__*/React.createElement(\"td\",null,\"false\"),/*#__PURE__*/React.createElement(\"td\",null,\"Defines if model sets the raw unmasked value to bound value or the formatted mask value.\")),/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"td\",null,\"style\"),/*#__PURE__*/React.createElement(\"td\",null,\"string\"),/*#__PURE__*/React.createElement(\"td\",null,\"null\"),/*#__PURE__*/React.createElement(\"td\",null,\"Inline style of the element.\")),/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"td\",null,\"className\"),/*#__PURE__*/React.createElement(\"td\",null,\"string\"),/*#__PURE__*/React.createElement(\"td\",null,\"null\"),/*#__PURE__*/React.createElement(\"td\",null,\"Style class of the element.\")),/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"td\",null,\"placeholder\"),/*#__PURE__*/React.createElement(\"td\",null,\"string\"),/*#__PURE__*/React.createElement(\"td\",null,\"null\"),/*#__PURE__*/React.createElement(\"td\",null,\"Advisory information to display on input.\")),/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"td\",null,\"size\"),/*#__PURE__*/React.createElement(\"td\",null,\"number\"),/*#__PURE__*/React.createElement(\"td\",null,\"null\"),/*#__PURE__*/React.createElement(\"td\",null,\"Size of the input field.\")),/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"td\",null,\"maxlength\"),/*#__PURE__*/React.createElement(\"td\",null,\"number\"),/*#__PURE__*/React.createElement(\"td\",null,\"null\"),/*#__PURE__*/React.createElement(\"td\",null,\"Maximum number of character allows in the input field.\")),/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"td\",null,\"tabIndex\"),/*#__PURE__*/React.createElement(\"td\",null,\"number\"),/*#__PURE__*/React.createElement(\"td\",null,\"null\"),/*#__PURE__*/React.createElement(\"td\",null,\"Specifies tab order of the element.\")),/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"td\",null,\"disabled\"),/*#__PURE__*/React.createElement(\"td\",null,\"boolean\"),/*#__PURE__*/React.createElement(\"td\",null,\"false\"),/*#__PURE__*/React.createElement(\"td\",null,\"When present, it specifies that the element value cannot be altered.\")),/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"td\",null,\"readOnly\"),/*#__PURE__*/React.createElement(\"td\",null,\"boolean\"),/*#__PURE__*/React.createElement(\"td\",null,\"false\"),/*#__PURE__*/React.createElement(\"td\",null,\"When present, it specifies that an input field is read-only.\")),/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"td\",null,\"name\"),/*#__PURE__*/React.createElement(\"td\",null,\"string\"),/*#__PURE__*/React.createElement(\"td\",null,\"null\"),/*#__PURE__*/React.createElement(\"td\",null,\"Name of the input field.\")),/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"td\",null,\"required\"),/*#__PURE__*/React.createElement(\"td\",null,\"boolean\"),/*#__PURE__*/React.createElement(\"td\",null,\"false\"),/*#__PURE__*/React.createElement(\"td\",null,\"When present, it specifies that the element must be filled out before submitting the form.\")),/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"td\",null,\"tooltip\"),/*#__PURE__*/React.createElement(\"td\",null,\"any\"),/*#__PURE__*/React.createElement(\"td\",null,\"null\"),/*#__PURE__*/React.createElement(\"td\",null,\"Content of the tooltip.\")),/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"td\",null,\"tooltipOptions\"),/*#__PURE__*/React.createElement(\"td\",null,\"object\"),/*#__PURE__*/React.createElement(\"td\",null,\"null\"),/*#__PURE__*/React.createElement(\"td\",null,\"Configuration of the tooltip, refer to the tooltip documentation for more information.\"))))),/*#__PURE__*/React.createElement(\"h5\",null,\"Events\"),/*#__PURE__*/React.createElement(\"div\",{className:\"doc-tablewrapper\"},/*#__PURE__*/React.createElement(\"table\",{className:\"doc-table\"},/*#__PURE__*/React.createElement(\"thead\",null,/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"th\",null,\"Name\"),/*#__PURE__*/React.createElement(\"th\",null,\"Parameters\"),/*#__PURE__*/React.createElement(\"th\",null,\"Description\"))),/*#__PURE__*/React.createElement(\"tbody\",null,/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"td\",null,\"onFocus\"),/*#__PURE__*/React.createElement(\"td\",null,\"event: Browser event\"),/*#__PURE__*/React.createElement(\"td\",null,\"Callback to invoke when input receives focus.\")),/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"td\",null,\"onBlur\"),/*#__PURE__*/React.createElement(\"td\",null,\"event: Browser event\"),/*#__PURE__*/React.createElement(\"td\",null,\"Callback to invoke when input loses focus.\")),/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"td\",null,\"onComplete\"),/*#__PURE__*/React.createElement(\"td\",null,\"event: Browser event\",/*#__PURE__*/React.createElement(\"br\",null),\"value: New value of the component\"),/*#__PURE__*/React.createElement(\"td\",null,\"Callback to invoke on when user completes the mask pattern.\")),/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"td\",null,\"onChange\"),/*#__PURE__*/React.createElement(\"td\",null,\"originalEvent: Browser event \",/*#__PURE__*/React.createElement(\"br\",null),\"value: New value of the component\"),/*#__PURE__*/React.createElement(\"td\",null,\"Callback to invoke on value change.\"))))),/*#__PURE__*/React.createElement(\"h5\",null,\"Styling\"),/*#__PURE__*/React.createElement(\"p\",null,\"Styling is same as \",/*#__PURE__*/React.createElement(Link,{to:\"/inputtext\"},\" inputtext component\"),\", for theming classes visit \",/*#__PURE__*/React.createElement(Link,{to:\"/theming\"},\" theming page.\")),/*#__PURE__*/React.createElement(\"h5\",null,\"Dependencies\"),/*#__PURE__*/React.createElement(\"p\",null,\"None.\")),useLiveEditorTabs({name:'InputMaskDemo',sources:this.sources})));}}]);return InputMaskDoc;}(Component);","map":{"version":3,"sources":["C:/Users/zura.ph/WebstormProjects/zz-regul/src/showcase/inputmask/InputMaskDoc.js"],"names":["React","Component","Link","TabView","TabPanel","useLiveEditorTabs","CodeHighlight","InputMaskDoc","props","sources","tabName","content","name"],"mappings":"wpBAAA,MAAOA,CAAAA,KAAP,EAAgBC,SAAhB,KAAiC,OAAjC,CACA,OAASC,IAAT,KAAqB,kBAArB,CACA,OAASC,OAAT,CAAkBC,QAAlB,KAAkC,kCAAlC,CACA,OAASC,iBAAT,KAAiC,0BAAjC,CACA,OAASC,aAAT,KAA8B,gCAA9B,CAEA,UAAaC,CAAAA,YAAb,4GAEI,sBAAYC,KAAZ,CAAmB,8CACf,uBAAMA,KAAN,EAEA,MAAKC,OAAL,CAAe,CACX,QAAS,CACLC,OAAO,CAAE,cADJ,CAELC,OAAO,ozFAFF,CADE,CA+DX,QAAS,CACLD,OAAO,CAAE,cADJ,CAELC,OAAO,w/EAFF,CA/DE,CAqHX,KAAM,CACFD,OAAO,CAAE,WADP,CAEFC,OAAO,w/EAFL,CArHK,CAAf,CAHe,aA+KlB,CAjLL,8DAmLI,gCAAwB,CACpB,MAAO,MAAP,CACH,CArLL,sBAuLI,iBAAS,CACL,mBACI,2BAAK,SAAS,CAAC,+BAAf,eACI,oBAAC,OAAD,mBACI,oBAAC,QAAD,EAAU,MAAM,CAAC,eAAjB,eACI,uCADJ,cAEpB,oBAAC,aAAD,EAAe,IAAI,CAAC,IAApB,0DAFoB,cAQI,gDARJ,cASI,8FAAoD,qCAApD,sBAAqE,wCAArE,gBATJ,cAWpB,oBAAC,aAAD,yGAXoB,cAiBI,qCAjBJ,cAkBI,2GAlBJ,cAoBI,2CACI,8DADJ,cAII,4DAJJ,cAOI,2EAPJ,CApBJ,cAgCpB,oBAAC,aAAD,2GAhCoB,cAsCI,yCAtCJ,cAuCI,+HAAqF,yCAArF,YAvCJ,cAyCpB,oBAAC,aAAD,kIAzCoB,cA+CI,gDA/CJ,cAgDI,+HACI,yCADJ,2KAhDJ,cAqDpB,oBAAC,aAAD,sHArDoB,cA2DI,2CA3DJ,cA4DI,2BAAK,SAAS,CAAC,kBAAf,eACI,6BAAO,SAAS,CAAC,WAAjB,eACI,8CACI,2CACI,qCADJ,cAEI,qCAFJ,cAGI,wCAHJ,cAII,4CAJJ,CADJ,CADJ,cASI,8CACI,2CACI,mCADJ,cAEI,uCAFJ,cAGI,qCAHJ,cAII,kEAJJ,CADJ,cAOI,2CACI,sCADJ,cAEI,uCAFJ,cAGI,qCAHJ,cAII,wDAJJ,CAPJ,cAaI,2CACI,qCADJ,cAEI,uCAFJ,cAGI,qCAHJ,cAII,iDAJJ,CAbJ,cAmBI,2CACI,qCADJ,cAEI,uCAFJ,cAGI,qCAHJ,cAII,8CAJJ,CAnBJ,cAyBI,2CACI,yCADJ,cAEI,uCAFJ,cAGI,kCAHJ,cAII,sFAJJ,CAzBJ,cA+BI,2CACI,0CADJ,cAEI,wCAFJ,cAGI,qCAHJ,cAII,qEAJJ,CA/BJ,cAqCI,2CACI,uCADJ,cAEI,wCAFJ,cAGI,sCAHJ,cAII,yHAJJ,CArCJ,cA2CI,2CACI,sCADJ,cAEI,uCAFJ,cAGI,qCAHJ,cAII,6DAJJ,CA3CJ,cAiDI,2CACI,0CADJ,cAEI,uCAFJ,cAGI,qCAHJ,cAII,4DAJJ,CAjDJ,cAuDI,2CACI,4CADJ,cAEI,uCAFJ,cAGI,qCAHJ,cAII,0EAJJ,CAvDJ,cA6DI,2CACI,qCADJ,cAEI,uCAFJ,cAGI,qCAHJ,cAII,yDAJJ,CA7DJ,cAmEI,2CACI,0CADJ,cAEI,uCAFJ,cAGI,qCAHJ,cAII,uFAJJ,CAnEJ,cAyEI,2CACI,yCADJ,cAEI,uCAFJ,cAGI,qCAHJ,cAII,oEAJJ,CAzEJ,cA+EI,2CACI,yCADJ,cAEI,wCAFJ,cAGI,sCAHJ,cAII,qGAJJ,CA/EJ,cAqFI,2CACI,yCADJ,cAEI,wCAFJ,cAGI,sCAHJ,cAII,6FAJJ,CArFJ,cA2FI,2CACI,qCADJ,cAEI,uCAFJ,cAGI,qCAHJ,cAII,yDAJJ,CA3FJ,cAiGI,2CACI,yCADJ,cAEI,wCAFJ,cAGI,sCAHJ,cAII,2HAJJ,CAjGJ,cAuGI,2CACI,wCADJ,cAEI,oCAFJ,cAGI,qCAHJ,cAII,wDAJJ,CAvGJ,cA6GI,2CACI,+CADJ,cAEI,uCAFJ,cAGI,qCAHJ,cAII,uHAJJ,CA7GJ,CATJ,CADJ,CA5DJ,cA6LI,uCA7LJ,cA8LI,2BAAK,SAAS,CAAC,kBAAf,eACI,6BAAO,SAAS,CAAC,WAAjB,eACI,8CACI,2CACI,qCADJ,cAEI,2CAFJ,cAGI,4CAHJ,CADJ,CADJ,cAQI,8CACI,2CACI,wCADJ,cAEI,qDAFJ,cAGI,8EAHJ,CADJ,cAMI,2CACI,uCADJ,cAEI,qDAFJ,cAGI,2EAHJ,CANJ,cAWI,2CACI,2CADJ,cAEI,kEAAwB,8BAAxB,qCAFJ,cAII,4FAJJ,CAXJ,cAiBI,2CACI,yCADJ,cAEI,2EAAiC,8BAAjC,qCAFJ,cAII,oEAJJ,CAjBJ,CARJ,CADJ,CA9LJ,cAkOI,wCAlOJ,cAmOI,gEAAsB,oBAAC,IAAD,EAAM,EAAE,CAAC,YAAT,yBAAtB,6CAAmG,oBAAC,IAAD,EAAM,EAAE,CAAC,UAAT,mBAAnG,CAnOJ,cAqOI,6CArOJ,cAsOI,qCAtOJ,CADJ,CA2OQN,iBAAiB,CAAC,CAAEO,IAAI,CAAE,eAAR,CAAyBH,OAAO,CAAE,KAAKA,OAAvC,CAAD,CA3OzB,CADJ,CADJ,CAkPH,CA1aL,0BAAkCR,SAAlC","sourcesContent":["import React, { Component } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { TabView, TabPanel } from '../../components/tabview/TabView';\r\nimport { useLiveEditorTabs }from '../liveeditor/LiveEditor';\r\nimport { CodeHighlight } from '../codehighlight/CodeHighlight';\r\n\r\nexport class InputMaskDoc extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.sources = {\r\n            'class': {\r\n                tabName: 'Class Source',\r\n                content: `\r\nimport React, { Component } from 'react';\r\nimport { InputMask } from 'primereact/inputmask';\r\n\r\nexport class InputMaskDemo extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            val1: null,\r\n            val2: null,\r\n            val3: null,\r\n            val4: null,\r\n            val5: null,\r\n            val6: null\r\n        };\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div className=\"card\">\r\n                    <div className=\"p-fluid p-formgrid p-grid\">\r\n                        <div className=\"p-field p-col-12 p-md-4\">\r\n                            <label htmlFor=\"basic\">Basic</label>\r\n                            <InputMask id=\"basic\" mask=\"99-999999\" value={this.state.val1} placeholder=\"99-999999\" onChange={(e) => this.setState({val1: e.value})}></InputMask>\r\n                        </div>\r\n\r\n                        <div className=\"p-field p-col-12 p-md-4\">\r\n                            <label htmlFor=\"ssn\">SSN</label>\r\n                            <InputMask id=\"ssn\" mask=\"999-99-9999\" value={this.state.val2} placeholder=\"999-99-9999\" onChange={(e) => this.setState({val2: e.value})}></InputMask>\r\n                        </div>\r\n\r\n                        <div className=\"p-field p-col-12 p-md-4\">\r\n                            <label htmlFor=\"date\">Date</label>\r\n                            <InputMask id=\"date\" mask=\"99/99/9999\" value={this.state.val3} placeholder=\"99/99/9999\" slotChar=\"mm/dd/yyyy\" onChange={(e) => this.setState({val3: e.value})}></InputMask>\r\n                        </div>\r\n\r\n                        <div className=\"p-field p-col-12 p-md-4\">\r\n                            <label htmlFor=\"phone\">Phone</label>\r\n                            <InputMask id=\"phone\" mask=\"(999) 999-9999\" value={this.state.val4} placeholder=\"(999) 999-9999\" onChange={(e) => this.setState({val4: e.value})}></InputMask>\r\n                        </div>\r\n\r\n                        <div className=\"p-field p-col-12 p-md-4\">\r\n                            <label htmlFor=\"phoneext\">Phone Ext</label>\r\n                            <InputMask id=\"phoneext\" mask=\"(999) 999-9999? x99999\" value={this.state.val5} placeholder=\"(999) 999-9999? x99999\" onChange={(e) => this.setState({val5: e.value})}></InputMask>\r\n                        </div>\r\n\r\n                        <div className=\"p-field p-col-12 p-md-4\">\r\n                            <label htmlFor=\"serial\">Serial</label>\r\n                            <InputMask id=\"serial\" mask=\"a*-999-a999\" value={this.state.val6} placeholder=\"a*-999-a999\" onChange={(e) => this.setState({val6: e.value})}></InputMask>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n                `\r\n            },\r\n            'hooks': {\r\n                tabName: 'Hooks Source',\r\n                content: `\r\nimport React, { useState } from 'react';\r\nimport { InputMask } from 'primereact/inputmask';\r\n\r\nconst InputMaskDemo = () => {\r\n    const [val1, setVal1] = useState();\r\n    const [val2, setVal2] = useState();\r\n    const [val3, setVal3] = useState();\r\n    const [val4, setVal4] = useState();\r\n    const [val5, setVal5] = useState();\r\n    const [val6, setVal6] = useState();\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"card\">\r\n                <div className=\"p-fluid p-formgrid p-grid\">\r\n                    <div className=\"p-field p-col-12 p-md-4\">\r\n                        <label htmlFor=\"basic\">Basic</label>\r\n                        <InputMask id=\"basic\" mask=\"99-999999\" value={val1} placeholder=\"99-999999\" onChange={(e) => setVal1(e.value)}></InputMask>\r\n                    </div>\r\n\r\n                    <div className=\"p-field p-col-12 p-md-4\">\r\n                        <label htmlFor=\"ssn\">SSN</label>\r\n                        <InputMask id=\"ssn\" mask=\"999-99-9999\" value={val2} placeholder=\"999-99-9999\" onChange={(e) => setVal2(e.value)}></InputMask>\r\n                    </div>\r\n\r\n                    <div className=\"p-field p-col-12 p-md-4\">\r\n                        <label htmlFor=\"date\">Date</label>\r\n                        <InputMask id=\"date\" mask=\"99/99/9999\" value={val3} placeholder=\"99/99/9999\" slotChar=\"mm/dd/yyyy\" onChange={(e) => setVal3(e.value)}></InputMask>\r\n                    </div>\r\n\r\n                    <div className=\"p-field p-col-12 p-md-4\">\r\n                        <label htmlFor=\"phone\">Phone</label>\r\n                        <InputMask id=\"phone\" mask=\"(999) 999-9999\" value={val4} placeholder=\"(999) 999-9999\" onChange={(e) => setVal4(e.value)}></InputMask>\r\n                    </div>\r\n\r\n                    <div className=\"p-field p-col-12 p-md-4\">\r\n                        <label htmlFor=\"phoneext\">Phone Ext</label>\r\n                        <InputMask id=\"phoneext\" mask=\"(999) 999-9999? x99999\" value={val5} placeholder=\"(999) 999-9999? x99999\" onChange={(e) => setVal5(e.value)}></InputMask>\r\n                    </div>\r\n\r\n                    <div className=\"p-field p-col-12 p-md-4\">\r\n                        <label htmlFor=\"serial\">Serial</label>\r\n                        <InputMask id=\"serial\" mask=\"a*-999-a999\" value={val6} placeholder=\"a*-999-a999\" onChange={(e) => setVal6(e.value)}></InputMask>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n                `\r\n            },\r\n            'ts': {\r\n                tabName: 'TS Source',\r\n                content: `\r\nimport React, { useState } from 'react';\r\nimport { InputMask } from 'primereact/inputmask';\r\n\r\nconst InputMaskDemo = () => {\r\n    const [val1, setVal1] = useState();\r\n    const [val2, setVal2] = useState();\r\n    const [val3, setVal3] = useState();\r\n    const [val4, setVal4] = useState();\r\n    const [val5, setVal5] = useState();\r\n    const [val6, setVal6] = useState();\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"card\">\r\n                <div className=\"p-fluid p-formgrid p-grid\">\r\n                    <div className=\"p-field p-col-12 p-md-4\">\r\n                        <label htmlFor=\"basic\">Basic</label>\r\n                        <InputMask id=\"basic\" mask=\"99-999999\" value={val1} placeholder=\"99-999999\" onChange={(e) => setVal1(e.value)}></InputMask>\r\n                    </div>\r\n\r\n                    <div className=\"p-field p-col-12 p-md-4\">\r\n                        <label htmlFor=\"ssn\">SSN</label>\r\n                        <InputMask id=\"ssn\" mask=\"999-99-9999\" value={val2} placeholder=\"999-99-9999\" onChange={(e) => setVal2(e.value)}></InputMask>\r\n                    </div>\r\n\r\n                    <div className=\"p-field p-col-12 p-md-4\">\r\n                        <label htmlFor=\"date\">Date</label>\r\n                        <InputMask id=\"date\" mask=\"99/99/9999\" value={val3} placeholder=\"99/99/9999\" slotChar=\"mm/dd/yyyy\" onChange={(e) => setVal3(e.value)}></InputMask>\r\n                    </div>\r\n\r\n                    <div className=\"p-field p-col-12 p-md-4\">\r\n                        <label htmlFor=\"phone\">Phone</label>\r\n                        <InputMask id=\"phone\" mask=\"(999) 999-9999\" value={val4} placeholder=\"(999) 999-9999\" onChange={(e) => setVal4(e.value)}></InputMask>\r\n                    </div>\r\n\r\n                    <div className=\"p-field p-col-12 p-md-4\">\r\n                        <label htmlFor=\"phoneext\">Phone Ext</label>\r\n                        <InputMask id=\"phoneext\" mask=\"(999) 999-9999? x99999\" value={val5} placeholder=\"(999) 999-9999? x99999\" onChange={(e) => setVal5(e.value)}></InputMask>\r\n                    </div>\r\n\r\n                    <div className=\"p-field p-col-12 p-md-4\">\r\n                        <label htmlFor=\"serial\">Serial</label>\r\n                        <InputMask id=\"serial\" mask=\"a*-999-a999\" value={val6} placeholder=\"a*-999-a999\" onChange={(e) => setVal6(e.value)}></InputMask>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n                `\r\n            },\r\n        }\r\n    }\r\n\r\n    shouldComponentUpdate() {\r\n        return false;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"content-section documentation\">\r\n                <TabView>\r\n                    <TabPanel header=\"Documentation\">\r\n                        <h5>Import</h5>\r\n<CodeHighlight lang=\"js\">\r\n{`\r\nimport { InputMask } from 'primereact/inputmask';\r\n`}\r\n</CodeHighlight>\r\n\r\n                        <h5>Getting Started</h5>\r\n                        <p>InputMask is used as a controlled component with <i>value</i> and <i>onChange</i> properties.</p>\r\n\r\n<CodeHighlight>\r\n{`\r\n<InputMask mask=\"99-999999\" value={value} onChange={(e) => setValue(e.value)}></InputMask>\r\n`}\r\n</CodeHighlight>\r\n\r\n                        <h5>Mask</h5>\r\n                        <p>Mask format can be a combination of the the following built-in definitions.</p>\r\n\r\n                        <ul>\r\n                            <li>\r\n                                a - Alpha character (A-Z,a-z)\r\n                            </li>\r\n                            <li>\r\n                                9 - Numeric character (0-9)\r\n                            </li>\r\n                            <li>\r\n                                * - Alpha numberic character (A-Z,a-z,0-9)\r\n                            </li>\r\n                        </ul>\r\n\r\n<CodeHighlight>\r\n{`\r\n<InputMask mask=\"a*-999-a999\" value={value} onChange={(e) => setValue(e.value)}></InputMask>\r\n`}\r\n</CodeHighlight>\r\n\r\n                        <h5>SlotChar</h5>\r\n                        <p>Underscore is the default placeholder for a mask and this can be customized using <i>slotChart</i> option.</p>\r\n\r\n<CodeHighlight>\r\n{`\r\n<InputMask mask=\"99/99/9999\" slotChar=\"mm/dd/yyyy\" value={value} onChange={(e) => setValue(e.value)}></InputMask>\r\n`}\r\n</CodeHighlight>\r\n\r\n                        <h5>Optional Values</h5>\r\n                        <p>If the input does not complete the mask definition, it is cleared by default.\r\n                        Use <i>autoClear</i> property to control this behavior. In addition, certain part of\r\n                        a mask can be made optional by using ? symbol where anything after the question\r\n                        mark becomes optional.</p>\r\n\r\n<CodeHighlight>\r\n{`\r\n<InputMask mask=\"(999) 999-9999? x99999\" value={value} onChange={(e) => setValue(e.value)}></InputMask>\r\n`}\r\n</CodeHighlight>\r\n\r\n                        <h5>Properties</h5>\r\n                        <div className=\"doc-tablewrapper\">\r\n                            <table className=\"doc-table\">\r\n                                <thead>\r\n                                    <tr>\r\n                                        <th>Name</th>\r\n                                        <th>Type</th>\r\n                                        <th>Default</th>\r\n                                        <th>Description</th>\r\n                                    </tr>\r\n                                </thead>\r\n                                <tbody>\r\n                                    <tr>\r\n                                        <td>id</td>\r\n                                        <td>string</td>\r\n                                        <td>null</td>\r\n                                        <td>Unique identifier of the element.</td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>value</td>\r\n                                        <td>string</td>\r\n                                        <td>null</td>\r\n                                        <td>Value of the component.</td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>type</td>\r\n                                        <td>string</td>\r\n                                        <td>text</td>\r\n                                        <td>HTML5 input type</td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>mask</td>\r\n                                        <td>string</td>\r\n                                        <td>null</td>\r\n                                        <td>Mask pattern.</td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>slotChar</td>\r\n                                        <td>string</td>\r\n                                        <td>-</td>\r\n                                        <td>Placeholder character in mask, default is underscore.</td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>autoClear</td>\r\n                                        <td>boolean</td>\r\n                                        <td>true</td>\r\n                                        <td>Clears the incomplete value on blur.</td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>unmask</td>\r\n                                        <td>boolean</td>\r\n                                        <td>false</td>\r\n                                        <td>Defines if model sets the raw unmasked value to bound value or the formatted mask value.</td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>style</td>\r\n                                        <td>string</td>\r\n                                        <td>null</td>\r\n                                        <td>Inline style of the element.</td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>className</td>\r\n                                        <td>string</td>\r\n                                        <td>null</td>\r\n                                        <td>Style class of the element.</td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>placeholder</td>\r\n                                        <td>string</td>\r\n                                        <td>null</td>\r\n                                        <td>Advisory information to display on input.</td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>size</td>\r\n                                        <td>number</td>\r\n                                        <td>null</td>\r\n                                        <td>Size of the input field.</td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>maxlength</td>\r\n                                        <td>number</td>\r\n                                        <td>null</td>\r\n                                        <td>Maximum number of character allows in the input field.</td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>tabIndex</td>\r\n                                        <td>number</td>\r\n                                        <td>null</td>\r\n                                        <td>Specifies tab order of the element.</td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>disabled</td>\r\n                                        <td>boolean</td>\r\n                                        <td>false</td>\r\n                                        <td>When present, it specifies that the element value cannot be altered.</td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>readOnly</td>\r\n                                        <td>boolean</td>\r\n                                        <td>false</td>\r\n                                        <td>When present, it specifies that an input field is read-only.</td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>name</td>\r\n                                        <td>string</td>\r\n                                        <td>null</td>\r\n                                        <td>Name of the input field.</td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>required</td>\r\n                                        <td>boolean</td>\r\n                                        <td>false</td>\r\n                                        <td>When present, it specifies that the element must be filled out before submitting the form.</td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>tooltip</td>\r\n                                        <td>any</td>\r\n                                        <td>null</td>\r\n                                        <td>Content of the tooltip.</td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>tooltipOptions</td>\r\n                                        <td>object</td>\r\n                                        <td>null</td>\r\n                                        <td>Configuration of the tooltip, refer to the tooltip documentation for more information.</td>\r\n                                    </tr>\r\n                                </tbody>\r\n                            </table>\r\n                        </div>\r\n\r\n                        <h5>Events</h5>\r\n                        <div className=\"doc-tablewrapper\">\r\n                            <table className=\"doc-table\">\r\n                                <thead>\r\n                                    <tr>\r\n                                        <th>Name</th>\r\n                                        <th>Parameters</th>\r\n                                        <th>Description</th>\r\n                                    </tr>\r\n                                </thead>\r\n                                <tbody>\r\n                                    <tr>\r\n                                        <td>onFocus</td>\r\n                                        <td>event: Browser event</td>\r\n                                        <td>Callback to invoke when input receives focus.</td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>onBlur</td>\r\n                                        <td>event: Browser event</td>\r\n                                        <td>Callback to invoke when input loses focus.</td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>onComplete</td>\r\n                                        <td>event: Browser event<br/>\r\n                                            value: New value of the component</td>\r\n                                        <td>Callback to invoke on when user completes the mask pattern.</td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>onChange</td>\r\n                                        <td>originalEvent: Browser event <br/>\r\n                                            value: New value of the component</td>\r\n                                        <td>Callback to invoke on value change.</td>\r\n                                    </tr>\r\n                                </tbody>\r\n                            </table>\r\n                        </div>\r\n\r\n                        <h5>Styling</h5>\r\n                        <p>Styling is same as <Link to=\"/inputtext\"> inputtext component</Link>, for theming classes visit <Link to=\"/theming\"> theming page.</Link></p>\r\n\r\n                        <h5>Dependencies</h5>\r\n                        <p>None.</p>\r\n                    </TabPanel>\r\n\r\n                    {\r\n                        useLiveEditorTabs({ name: 'InputMaskDemo', sources: this.sources })\r\n                    }\r\n                </TabView>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}