{"ast":null,"code":"import _toConsumableArray from \"C:\\\\Users\\\\zura.ph\\\\WebstormProjects\\\\zz-regul\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";\nimport _objectSpread from \"C:\\\\Users\\\\zura.ph\\\\WebstormProjects\\\\zz-regul\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\nimport _defineProperty from \"C:\\\\Users\\\\zura.ph\\\\WebstormProjects\\\\zz-regul\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"C:\\\\Users\\\\zura.ph\\\\WebstormProjects\\\\zz-regul\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\zura.ph\\\\WebstormProjects\\\\zz-regul\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"C:\\\\Users\\\\zura.ph\\\\WebstormProjects\\\\zz-regul\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"C:\\\\Users\\\\zura.ph\\\\WebstormProjects\\\\zz-regul\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _createSuper from \"C:\\\\Users\\\\zura.ph\\\\WebstormProjects\\\\zz-regul\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"C:\\\\Users\\\\zura.ph\\\\WebstormProjects\\\\zz-regul\\\\src\\\\showcase\\\\datatable\\\\DataTableEditDemo.js\";\nimport React, { Component } from 'react';\nimport { DataTable } from '../../components/datatable/DataTable';\nimport { Column } from '../../components/column/Column';\nimport { InputText } from '../../components/inputtext/InputText';\nimport { InputNumber } from '../../components/inputnumber/InputNumber';\nimport { Dropdown } from '../../components/dropdown/Dropdown';\nimport { Toast } from '../../components/toast/Toast';\nimport ProductService from '../service/ProductService';\nimport { TabView } from '../../components/tabview/TabView';\nimport { useLiveEditorTabs } from '../liveeditor/LiveEditor';\nimport { AppInlineHeader } from '../../AppInlineHeader';\nimport './DataTableDemo.scss';\nexport var DataTableEditDemo = /*#__PURE__*/function (_Component) {\n  _inherits(DataTableEditDemo, _Component);\n\n  var _super = _createSuper(DataTableEditDemo);\n\n  function DataTableEditDemo(props) {\n    var _this;\n\n    _classCallCheck(this, DataTableEditDemo);\n\n    _this = _super.call(this, props);\n    _this.state = {\n      products1: null,\n      products2: null,\n      products3: null\n    };\n    _this.columns = [{\n      field: 'code',\n      header: 'Code'\n    }, {\n      field: 'name',\n      header: 'Name'\n    }, {\n      field: 'quantity',\n      header: 'Quantity'\n    }, {\n      field: 'price',\n      header: 'Price'\n    }];\n    _this.statuses = [{\n      label: 'In Stock',\n      value: 'INSTOCK'\n    }, {\n      label: 'Low Stock',\n      value: 'LOWSTOCK'\n    }, {\n      label: 'Out of Stock',\n      value: 'OUTOFSTOCK'\n    }];\n    _this.editingCellRows = {};\n    _this.originalRows = {};\n    _this.productService = new ProductService();\n    _this.onRowEditInit = _this.onRowEditInit.bind(_assertThisInitialized(_this));\n    _this.onRowEditCancel = _this.onRowEditCancel.bind(_assertThisInitialized(_this));\n    _this.onEditorInit = _this.onEditorInit.bind(_assertThisInitialized(_this));\n    _this.onEditorCancel = _this.onEditorCancel.bind(_assertThisInitialized(_this));\n    _this.onEditorSubmit = _this.onEditorSubmit.bind(_assertThisInitialized(_this));\n    _this.statusBodyTemplate = _this.statusBodyTemplate.bind(_assertThisInitialized(_this));\n    _this.priceBodyTemplate = _this.priceBodyTemplate.bind(_assertThisInitialized(_this));\n    _this.positiveIntegerValidator = _this.positiveIntegerValidator.bind(_assertThisInitialized(_this));\n    _this.emptyValueValidator = _this.emptyValueValidator.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(DataTableEditDemo, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.fetchProductData('products1');\n      this.fetchProductData('products2');\n      this.fetchProductData('products3');\n    }\n  }, {\n    key: \"fetchProductData\",\n    value: function fetchProductData(productStateKey) {\n      var _this2 = this;\n\n      this.productService.getProductsSmall().then(function (data) {\n        return _this2.setState(_defineProperty({}, \"\".concat(productStateKey), data));\n      });\n    }\n  }, {\n    key: \"positiveIntegerValidator\",\n    value: function positiveIntegerValidator(e) {\n      var _e$columnProps = e.columnProps,\n          rowData = _e$columnProps.rowData,\n          field = _e$columnProps.field;\n      return this.isPositiveInteger(rowData[field]);\n    }\n  }, {\n    key: \"emptyValueValidator\",\n    value: function emptyValueValidator(e) {\n      var _e$columnProps2 = e.columnProps,\n          rowData = _e$columnProps2.rowData,\n          field = _e$columnProps2.field;\n      return rowData[field].trim().length > 0;\n    }\n  }, {\n    key: \"isPositiveInteger\",\n    value: function isPositiveInteger(val) {\n      var str = String(val);\n      str = str.trim();\n\n      if (!str) {\n        return false;\n      }\n\n      str = str.replace(/^0+/, \"\") || \"0\";\n      var n = Math.floor(Number(str));\n      return n !== Infinity && String(n) === str && n >= 0;\n    }\n  }, {\n    key: \"onEditorInit\",\n    value: function onEditorInit(e) {\n      var _e$columnProps3 = e.columnProps,\n          index = _e$columnProps3.rowIndex,\n          field = _e$columnProps3.field,\n          rowData = _e$columnProps3.rowData;\n\n      if (!this.editingCellRows[index]) {\n        this.editingCellRows[index] = _objectSpread({}, rowData);\n      }\n\n      this.editingCellRows[index][field] = this.state.products2[index][field];\n    }\n  }, {\n    key: \"onEditorCancel\",\n    value: function onEditorCancel(e) {\n      var _e$columnProps4 = e.columnProps,\n          index = _e$columnProps4.rowIndex,\n          field = _e$columnProps4.field;\n\n      var products = _toConsumableArray(this.state.products2);\n\n      products[index][field] = this.editingCellRows[index][field];\n      delete this.editingCellRows[index][field];\n      this.setState({\n        products2: products\n      });\n    }\n  }, {\n    key: \"onEditorSubmit\",\n    value: function onEditorSubmit(e) {\n      var _e$columnProps5 = e.columnProps,\n          index = _e$columnProps5.rowIndex,\n          field = _e$columnProps5.field;\n      delete this.editingCellRows[index][field];\n    }\n  }, {\n    key: \"onRowEditInit\",\n    value: function onRowEditInit(event) {\n      this.originalRows[event.index] = _objectSpread({}, this.state.products3[event.index]);\n    }\n  }, {\n    key: \"onRowEditCancel\",\n    value: function onRowEditCancel(event) {\n      var products = _toConsumableArray(this.state.products3);\n\n      products[event.index] = this.originalRows[event.index];\n      delete this.originalRows[event.index];\n      this.setState({\n        products3: products\n      });\n    }\n  }, {\n    key: \"getStatusLabel\",\n    value: function getStatusLabel(status) {\n      switch (status) {\n        case 'INSTOCK':\n          return 'In Stock';\n\n        case 'LOWSTOCK':\n          return 'Low Stock';\n\n        case 'OUTOFSTOCK':\n          return 'Out of Stock';\n\n        default:\n          return 'NA';\n      }\n    }\n  }, {\n    key: \"onEditorValueChange\",\n    value: function onEditorValueChange(productKey, props, value) {\n      var updatedProducts = _toConsumableArray(props.value);\n\n      updatedProducts[props.rowIndex][props.field] = value;\n      this.setState(_defineProperty({}, \"\".concat(productKey), updatedProducts));\n    }\n  }, {\n    key: \"inputTextEditor\",\n    value: function inputTextEditor(productKey, props, field) {\n      var _this3 = this;\n\n      return /*#__PURE__*/React.createElement(InputText, {\n        type: \"text\",\n        value: props.rowData[field],\n        onChange: function onChange(e) {\n          return _this3.onEditorValueChange(productKey, props, e.target.value);\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 16\n        }\n      });\n    }\n  }, {\n    key: \"codeEditor\",\n    value: function codeEditor(productKey, props) {\n      return this.inputTextEditor(productKey, props, 'code');\n    }\n  }, {\n    key: \"nameEditor\",\n    value: function nameEditor(productKey, props) {\n      return this.inputTextEditor(productKey, props, 'name');\n    }\n  }, {\n    key: \"priceEditor\",\n    value: function priceEditor(productKey, props) {\n      var _this4 = this;\n\n      return /*#__PURE__*/React.createElement(InputNumber, {\n        value: props.rowData['price'],\n        onValueChange: function onValueChange(e) {\n          return _this4.onEditorValueChange(productKey, props, e.value);\n        },\n        mode: \"currency\",\n        currency: \"USD\",\n        locale: \"en-US\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 16\n        }\n      });\n    }\n  }, {\n    key: \"statusEditor\",\n    value: function statusEditor(productKey, props) {\n      var _this5 = this;\n\n      return /*#__PURE__*/React.createElement(Dropdown, {\n        value: props.rowData['inventoryStatus'],\n        options: this.statuses,\n        optionLabel: \"label\",\n        optionValue: \"value\",\n        onChange: function onChange(e) {\n          return _this5.onEditorValueChange(productKey, props, e.value);\n        },\n        style: {\n          width: '100%'\n        },\n        placeholder: \"Select a Status\",\n        itemTemplate: function itemTemplate(option) {\n          return /*#__PURE__*/React.createElement(\"span\", {\n            className: \"product-badge status-\".concat(option.value.toLowerCase()),\n            __self: _this5,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 163,\n              columnNumber: 28\n            }\n          }, option.label);\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 160,\n          columnNumber: 13\n        }\n      });\n    }\n  }, {\n    key: \"statusBodyTemplate\",\n    value: function statusBodyTemplate(rowData) {\n      return this.getStatusLabel(rowData.inventoryStatus);\n    }\n  }, {\n    key: \"priceBodyTemplate\",\n    value: function priceBodyTemplate(rowData) {\n      return new Intl.NumberFormat('en-US', {\n        style: 'currency',\n        currency: 'USD'\n      }).format(rowData.price);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this6 = this;\n\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 178,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"content-section introduction\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 179,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(AppInlineHeader, {\n        changelogText: \"dataTable\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 180,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(\"h1\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 181,\n          columnNumber: 25\n        }\n      }, \"DataTable \", /*#__PURE__*/React.createElement(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 181,\n          columnNumber: 39\n        }\n      }, \"Edit\")), /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 182,\n          columnNumber: 25\n        }\n      }, \"Cell and Row editing provides a rapid and user friendly way to manipulate data.\"))), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"content-section implementation datatable-editing-demo\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 186,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(Toast, {\n        ref: function ref(el) {\n          return _this6.toast = el;\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 187,\n          columnNumber: 21\n        }\n      }), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"card\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 189,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(\"h5\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 190,\n          columnNumber: 25\n        }\n      }, \"Basic Cell Editing\"), /*#__PURE__*/React.createElement(DataTable, {\n        value: this.state.products1,\n        editMode: \"cell\",\n        className: \"editable-cells-table\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 191,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(Column, {\n        field: \"code\",\n        header: \"Code\",\n        editor: function editor(props) {\n          return _this6.codeEditor('products1', props);\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 192,\n          columnNumber: 29\n        }\n      }), /*#__PURE__*/React.createElement(Column, {\n        field: \"name\",\n        header: \"Name\",\n        editor: function editor(props) {\n          return _this6.nameEditor('products1', props);\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 193,\n          columnNumber: 29\n        }\n      }), /*#__PURE__*/React.createElement(Column, {\n        field: \"inventoryStatus\",\n        header: \"Status\",\n        body: this.statusBodyTemplate,\n        editor: function editor(props) {\n          return _this6.statusEditor('products1', props);\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 194,\n          columnNumber: 29\n        }\n      }), /*#__PURE__*/React.createElement(Column, {\n        field: \"price\",\n        header: \"Price\",\n        body: this.priceBodyTemplate,\n        editor: function editor(props) {\n          return _this6.priceEditor('products1', props);\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 195,\n          columnNumber: 29\n        }\n      }))), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"card\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 199,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(\"h5\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 200,\n          columnNumber: 25\n        }\n      }, \"Advanced Cell Editing\"), /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 201,\n          columnNumber: 25\n        }\n      }, \"Custom implementation with validations, dynamic columns and reverting values with the escape key.\"), /*#__PURE__*/React.createElement(DataTable, {\n        value: this.state.products2,\n        editMode: \"cell\",\n        className: \"editable-cells-table\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 202,\n          columnNumber: 25\n        }\n      }, this.columns.map(function (col) {\n        var field = col.field,\n            header = col.header;\n        var validator = field === 'quantity' || field === 'price' ? _this6.positiveIntegerValidator : _this6.emptyValueValidator;\n        return /*#__PURE__*/React.createElement(Column, {\n          key: field,\n          field: field,\n          header: header,\n          body: field === 'price' && _this6.priceBodyTemplate,\n          editor: function editor(props) {\n            return _this6.inputTextEditor('products2', props, field);\n          },\n          editorValidator: validator,\n          onEditorInit: _this6.onEditorInit,\n          onEditorCancel: _this6.onEditorCancel,\n          onEditorSubmit: _this6.onEditorSubmit,\n          __self: _this6,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 207,\n            columnNumber: 44\n          }\n        });\n      }))), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"card\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 215,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(\"h5\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 216,\n          columnNumber: 25\n        }\n      }, \"Row Editing\"), /*#__PURE__*/React.createElement(DataTable, {\n        value: this.state.products3,\n        editMode: \"row\",\n        dataKey: \"id\",\n        onRowEditInit: this.onRowEditInit,\n        onRowEditCancel: this.onRowEditCancel,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 217,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(Column, {\n        field: \"code\",\n        header: \"Code\",\n        editor: function editor(props) {\n          return _this6.codeEditor('products3', props);\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 218,\n          columnNumber: 29\n        }\n      }), /*#__PURE__*/React.createElement(Column, {\n        field: \"name\",\n        header: \"Name\",\n        editor: function editor(props) {\n          return _this6.nameEditor('products3', props);\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 219,\n          columnNumber: 29\n        }\n      }), /*#__PURE__*/React.createElement(Column, {\n        field: \"inventoryStatus\",\n        header: \"Status\",\n        body: this.statusBodyTemplate,\n        editor: function editor(props) {\n          return _this6.statusEditor('products3', props);\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 220,\n          columnNumber: 29\n        }\n      }), /*#__PURE__*/React.createElement(Column, {\n        field: \"price\",\n        header: \"Price\",\n        body: this.priceBodyTemplate,\n        editor: function editor(props) {\n          return _this6.priceEditor('products3', props);\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 221,\n          columnNumber: 29\n        }\n      }), /*#__PURE__*/React.createElement(Column, {\n        rowEditor: true,\n        headerStyle: {\n          width: '7rem'\n        },\n        bodyStyle: {\n          textAlign: 'center'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 222,\n          columnNumber: 29\n        }\n      })))), /*#__PURE__*/React.createElement(DataTableEditDemoDoc, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 227,\n          columnNumber: 17\n        }\n      }));\n    }\n  }]);\n\n  return DataTableEditDemo;\n}(Component);\nexport var DataTableEditDemoDoc = /*#__PURE__*/function (_Component2) {\n  _inherits(DataTableEditDemoDoc, _Component2);\n\n  var _super2 = _createSuper(DataTableEditDemoDoc);\n\n  function DataTableEditDemoDoc(props) {\n    var _this7;\n\n    _classCallCheck(this, DataTableEditDemoDoc);\n\n    _this7 = _super2.call(this, props);\n    _this7.sources = {\n      'class': {\n        tabName: 'Class Source',\n        content: \"\\nimport React, { Component } from 'react';\\nimport { DataTable } from 'primereact/datatable';\\nimport { Column } from 'primereact/column';\\nimport { InputText } from 'primereact/inputtext';\\nimport { InputNumber } from 'primereact/inputnumber';\\nimport { Dropdown } from 'primereact/dropdown';\\nimport { Toast } from 'primereact/toast';\\nimport ProductService from '../service/ProductService';\\nimport './DataTableDemo.css';\\n\\nexport class DataTableEditDemo extends Component {\\n\\n    constructor(props) {\\n        super(props);\\n\\n        this.state = {\\n            products1: null,\\n            products2: null,\\n            products3: null\\n        };\\n\\n        this.columns = [\\n            { field: 'code', header: 'Code' },\\n            { field: 'name', header: 'Name' },\\n            { field: 'quantity', header: 'Quantity' },\\n            { field: 'price', header: 'Price' }\\n        ];\\n\\n        this.statuses = [\\n            { label: 'In Stock', value: 'INSTOCK' },\\n            { label: 'Low Stock', value: 'LOWSTOCK' },\\n            { label: 'Out of Stock', value: 'OUTOFSTOCK' }\\n        ];\\n\\n        this.editingCellRows = {};\\n        this.originalRows = {};\\n\\n        this.productService = new ProductService();\\n        this.onRowEditInit = this.onRowEditInit.bind(this);\\n        this.onRowEditCancel = this.onRowEditCancel.bind(this);\\n        this.onEditorInit = this.onEditorInit.bind(this);\\n        this.onEditorCancel = this.onEditorCancel.bind(this);\\n        this.onEditorSubmit = this.onEditorSubmit.bind(this);\\n        this.statusBodyTemplate = this.statusBodyTemplate.bind(this);\\n        this.positiveIntegerValidator = this.positiveIntegerValidator.bind(this);\\n        this.emptyValueValidator = this.emptyValueValidator.bind(this);\\n    }\\n\\n    componentDidMount() {\\n        this.fetchProductData('products1');\\n        this.fetchProductData('products2');\\n        this.fetchProductData('products3');\\n    }\\n\\n    fetchProductData(productStateKey) {\\n        this.productService.getProductsSmall().then(data => this.setState({ [`${productStateKey}`]: data }));\\n    }\\n\\n    positiveIntegerValidator(e) {\\n        const { rowData, field } = e.columnProps;\\n        return this.isPositiveInteger(rowData[field]);\\n    }\\n\\n    emptyValueValidator(e) {\\n        const { rowData, field } = e.columnProps;\\n        return rowData[field].trim().length > 0;\\n    }\\n\\n    isPositiveInteger(val) {\\n        let str = String(val);\\n        str = str.trim();\\n        if (!str) {\\n            return false;\\n        }\\n        str = str.replace(/^0+/, \\\"\\\") || \\\"0\\\";\\n        let n = Math.floor(Number(str));\\n        return n !== Infinity && String(n) === str && n >= 0;\\n    }\\n\\n    onEditorInit(e) {\\n        const { rowIndex: index, field, rowData } = e.columnProps;\\n        if (!this.editingCellRows[index]) {\\n            this.editingCellRows[index] = {...rowData};\\n        }\\n        this.editingCellRows[index][field] = this.state.products2[index][field];\\n    }\\n\\n    onEditorCancel(e) {\\n        const { rowIndex: index, field } = e.columnProps;\\n        let products = [...this.state.products2];\\n        products[index][field] = this.editingCellRows[index][field];\\n        delete this.editingCellRows[index][field];\\n\\n        this.setState({\\n            products2: products\\n        });\\n    }\\n\\n    onEditorSubmit(e) {\\n        const { rowIndex: index, field } = e.columnProps;\\n        delete this.editingCellRows[index][field];\\n    }\\n\\n    onRowEditInit(event) {\\n        this.originalRows[event.index] = { ...this.state.products3[event.index] };\\n    }\\n\\n    onRowEditCancel(event) {\\n        let products = [...this.state.products3];\\n        products[event.index] = this.originalRows[event.index];\\n        delete this.originalRows[event.index];\\n\\n        this.setState({ products3: products });\\n    }\\n\\n    getStatusLabel(status) {\\n        switch (status) {\\n            case 'INSTOCK':\\n                return 'In Stock';\\n\\n            case 'LOWSTOCK':\\n                return 'Low Stock';\\n\\n            case 'OUTOFSTOCK':\\n                return 'Out of Stock';\\n\\n            default:\\n                return 'NA';\\n        }\\n    }\\n\\n    onEditorValueChange(productKey, props, value) {\\n        let updatedProducts = [...props.value];\\n        updatedProducts[props.rowIndex][props.field] = value;\\n        this.setState({ [`${productKey}`]: updatedProducts });\\n    }\\n\\n    inputTextEditor(productKey, props, field) {\\n        return <InputText type=\\\"text\\\" value={props.rowData[field]} onChange={(e) => this.onEditorValueChange(productKey, props, e.target.value)} />;\\n    }\\n\\n    codeEditor(productKey, props) {\\n        return this.inputTextEditor(productKey, props, 'code');\\n    }\\n\\n    nameEditor(productKey, props) {\\n        return this.inputTextEditor(productKey, props, 'name');\\n    }\\n\\n    priceEditor(productKey, props) {\\n        return <InputNumber value={props.rowData['price']} onValueChange={(e) => this.onEditorValueChange(productKey, props, e.value)} mode=\\\"currency\\\" currency=\\\"USD\\\" locale=\\\"en-US\\\" />\\n    }\\n\\n    statusEditor(productKey, props) {\\n        return (\\n            <Dropdown value={props.rowData['inventoryStatus']} options={this.statuses} optionLabel=\\\"label\\\" optionValue=\\\"value\\\"\\n                onChange={(e) => this.onEditorValueChange(productKey, props, e.value)} style={{ width: '100%' }} placeholder=\\\"Select a Status\\\"\\n                itemTemplate={(option) => {\\n                    return <span className={`product-badge status-${option.value.toLowerCase()}`}>{option.label}</span>\\n                }} />\\n        );\\n    }\\n\\n    statusBodyTemplate(rowData) {\\n        return this.getStatusLabel(rowData.inventoryStatus);\\n    }\\n\\n    priceBodyTemplate(rowData) {\\n        return new Intl.NumberFormat('en-US', {style: 'currency', currency: 'USD'}).format(rowData.price);\\n    }\\n\\n    render() {\\n        return (\\n            <div className=\\\"datatable-editing-demo\\\">\\n                <Toast ref={(el) => this.toast = el} />\\n\\n                <div className=\\\"card\\\">\\n                    <h5>Basic Cell Editing</h5>\\n                    <DataTable value={this.state.products1} editMode=\\\"cell\\\" className=\\\"editable-cells-table\\\">\\n                        <Column field=\\\"code\\\" header=\\\"Code\\\" editor={(props) => this.codeEditor('products1', props)}></Column>\\n                        <Column field=\\\"name\\\" header=\\\"Name\\\" editor={(props) => this.nameEditor('products1', props)}></Column>\\n                        <Column field=\\\"inventoryStatus\\\" header=\\\"Status\\\" body={this.statusBodyTemplate} editor={(props) => this.statusEditor('products1', props)}></Column>\\n                        <Column field=\\\"price\\\" header=\\\"Price\\\" body={this.priceBodyTemplate} editor={(props) => this.priceEditor('products1', props)}></Column>\\n                    </DataTable>\\n                </div>\\n\\n                <div className=\\\"card\\\">\\n                    <h5>Advanced Cell Editing</h5>\\n                    <p>Custom implementation with validations, dynamic columns and reverting values with the escape key.</p>\\n                    <DataTable value={this.state.products2} editMode=\\\"cell\\\" className=\\\"editable-cells-table\\\">\\n                        {\\n                            this.columns.map(col => {\\n                                const { field, header } = col;\\n                                const validator = (field === 'quantity' || field === 'price') ? this.positiveIntegerValidator : this.emptyValueValidator;\\n                                return <Column key={field} field={field} header={header} body={field === 'price' && this.priceBodyTemplate}\\n                                    editor={(props) => this.inputTextEditor('products2', props, field)} editorValidator={validator}\\n                                    onEditorInit={this.onEditorInit} onEditorCancel={this.onEditorCancel} onEditorSubmit={this.onEditorSubmit} />\\n                            })\\n                        }\\n                    </DataTable>\\n                </div>\\n\\n                <div className=\\\"card\\\">\\n                    <h5>Row Editing</h5>\\n                    <DataTable value={this.state.products3} editMode=\\\"row\\\" dataKey=\\\"id\\\" onRowEditInit={this.onRowEditInit} onRowEditCancel={this.onRowEditCancel}>\\n                        <Column field=\\\"code\\\" header=\\\"Code\\\" editor={(props) => this.codeEditor('products3', props)}></Column>\\n                        <Column field=\\\"name\\\" header=\\\"Name\\\" editor={(props) => this.nameEditor('products3', props)}></Column>\\n                        <Column field=\\\"inventoryStatus\\\" header=\\\"Status\\\" body={this.statusBodyTemplate} editor={(props) => this.statusEditor('products3', props)}></Column>\\n                        <Column field=\\\"price\\\" header=\\\"Price\\\" body={this.priceBodyTemplate} editor={(props) => this.priceEditor('products3', props)}></Column>\\n                        <Column rowEditor headerStyle={{ width: '7rem' }} bodyStyle={{ textAlign: 'center' }}></Column>\\n                    </DataTable>\\n                </div>\\n            </div>\\n        );\\n    }\\n}\\n                \"\n      },\n      'hooks': {\n        tabName: 'Hooks Source',\n        content: \"\\nimport React, { useState, useEffect, useRef } from 'react';\\nimport { DataTable } from 'primereact/datatable';\\nimport { Column } from 'primereact/column';\\nimport { InputText } from 'primereact/inputtext';\\nimport { InputNumber } from 'primereact/inputnumber';\\nimport { Dropdown } from 'primereact/dropdown';\\nimport { Toast } from 'primereact/toast';\\nimport ProductService from '../service/ProductService';\\nimport './DataTableDemo.css';\\n\\nconst DataTableEditDemo = () => {\\n    const [products1, setProducts1] = useState(null);\\n    const [products2, setProducts2] = useState(null);\\n    const [products3, setProducts3] = useState(null);\\n    const toast = useRef(null);\\n    const columns = [\\n        { field: 'code', header: 'Code' },\\n        { field: 'name', header: 'Name' },\\n        { field: 'quantity', header: 'Quantity' },\\n        { field: 'price', header: 'Price' }\\n    ];\\n\\n    const statuses = [\\n        { label: 'In Stock', value: 'INSTOCK' },\\n        { label: 'Low Stock', value: 'LOWSTOCK' },\\n        { label: 'Out of Stock', value: 'OUTOFSTOCK' }\\n    ];\\n\\n    let editingCellRows = {};\\n    let originalRows = {};\\n\\n    const dataTableFuncMap = {\\n        'products1': setProducts1,\\n        'products2': setProducts2,\\n        'products3': setProducts3\\n    };\\n\\n    const productService = new ProductService();\\n\\n    useEffect(() => {\\n        fetchProductData('products1');\\n        fetchProductData('products2');\\n        fetchProductData('products3');\\n    }, []); // eslint-disable-line react-hooks/exhaustive-deps\\n\\n    const fetchProductData = (productStateKey) => {\\n        productService.getProductsSmall().then(data => dataTableFuncMap[`${productStateKey}`](data));\\n    }\\n\\n    const positiveIntegerValidator = (e) => {\\n        const { rowData, field } = e.columnProps;\\n        return isPositiveInteger(rowData[field]);\\n    }\\n\\n    const emptyValueValidator = (e) => {\\n        const { rowData, field } = e.columnProps;\\n        return rowData[field].trim().length > 0;\\n    }\\n\\n    const isPositiveInteger = (val) => {\\n        let str = String(val);\\n        str = str.trim();\\n        if (!str) {\\n            return false;\\n        }\\n        str = str.replace(/^0+/, \\\"\\\") || \\\"0\\\";\\n        let n = Math.floor(Number(str));\\n        return n !== Infinity && String(n) === str && n >= 0;\\n    }\\n\\n    const onEditorInit = (e) => {\\n        const { rowIndex: index, field, rowData } = e.columnProps;\\n        if (!editingCellRows[index]) {\\n            editingCellRows[index] = {...rowData};\\n        }\\n        editingCellRows[index][field] = products2[index][field];\\n    }\\n\\n    const onEditorCancel = (e) => {\\n        const { rowIndex: index, field } = e.columnProps;\\n        let products = [...products2];\\n        products[index][field] = editingCellRows[index][field];\\n        delete editingCellRows[index][field];\\n\\n        setProducts2(products);\\n    }\\n\\n    const onEditorSubmit = (e) => {\\n        const { rowIndex: index, field } = e.columnProps;\\n        delete editingCellRows[index][field];\\n    }\\n\\n    const onRowEditInit = (event) => {\\n        originalRows[event.index] = { ...products3[event.index] };\\n    }\\n\\n    const onRowEditCancel = (event) => {\\n        let products = [...products3];\\n        products[event.index] = originalRows[event.index];\\n        delete originalRows[event.index];\\n\\n        setProducts3(products);\\n    }\\n\\n    const getStatusLabel = (status) => {\\n        switch (status) {\\n            case 'INSTOCK':\\n                return 'In Stock';\\n\\n            case 'LOWSTOCK':\\n                return 'Low Stock';\\n\\n            case 'OUTOFSTOCK':\\n                return 'Out of Stock';\\n\\n            default:\\n                return 'NA';\\n        }\\n    }\\n\\n    const onEditorValueChange = (productKey, props, value) => {\\n        let updatedProducts = [...props.value];\\n        updatedProducts[props.rowIndex][props.field] = value;\\n        dataTableFuncMap[`${productKey}`](updatedProducts);\\n    }\\n\\n    const inputTextEditor = (productKey, props, field) => {\\n        return <InputText type=\\\"text\\\" value={props.rowData[field]} onChange={(e) => onEditorValueChange(productKey, props, e.target.value)} />;\\n    }\\n\\n    const codeEditor = (productKey, props) => {\\n        return inputTextEditor(productKey, props, 'code');\\n    }\\n\\n    const nameEditor = (productKey, props) => {\\n        return inputTextEditor(productKey, props, 'name');\\n    }\\n\\n    const priceEditor = (productKey, props) => {\\n        return <InputNumber value={props.rowData['price']} onValueChange={(e) => onEditorValueChange(productKey, props, e.value)} mode=\\\"currency\\\" currency=\\\"USD\\\" locale=\\\"en-US\\\" />\\n    }\\n\\n    const statusEditor = (productKey, props) => {\\n        return (\\n            <Dropdown value={props.rowData['inventoryStatus']} options={statuses} optionLabel=\\\"label\\\" optionValue=\\\"value\\\"\\n                onChange={(e) => onEditorValueChange(productKey, props, e.value)} style={{ width: '100%' }} placeholder=\\\"Select a Status\\\"\\n                itemTemplate={(option) => {\\n                    return <span className={`product-badge status-${option.value.toLowerCase()}`}>{option.label}</span>\\n                }} />\\n        );\\n    }\\n\\n    const statusBodyTemplate = (rowData) => {\\n        return getStatusLabel(rowData.inventoryStatus);\\n    }\\n\\n    const priceBodyTemplate = (rowData) => {\\n        return new Intl.NumberFormat('en-US', {style: 'currency', currency: 'USD'}).format(rowData.price);\\n    }\\n\\n    return (\\n        <div className=\\\"datatable-editing-demo\\\">\\n            <Toast ref={toast} />\\n\\n            <div className=\\\"card\\\">\\n                <h5>Basic Cell Editing</h5>\\n                <DataTable value={products1} editMode=\\\"cell\\\" className=\\\"editable-cells-table\\\">\\n                    <Column field=\\\"code\\\" header=\\\"Code\\\" editor={(props) => codeEditor('products1', props)}></Column>\\n                    <Column field=\\\"name\\\" header=\\\"Name\\\" editor={(props) => nameEditor('products1', props)}></Column>\\n                    <Column field=\\\"inventoryStatus\\\" header=\\\"Status\\\" body={statusBodyTemplate} editor={(props) => statusEditor('products1', props)}></Column>\\n                    <Column field=\\\"price\\\" header=\\\"Price\\\" body={priceBodyTemplate} editor={(props) => priceEditor('products1', props)}></Column>\\n                </DataTable>\\n            </div>\\n\\n            <div className=\\\"card\\\">\\n                <h5>Advanced Cell Editing</h5>\\n                <p>Custom implementation with validations, dynamic columns and reverting values with the escape key.</p>\\n                <DataTable value={products2} editMode=\\\"cell\\\" className=\\\"editable-cells-table\\\">\\n                    {\\n                        columns.map(col => {\\n                            const { field, header } = col;\\n                            const validator = (field === 'quantity' || field === 'price') ? positiveIntegerValidator : emptyValueValidator;\\n                            return <Column key={field} field={field} header={header} body={field === 'price' && priceBodyTemplate}\\n                                editor={(props) => inputTextEditor('products2', props, field)} editorValidator={validator}\\n                                onEditorInit={onEditorInit} onEditorCancel={onEditorCancel} onEditorSubmit={onEditorSubmit} />\\n                        })\\n                    }\\n                </DataTable>\\n            </div>\\n\\n            <div className=\\\"card\\\">\\n                <h5>Row Editing</h5>\\n                <DataTable value={products3} editMode=\\\"row\\\" dataKey=\\\"id\\\" onRowEditInit={onRowEditInit} onRowEditCancel={onRowEditCancel}>\\n                    <Column field=\\\"code\\\" header=\\\"Code\\\" editor={(props) => codeEditor('products3', props)}></Column>\\n                    <Column field=\\\"name\\\" header=\\\"Name\\\" editor={(props) => nameEditor('products3', props)}></Column>\\n                    <Column field=\\\"inventoryStatus\\\" header=\\\"Status\\\" body={statusBodyTemplate} editor={(props) => statusEditor('products3', props)}></Column>\\n                    <Column field=\\\"price\\\" header=\\\"Price\\\" body={priceBodyTemplate} editor={(props) => priceEditor('products3', props)}></Column>\\n                    <Column rowEditor headerStyle={{ width: '7rem' }} bodyStyle={{ textAlign: 'center' }}></Column>\\n                </DataTable>\\n            </div>\\n        </div>\\n    );\\n}\\n                \"\n      },\n      'ts': {\n        tabName: 'TS Source',\n        content: \"\\nimport React, { useState, useEffect, useRef } from 'react';\\nimport { DataTable } from 'primereact/datatable';\\nimport { Column } from 'primereact/column';\\nimport { InputText } from 'primereact/inputtext';\\nimport { InputNumber } from 'primereact/inputnumber';\\nimport { Dropdown } from 'primereact/dropdown';\\nimport { Toast } from 'primereact/toast';\\nimport ProductService from '../service/ProductService';\\nimport './DataTableDemo.css';\\n\\nconst DataTableEditDemo = () => {\\n    const [products1, setProducts1] = useState(null);\\n    const [products2, setProducts2] = useState(null);\\n    const [products3, setProducts3] = useState(null);\\n    const toast = useRef(null);\\n    const columns = [\\n        { field: 'code', header: 'Code' },\\n        { field: 'name', header: 'Name' },\\n        { field: 'quantity', header: 'Quantity' },\\n        { field: 'price', header: 'Price' }\\n    ];\\n\\n    const statuses = [\\n        { label: 'In Stock', value: 'INSTOCK' },\\n        { label: 'Low Stock', value: 'LOWSTOCK' },\\n        { label: 'Out of Stock', value: 'OUTOFSTOCK' }\\n    ];\\n\\n    let editingCellRows = {};\\n    let originalRows = {};\\n\\n    const dataTableFuncMap = {\\n        'products1': setProducts1,\\n        'products2': setProducts2,\\n        'products3': setProducts3\\n    };\\n\\n    const productService = new ProductService();\\n\\n    useEffect(() => {\\n        fetchProductData('products1');\\n        fetchProductData('products2');\\n        fetchProductData('products3');\\n    }, []); // eslint-disable-line react-hooks/exhaustive-deps\\n\\n    const fetchProductData = (productStateKey) => {\\n        productService.getProductsSmall().then(data => dataTableFuncMap[`${productStateKey}`](data));\\n    }\\n\\n    const positiveIntegerValidator = (e) => {\\n        const { rowData, field } = e.columnProps;\\n        return isPositiveInteger(rowData[field]);\\n    }\\n\\n    const emptyValueValidator = (e) => {\\n        const { rowData, field } = e.columnProps;\\n        return rowData[field].trim().length > 0;\\n    }\\n\\n    const isPositiveInteger = (val) => {\\n        let str = String(val);\\n        str = str.trim();\\n        if (!str) {\\n            return false;\\n        }\\n        str = str.replace(/^0+/, \\\"\\\") || \\\"0\\\";\\n        let n = Math.floor(Number(str));\\n        return n !== Infinity && String(n) === str && n >= 0;\\n    }\\n\\n    const onEditorInit = (e) => {\\n        const { rowIndex: index, field, rowData } = e.columnProps;\\n        if (!editingCellRows[index]) {\\n            editingCellRows[index] = {...rowData};\\n        }\\n        editingCellRows[index][field] = products2[index][field];\\n    }\\n\\n    const onEditorCancel = (e) => {\\n        const { rowIndex: index, field } = e.columnProps;\\n        let products = [...products2];\\n        products[index][field] = editingCellRows[index][field];\\n        delete editingCellRows[index][field];\\n\\n        setProducts2(products);\\n    }\\n\\n    const onEditorSubmit = (e) => {\\n        const { rowIndex: index, field } = e.columnProps;\\n        delete editingCellRows[index][field];\\n    }\\n\\n    const onRowEditInit = (event) => {\\n        originalRows[event.index] = { ...products3[event.index] };\\n    }\\n\\n    const onRowEditCancel = (event) => {\\n        let products = [...products3];\\n        products[event.index] = originalRows[event.index];\\n        delete originalRows[event.index];\\n\\n        setProducts3(products);\\n    }\\n\\n    const getStatusLabel = (status) => {\\n        switch (status) {\\n            case 'INSTOCK':\\n                return 'In Stock';\\n\\n            case 'LOWSTOCK':\\n                return 'Low Stock';\\n\\n            case 'OUTOFSTOCK':\\n                return 'Out of Stock';\\n\\n            default:\\n                return 'NA';\\n        }\\n    }\\n\\n    const onEditorValueChange = (productKey, props, value) => {\\n        let updatedProducts = [...props.value];\\n        updatedProducts[props.rowIndex][props.field] = value;\\n        dataTableFuncMap[`${productKey}`](updatedProducts);\\n    }\\n\\n    const inputTextEditor = (productKey, props, field) => {\\n        return <InputText type=\\\"text\\\" value={props.rowData[field]} onChange={(e) => onEditorValueChange(productKey, props, e.target.value)} />;\\n    }\\n\\n    const codeEditor = (productKey, props) => {\\n        return inputTextEditor(productKey, props, 'code');\\n    }\\n\\n    const nameEditor = (productKey, props) => {\\n        return inputTextEditor(productKey, props, 'name');\\n    }\\n\\n    const priceEditor = (productKey, props) => {\\n        return <InputNumber value={props.rowData['price']} onValueChange={(e) => onEditorValueChange(productKey, props, e.value)} mode=\\\"currency\\\" currency=\\\"USD\\\" locale=\\\"en-US\\\" />\\n    }\\n\\n    const statusEditor = (productKey, props) => {\\n        return (\\n            <Dropdown value={props.rowData['inventoryStatus']} options={statuses} optionLabel=\\\"label\\\" optionValue=\\\"value\\\"\\n                onChange={(e) => onEditorValueChange(productKey, props, e.value)} style={{ width: '100%' }} placeholder=\\\"Select a Status\\\"\\n                itemTemplate={(option) => {\\n                    return <span className={`product-badge status-${option.value.toLowerCase()}`}>{option.label}</span>\\n                }} />\\n        );\\n    }\\n\\n    const statusBodyTemplate = (rowData) => {\\n        return getStatusLabel(rowData.inventoryStatus);\\n    }\\n\\n    const priceBodyTemplate = (rowData) => {\\n        return new Intl.NumberFormat('en-US', {style: 'currency', currency: 'USD'}).format(rowData.price);\\n    }\\n\\n    return (\\n        <div className=\\\"datatable-editing-demo\\\">\\n            <Toast ref={toast} />\\n\\n            <div className=\\\"card\\\">\\n                <h5>Basic Cell Editing</h5>\\n                <DataTable value={products1} editMode=\\\"cell\\\" className=\\\"editable-cells-table\\\">\\n                    <Column field=\\\"code\\\" header=\\\"Code\\\" editor={(props) => codeEditor('products1', props)}></Column>\\n                    <Column field=\\\"name\\\" header=\\\"Name\\\" editor={(props) => nameEditor('products1', props)}></Column>\\n                    <Column field=\\\"inventoryStatus\\\" header=\\\"Status\\\" body={statusBodyTemplate} editor={(props) => statusEditor('products1', props)}></Column>\\n                    <Column field=\\\"price\\\" header=\\\"Price\\\" body={priceBodyTemplate} editor={(props) => priceEditor('products1', props)}></Column>\\n                </DataTable>\\n            </div>\\n\\n            <div className=\\\"card\\\">\\n                <h5>Advanced Cell Editing</h5>\\n                <p>Custom implementation with validations, dynamic columns and reverting values with the escape key.</p>\\n                <DataTable value={products2} editMode=\\\"cell\\\" className=\\\"editable-cells-table\\\">\\n                    {\\n                        columns.map(col => {\\n                            const { field, header } = col;\\n                            const validator = (field === 'quantity' || field === 'price') ? positiveIntegerValidator : emptyValueValidator;\\n                            return <Column key={field} field={field} header={header} body={field === 'price' && priceBodyTemplate}\\n                                editor={(props) => inputTextEditor('products2', props, field)} editorValidator={validator}\\n                                onEditorInit={onEditorInit} onEditorCancel={onEditorCancel} onEditorSubmit={onEditorSubmit} />\\n                        })\\n                    }\\n                </DataTable>\\n            </div>\\n\\n            <div className=\\\"card\\\">\\n                <h5>Row Editing</h5>\\n                <DataTable value={products3} editMode=\\\"row\\\" dataKey=\\\"id\\\" onRowEditInit={onRowEditInit} onRowEditCancel={onRowEditCancel}>\\n                    <Column field=\\\"code\\\" header=\\\"Code\\\" editor={(props) => codeEditor('products3', props)}></Column>\\n                    <Column field=\\\"name\\\" header=\\\"Name\\\" editor={(props) => nameEditor('products3', props)}></Column>\\n                    <Column field=\\\"inventoryStatus\\\" header=\\\"Status\\\" body={statusBodyTemplate} editor={(props) => statusEditor('products3', props)}></Column>\\n                    <Column field=\\\"price\\\" header=\\\"Price\\\" body={priceBodyTemplate} editor={(props) => priceEditor('products3', props)}></Column>\\n                    <Column rowEditor headerStyle={{ width: '7rem' }} bodyStyle={{ textAlign: 'center' }}></Column>\\n                </DataTable>\\n            </div>\\n        </div>\\n    );\\n}\\n                \"\n      }\n    };\n    _this7.extFiles = {\n      'src/demo/DataTableDemo.css': {\n        content: \"\\n.datatable-editing-demo .editable-cells-table td.p-cell-editing {\\n    padding-top: 0;\\n    padding-bottom: 0;\\n}\\n                \"\n      }\n    };\n    return _this7;\n  }\n\n  _createClass(DataTableEditDemoDoc, [{\n    key: \"shouldComponentUpdate\",\n    value: function shouldComponentUpdate() {\n      return false;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"content-section documentation\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 896,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(TabView, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 897,\n          columnNumber: 17\n        }\n      }, useLiveEditorTabs({\n        name: 'DataTableEditDemo',\n        sources: this.sources,\n        service: 'ProductService',\n        data: 'products-small',\n        extFiles: this.extFiles\n      })));\n    }\n  }]);\n\n  return DataTableEditDemoDoc;\n}(Component);","map":{"version":3,"sources":["C:/Users/zura.ph/WebstormProjects/zz-regul/src/showcase/datatable/DataTableEditDemo.js"],"names":["React","Component","DataTable","Column","InputText","InputNumber","Dropdown","Toast","ProductService","TabView","useLiveEditorTabs","AppInlineHeader","DataTableEditDemo","props","state","products1","products2","products3","columns","field","header","statuses","label","value","editingCellRows","originalRows","productService","onRowEditInit","bind","onRowEditCancel","onEditorInit","onEditorCancel","onEditorSubmit","statusBodyTemplate","priceBodyTemplate","positiveIntegerValidator","emptyValueValidator","fetchProductData","productStateKey","getProductsSmall","then","data","setState","e","columnProps","rowData","isPositiveInteger","trim","length","val","str","String","replace","n","Math","floor","Number","Infinity","index","rowIndex","products","event","status","productKey","updatedProducts","onEditorValueChange","target","inputTextEditor","width","option","toLowerCase","getStatusLabel","inventoryStatus","Intl","NumberFormat","style","currency","format","price","el","toast","codeEditor","nameEditor","statusEditor","priceEditor","map","col","validator","textAlign","DataTableEditDemoDoc","sources","tabName","content","extFiles","name","service"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { DataTable } from '../../components/datatable/DataTable';\r\nimport { Column } from '../../components/column/Column';\r\nimport { InputText } from '../../components/inputtext/InputText';\r\nimport { InputNumber } from '../../components/inputnumber/InputNumber';\r\nimport { Dropdown } from '../../components/dropdown/Dropdown';\r\nimport { Toast } from '../../components/toast/Toast';\r\nimport ProductService from '../service/ProductService';\r\nimport { TabView } from '../../components/tabview/TabView';\r\nimport { useLiveEditorTabs }from '../liveeditor/LiveEditor';\r\nimport { AppInlineHeader } from '../../AppInlineHeader';\r\nimport './DataTableDemo.scss';\r\n\r\nexport class DataTableEditDemo extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            products1: null,\r\n            products2: null,\r\n            products3: null\r\n        };\r\n\r\n        this.columns = [\r\n            { field: 'code', header: 'Code' },\r\n            { field: 'name', header: 'Name' },\r\n            { field: 'quantity', header: 'Quantity' },\r\n            { field: 'price', header: 'Price' }\r\n        ];\r\n\r\n        this.statuses = [\r\n            { label: 'In Stock', value: 'INSTOCK' },\r\n            { label: 'Low Stock', value: 'LOWSTOCK' },\r\n            { label: 'Out of Stock', value: 'OUTOFSTOCK' }\r\n        ];\r\n\r\n        this.editingCellRows = {};\r\n        this.originalRows = {};\r\n\r\n        this.productService = new ProductService();\r\n        this.onRowEditInit = this.onRowEditInit.bind(this);\r\n        this.onRowEditCancel = this.onRowEditCancel.bind(this);\r\n        this.onEditorInit = this.onEditorInit.bind(this);\r\n        this.onEditorCancel = this.onEditorCancel.bind(this);\r\n        this.onEditorSubmit = this.onEditorSubmit.bind(this);\r\n        this.statusBodyTemplate = this.statusBodyTemplate.bind(this);\r\n        this.priceBodyTemplate = this.priceBodyTemplate.bind(this);\r\n        this.positiveIntegerValidator = this.positiveIntegerValidator.bind(this);\r\n        this.emptyValueValidator = this.emptyValueValidator.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.fetchProductData('products1');\r\n        this.fetchProductData('products2');\r\n        this.fetchProductData('products3');\r\n    }\r\n\r\n    fetchProductData(productStateKey) {\r\n        this.productService.getProductsSmall().then(data => this.setState({ [`${productStateKey}`]: data }));\r\n    }\r\n\r\n    positiveIntegerValidator(e) {\r\n        const { rowData, field } = e.columnProps;\r\n        return this.isPositiveInteger(rowData[field]);\r\n    }\r\n\r\n    emptyValueValidator(e) {\r\n        const { rowData, field } = e.columnProps;\r\n        return rowData[field].trim().length > 0;\r\n    }\r\n\r\n    isPositiveInteger(val) {\r\n        let str = String(val);\r\n        str = str.trim();\r\n        if (!str) {\r\n            return false;\r\n        }\r\n        str = str.replace(/^0+/, \"\") || \"0\";\r\n        let n = Math.floor(Number(str));\r\n        return n !== Infinity && String(n) === str && n >= 0;\r\n    }\r\n\r\n    onEditorInit(e) {\r\n        const { rowIndex: index, field, rowData } = e.columnProps;\r\n        if (!this.editingCellRows[index]) {\r\n            this.editingCellRows[index] = {...rowData};\r\n        }\r\n        this.editingCellRows[index][field] = this.state.products2[index][field];\r\n    }\r\n\r\n    onEditorCancel(e) {\r\n        const { rowIndex: index, field } = e.columnProps;\r\n        let products = [...this.state.products2];\r\n        products[index][field] = this.editingCellRows[index][field];\r\n        delete this.editingCellRows[index][field];\r\n\r\n        this.setState({\r\n            products2: products\r\n        });\r\n    }\r\n\r\n    onEditorSubmit(e) {\r\n        const { rowIndex: index, field } = e.columnProps;\r\n        delete this.editingCellRows[index][field];\r\n    }\r\n\r\n    onRowEditInit(event) {\r\n        this.originalRows[event.index] = { ...this.state.products3[event.index] };\r\n    }\r\n\r\n    onRowEditCancel(event) {\r\n        let products = [...this.state.products3];\r\n        products[event.index] = this.originalRows[event.index];\r\n        delete this.originalRows[event.index];\r\n\r\n        this.setState({ products3: products });\r\n    }\r\n\r\n    getStatusLabel(status) {\r\n        switch (status) {\r\n            case 'INSTOCK':\r\n                return 'In Stock';\r\n\r\n            case 'LOWSTOCK':\r\n                return 'Low Stock';\r\n\r\n            case 'OUTOFSTOCK':\r\n                return 'Out of Stock';\r\n\r\n            default:\r\n                return 'NA';\r\n        }\r\n    }\r\n\r\n    onEditorValueChange(productKey, props, value) {\r\n        let updatedProducts = [...props.value];\r\n        updatedProducts[props.rowIndex][props.field] = value;\r\n        this.setState({ [`${productKey}`]: updatedProducts });\r\n    }\r\n\r\n    inputTextEditor(productKey, props, field) {\r\n        return <InputText type=\"text\" value={props.rowData[field]} onChange={(e) => this.onEditorValueChange(productKey, props, e.target.value)} />;\r\n    }\r\n\r\n    codeEditor(productKey, props) {\r\n        return this.inputTextEditor(productKey, props, 'code');\r\n    }\r\n\r\n    nameEditor(productKey, props) {\r\n        return this.inputTextEditor(productKey, props, 'name');\r\n    }\r\n\r\n    priceEditor(productKey, props) {\r\n        return <InputNumber value={props.rowData['price']} onValueChange={(e) => this.onEditorValueChange(productKey, props, e.value)} mode=\"currency\" currency=\"USD\" locale=\"en-US\" />\r\n    }\r\n\r\n    statusEditor(productKey, props) {\r\n        return (\r\n            <Dropdown value={props.rowData['inventoryStatus']} options={this.statuses} optionLabel=\"label\" optionValue=\"value\"\r\n                onChange={(e) => this.onEditorValueChange(productKey, props, e.value)} style={{ width: '100%' }} placeholder=\"Select a Status\"\r\n                itemTemplate={(option) => {\r\n                    return <span className={`product-badge status-${option.value.toLowerCase()}`}>{option.label}</span>\r\n                }} />\r\n        );\r\n    }\r\n\r\n    statusBodyTemplate(rowData) {\r\n        return this.getStatusLabel(rowData.inventoryStatus);\r\n    }\r\n\r\n    priceBodyTemplate(rowData) {\r\n        return new Intl.NumberFormat('en-US', {style: 'currency', currency: 'USD'}).format(rowData.price);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div className=\"content-section introduction\">\r\n                    <AppInlineHeader changelogText=\"dataTable\">\r\n                        <h1>DataTable <span>Edit</span></h1>\r\n                        <p>Cell and Row editing provides a rapid and user friendly way to manipulate data.</p>\r\n                    </AppInlineHeader>\r\n                </div>\r\n\r\n                <div className=\"content-section implementation datatable-editing-demo\">\r\n                    <Toast ref={(el) => this.toast = el} />\r\n\r\n                    <div className=\"card\">\r\n                        <h5>Basic Cell Editing</h5>\r\n                        <DataTable value={this.state.products1} editMode=\"cell\" className=\"editable-cells-table\">\r\n                            <Column field=\"code\" header=\"Code\" editor={(props) => this.codeEditor('products1', props)}></Column>\r\n                            <Column field=\"name\" header=\"Name\" editor={(props) => this.nameEditor('products1', props)}></Column>\r\n                            <Column field=\"inventoryStatus\" header=\"Status\" body={this.statusBodyTemplate} editor={(props) => this.statusEditor('products1', props)}></Column>\r\n                            <Column field=\"price\" header=\"Price\" body={this.priceBodyTemplate} editor={(props) => this.priceEditor('products1', props)}></Column>\r\n                        </DataTable>\r\n                    </div>\r\n\r\n                    <div className=\"card\">\r\n                        <h5>Advanced Cell Editing</h5>\r\n                        <p>Custom implementation with validations, dynamic columns and reverting values with the escape key.</p>\r\n                        <DataTable value={this.state.products2} editMode=\"cell\" className=\"editable-cells-table\">\r\n                            {\r\n                                this.columns.map(col => {\r\n                                    const { field, header } = col;\r\n                                    const validator = (field === 'quantity' || field === 'price') ? this.positiveIntegerValidator : this.emptyValueValidator;\r\n                                    return <Column key={field} field={field} header={header} body={field === 'price' && this.priceBodyTemplate}\r\n                                        editor={(props) => this.inputTextEditor('products2', props, field)} editorValidator={validator}\r\n                                        onEditorInit={this.onEditorInit} onEditorCancel={this.onEditorCancel} onEditorSubmit={this.onEditorSubmit} />\r\n                                })\r\n                            }\r\n                        </DataTable>\r\n                    </div>\r\n\r\n                    <div className=\"card\">\r\n                        <h5>Row Editing</h5>\r\n                        <DataTable value={this.state.products3} editMode=\"row\" dataKey=\"id\" onRowEditInit={this.onRowEditInit} onRowEditCancel={this.onRowEditCancel}>\r\n                            <Column field=\"code\" header=\"Code\" editor={(props) => this.codeEditor('products3', props)}></Column>\r\n                            <Column field=\"name\" header=\"Name\" editor={(props) => this.nameEditor('products3', props)}></Column>\r\n                            <Column field=\"inventoryStatus\" header=\"Status\" body={this.statusBodyTemplate} editor={(props) => this.statusEditor('products3', props)}></Column>\r\n                            <Column field=\"price\" header=\"Price\" body={this.priceBodyTemplate} editor={(props) => this.priceEditor('products3', props)}></Column>\r\n                            <Column rowEditor headerStyle={{ width: '7rem' }} bodyStyle={{ textAlign: 'center' }}></Column>\r\n                        </DataTable>\r\n                    </div>\r\n                </div>\r\n\r\n                <DataTableEditDemoDoc></DataTableEditDemoDoc>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport class DataTableEditDemoDoc extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.sources = {\r\n            'class': {\r\n                tabName: 'Class Source',\r\n                content: `\r\nimport React, { Component } from 'react';\r\nimport { DataTable } from 'primereact/datatable';\r\nimport { Column } from 'primereact/column';\r\nimport { InputText } from 'primereact/inputtext';\r\nimport { InputNumber } from 'primereact/inputnumber';\r\nimport { Dropdown } from 'primereact/dropdown';\r\nimport { Toast } from 'primereact/toast';\r\nimport ProductService from '../service/ProductService';\r\nimport './DataTableDemo.css';\r\n\r\nexport class DataTableEditDemo extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            products1: null,\r\n            products2: null,\r\n            products3: null\r\n        };\r\n\r\n        this.columns = [\r\n            { field: 'code', header: 'Code' },\r\n            { field: 'name', header: 'Name' },\r\n            { field: 'quantity', header: 'Quantity' },\r\n            { field: 'price', header: 'Price' }\r\n        ];\r\n\r\n        this.statuses = [\r\n            { label: 'In Stock', value: 'INSTOCK' },\r\n            { label: 'Low Stock', value: 'LOWSTOCK' },\r\n            { label: 'Out of Stock', value: 'OUTOFSTOCK' }\r\n        ];\r\n\r\n        this.editingCellRows = {};\r\n        this.originalRows = {};\r\n\r\n        this.productService = new ProductService();\r\n        this.onRowEditInit = this.onRowEditInit.bind(this);\r\n        this.onRowEditCancel = this.onRowEditCancel.bind(this);\r\n        this.onEditorInit = this.onEditorInit.bind(this);\r\n        this.onEditorCancel = this.onEditorCancel.bind(this);\r\n        this.onEditorSubmit = this.onEditorSubmit.bind(this);\r\n        this.statusBodyTemplate = this.statusBodyTemplate.bind(this);\r\n        this.positiveIntegerValidator = this.positiveIntegerValidator.bind(this);\r\n        this.emptyValueValidator = this.emptyValueValidator.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.fetchProductData('products1');\r\n        this.fetchProductData('products2');\r\n        this.fetchProductData('products3');\r\n    }\r\n\r\n    fetchProductData(productStateKey) {\r\n        this.productService.getProductsSmall().then(data => this.setState({ [\\`\\${productStateKey}\\`]: data }));\r\n    }\r\n\r\n    positiveIntegerValidator(e) {\r\n        const { rowData, field } = e.columnProps;\r\n        return this.isPositiveInteger(rowData[field]);\r\n    }\r\n\r\n    emptyValueValidator(e) {\r\n        const { rowData, field } = e.columnProps;\r\n        return rowData[field].trim().length > 0;\r\n    }\r\n\r\n    isPositiveInteger(val) {\r\n        let str = String(val);\r\n        str = str.trim();\r\n        if (!str) {\r\n            return false;\r\n        }\r\n        str = str.replace(/^0+/, \"\") || \"0\";\r\n        let n = Math.floor(Number(str));\r\n        return n !== Infinity && String(n) === str && n >= 0;\r\n    }\r\n\r\n    onEditorInit(e) {\r\n        const { rowIndex: index, field, rowData } = e.columnProps;\r\n        if (!this.editingCellRows[index]) {\r\n            this.editingCellRows[index] = {...rowData};\r\n        }\r\n        this.editingCellRows[index][field] = this.state.products2[index][field];\r\n    }\r\n\r\n    onEditorCancel(e) {\r\n        const { rowIndex: index, field } = e.columnProps;\r\n        let products = [...this.state.products2];\r\n        products[index][field] = this.editingCellRows[index][field];\r\n        delete this.editingCellRows[index][field];\r\n\r\n        this.setState({\r\n            products2: products\r\n        });\r\n    }\r\n\r\n    onEditorSubmit(e) {\r\n        const { rowIndex: index, field } = e.columnProps;\r\n        delete this.editingCellRows[index][field];\r\n    }\r\n\r\n    onRowEditInit(event) {\r\n        this.originalRows[event.index] = { ...this.state.products3[event.index] };\r\n    }\r\n\r\n    onRowEditCancel(event) {\r\n        let products = [...this.state.products3];\r\n        products[event.index] = this.originalRows[event.index];\r\n        delete this.originalRows[event.index];\r\n\r\n        this.setState({ products3: products });\r\n    }\r\n\r\n    getStatusLabel(status) {\r\n        switch (status) {\r\n            case 'INSTOCK':\r\n                return 'In Stock';\r\n\r\n            case 'LOWSTOCK':\r\n                return 'Low Stock';\r\n\r\n            case 'OUTOFSTOCK':\r\n                return 'Out of Stock';\r\n\r\n            default:\r\n                return 'NA';\r\n        }\r\n    }\r\n\r\n    onEditorValueChange(productKey, props, value) {\r\n        let updatedProducts = [...props.value];\r\n        updatedProducts[props.rowIndex][props.field] = value;\r\n        this.setState({ [\\`\\${productKey}\\`]: updatedProducts });\r\n    }\r\n\r\n    inputTextEditor(productKey, props, field) {\r\n        return <InputText type=\"text\" value={props.rowData[field]} onChange={(e) => this.onEditorValueChange(productKey, props, e.target.value)} />;\r\n    }\r\n\r\n    codeEditor(productKey, props) {\r\n        return this.inputTextEditor(productKey, props, 'code');\r\n    }\r\n\r\n    nameEditor(productKey, props) {\r\n        return this.inputTextEditor(productKey, props, 'name');\r\n    }\r\n\r\n    priceEditor(productKey, props) {\r\n        return <InputNumber value={props.rowData['price']} onValueChange={(e) => this.onEditorValueChange(productKey, props, e.value)} mode=\"currency\" currency=\"USD\" locale=\"en-US\" />\r\n    }\r\n\r\n    statusEditor(productKey, props) {\r\n        return (\r\n            <Dropdown value={props.rowData['inventoryStatus']} options={this.statuses} optionLabel=\"label\" optionValue=\"value\"\r\n                onChange={(e) => this.onEditorValueChange(productKey, props, e.value)} style={{ width: '100%' }} placeholder=\"Select a Status\"\r\n                itemTemplate={(option) => {\r\n                    return <span className={\\`product-badge status-\\${option.value.toLowerCase()}\\`}>{option.label}</span>\r\n                }} />\r\n        );\r\n    }\r\n\r\n    statusBodyTemplate(rowData) {\r\n        return this.getStatusLabel(rowData.inventoryStatus);\r\n    }\r\n\r\n    priceBodyTemplate(rowData) {\r\n        return new Intl.NumberFormat('en-US', {style: 'currency', currency: 'USD'}).format(rowData.price);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"datatable-editing-demo\">\r\n                <Toast ref={(el) => this.toast = el} />\r\n\r\n                <div className=\"card\">\r\n                    <h5>Basic Cell Editing</h5>\r\n                    <DataTable value={this.state.products1} editMode=\"cell\" className=\"editable-cells-table\">\r\n                        <Column field=\"code\" header=\"Code\" editor={(props) => this.codeEditor('products1', props)}></Column>\r\n                        <Column field=\"name\" header=\"Name\" editor={(props) => this.nameEditor('products1', props)}></Column>\r\n                        <Column field=\"inventoryStatus\" header=\"Status\" body={this.statusBodyTemplate} editor={(props) => this.statusEditor('products1', props)}></Column>\r\n                        <Column field=\"price\" header=\"Price\" body={this.priceBodyTemplate} editor={(props) => this.priceEditor('products1', props)}></Column>\r\n                    </DataTable>\r\n                </div>\r\n\r\n                <div className=\"card\">\r\n                    <h5>Advanced Cell Editing</h5>\r\n                    <p>Custom implementation with validations, dynamic columns and reverting values with the escape key.</p>\r\n                    <DataTable value={this.state.products2} editMode=\"cell\" className=\"editable-cells-table\">\r\n                        {\r\n                            this.columns.map(col => {\r\n                                const { field, header } = col;\r\n                                const validator = (field === 'quantity' || field === 'price') ? this.positiveIntegerValidator : this.emptyValueValidator;\r\n                                return <Column key={field} field={field} header={header} body={field === 'price' && this.priceBodyTemplate}\r\n                                    editor={(props) => this.inputTextEditor('products2', props, field)} editorValidator={validator}\r\n                                    onEditorInit={this.onEditorInit} onEditorCancel={this.onEditorCancel} onEditorSubmit={this.onEditorSubmit} />\r\n                            })\r\n                        }\r\n                    </DataTable>\r\n                </div>\r\n\r\n                <div className=\"card\">\r\n                    <h5>Row Editing</h5>\r\n                    <DataTable value={this.state.products3} editMode=\"row\" dataKey=\"id\" onRowEditInit={this.onRowEditInit} onRowEditCancel={this.onRowEditCancel}>\r\n                        <Column field=\"code\" header=\"Code\" editor={(props) => this.codeEditor('products3', props)}></Column>\r\n                        <Column field=\"name\" header=\"Name\" editor={(props) => this.nameEditor('products3', props)}></Column>\r\n                        <Column field=\"inventoryStatus\" header=\"Status\" body={this.statusBodyTemplate} editor={(props) => this.statusEditor('products3', props)}></Column>\r\n                        <Column field=\"price\" header=\"Price\" body={this.priceBodyTemplate} editor={(props) => this.priceEditor('products3', props)}></Column>\r\n                        <Column rowEditor headerStyle={{ width: '7rem' }} bodyStyle={{ textAlign: 'center' }}></Column>\r\n                    </DataTable>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n                `\r\n            },\r\n            'hooks': {\r\n                tabName: 'Hooks Source',\r\n                content: `\r\nimport React, { useState, useEffect, useRef } from 'react';\r\nimport { DataTable } from 'primereact/datatable';\r\nimport { Column } from 'primereact/column';\r\nimport { InputText } from 'primereact/inputtext';\r\nimport { InputNumber } from 'primereact/inputnumber';\r\nimport { Dropdown } from 'primereact/dropdown';\r\nimport { Toast } from 'primereact/toast';\r\nimport ProductService from '../service/ProductService';\r\nimport './DataTableDemo.css';\r\n\r\nconst DataTableEditDemo = () => {\r\n    const [products1, setProducts1] = useState(null);\r\n    const [products2, setProducts2] = useState(null);\r\n    const [products3, setProducts3] = useState(null);\r\n    const toast = useRef(null);\r\n    const columns = [\r\n        { field: 'code', header: 'Code' },\r\n        { field: 'name', header: 'Name' },\r\n        { field: 'quantity', header: 'Quantity' },\r\n        { field: 'price', header: 'Price' }\r\n    ];\r\n\r\n    const statuses = [\r\n        { label: 'In Stock', value: 'INSTOCK' },\r\n        { label: 'Low Stock', value: 'LOWSTOCK' },\r\n        { label: 'Out of Stock', value: 'OUTOFSTOCK' }\r\n    ];\r\n\r\n    let editingCellRows = {};\r\n    let originalRows = {};\r\n\r\n    const dataTableFuncMap = {\r\n        'products1': setProducts1,\r\n        'products2': setProducts2,\r\n        'products3': setProducts3\r\n    };\r\n\r\n    const productService = new ProductService();\r\n\r\n    useEffect(() => {\r\n        fetchProductData('products1');\r\n        fetchProductData('products2');\r\n        fetchProductData('products3');\r\n    }, []); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n    const fetchProductData = (productStateKey) => {\r\n        productService.getProductsSmall().then(data => dataTableFuncMap[\\`\\${productStateKey}\\`](data));\r\n    }\r\n\r\n    const positiveIntegerValidator = (e) => {\r\n        const { rowData, field } = e.columnProps;\r\n        return isPositiveInteger(rowData[field]);\r\n    }\r\n\r\n    const emptyValueValidator = (e) => {\r\n        const { rowData, field } = e.columnProps;\r\n        return rowData[field].trim().length > 0;\r\n    }\r\n\r\n    const isPositiveInteger = (val) => {\r\n        let str = String(val);\r\n        str = str.trim();\r\n        if (!str) {\r\n            return false;\r\n        }\r\n        str = str.replace(/^0+/, \"\") || \"0\";\r\n        let n = Math.floor(Number(str));\r\n        return n !== Infinity && String(n) === str && n >= 0;\r\n    }\r\n\r\n    const onEditorInit = (e) => {\r\n        const { rowIndex: index, field, rowData } = e.columnProps;\r\n        if (!editingCellRows[index]) {\r\n            editingCellRows[index] = {...rowData};\r\n        }\r\n        editingCellRows[index][field] = products2[index][field];\r\n    }\r\n\r\n    const onEditorCancel = (e) => {\r\n        const { rowIndex: index, field } = e.columnProps;\r\n        let products = [...products2];\r\n        products[index][field] = editingCellRows[index][field];\r\n        delete editingCellRows[index][field];\r\n\r\n        setProducts2(products);\r\n    }\r\n\r\n    const onEditorSubmit = (e) => {\r\n        const { rowIndex: index, field } = e.columnProps;\r\n        delete editingCellRows[index][field];\r\n    }\r\n\r\n    const onRowEditInit = (event) => {\r\n        originalRows[event.index] = { ...products3[event.index] };\r\n    }\r\n\r\n    const onRowEditCancel = (event) => {\r\n        let products = [...products3];\r\n        products[event.index] = originalRows[event.index];\r\n        delete originalRows[event.index];\r\n\r\n        setProducts3(products);\r\n    }\r\n\r\n    const getStatusLabel = (status) => {\r\n        switch (status) {\r\n            case 'INSTOCK':\r\n                return 'In Stock';\r\n\r\n            case 'LOWSTOCK':\r\n                return 'Low Stock';\r\n\r\n            case 'OUTOFSTOCK':\r\n                return 'Out of Stock';\r\n\r\n            default:\r\n                return 'NA';\r\n        }\r\n    }\r\n\r\n    const onEditorValueChange = (productKey, props, value) => {\r\n        let updatedProducts = [...props.value];\r\n        updatedProducts[props.rowIndex][props.field] = value;\r\n        dataTableFuncMap[\\`\\${productKey}\\`](updatedProducts);\r\n    }\r\n\r\n    const inputTextEditor = (productKey, props, field) => {\r\n        return <InputText type=\"text\" value={props.rowData[field]} onChange={(e) => onEditorValueChange(productKey, props, e.target.value)} />;\r\n    }\r\n\r\n    const codeEditor = (productKey, props) => {\r\n        return inputTextEditor(productKey, props, 'code');\r\n    }\r\n\r\n    const nameEditor = (productKey, props) => {\r\n        return inputTextEditor(productKey, props, 'name');\r\n    }\r\n\r\n    const priceEditor = (productKey, props) => {\r\n        return <InputNumber value={props.rowData['price']} onValueChange={(e) => onEditorValueChange(productKey, props, e.value)} mode=\"currency\" currency=\"USD\" locale=\"en-US\" />\r\n    }\r\n\r\n    const statusEditor = (productKey, props) => {\r\n        return (\r\n            <Dropdown value={props.rowData['inventoryStatus']} options={statuses} optionLabel=\"label\" optionValue=\"value\"\r\n                onChange={(e) => onEditorValueChange(productKey, props, e.value)} style={{ width: '100%' }} placeholder=\"Select a Status\"\r\n                itemTemplate={(option) => {\r\n                    return <span className={\\`product-badge status-\\${option.value.toLowerCase()}\\`}>{option.label}</span>\r\n                }} />\r\n        );\r\n    }\r\n\r\n    const statusBodyTemplate = (rowData) => {\r\n        return getStatusLabel(rowData.inventoryStatus);\r\n    }\r\n\r\n    const priceBodyTemplate = (rowData) => {\r\n        return new Intl.NumberFormat('en-US', {style: 'currency', currency: 'USD'}).format(rowData.price);\r\n    }\r\n\r\n    return (\r\n        <div className=\"datatable-editing-demo\">\r\n            <Toast ref={toast} />\r\n\r\n            <div className=\"card\">\r\n                <h5>Basic Cell Editing</h5>\r\n                <DataTable value={products1} editMode=\"cell\" className=\"editable-cells-table\">\r\n                    <Column field=\"code\" header=\"Code\" editor={(props) => codeEditor('products1', props)}></Column>\r\n                    <Column field=\"name\" header=\"Name\" editor={(props) => nameEditor('products1', props)}></Column>\r\n                    <Column field=\"inventoryStatus\" header=\"Status\" body={statusBodyTemplate} editor={(props) => statusEditor('products1', props)}></Column>\r\n                    <Column field=\"price\" header=\"Price\" body={priceBodyTemplate} editor={(props) => priceEditor('products1', props)}></Column>\r\n                </DataTable>\r\n            </div>\r\n\r\n            <div className=\"card\">\r\n                <h5>Advanced Cell Editing</h5>\r\n                <p>Custom implementation with validations, dynamic columns and reverting values with the escape key.</p>\r\n                <DataTable value={products2} editMode=\"cell\" className=\"editable-cells-table\">\r\n                    {\r\n                        columns.map(col => {\r\n                            const { field, header } = col;\r\n                            const validator = (field === 'quantity' || field === 'price') ? positiveIntegerValidator : emptyValueValidator;\r\n                            return <Column key={field} field={field} header={header} body={field === 'price' && priceBodyTemplate}\r\n                                editor={(props) => inputTextEditor('products2', props, field)} editorValidator={validator}\r\n                                onEditorInit={onEditorInit} onEditorCancel={onEditorCancel} onEditorSubmit={onEditorSubmit} />\r\n                        })\r\n                    }\r\n                </DataTable>\r\n            </div>\r\n\r\n            <div className=\"card\">\r\n                <h5>Row Editing</h5>\r\n                <DataTable value={products3} editMode=\"row\" dataKey=\"id\" onRowEditInit={onRowEditInit} onRowEditCancel={onRowEditCancel}>\r\n                    <Column field=\"code\" header=\"Code\" editor={(props) => codeEditor('products3', props)}></Column>\r\n                    <Column field=\"name\" header=\"Name\" editor={(props) => nameEditor('products3', props)}></Column>\r\n                    <Column field=\"inventoryStatus\" header=\"Status\" body={statusBodyTemplate} editor={(props) => statusEditor('products3', props)}></Column>\r\n                    <Column field=\"price\" header=\"Price\" body={priceBodyTemplate} editor={(props) => priceEditor('products3', props)}></Column>\r\n                    <Column rowEditor headerStyle={{ width: '7rem' }} bodyStyle={{ textAlign: 'center' }}></Column>\r\n                </DataTable>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n                `\r\n            },\r\n            'ts': {\r\n                tabName: 'TS Source',\r\n                content: `\r\nimport React, { useState, useEffect, useRef } from 'react';\r\nimport { DataTable } from 'primereact/datatable';\r\nimport { Column } from 'primereact/column';\r\nimport { InputText } from 'primereact/inputtext';\r\nimport { InputNumber } from 'primereact/inputnumber';\r\nimport { Dropdown } from 'primereact/dropdown';\r\nimport { Toast } from 'primereact/toast';\r\nimport ProductService from '../service/ProductService';\r\nimport './DataTableDemo.css';\r\n\r\nconst DataTableEditDemo = () => {\r\n    const [products1, setProducts1] = useState(null);\r\n    const [products2, setProducts2] = useState(null);\r\n    const [products3, setProducts3] = useState(null);\r\n    const toast = useRef(null);\r\n    const columns = [\r\n        { field: 'code', header: 'Code' },\r\n        { field: 'name', header: 'Name' },\r\n        { field: 'quantity', header: 'Quantity' },\r\n        { field: 'price', header: 'Price' }\r\n    ];\r\n\r\n    const statuses = [\r\n        { label: 'In Stock', value: 'INSTOCK' },\r\n        { label: 'Low Stock', value: 'LOWSTOCK' },\r\n        { label: 'Out of Stock', value: 'OUTOFSTOCK' }\r\n    ];\r\n\r\n    let editingCellRows = {};\r\n    let originalRows = {};\r\n\r\n    const dataTableFuncMap = {\r\n        'products1': setProducts1,\r\n        'products2': setProducts2,\r\n        'products3': setProducts3\r\n    };\r\n\r\n    const productService = new ProductService();\r\n\r\n    useEffect(() => {\r\n        fetchProductData('products1');\r\n        fetchProductData('products2');\r\n        fetchProductData('products3');\r\n    }, []); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n    const fetchProductData = (productStateKey) => {\r\n        productService.getProductsSmall().then(data => dataTableFuncMap[\\`\\${productStateKey}\\`](data));\r\n    }\r\n\r\n    const positiveIntegerValidator = (e) => {\r\n        const { rowData, field } = e.columnProps;\r\n        return isPositiveInteger(rowData[field]);\r\n    }\r\n\r\n    const emptyValueValidator = (e) => {\r\n        const { rowData, field } = e.columnProps;\r\n        return rowData[field].trim().length > 0;\r\n    }\r\n\r\n    const isPositiveInteger = (val) => {\r\n        let str = String(val);\r\n        str = str.trim();\r\n        if (!str) {\r\n            return false;\r\n        }\r\n        str = str.replace(/^0+/, \"\") || \"0\";\r\n        let n = Math.floor(Number(str));\r\n        return n !== Infinity && String(n) === str && n >= 0;\r\n    }\r\n\r\n    const onEditorInit = (e) => {\r\n        const { rowIndex: index, field, rowData } = e.columnProps;\r\n        if (!editingCellRows[index]) {\r\n            editingCellRows[index] = {...rowData};\r\n        }\r\n        editingCellRows[index][field] = products2[index][field];\r\n    }\r\n\r\n    const onEditorCancel = (e) => {\r\n        const { rowIndex: index, field } = e.columnProps;\r\n        let products = [...products2];\r\n        products[index][field] = editingCellRows[index][field];\r\n        delete editingCellRows[index][field];\r\n\r\n        setProducts2(products);\r\n    }\r\n\r\n    const onEditorSubmit = (e) => {\r\n        const { rowIndex: index, field } = e.columnProps;\r\n        delete editingCellRows[index][field];\r\n    }\r\n\r\n    const onRowEditInit = (event) => {\r\n        originalRows[event.index] = { ...products3[event.index] };\r\n    }\r\n\r\n    const onRowEditCancel = (event) => {\r\n        let products = [...products3];\r\n        products[event.index] = originalRows[event.index];\r\n        delete originalRows[event.index];\r\n\r\n        setProducts3(products);\r\n    }\r\n\r\n    const getStatusLabel = (status) => {\r\n        switch (status) {\r\n            case 'INSTOCK':\r\n                return 'In Stock';\r\n\r\n            case 'LOWSTOCK':\r\n                return 'Low Stock';\r\n\r\n            case 'OUTOFSTOCK':\r\n                return 'Out of Stock';\r\n\r\n            default:\r\n                return 'NA';\r\n        }\r\n    }\r\n\r\n    const onEditorValueChange = (productKey, props, value) => {\r\n        let updatedProducts = [...props.value];\r\n        updatedProducts[props.rowIndex][props.field] = value;\r\n        dataTableFuncMap[\\`\\${productKey}\\`](updatedProducts);\r\n    }\r\n\r\n    const inputTextEditor = (productKey, props, field) => {\r\n        return <InputText type=\"text\" value={props.rowData[field]} onChange={(e) => onEditorValueChange(productKey, props, e.target.value)} />;\r\n    }\r\n\r\n    const codeEditor = (productKey, props) => {\r\n        return inputTextEditor(productKey, props, 'code');\r\n    }\r\n\r\n    const nameEditor = (productKey, props) => {\r\n        return inputTextEditor(productKey, props, 'name');\r\n    }\r\n\r\n    const priceEditor = (productKey, props) => {\r\n        return <InputNumber value={props.rowData['price']} onValueChange={(e) => onEditorValueChange(productKey, props, e.value)} mode=\"currency\" currency=\"USD\" locale=\"en-US\" />\r\n    }\r\n\r\n    const statusEditor = (productKey, props) => {\r\n        return (\r\n            <Dropdown value={props.rowData['inventoryStatus']} options={statuses} optionLabel=\"label\" optionValue=\"value\"\r\n                onChange={(e) => onEditorValueChange(productKey, props, e.value)} style={{ width: '100%' }} placeholder=\"Select a Status\"\r\n                itemTemplate={(option) => {\r\n                    return <span className={\\`product-badge status-\\${option.value.toLowerCase()}\\`}>{option.label}</span>\r\n                }} />\r\n        );\r\n    }\r\n\r\n    const statusBodyTemplate = (rowData) => {\r\n        return getStatusLabel(rowData.inventoryStatus);\r\n    }\r\n\r\n    const priceBodyTemplate = (rowData) => {\r\n        return new Intl.NumberFormat('en-US', {style: 'currency', currency: 'USD'}).format(rowData.price);\r\n    }\r\n\r\n    return (\r\n        <div className=\"datatable-editing-demo\">\r\n            <Toast ref={toast} />\r\n\r\n            <div className=\"card\">\r\n                <h5>Basic Cell Editing</h5>\r\n                <DataTable value={products1} editMode=\"cell\" className=\"editable-cells-table\">\r\n                    <Column field=\"code\" header=\"Code\" editor={(props) => codeEditor('products1', props)}></Column>\r\n                    <Column field=\"name\" header=\"Name\" editor={(props) => nameEditor('products1', props)}></Column>\r\n                    <Column field=\"inventoryStatus\" header=\"Status\" body={statusBodyTemplate} editor={(props) => statusEditor('products1', props)}></Column>\r\n                    <Column field=\"price\" header=\"Price\" body={priceBodyTemplate} editor={(props) => priceEditor('products1', props)}></Column>\r\n                </DataTable>\r\n            </div>\r\n\r\n            <div className=\"card\">\r\n                <h5>Advanced Cell Editing</h5>\r\n                <p>Custom implementation with validations, dynamic columns and reverting values with the escape key.</p>\r\n                <DataTable value={products2} editMode=\"cell\" className=\"editable-cells-table\">\r\n                    {\r\n                        columns.map(col => {\r\n                            const { field, header } = col;\r\n                            const validator = (field === 'quantity' || field === 'price') ? positiveIntegerValidator : emptyValueValidator;\r\n                            return <Column key={field} field={field} header={header} body={field === 'price' && priceBodyTemplate}\r\n                                editor={(props) => inputTextEditor('products2', props, field)} editorValidator={validator}\r\n                                onEditorInit={onEditorInit} onEditorCancel={onEditorCancel} onEditorSubmit={onEditorSubmit} />\r\n                        })\r\n                    }\r\n                </DataTable>\r\n            </div>\r\n\r\n            <div className=\"card\">\r\n                <h5>Row Editing</h5>\r\n                <DataTable value={products3} editMode=\"row\" dataKey=\"id\" onRowEditInit={onRowEditInit} onRowEditCancel={onRowEditCancel}>\r\n                    <Column field=\"code\" header=\"Code\" editor={(props) => codeEditor('products3', props)}></Column>\r\n                    <Column field=\"name\" header=\"Name\" editor={(props) => nameEditor('products3', props)}></Column>\r\n                    <Column field=\"inventoryStatus\" header=\"Status\" body={statusBodyTemplate} editor={(props) => statusEditor('products3', props)}></Column>\r\n                    <Column field=\"price\" header=\"Price\" body={priceBodyTemplate} editor={(props) => priceEditor('products3', props)}></Column>\r\n                    <Column rowEditor headerStyle={{ width: '7rem' }} bodyStyle={{ textAlign: 'center' }}></Column>\r\n                </DataTable>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n                `\r\n            }\r\n        };\r\n\r\n        this.extFiles = {\r\n            'src/demo/DataTableDemo.css': {\r\n                content: `\r\n.datatable-editing-demo .editable-cells-table td.p-cell-editing {\r\n    padding-top: 0;\r\n    padding-bottom: 0;\r\n}\r\n                `\r\n            }\r\n        }\r\n    }\r\n\r\n    shouldComponentUpdate() {\r\n        return false;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"content-section documentation\">\r\n                <TabView>\r\n                    {\r\n                        useLiveEditorTabs({ name: 'DataTableEditDemo', sources: this.sources, service: 'ProductService', data: 'products-small', extFiles: this.extFiles })\r\n                    }\r\n                </TabView>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}