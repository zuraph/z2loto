{"ast":null,"code":"import _classCallCheck from\"C:\\\\Users\\\\zura.ph\\\\WebstormProjects\\\\slotmaster-dashboard\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";import _createClass from\"C:\\\\Users\\\\zura.ph\\\\WebstormProjects\\\\slotmaster-dashboard\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";import _assertThisInitialized from\"C:\\\\Users\\\\zura.ph\\\\WebstormProjects\\\\slotmaster-dashboard\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/assertThisInitialized\";import _inherits from\"C:\\\\Users\\\\zura.ph\\\\WebstormProjects\\\\slotmaster-dashboard\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";import _createSuper from\"C:\\\\Users\\\\zura.ph\\\\WebstormProjects\\\\slotmaster-dashboard\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createSuper\";import React,{Component}from'react';import{DataTable}from'../../components/datatable/DataTable';import{Column}from'../../components/column/Column';import ProductService from'../service/ProductService';import{Toast}from'../../components/toast/Toast';import{TabView}from'../../components/tabview/TabView';import{useLiveEditorTabs}from'../liveeditor/LiveEditor';import{AppInlineHeader}from'../../AppInlineHeader';export var DataTableReorderDemo=/*#__PURE__*/function(_Component){_inherits(DataTableReorderDemo,_Component);var _super=_createSuper(DataTableReorderDemo);function DataTableReorderDemo(props){var _this;_classCallCheck(this,DataTableReorderDemo);_this=_super.call(this,props);_this.state={products:[]};_this.columns=[{field:'code',header:'Code'},{field:'name',header:'Name'},{field:'category',header:'Category'},{field:'quantity',header:'Quantity'}];_this.productService=new ProductService();_this.onColReorder=_this.onColReorder.bind(_assertThisInitialized(_this));_this.onRowReorder=_this.onRowReorder.bind(_assertThisInitialized(_this));return _this;}_createClass(DataTableReorderDemo,[{key:\"componentDidMount\",value:function componentDidMount(){var _this2=this;this.productService.getProductsSmall().then(function(data){return _this2.setState({products:data});});}},{key:\"onColReorder\",value:function onColReorder(){this.toast.show({severity:'success',summary:'Column Reordered',life:3000});}},{key:\"onRowReorder\",value:function onRowReorder(e){var _this3=this;this.setState({products:e.value},function(){_this3.toast.show({severity:'success',summary:'Rows Reordered',life:3000});});}},{key:\"render\",value:function render(){var _this4=this;var dynamicColumns=this.columns.map(function(col,i){return/*#__PURE__*/React.createElement(Column,{key:col.field,columnKey:col.field,field:col.field,header:col.header});});return/*#__PURE__*/React.createElement(\"div\",null,/*#__PURE__*/React.createElement(\"div\",{className:\"content-section introduction\"},/*#__PURE__*/React.createElement(AppInlineHeader,{changelogText:\"dataTable\"},/*#__PURE__*/React.createElement(\"h1\",null,\"DataTable \",/*#__PURE__*/React.createElement(\"span\",null,\"Reorder\")),/*#__PURE__*/React.createElement(\"p\",null,\"Order of the columns and rows can be changed using drag and drop.\"))),/*#__PURE__*/React.createElement(\"div\",{className:\"content-section implementation\"},/*#__PURE__*/React.createElement(Toast,{ref:function ref(el){_this4.toast=el;}}),/*#__PURE__*/React.createElement(\"div\",{className:\"card\"},/*#__PURE__*/React.createElement(DataTable,{value:this.state.products,reorderableColumns:true,onRowReorder:this.onRowReorder,onColReorder:this.onColReorder},/*#__PURE__*/React.createElement(Column,{rowReorder:true,style:{width:'3em'}}),dynamicColumns))),/*#__PURE__*/React.createElement(DataTableColReorderDemoDoc,null));}}]);return DataTableReorderDemo;}(Component);export var DataTableColReorderDemoDoc=/*#__PURE__*/function(_Component2){_inherits(DataTableColReorderDemoDoc,_Component2);var _super2=_createSuper(DataTableColReorderDemoDoc);function DataTableColReorderDemoDoc(props){var _this5;_classCallCheck(this,DataTableColReorderDemoDoc);_this5=_super2.call(this,props);_this5.sources={'class':{tabName:'Class Source',content:\"\\nimport React, { Component } from 'react';\\nimport { DataTable } from 'primereact/datatable';\\nimport { Column } from 'primereact/column';\\nimport ProductService from '../service/ProductService';\\nimport { Toast } from 'primereact/toast';\\n\\nexport class DataTableReorderDemo extends Component {\\n\\n    constructor(props) {\\n        super(props);\\n\\n        this.state = {\\n            products: []\\n        };\\n\\n        this.columns = [\\n            {field: 'code', header: 'Code'},\\n            {field: 'name', header: 'Name'},\\n            {field: 'category', header: 'Category'},\\n            {field: 'quantity', header: 'Quantity'}\\n        ];\\n\\n        this.productService = new ProductService();\\n        this.onColReorder = this.onColReorder.bind(this);\\n        this.onRowReorder = this.onRowReorder.bind(this);\\n    }\\n\\n    componentDidMount() {\\n        this.productService.getProductsSmall().then(data => this.setState({ products: data }));\\n    }\\n\\n    onColReorder() {\\n        this.toast.show({severity:'success', summary: 'Column Reordered', life: 3000});\\n    }\\n\\n    onRowReorder(e) {\\n        this.setState({ products: e.value }, () => {\\n            this.toast.show({severity:'success', summary: 'Rows Reordered', life: 3000});\\n        });\\n    }\\n\\n    render() {\\n        const dynamicColumns = this.columns.map((col,i) => {\\n            return <Column key={col.field} columnKey={col.field} field={col.field} header={col.header} />;\\n        });\\n\\n        return (\\n            <div>\\n                <Toast ref={(el) => { this.toast = el; }}></Toast>\\n\\n                <div className=\\\"card\\\">\\n                    <DataTable value={this.state.products} reorderableColumns onRowReorder={this.onRowReorder} onColReorder={this.onColReorder}>\\n                        <Column rowReorder style={{width: '3em'}} />\\n                        {dynamicColumns}\\n                    </DataTable>\\n                </div>\\n            </div>\\n        );\\n    }\\n}\\n                \"},'hooks':{tabName:'Hooks Source',content:\"\\nimport React, { useState, useEffect, useRef } from 'react';\\nimport { DataTable } from 'primereact/datatable';\\nimport { Column } from 'primereact/column';\\nimport ProductService from '../service/ProductService';\\nimport { Toast } from 'primereact/toast';\\n\\nconst DataTableReorderDemo = () => {\\n    const [products, setProducts] = useState([]);\\n    const toast = useRef(null);\\n    const isMounted = useRef(false);\\n    const columns = [\\n        {field: 'code', header: 'Code'},\\n        {field: 'name', header: 'Name'},\\n        {field: 'category', header: 'Category'},\\n        {field: 'quantity', header: 'Quantity'}\\n    ];\\n\\n    const productService = new ProductService();\\n\\n    useEffect(() => {\\n        if (isMounted.current) {\\n            toast.current.show({severity:'success', summary: 'Rows Reordered', life: 3000});\\n        }\\n    }, [products]);\\n\\n    useEffect(() => {\\n        isMounted.current = true;\\n        productService.getProductsSmall().then(data => setProducts(data));\\n    }, []); // eslint-disable-line react-hooks/exhaustive-deps\\n\\n    const onColReorder = () => {\\n        toast.current.show({severity:'success', summary: 'Column Reordered', life: 3000});\\n    }\\n\\n    const onRowReorder = (e) => {\\n        setProducts(e.value);\\n    }\\n\\n    const dynamicColumns = columns.map((col,i) => {\\n        return <Column key={col.field} columnKey={col.field} field={col.field} header={col.header} />;\\n    });\\n\\n    return (\\n        <div>\\n            <Toast ref={toast}></Toast>\\n\\n            <div className=\\\"card\\\">\\n                <DataTable value={products} reorderableColumns onRowReorder={onRowReorder} onColReorder={onColReorder}>\\n                    <Column rowReorder style={{width: '3em'}} />\\n                    {dynamicColumns}\\n                </DataTable>\\n            </div>\\n        </div>\\n    );\\n}\\n                \"},'ts':{tabName:'TS Source',content:\"\\nimport React, { useState, useEffect, useRef } from 'react';\\nimport { DataTable } from 'primereact/datatable';\\nimport { Column } from 'primereact/column';\\nimport ProductService from '../service/ProductService';\\nimport { Toast } from 'primereact/toast';\\n\\nconst DataTableReorderDemo = () => {\\n    const [products, setProducts] = useState([]);\\n    const toast = useRef(null);\\n    const isMounted = useRef(false);\\n    const columns = [\\n        {field: 'code', header: 'Code'},\\n        {field: 'name', header: 'Name'},\\n        {field: 'category', header: 'Category'},\\n        {field: 'quantity', header: 'Quantity'}\\n    ];\\n\\n    const productService = new ProductService();\\n\\n    useEffect(() => {\\n        if (isMounted.current) {\\n            toast.current.show({severity:'success', summary: 'Rows Reordered', life: 3000});\\n        }\\n    }, [products]);\\n\\n    useEffect(() => {\\n        isMounted.current = true;\\n        productService.getProductsSmall().then(data => setProducts(data));\\n    }, []); // eslint-disable-line react-hooks/exhaustive-deps\\n\\n    const onColReorder = () => {\\n        toast.current.show({severity:'success', summary: 'Column Reordered', life: 3000});\\n    }\\n\\n    const onRowReorder = (e) => {\\n        setProducts(e.value);\\n    }\\n\\n    const dynamicColumns = columns.map((col,i) => {\\n        return <Column key={col.field} columnKey={col.field} field={col.field} header={col.header} />;\\n    });\\n\\n    return (\\n        <div>\\n            <Toast ref={toast}></Toast>\\n\\n            <div className=\\\"card\\\">\\n                <DataTable value={products} reorderableColumns onRowReorder={onRowReorder} onColReorder={onColReorder}>\\n                    <Column rowReorder style={{width: '3em'}} />\\n                    {dynamicColumns}\\n                </DataTable>\\n            </div>\\n        </div>\\n    );\\n}\\n                \"}};return _this5;}_createClass(DataTableColReorderDemoDoc,[{key:\"shouldComponentUpdate\",value:function shouldComponentUpdate(){return false;}},{key:\"render\",value:function render(){return/*#__PURE__*/React.createElement(\"div\",{className:\"content-section documentation\"},/*#__PURE__*/React.createElement(TabView,null,useLiveEditorTabs({name:'DataTableReorderDemo',sources:this.sources,service:'ProductService',data:'products-small'})));}}]);return DataTableColReorderDemoDoc;}(Component);","map":{"version":3,"sources":["C:/Users/zura.ph/WebstormProjects/slotmaster-dashboard/src/showcase/datatable/DataTableReorderDemo.js"],"names":["React","Component","DataTable","Column","ProductService","Toast","TabView","useLiveEditorTabs","AppInlineHeader","DataTableReorderDemo","props","state","products","columns","field","header","productService","onColReorder","bind","onRowReorder","getProductsSmall","then","data","setState","toast","show","severity","summary","life","e","value","dynamicColumns","map","col","i","el","width","DataTableColReorderDemoDoc","sources","tabName","content","name","service"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { DataTable } from '../../components/datatable/DataTable';\r\nimport { Column } from '../../components/column/Column';\r\nimport ProductService from '../service/ProductService';\r\nimport { Toast } from '../../components/toast/Toast';\r\nimport { TabView } from '../../components/tabview/TabView';\r\nimport { useLiveEditorTabs }from '../liveeditor/LiveEditor';\r\nimport { AppInlineHeader } from '../../AppInlineHeader';\r\n\r\nexport class DataTableReorderDemo extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            products: []\r\n        };\r\n\r\n        this.columns = [\r\n            {field: 'code', header: 'Code'},\r\n            {field: 'name', header: 'Name'},\r\n            {field: 'category', header: 'Category'},\r\n            {field: 'quantity', header: 'Quantity'}\r\n        ];\r\n\r\n        this.productService = new ProductService();\r\n        this.onColReorder = this.onColReorder.bind(this);\r\n        this.onRowReorder = this.onRowReorder.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.productService.getProductsSmall().then(data => this.setState({ products: data }));\r\n    }\r\n\r\n    onColReorder() {\r\n        this.toast.show({severity:'success', summary: 'Column Reordered', life: 3000});\r\n    }\r\n\r\n    onRowReorder(e) {\r\n        this.setState({ products: e.value }, () => {\r\n            this.toast.show({severity:'success', summary: 'Rows Reordered', life: 3000});\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const dynamicColumns = this.columns.map((col,i) => {\r\n            return <Column key={col.field} columnKey={col.field} field={col.field} header={col.header} />;\r\n        });\r\n\r\n        return (\r\n            <div>\r\n                <div className=\"content-section introduction\">\r\n                    <AppInlineHeader changelogText=\"dataTable\">\r\n                        <h1>DataTable <span>Reorder</span></h1>\r\n                        <p>Order of the columns and rows can be changed using drag and drop.</p>\r\n                    </AppInlineHeader>\r\n                </div>\r\n\r\n                <div className=\"content-section implementation\">\r\n                    <Toast ref={(el) => { this.toast = el; }}></Toast>\r\n\r\n                    <div className=\"card\">\r\n                        <DataTable value={this.state.products} reorderableColumns onRowReorder={this.onRowReorder} onColReorder={this.onColReorder}>\r\n                            <Column rowReorder style={{width: '3em'}} />\r\n                            {dynamicColumns}\r\n                        </DataTable>\r\n                    </div>\r\n                </div>\r\n\r\n                <DataTableColReorderDemoDoc />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport class DataTableColReorderDemoDoc extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.sources = {\r\n            'class': {\r\n                tabName: 'Class Source',\r\n                content: `\r\nimport React, { Component } from 'react';\r\nimport { DataTable } from 'primereact/datatable';\r\nimport { Column } from 'primereact/column';\r\nimport ProductService from '../service/ProductService';\r\nimport { Toast } from 'primereact/toast';\r\n\r\nexport class DataTableReorderDemo extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            products: []\r\n        };\r\n\r\n        this.columns = [\r\n            {field: 'code', header: 'Code'},\r\n            {field: 'name', header: 'Name'},\r\n            {field: 'category', header: 'Category'},\r\n            {field: 'quantity', header: 'Quantity'}\r\n        ];\r\n\r\n        this.productService = new ProductService();\r\n        this.onColReorder = this.onColReorder.bind(this);\r\n        this.onRowReorder = this.onRowReorder.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.productService.getProductsSmall().then(data => this.setState({ products: data }));\r\n    }\r\n\r\n    onColReorder() {\r\n        this.toast.show({severity:'success', summary: 'Column Reordered', life: 3000});\r\n    }\r\n\r\n    onRowReorder(e) {\r\n        this.setState({ products: e.value }, () => {\r\n            this.toast.show({severity:'success', summary: 'Rows Reordered', life: 3000});\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const dynamicColumns = this.columns.map((col,i) => {\r\n            return <Column key={col.field} columnKey={col.field} field={col.field} header={col.header} />;\r\n        });\r\n\r\n        return (\r\n            <div>\r\n                <Toast ref={(el) => { this.toast = el; }}></Toast>\r\n\r\n                <div className=\"card\">\r\n                    <DataTable value={this.state.products} reorderableColumns onRowReorder={this.onRowReorder} onColReorder={this.onColReorder}>\r\n                        <Column rowReorder style={{width: '3em'}} />\r\n                        {dynamicColumns}\r\n                    </DataTable>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n                `\r\n            },\r\n            'hooks': {\r\n                tabName: 'Hooks Source',\r\n                content: `\r\nimport React, { useState, useEffect, useRef } from 'react';\r\nimport { DataTable } from 'primereact/datatable';\r\nimport { Column } from 'primereact/column';\r\nimport ProductService from '../service/ProductService';\r\nimport { Toast } from 'primereact/toast';\r\n\r\nconst DataTableReorderDemo = () => {\r\n    const [products, setProducts] = useState([]);\r\n    const toast = useRef(null);\r\n    const isMounted = useRef(false);\r\n    const columns = [\r\n        {field: 'code', header: 'Code'},\r\n        {field: 'name', header: 'Name'},\r\n        {field: 'category', header: 'Category'},\r\n        {field: 'quantity', header: 'Quantity'}\r\n    ];\r\n\r\n    const productService = new ProductService();\r\n\r\n    useEffect(() => {\r\n        if (isMounted.current) {\r\n            toast.current.show({severity:'success', summary: 'Rows Reordered', life: 3000});\r\n        }\r\n    }, [products]);\r\n\r\n    useEffect(() => {\r\n        isMounted.current = true;\r\n        productService.getProductsSmall().then(data => setProducts(data));\r\n    }, []); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n    const onColReorder = () => {\r\n        toast.current.show({severity:'success', summary: 'Column Reordered', life: 3000});\r\n    }\r\n\r\n    const onRowReorder = (e) => {\r\n        setProducts(e.value);\r\n    }\r\n\r\n    const dynamicColumns = columns.map((col,i) => {\r\n        return <Column key={col.field} columnKey={col.field} field={col.field} header={col.header} />;\r\n    });\r\n\r\n    return (\r\n        <div>\r\n            <Toast ref={toast}></Toast>\r\n\r\n            <div className=\"card\">\r\n                <DataTable value={products} reorderableColumns onRowReorder={onRowReorder} onColReorder={onColReorder}>\r\n                    <Column rowReorder style={{width: '3em'}} />\r\n                    {dynamicColumns}\r\n                </DataTable>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n                `\r\n            },\r\n            'ts': {\r\n                tabName: 'TS Source',\r\n                content: `\r\nimport React, { useState, useEffect, useRef } from 'react';\r\nimport { DataTable } from 'primereact/datatable';\r\nimport { Column } from 'primereact/column';\r\nimport ProductService from '../service/ProductService';\r\nimport { Toast } from 'primereact/toast';\r\n\r\nconst DataTableReorderDemo = () => {\r\n    const [products, setProducts] = useState([]);\r\n    const toast = useRef(null);\r\n    const isMounted = useRef(false);\r\n    const columns = [\r\n        {field: 'code', header: 'Code'},\r\n        {field: 'name', header: 'Name'},\r\n        {field: 'category', header: 'Category'},\r\n        {field: 'quantity', header: 'Quantity'}\r\n    ];\r\n\r\n    const productService = new ProductService();\r\n\r\n    useEffect(() => {\r\n        if (isMounted.current) {\r\n            toast.current.show({severity:'success', summary: 'Rows Reordered', life: 3000});\r\n        }\r\n    }, [products]);\r\n\r\n    useEffect(() => {\r\n        isMounted.current = true;\r\n        productService.getProductsSmall().then(data => setProducts(data));\r\n    }, []); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n    const onColReorder = () => {\r\n        toast.current.show({severity:'success', summary: 'Column Reordered', life: 3000});\r\n    }\r\n\r\n    const onRowReorder = (e) => {\r\n        setProducts(e.value);\r\n    }\r\n\r\n    const dynamicColumns = columns.map((col,i) => {\r\n        return <Column key={col.field} columnKey={col.field} field={col.field} header={col.header} />;\r\n    });\r\n\r\n    return (\r\n        <div>\r\n            <Toast ref={toast}></Toast>\r\n\r\n            <div className=\"card\">\r\n                <DataTable value={products} reorderableColumns onRowReorder={onRowReorder} onColReorder={onColReorder}>\r\n                    <Column rowReorder style={{width: '3em'}} />\r\n                    {dynamicColumns}\r\n                </DataTable>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n                `\r\n            }\r\n        }\r\n    }\r\n\r\n    shouldComponentUpdate() {\r\n        return false;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"content-section documentation\">\r\n                <TabView>\r\n                    {\r\n                        useLiveEditorTabs({ name: 'DataTableReorderDemo', sources: this.sources, service: 'ProductService', data: 'products-small' })\r\n                    }\r\n                </TabView>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}