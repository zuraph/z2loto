{"ast":null,"code":"import _objectSpread from\"C:\\\\Users\\\\zura.ph\\\\WebstormProjects\\\\zz-regul\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";import _classCallCheck from\"C:\\\\Users\\\\zura.ph\\\\WebstormProjects\\\\zz-regul\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";import _createClass from\"C:\\\\Users\\\\zura.ph\\\\WebstormProjects\\\\zz-regul\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";import _assertThisInitialized from\"C:\\\\Users\\\\zura.ph\\\\WebstormProjects\\\\zz-regul\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/assertThisInitialized\";import _inherits from\"C:\\\\Users\\\\zura.ph\\\\WebstormProjects\\\\zz-regul\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";import _createSuper from\"C:\\\\Users\\\\zura.ph\\\\WebstormProjects\\\\zz-regul\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createSuper\";import React,{Component}from'react';import{TreeTable}from'../../components/treetable/TreeTable';import{Column}from'../../components/column/Column';import{TabView}from'../../components/tabview/TabView';import{useLiveEditorTabs}from'../liveeditor/LiveEditor';import{AppInlineHeader}from'../../AppInlineHeader';export var TreeTableLazyDemo=/*#__PURE__*/function(_Component){_inherits(TreeTableLazyDemo,_Component);var _super=_createSuper(TreeTableLazyDemo);function TreeTableLazyDemo(props){var _this;_classCallCheck(this,TreeTableLazyDemo);_this=_super.call(this,props);_this.state={nodes:[],first:0,rows:10,totalRecords:0,loading:true};_this.onPage=_this.onPage.bind(_assertThisInitialized(_this));_this.onExpand=_this.onExpand.bind(_assertThisInitialized(_this));return _this;}_createClass(TreeTableLazyDemo,[{key:\"componentDidMount\",value:function componentDidMount(){var _this2=this;setTimeout(function(){_this2.setState({loading:false,nodes:_this2.loadNodes(_this2.state.first,_this2.state.rows),totalRecords:1000});},500);}},{key:\"loadNodes\",value:function loadNodes(first,rows){var nodes=[];for(var i=0;i<rows;i++){var node={key:first+i,data:{name:'Item '+(first+i),size:Math.floor(Math.random()*1000)+1+'kb',type:'Type '+(first+i)},leaf:false};nodes.push(node);}return nodes;}},{key:\"onExpand\",value:function onExpand(event){var _this3=this;if(!event.node.children){this.setState({loading:true});setTimeout(function(){_this3.loading=false;var lazyNode=_objectSpread({},event.node);lazyNode.children=[{data:{name:lazyNode.data.name+' - 0',size:Math.floor(Math.random()*1000)+1+'kb',type:'File'}},{data:{name:lazyNode.data.name+' - 1',size:Math.floor(Math.random()*1000)+1+'kb',type:'File'}}];var nodes=_this3.state.nodes.map(function(node){if(node.key===event.node.key){node=lazyNode;}return node;});_this3.setState({loading:false,nodes:nodes});},250);}}},{key:\"onPage\",value:function onPage(event){var _this4=this;this.setState({loading:true});//imitate delay of a backend call\nsetTimeout(function(){_this4.setState({first:event.first,rows:event.rows,nodes:_this4.loadNodes(event.first,event.rows),loading:false});},500);}},{key:\"render\",value:function render(){return/*#__PURE__*/React.createElement(\"div\",null,/*#__PURE__*/React.createElement(\"div\",{className:\"content-section introduction\"},/*#__PURE__*/React.createElement(AppInlineHeader,{changelogText:\"treeTable\"},/*#__PURE__*/React.createElement(\"h1\",null,\"TreeTable \",/*#__PURE__*/React.createElement(\"span\",null,\"Lazy\")),/*#__PURE__*/React.createElement(\"p\",null,\"Lazy mode is handy to deal with large datasets, instead of loading the entire data, small chunks of data is loaded by invoking corresponding callbacks everytime paging or sorting. In addition, children of a node can be loaded on demand at onNodeExpand event as well. Sample belows imitates lazy paging by using an in memory list.\"))),/*#__PURE__*/React.createElement(\"div\",{className:\"content-section implementation\"},/*#__PURE__*/React.createElement(\"div\",{className:\"card\"},/*#__PURE__*/React.createElement(TreeTable,{value:this.state.nodes,lazy:true,paginator:true,totalRecords:this.state.totalRecords,first:this.state.first,rows:this.state.rows,onPage:this.onPage,onExpand:this.onExpand,loading:this.state.loading},/*#__PURE__*/React.createElement(Column,{field:\"name\",header:\"Name\",expander:true}),/*#__PURE__*/React.createElement(Column,{field:\"size\",header:\"Size\"}),/*#__PURE__*/React.createElement(Column,{field:\"type\",header:\"Type\"})))),/*#__PURE__*/React.createElement(TreeTableLazyDemoDoc,null));}}]);return TreeTableLazyDemo;}(Component);var TreeTableLazyDemoDoc=/*#__PURE__*/function(_Component2){_inherits(TreeTableLazyDemoDoc,_Component2);var _super2=_createSuper(TreeTableLazyDemoDoc);function TreeTableLazyDemoDoc(props){var _this5;_classCallCheck(this,TreeTableLazyDemoDoc);_this5=_super2.call(this,props);_this5.sources={'class':{tabName:'Class Source',content:\"\\nimport React, { Component } from 'react';\\nimport { TreeTable } from 'primereact/treetable';\\nimport { Column } from 'primereact/column';\\n\\nexport class TreeTableLazyDemo extends Component {\\n\\n    constructor(props) {\\n        super(props);\\n        this.state = {\\n            nodes: [],\\n            first: 0,\\n            rows: 10,\\n            totalRecords: 0,\\n            loading: true\\n        };\\n\\n        this.onPage = this.onPage.bind(this);\\n        this.onExpand = this.onExpand.bind(this);\\n    }\\n\\n    componentDidMount() {\\n        setTimeout(() => {\\n            this.setState({\\n                loading: false,\\n                nodes: this.loadNodes(this.state.first, this.state.rows),\\n                totalRecords: 1000\\n            });\\n        }, 500);\\n    }\\n\\n    loadNodes(first, rows) {\\n        let nodes = [];\\n\\n        for (let i = 0; i < rows; i++) {\\n            let node = {\\n                key: (first + i),\\n                data: {\\n                    name: 'Item ' + (first + i),\\n                    size: Math.floor(Math.random() * 1000) + 1 + 'kb',\\n                    type: 'Type ' + (first + i)\\n                },\\n                leaf: false\\n            };\\n\\n            nodes.push(node);\\n        }\\n\\n        return nodes;\\n    }\\n\\n    onExpand(event) {\\n        if (!event.node.children) {\\n            this.setState({\\n                loading: true\\n            });\\n\\n            setTimeout(() => {\\n                this.loading = false;\\n                let lazyNode = { ...event.node };\\n\\n                lazyNode.children = [\\n                    {\\n                        data: {\\n                            name: lazyNode.data.name + ' - 0',\\n                            size: Math.floor(Math.random() * 1000) + 1 + 'kb',\\n                            type: 'File'\\n                        },\\n                    },\\n                    {\\n                        data: {\\n                            name: lazyNode.data.name + ' - 1',\\n                            size: Math.floor(Math.random() * 1000) + 1 + 'kb',\\n                            type: 'File'\\n                        }\\n                    }\\n                ];\\n\\n                let nodes = this.state.nodes.map(node => {\\n                    if (node.key === event.node.key) {\\n                        node = lazyNode;\\n                    }\\n\\n                    return node;\\n                });\\n\\n                this.setState({\\n                    loading: false,\\n                    nodes: nodes\\n                });\\n            }, 250);\\n        }\\n    }\\n\\n    onPage(event) {\\n        this.setState({\\n            loading: true\\n        });\\n\\n        //imitate delay of a backend call\\n        setTimeout(() => {\\n            this.setState({\\n                first: event.first,\\n                rows: event.rows,\\n                nodes: this.loadNodes(event.first, event.rows),\\n                loading: false\\n            });\\n        }, 500);\\n    }\\n\\n    render() {\\n        return (\\n            <div>\\n                <div className=\\\"card\\\">\\n                    <TreeTable value={this.state.nodes} lazy paginator totalRecords={this.state.totalRecords}\\n                        first={this.state.first} rows={this.state.rows} onPage={this.onPage} onExpand={this.onExpand} loading={this.state.loading}>\\n                        <Column field=\\\"name\\\" header=\\\"Name\\\" expander></Column>\\n                        <Column field=\\\"size\\\" header=\\\"Size\\\"></Column>\\n                        <Column field=\\\"type\\\" header=\\\"Type\\\"></Column>\\n                    </TreeTable>\\n                </div>\\n            </div>\\n        )\\n    }\\n}\\n                \"},'hooks':{tabName:'Hooks Source',content:\"\\nimport React, { useState, useEffect } from 'react';\\nimport { TreeTable } from 'primereact/treetable';\\nimport { Column } from 'primereact/column';\\n\\nconst TreeTableLazyDemo = () => {\\n    const [nodes, setNodes] = useState([]);\\n    const [first, setFirst] = useState(0);\\n    const [rows, setRows] = useState(10);\\n    const [totalRecords, setTotalRecords] = useState(0);\\n    const [loading, setLoading] = useState(true);\\n\\n    useEffect(() => {\\n        setTimeout(() => {\\n            setLoading(false);\\n            setNodes(loadNodes(first, rows));\\n            setTotalRecords(1000);\\n        }, 500);\\n    }, []); // eslint-disable-line react-hooks/exhaustive-deps\\n\\n    const loadNodes = (first, rows) => {\\n        let nodes = [];\\n\\n        for (let i = 0; i < rows; i++) {\\n            let node = {\\n                key: (first + i),\\n                data: {\\n                    name: 'Item ' + (first + i),\\n                    size: Math.floor(Math.random() * 1000) + 1 + 'kb',\\n                    type: 'Type ' + (first + i)\\n                },\\n                leaf: false\\n            };\\n\\n            nodes.push(node);\\n        }\\n\\n        return nodes;\\n    }\\n\\n    const onExpand = (event) => {\\n        if (!event.node.children) {\\n            setLoading(true);\\n\\n            setTimeout(() => {\\n                this.loading = false;\\n                let lazyNode = { ...event.node };\\n\\n                lazyNode.children = [\\n                    {\\n                        data: {\\n                            name: lazyNode.data.name + ' - 0',\\n                            size: Math.floor(Math.random() * 1000) + 1 + 'kb',\\n                            type: 'File'\\n                        },\\n                    },\\n                    {\\n                        data: {\\n                            name: lazyNode.data.name + ' - 1',\\n                            size: Math.floor(Math.random() * 1000) + 1 + 'kb',\\n                            type: 'File'\\n                        }\\n                    }\\n                ];\\n\\n                let _nodes = nodes.map(node => {\\n                    if (node.key === event.node.key) {\\n                        node = lazyNode;\\n                    }\\n\\n                    return node;\\n                });\\n\\n                setLoading(false);\\n                setNodes(_nodes);\\n            }, 250);\\n        }\\n    }\\n\\n    const onPage = (event) => {\\n        setLoading(true);\\n\\n        //imitate delay of a backend call\\n        setTimeout(() => {\\n            setFirst(event.first);\\n            setRows(event.rows);\\n            setNodes(loadNodes(event.first, event.rows));\\n            setLoading(false);\\n        }, 500);\\n    }\\n\\n    return (\\n        <div>\\n            <div className=\\\"card\\\">\\n                <TreeTable value={nodes} lazy paginator totalRecords={totalRecords}\\n                    first={first} rows={rows} onPage={onPage} onExpand={onExpand} loading={loading}>\\n                    <Column field=\\\"name\\\" header=\\\"Name\\\" expander></Column>\\n                    <Column field=\\\"size\\\" header=\\\"Size\\\"></Column>\\n                    <Column field=\\\"type\\\" header=\\\"Type\\\"></Column>\\n                </TreeTable>\\n            </div>\\n        </div>\\n    );\\n}\\n                \"},'ts':{tabName:'TS Source',content:\"\\nimport React, { useState, useEffect } from 'react';\\nimport { TreeTable } from 'primereact/treetable';\\nimport { Column } from 'primereact/column';\\n\\nconst TreeTableLazyDemo = () => {\\n    const [nodes, setNodes] = useState([]);\\n    const [first, setFirst] = useState(0);\\n    const [rows, setRows] = useState(10);\\n    const [totalRecords, setTotalRecords] = useState(0);\\n    const [loading, setLoading] = useState(true);\\n\\n    useEffect(() => {\\n        setTimeout(() => {\\n            setLoading(false);\\n            setNodes(loadNodes(first, rows));\\n            setTotalRecords(1000);\\n        }, 500);\\n    }, []); // eslint-disable-line react-hooks/exhaustive-deps\\n\\n    const loadNodes = (first, rows) => {\\n        let nodes = [];\\n\\n        for (let i = 0; i < rows; i++) {\\n            let node = {\\n                key: (first + i),\\n                data: {\\n                    name: 'Item ' + (first + i),\\n                    size: Math.floor(Math.random() * 1000) + 1 + 'kb',\\n                    type: 'Type ' + (first + i)\\n                },\\n                leaf: false\\n            };\\n\\n            nodes.push(node);\\n        }\\n\\n        return nodes;\\n    }\\n\\n    const onExpand = (event) => {\\n        if (!event.node.children) {\\n            setLoading(true);\\n\\n            setTimeout(() => {\\n                this.loading = false;\\n                let lazyNode = { ...event.node };\\n\\n                lazyNode.children = [\\n                    {\\n                        data: {\\n                            name: lazyNode.data.name + ' - 0',\\n                            size: Math.floor(Math.random() * 1000) + 1 + 'kb',\\n                            type: 'File'\\n                        },\\n                    },\\n                    {\\n                        data: {\\n                            name: lazyNode.data.name + ' - 1',\\n                            size: Math.floor(Math.random() * 1000) + 1 + 'kb',\\n                            type: 'File'\\n                        }\\n                    }\\n                ];\\n\\n                let _nodes = nodes.map(node => {\\n                    if (node.key === event.node.key) {\\n                        node = lazyNode;\\n                    }\\n\\n                    return node;\\n                });\\n\\n                setLoading(false);\\n                setNodes(_nodes);\\n            }, 250);\\n        }\\n    }\\n\\n    const onPage = (event) => {\\n        setLoading(true);\\n\\n        //imitate delay of a backend call\\n        setTimeout(() => {\\n            setFirst(event.first);\\n            setRows(event.rows);\\n            setNodes(loadNodes(event.first, event.rows));\\n            setLoading(false);\\n        }, 500);\\n    }\\n\\n    return (\\n        <div>\\n            <div className=\\\"card\\\">\\n                <TreeTable value={nodes} lazy paginator totalRecords={totalRecords}\\n                    first={first} rows={rows} onPage={onPage} onExpand={onExpand} loading={loading}>\\n                    <Column field=\\\"name\\\" header=\\\"Name\\\" expander></Column>\\n                    <Column field=\\\"size\\\" header=\\\"Size\\\"></Column>\\n                    <Column field=\\\"type\\\" header=\\\"Type\\\"></Column>\\n                </TreeTable>\\n            </div>\\n        </div>\\n    );\\n}\\n                \"}};return _this5;}_createClass(TreeTableLazyDemoDoc,[{key:\"shouldComponentUpdate\",value:function shouldComponentUpdate(){return false;}},{key:\"render\",value:function render(){return/*#__PURE__*/React.createElement(\"div\",{className:\"content-section documentation\"},/*#__PURE__*/React.createElement(TabView,null,useLiveEditorTabs({name:'TreeTableLazyDemo',sources:this.sources,service:'NodeService',data:'treetablenodes'})));}}]);return TreeTableLazyDemoDoc;}(Component);","map":{"version":3,"sources":["C:/Users/zura.ph/WebstormProjects/zz-regul/src/showcase/treetable/TreeTableLazyDemo.js"],"names":["React","Component","TreeTable","Column","TabView","useLiveEditorTabs","AppInlineHeader","TreeTableLazyDemo","props","state","nodes","first","rows","totalRecords","loading","onPage","bind","onExpand","setTimeout","setState","loadNodes","i","node","key","data","name","size","Math","floor","random","type","leaf","push","event","children","lazyNode","map","TreeTableLazyDemoDoc","sources","tabName","content","service"],"mappings":"2/BAAA,MAAOA,CAAAA,KAAP,EAAgBC,SAAhB,KAAiC,OAAjC,CACA,OAASC,SAAT,KAA0B,sCAA1B,CACA,OAASC,MAAT,KAAuB,gCAAvB,CACA,OAASC,OAAT,KAAwB,kCAAxB,CACA,OAASC,iBAAT,KAAiC,0BAAjC,CACA,OAASC,eAAT,KAAgC,uBAAhC,CAEA,UAAaC,CAAAA,iBAAb,sHAEI,2BAAYC,KAAZ,CAAmB,mDACf,uBAAMA,KAAN,EACA,MAAKC,KAAL,CAAa,CACTC,KAAK,CAAE,EADE,CAETC,KAAK,CAAE,CAFE,CAGTC,IAAI,CAAE,EAHG,CAITC,YAAY,CAAE,CAJL,CAKTC,OAAO,CAAE,IALA,CAAb,CAQA,MAAKC,MAAL,CAAc,MAAKA,MAAL,CAAYC,IAAZ,+BAAd,CACA,MAAKC,QAAL,CAAgB,MAAKA,QAAL,CAAcD,IAAd,+BAAhB,CAXe,aAYlB,CAdL,+DAgBI,4BAAoB,iBAChBE,UAAU,CAAC,UAAM,CACb,MAAI,CAACC,QAAL,CAAc,CACVL,OAAO,CAAE,KADC,CAEVJ,KAAK,CAAE,MAAI,CAACU,SAAL,CAAe,MAAI,CAACX,KAAL,CAAWE,KAA1B,CAAiC,MAAI,CAACF,KAAL,CAAWG,IAA5C,CAFG,CAGVC,YAAY,CAAE,IAHJ,CAAd,EAKH,CANS,CAMP,GANO,CAAV,CAOH,CAxBL,yBA0BI,mBAAUF,KAAV,CAAiBC,IAAjB,CAAuB,CACnB,GAAIF,CAAAA,KAAK,CAAG,EAAZ,CAEA,IAAK,GAAIW,CAAAA,CAAC,CAAG,CAAb,CAAgBA,CAAC,CAAGT,IAApB,CAA0BS,CAAC,EAA3B,CAA+B,CAC3B,GAAIC,CAAAA,IAAI,CAAG,CACPC,GAAG,CAAGZ,KAAK,CAAGU,CADP,CAEPG,IAAI,CAAE,CACFC,IAAI,CAAE,SAAWd,KAAK,CAAGU,CAAnB,CADJ,CAEFK,IAAI,CAAEC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,GAAgB,IAA3B,EAAmC,CAAnC,CAAuC,IAF3C,CAGFC,IAAI,CAAE,SAAWnB,KAAK,CAAGU,CAAnB,CAHJ,CAFC,CAOPU,IAAI,CAAE,KAPC,CAAX,CAUArB,KAAK,CAACsB,IAAN,CAAWV,IAAX,EACH,CAED,MAAOZ,CAAAA,KAAP,CACH,CA5CL,wBA8CI,kBAASuB,KAAT,CAAgB,iBACZ,GAAI,CAACA,KAAK,CAACX,IAAN,CAAWY,QAAhB,CAA0B,CACtB,KAAKf,QAAL,CAAc,CACVL,OAAO,CAAE,IADC,CAAd,EAIAI,UAAU,CAAC,UAAM,CACb,MAAI,CAACJ,OAAL,CAAe,KAAf,CACA,GAAIqB,CAAAA,QAAQ,kBAAQF,KAAK,CAACX,IAAd,CAAZ,CAEAa,QAAQ,CAACD,QAAT,CAAoB,CAChB,CACIV,IAAI,CAAE,CACFC,IAAI,CAAEU,QAAQ,CAACX,IAAT,CAAcC,IAAd,CAAqB,MADzB,CAEFC,IAAI,CAAEC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,GAAgB,IAA3B,EAAmC,CAAnC,CAAuC,IAF3C,CAGFC,IAAI,CAAE,MAHJ,CADV,CADgB,CAQhB,CACIN,IAAI,CAAE,CACFC,IAAI,CAAEU,QAAQ,CAACX,IAAT,CAAcC,IAAd,CAAqB,MADzB,CAEFC,IAAI,CAAEC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,GAAgB,IAA3B,EAAmC,CAAnC,CAAuC,IAF3C,CAGFC,IAAI,CAAE,MAHJ,CADV,CARgB,CAApB,CAiBA,GAAIpB,CAAAA,KAAK,CAAG,MAAI,CAACD,KAAL,CAAWC,KAAX,CAAiB0B,GAAjB,CAAqB,SAAAd,IAAI,CAAI,CACrC,GAAIA,IAAI,CAACC,GAAL,GAAaU,KAAK,CAACX,IAAN,CAAWC,GAA5B,CAAiC,CAC7BD,IAAI,CAAGa,QAAP,CACH,CAED,MAAOb,CAAAA,IAAP,CACH,CANW,CAAZ,CAQA,MAAI,CAACH,QAAL,CAAc,CACVL,OAAO,CAAE,KADC,CAEVJ,KAAK,CAAEA,KAFG,CAAd,EAIH,CAjCS,CAiCP,GAjCO,CAAV,CAkCH,CACJ,CAvFL,sBAyFI,gBAAOuB,KAAP,CAAc,iBACV,KAAKd,QAAL,CAAc,CACVL,OAAO,CAAE,IADC,CAAd,EAIA;AACAI,UAAU,CAAC,UAAM,CACb,MAAI,CAACC,QAAL,CAAc,CACVR,KAAK,CAAEsB,KAAK,CAACtB,KADH,CAEVC,IAAI,CAAEqB,KAAK,CAACrB,IAFF,CAGVF,KAAK,CAAE,MAAI,CAACU,SAAL,CAAea,KAAK,CAACtB,KAArB,CAA4BsB,KAAK,CAACrB,IAAlC,CAHG,CAIVE,OAAO,CAAE,KAJC,CAAd,EAMH,CAPS,CAOP,GAPO,CAAV,CAQH,CAvGL,sBAyGI,iBAAS,CACL,mBACI,4CACI,2BAAK,SAAS,CAAC,8BAAf,eACI,oBAAC,eAAD,EAAiB,aAAa,CAAC,WAA/B,eACI,wDAAc,uCAAd,CADJ,cAEI,yWAFJ,CADJ,CADJ,cAUI,2BAAK,SAAS,CAAC,gCAAf,eACI,2BAAK,SAAS,CAAC,MAAf,eACI,oBAAC,SAAD,EAAW,KAAK,CAAE,KAAKL,KAAL,CAAWC,KAA7B,CAAoC,IAAI,KAAxC,CAAyC,SAAS,KAAlD,CAAmD,YAAY,CAAE,KAAKD,KAAL,CAAWI,YAA5E,CACI,KAAK,CAAE,KAAKJ,KAAL,CAAWE,KADtB,CAC6B,IAAI,CAAE,KAAKF,KAAL,CAAWG,IAD9C,CACoD,MAAM,CAAE,KAAKG,MADjE,CACyE,QAAQ,CAAE,KAAKE,QADxF,CACkG,OAAO,CAAE,KAAKR,KAAL,CAAWK,OADtH,eAEI,oBAAC,MAAD,EAAQ,KAAK,CAAC,MAAd,CAAqB,MAAM,CAAC,MAA5B,CAAmC,QAAQ,KAA3C,EAFJ,cAGI,oBAAC,MAAD,EAAQ,KAAK,CAAC,MAAd,CAAqB,MAAM,CAAC,MAA5B,EAHJ,cAII,oBAAC,MAAD,EAAQ,KAAK,CAAC,MAAd,CAAqB,MAAM,CAAC,MAA5B,EAJJ,CADJ,CADJ,CAVJ,cAqBI,oBAAC,oBAAD,MArBJ,CADJ,CAyBH,CAnIL,+BAAuCb,SAAvC,E,GAsIMoC,CAAAA,oB,+HAEF,8BAAY7B,KAAZ,CAAmB,uDACf,yBAAMA,KAAN,EAEA,OAAK8B,OAAL,CAAe,CACX,QAAS,CACLC,OAAO,CAAE,cADJ,CAELC,OAAO,+nHAFF,CADE,CAkIX,QAAS,CACLD,OAAO,CAAE,cADJ,CAELC,OAAO,quGAFF,CAlIE,CA8OX,KAAM,CACFD,OAAO,CAAE,WADP,CAEFC,OAAO,quGAFL,CA9OK,CAAf,CAHe,cA8VlB,C,sEAED,gCAAwB,CACpB,MAAO,MAAP,CACH,C,sBAED,iBAAS,CACL,mBACI,2BAAK,SAAS,CAAC,+BAAf,eACI,oBAAC,OAAD,MAEQnC,iBAAiB,CAAC,CAAEoB,IAAI,CAAE,mBAAR,CAA6Ba,OAAO,CAAE,KAAKA,OAA3C,CAAoDG,OAAO,CAAE,aAA7D,CAA4EjB,IAAI,CAAE,gBAAlF,CAAD,CAFzB,CADJ,CADJ,CASH,C,kCAhX8BvB,S","sourcesContent":["import React, { Component } from 'react';\r\nimport { TreeTable } from '../../components/treetable/TreeTable';\r\nimport { Column } from '../../components/column/Column';\r\nimport { TabView } from '../../components/tabview/TabView';\r\nimport { useLiveEditorTabs }from '../liveeditor/LiveEditor';\r\nimport { AppInlineHeader } from '../../AppInlineHeader';\r\n\r\nexport class TreeTableLazyDemo extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            nodes: [],\r\n            first: 0,\r\n            rows: 10,\r\n            totalRecords: 0,\r\n            loading: true\r\n        };\r\n\r\n        this.onPage = this.onPage.bind(this);\r\n        this.onExpand = this.onExpand.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        setTimeout(() => {\r\n            this.setState({\r\n                loading: false,\r\n                nodes: this.loadNodes(this.state.first, this.state.rows),\r\n                totalRecords: 1000\r\n            });\r\n        }, 500);\r\n    }\r\n\r\n    loadNodes(first, rows) {\r\n        let nodes = [];\r\n\r\n        for (let i = 0; i < rows; i++) {\r\n            let node = {\r\n                key: (first + i),\r\n                data: {\r\n                    name: 'Item ' + (first + i),\r\n                    size: Math.floor(Math.random() * 1000) + 1 + 'kb',\r\n                    type: 'Type ' + (first + i)\r\n                },\r\n                leaf: false\r\n            };\r\n\r\n            nodes.push(node);\r\n        }\r\n\r\n        return nodes;\r\n    }\r\n\r\n    onExpand(event) {\r\n        if (!event.node.children) {\r\n            this.setState({\r\n                loading: true\r\n            });\r\n\r\n            setTimeout(() => {\r\n                this.loading = false;\r\n                let lazyNode = { ...event.node };\r\n\r\n                lazyNode.children = [\r\n                    {\r\n                        data: {\r\n                            name: lazyNode.data.name + ' - 0',\r\n                            size: Math.floor(Math.random() * 1000) + 1 + 'kb',\r\n                            type: 'File'\r\n                        },\r\n                    },\r\n                    {\r\n                        data: {\r\n                            name: lazyNode.data.name + ' - 1',\r\n                            size: Math.floor(Math.random() * 1000) + 1 + 'kb',\r\n                            type: 'File'\r\n                        }\r\n                    }\r\n                ];\r\n\r\n                let nodes = this.state.nodes.map(node => {\r\n                    if (node.key === event.node.key) {\r\n                        node = lazyNode;\r\n                    }\r\n\r\n                    return node;\r\n                });\r\n\r\n                this.setState({\r\n                    loading: false,\r\n                    nodes: nodes\r\n                });\r\n            }, 250);\r\n        }\r\n    }\r\n\r\n    onPage(event) {\r\n        this.setState({\r\n            loading: true\r\n        });\r\n\r\n        //imitate delay of a backend call\r\n        setTimeout(() => {\r\n            this.setState({\r\n                first: event.first,\r\n                rows: event.rows,\r\n                nodes: this.loadNodes(event.first, event.rows),\r\n                loading: false\r\n            });\r\n        }, 500);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div className=\"content-section introduction\">\r\n                    <AppInlineHeader changelogText=\"treeTable\">\r\n                        <h1>TreeTable <span>Lazy</span></h1>\r\n                        <p>Lazy mode is handy to deal with large datasets, instead of loading the entire data, small chunks of data is loaded by invoking corresponding callbacks everytime paging or sorting.\r\n                            In addition, children of a node can be loaded on demand at onNodeExpand event as well. Sample belows imitates lazy paging by using an in memory list.</p>\r\n\r\n                    </AppInlineHeader>\r\n                </div>\r\n\r\n                <div className=\"content-section implementation\">\r\n                    <div className=\"card\">\r\n                        <TreeTable value={this.state.nodes} lazy paginator totalRecords={this.state.totalRecords}\r\n                            first={this.state.first} rows={this.state.rows} onPage={this.onPage} onExpand={this.onExpand} loading={this.state.loading}>\r\n                            <Column field=\"name\" header=\"Name\" expander></Column>\r\n                            <Column field=\"size\" header=\"Size\"></Column>\r\n                            <Column field=\"type\" header=\"Type\"></Column>\r\n                        </TreeTable>\r\n                    </div>\r\n                </div>\r\n\r\n                <TreeTableLazyDemoDoc />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nclass TreeTableLazyDemoDoc extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.sources = {\r\n            'class': {\r\n                tabName: 'Class Source',\r\n                content: `\r\nimport React, { Component } from 'react';\r\nimport { TreeTable } from 'primereact/treetable';\r\nimport { Column } from 'primereact/column';\r\n\r\nexport class TreeTableLazyDemo extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            nodes: [],\r\n            first: 0,\r\n            rows: 10,\r\n            totalRecords: 0,\r\n            loading: true\r\n        };\r\n\r\n        this.onPage = this.onPage.bind(this);\r\n        this.onExpand = this.onExpand.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        setTimeout(() => {\r\n            this.setState({\r\n                loading: false,\r\n                nodes: this.loadNodes(this.state.first, this.state.rows),\r\n                totalRecords: 1000\r\n            });\r\n        }, 500);\r\n    }\r\n\r\n    loadNodes(first, rows) {\r\n        let nodes = [];\r\n\r\n        for (let i = 0; i < rows; i++) {\r\n            let node = {\r\n                key: (first + i),\r\n                data: {\r\n                    name: 'Item ' + (first + i),\r\n                    size: Math.floor(Math.random() * 1000) + 1 + 'kb',\r\n                    type: 'Type ' + (first + i)\r\n                },\r\n                leaf: false\r\n            };\r\n\r\n            nodes.push(node);\r\n        }\r\n\r\n        return nodes;\r\n    }\r\n\r\n    onExpand(event) {\r\n        if (!event.node.children) {\r\n            this.setState({\r\n                loading: true\r\n            });\r\n\r\n            setTimeout(() => {\r\n                this.loading = false;\r\n                let lazyNode = { ...event.node };\r\n\r\n                lazyNode.children = [\r\n                    {\r\n                        data: {\r\n                            name: lazyNode.data.name + ' - 0',\r\n                            size: Math.floor(Math.random() * 1000) + 1 + 'kb',\r\n                            type: 'File'\r\n                        },\r\n                    },\r\n                    {\r\n                        data: {\r\n                            name: lazyNode.data.name + ' - 1',\r\n                            size: Math.floor(Math.random() * 1000) + 1 + 'kb',\r\n                            type: 'File'\r\n                        }\r\n                    }\r\n                ];\r\n\r\n                let nodes = this.state.nodes.map(node => {\r\n                    if (node.key === event.node.key) {\r\n                        node = lazyNode;\r\n                    }\r\n\r\n                    return node;\r\n                });\r\n\r\n                this.setState({\r\n                    loading: false,\r\n                    nodes: nodes\r\n                });\r\n            }, 250);\r\n        }\r\n    }\r\n\r\n    onPage(event) {\r\n        this.setState({\r\n            loading: true\r\n        });\r\n\r\n        //imitate delay of a backend call\r\n        setTimeout(() => {\r\n            this.setState({\r\n                first: event.first,\r\n                rows: event.rows,\r\n                nodes: this.loadNodes(event.first, event.rows),\r\n                loading: false\r\n            });\r\n        }, 500);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div className=\"card\">\r\n                    <TreeTable value={this.state.nodes} lazy paginator totalRecords={this.state.totalRecords}\r\n                        first={this.state.first} rows={this.state.rows} onPage={this.onPage} onExpand={this.onExpand} loading={this.state.loading}>\r\n                        <Column field=\"name\" header=\"Name\" expander></Column>\r\n                        <Column field=\"size\" header=\"Size\"></Column>\r\n                        <Column field=\"type\" header=\"Type\"></Column>\r\n                    </TreeTable>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n                `\r\n            },\r\n            'hooks': {\r\n                tabName: 'Hooks Source',\r\n                content: `\r\nimport React, { useState, useEffect } from 'react';\r\nimport { TreeTable } from 'primereact/treetable';\r\nimport { Column } from 'primereact/column';\r\n\r\nconst TreeTableLazyDemo = () => {\r\n    const [nodes, setNodes] = useState([]);\r\n    const [first, setFirst] = useState(0);\r\n    const [rows, setRows] = useState(10);\r\n    const [totalRecords, setTotalRecords] = useState(0);\r\n    const [loading, setLoading] = useState(true);\r\n\r\n    useEffect(() => {\r\n        setTimeout(() => {\r\n            setLoading(false);\r\n            setNodes(loadNodes(first, rows));\r\n            setTotalRecords(1000);\r\n        }, 500);\r\n    }, []); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n    const loadNodes = (first, rows) => {\r\n        let nodes = [];\r\n\r\n        for (let i = 0; i < rows; i++) {\r\n            let node = {\r\n                key: (first + i),\r\n                data: {\r\n                    name: 'Item ' + (first + i),\r\n                    size: Math.floor(Math.random() * 1000) + 1 + 'kb',\r\n                    type: 'Type ' + (first + i)\r\n                },\r\n                leaf: false\r\n            };\r\n\r\n            nodes.push(node);\r\n        }\r\n\r\n        return nodes;\r\n    }\r\n\r\n    const onExpand = (event) => {\r\n        if (!event.node.children) {\r\n            setLoading(true);\r\n\r\n            setTimeout(() => {\r\n                this.loading = false;\r\n                let lazyNode = { ...event.node };\r\n\r\n                lazyNode.children = [\r\n                    {\r\n                        data: {\r\n                            name: lazyNode.data.name + ' - 0',\r\n                            size: Math.floor(Math.random() * 1000) + 1 + 'kb',\r\n                            type: 'File'\r\n                        },\r\n                    },\r\n                    {\r\n                        data: {\r\n                            name: lazyNode.data.name + ' - 1',\r\n                            size: Math.floor(Math.random() * 1000) + 1 + 'kb',\r\n                            type: 'File'\r\n                        }\r\n                    }\r\n                ];\r\n\r\n                let _nodes = nodes.map(node => {\r\n                    if (node.key === event.node.key) {\r\n                        node = lazyNode;\r\n                    }\r\n\r\n                    return node;\r\n                });\r\n\r\n                setLoading(false);\r\n                setNodes(_nodes);\r\n            }, 250);\r\n        }\r\n    }\r\n\r\n    const onPage = (event) => {\r\n        setLoading(true);\r\n\r\n        //imitate delay of a backend call\r\n        setTimeout(() => {\r\n            setFirst(event.first);\r\n            setRows(event.rows);\r\n            setNodes(loadNodes(event.first, event.rows));\r\n            setLoading(false);\r\n        }, 500);\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"card\">\r\n                <TreeTable value={nodes} lazy paginator totalRecords={totalRecords}\r\n                    first={first} rows={rows} onPage={onPage} onExpand={onExpand} loading={loading}>\r\n                    <Column field=\"name\" header=\"Name\" expander></Column>\r\n                    <Column field=\"size\" header=\"Size\"></Column>\r\n                    <Column field=\"type\" header=\"Type\"></Column>\r\n                </TreeTable>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n                `\r\n            },\r\n            'ts': {\r\n                tabName: 'TS Source',\r\n                content: `\r\nimport React, { useState, useEffect } from 'react';\r\nimport { TreeTable } from 'primereact/treetable';\r\nimport { Column } from 'primereact/column';\r\n\r\nconst TreeTableLazyDemo = () => {\r\n    const [nodes, setNodes] = useState([]);\r\n    const [first, setFirst] = useState(0);\r\n    const [rows, setRows] = useState(10);\r\n    const [totalRecords, setTotalRecords] = useState(0);\r\n    const [loading, setLoading] = useState(true);\r\n\r\n    useEffect(() => {\r\n        setTimeout(() => {\r\n            setLoading(false);\r\n            setNodes(loadNodes(first, rows));\r\n            setTotalRecords(1000);\r\n        }, 500);\r\n    }, []); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n    const loadNodes = (first, rows) => {\r\n        let nodes = [];\r\n\r\n        for (let i = 0; i < rows; i++) {\r\n            let node = {\r\n                key: (first + i),\r\n                data: {\r\n                    name: 'Item ' + (first + i),\r\n                    size: Math.floor(Math.random() * 1000) + 1 + 'kb',\r\n                    type: 'Type ' + (first + i)\r\n                },\r\n                leaf: false\r\n            };\r\n\r\n            nodes.push(node);\r\n        }\r\n\r\n        return nodes;\r\n    }\r\n\r\n    const onExpand = (event) => {\r\n        if (!event.node.children) {\r\n            setLoading(true);\r\n\r\n            setTimeout(() => {\r\n                this.loading = false;\r\n                let lazyNode = { ...event.node };\r\n\r\n                lazyNode.children = [\r\n                    {\r\n                        data: {\r\n                            name: lazyNode.data.name + ' - 0',\r\n                            size: Math.floor(Math.random() * 1000) + 1 + 'kb',\r\n                            type: 'File'\r\n                        },\r\n                    },\r\n                    {\r\n                        data: {\r\n                            name: lazyNode.data.name + ' - 1',\r\n                            size: Math.floor(Math.random() * 1000) + 1 + 'kb',\r\n                            type: 'File'\r\n                        }\r\n                    }\r\n                ];\r\n\r\n                let _nodes = nodes.map(node => {\r\n                    if (node.key === event.node.key) {\r\n                        node = lazyNode;\r\n                    }\r\n\r\n                    return node;\r\n                });\r\n\r\n                setLoading(false);\r\n                setNodes(_nodes);\r\n            }, 250);\r\n        }\r\n    }\r\n\r\n    const onPage = (event) => {\r\n        setLoading(true);\r\n\r\n        //imitate delay of a backend call\r\n        setTimeout(() => {\r\n            setFirst(event.first);\r\n            setRows(event.rows);\r\n            setNodes(loadNodes(event.first, event.rows));\r\n            setLoading(false);\r\n        }, 500);\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"card\">\r\n                <TreeTable value={nodes} lazy paginator totalRecords={totalRecords}\r\n                    first={first} rows={rows} onPage={onPage} onExpand={onExpand} loading={loading}>\r\n                    <Column field=\"name\" header=\"Name\" expander></Column>\r\n                    <Column field=\"size\" header=\"Size\"></Column>\r\n                    <Column field=\"type\" header=\"Type\"></Column>\r\n                </TreeTable>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n                `\r\n            }\r\n        }\r\n    }\r\n\r\n    shouldComponentUpdate() {\r\n        return false;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"content-section documentation\">\r\n                <TabView>\r\n                    {\r\n                        useLiveEditorTabs({ name: 'TreeTableLazyDemo', sources: this.sources, service: 'NodeService', data: 'treetablenodes' })\r\n                    }\r\n                </TabView>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}