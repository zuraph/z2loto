{"ast":null,"code":"import _defineProperty from\"C:\\\\Users\\\\zura.ph\\\\WebstormProjects\\\\slotmaster-dashboard\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";import _classCallCheck from\"C:\\\\Users\\\\zura.ph\\\\WebstormProjects\\\\slotmaster-dashboard\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";import _createClass from\"C:\\\\Users\\\\zura.ph\\\\WebstormProjects\\\\slotmaster-dashboard\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";import _inherits from\"C:\\\\Users\\\\zura.ph\\\\WebstormProjects\\\\slotmaster-dashboard\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";import _createSuper from\"C:\\\\Users\\\\zura.ph\\\\WebstormProjects\\\\slotmaster-dashboard\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createSuper\";import React,{Component}from'react';import{TreeTable}from'../../components/treetable/TreeTable';import{Column}from'../../components/column/Column';import{InputText}from'../../components/inputtext/InputText';import{NodeService}from'../service/NodeService';import{TabView}from'../../components/tabview/TabView';import{useLiveEditorTabs}from'../liveeditor/LiveEditor';import{AppInlineHeader}from'../../AppInlineHeader';export var TreeTableFilterDemo=/*#__PURE__*/function(_Component){_inherits(TreeTableFilterDemo,_Component);var _super=_createSuper(TreeTableFilterDemo);function TreeTableFilterDemo(props){var _this;_classCallCheck(this,TreeTableFilterDemo);_this=_super.call(this,props);_this.state={nodes:[],globalFilter1:null,globalFilter2:null};_this.nodeservice=new NodeService();return _this;}_createClass(TreeTableFilterDemo,[{key:\"componentDidMount\",value:function componentDidMount(){var _this2=this;this.nodeservice.getTreeTableNodes().then(function(data){return _this2.setState({nodes:data});});}},{key:\"getHeader\",value:function getHeader(globalFilterKey){var _this3=this;return/*#__PURE__*/React.createElement(\"div\",{className:\"p-text-right\"},/*#__PURE__*/React.createElement(\"div\",{className:\"p-input-icon-left\"},/*#__PURE__*/React.createElement(\"i\",{className:\"pi pi-search\"}),/*#__PURE__*/React.createElement(InputText,{type:\"search\",onInput:function onInput(e){return _this3.setState(_defineProperty({},\"\".concat(globalFilterKey),e.target.value));},placeholder:\"Global Search\",size:\"50\"})));}},{key:\"render\",value:function render(){var header1=this.getHeader('globalFilter1');var header2=this.getHeader('globalFilter2');return/*#__PURE__*/React.createElement(\"div\",null,/*#__PURE__*/React.createElement(\"div\",{className:\"content-section introduction\"},/*#__PURE__*/React.createElement(AppInlineHeader,{changelogText:\"treeTable\"},/*#__PURE__*/React.createElement(\"h1\",null,\"TreeTable \",/*#__PURE__*/React.createElement(\"span\",null,\"Filter\")),/*#__PURE__*/React.createElement(\"p\",null,\"Filtering is enabled by setting the filter property as true in column object. Default match mode is \\\"startsWith\\\" and this can be configured using filterMatchMode property of column object that also accepts \\\"contains\\\", \\\"endsWith\\\", \\\"equals\\\", \\\"in\\\" and \\\"custom\\\". An optional global filter feature is available to search all fields with a keyword. By default input fields are generated as filter elements and using templating any component can be used as a filter.\"))),/*#__PURE__*/React.createElement(\"div\",{className:\"content-section implementation\"},/*#__PURE__*/React.createElement(\"div\",{className:\"card\"},/*#__PURE__*/React.createElement(\"h5\",null,\"Lenient Filter\"),/*#__PURE__*/React.createElement(TreeTable,{value:this.state.nodes,globalFilter:this.state.globalFilter1,header:header1},/*#__PURE__*/React.createElement(Column,{field:\"name\",header:\"Name\",expander:true,filter:true}),/*#__PURE__*/React.createElement(Column,{field:\"size\",header:\"Size\",filter:true}),/*#__PURE__*/React.createElement(Column,{field:\"type\",header:\"Type\",filter:true}))),/*#__PURE__*/React.createElement(\"div\",{className:\"card\"},/*#__PURE__*/React.createElement(\"h5\",null,\"Strict Filter\"),/*#__PURE__*/React.createElement(TreeTable,{value:this.state.nodes,globalFilter:this.state.globalFilter2,header:header2,filterMode:\"strict\"},/*#__PURE__*/React.createElement(Column,{field:\"name\",header:\"Name\",expander:true,filter:true}),/*#__PURE__*/React.createElement(Column,{field:\"size\",header:\"Size\",filter:true}),/*#__PURE__*/React.createElement(Column,{field:\"type\",header:\"Type\",filter:true})))),/*#__PURE__*/React.createElement(TreeTableFilterDoc,null));}}]);return TreeTableFilterDemo;}(Component);var TreeTableFilterDoc=/*#__PURE__*/function(_Component2){_inherits(TreeTableFilterDoc,_Component2);var _super2=_createSuper(TreeTableFilterDoc);function TreeTableFilterDoc(props){var _this4;_classCallCheck(this,TreeTableFilterDoc);_this4=_super2.call(this,props);_this4.sources={'class':{tabName:'Class Source',content:\"\\nimport React, { Component } from 'react';\\nimport { TreeTable } from 'primereact/treetable';\\nimport { Column } from 'primereact/column';\\nimport { InputText } from 'primereact/inputtext';\\nimport { NodeService } from '../service/NodeService';\\n\\nexport class TreeTableFilterDemo extends Component {\\n\\n    constructor(props) {\\n        super(props);\\n        this.state = {\\n            nodes: [],\\n            globalFilter1: null,\\n            globalFilter2: null\\n        };\\n        this.nodeservice = new NodeService();\\n    }\\n\\n    componentDidMount() {\\n        this.nodeservice.getTreeTableNodes().then(data => this.setState({ nodes: data }));\\n    }\\n\\n    getHeader(globalFilterKey) {\\n        return (\\n            <div className=\\\"p-text-right\\\">\\n                <div className=\\\"p-input-icon-left\\\">\\n                    <i className=\\\"pi pi-search\\\"></i>\\n                    <InputText type=\\\"search\\\" onInput={(e) => this.setState({ [`${globalFilterKey}`]: e.target.value })} placeholder=\\\"Global Search\\\" size=\\\"50\\\" />\\n                </div>\\n            </div>\\n        );\\n    }\\n\\n    render() {\\n        let header1 = this.getHeader('globalFilter1');\\n        let header2 = this.getHeader('globalFilter2');\\n\\n        return (\\n            <div>\\n                <div className=\\\"card\\\">\\n                    <h5>Lenient Filter</h5>\\n                    <TreeTable value={this.state.nodes} globalFilter={this.state.globalFilter1} header={header1}>\\n                        <Column field=\\\"name\\\" header=\\\"Name\\\" expander filter></Column>\\n                        <Column field=\\\"size\\\" header=\\\"Size\\\" filter></Column>\\n                        <Column field=\\\"type\\\" header=\\\"Type\\\" filter></Column>\\n                    </TreeTable>\\n                </div>\\n\\n                <div className=\\\"card\\\">\\n                    <h5>Strict Filter</h5>\\n                    <TreeTable value={this.state.nodes} globalFilter={this.state.globalFilter2} header={header2} filterMode=\\\"strict\\\">\\n                        <Column field=\\\"name\\\" header=\\\"Name\\\" expander filter></Column>\\n                        <Column field=\\\"size\\\" header=\\\"Size\\\" filter></Column>\\n                        <Column field=\\\"type\\\" header=\\\"Type\\\" filter></Column>\\n                    </TreeTable>\\n                </div>\\n            </div>\\n        )\\n    }\\n}\\n                \"},'hooks':{tabName:'Hooks Source',content:\"\\nimport React, { useState, useEffect } from 'react';\\nimport { TreeTable } from 'primereact/treetable';\\nimport { Column } from 'primereact/column';\\nimport { InputText } from 'primereact/inputtext';\\nimport { NodeService } from '../service/NodeService';\\n\\nconst TreeTableFilterDemo = () => {\\n    const [nodes, setNodes] = useState([]);\\n    const [globalFilter1, setGlobalFilter1] = useState(null);\\n    const [globalFilter2, setGlobalFilter2] = useState(null);\\n    const nodeservice = new NodeService();\\n\\n    const treeTableFuncMap = {\\n        'globalFilter1': setGlobalFilter1,\\n        'globalFilter2': setGlobalFilter2\\n    };\\n\\n    useEffect(() => {\\n        nodeservice.getTreeTableNodes().then(data => setNodes(data));\\n    }, []); // eslint-disable-line react-hooks/exhaustive-deps\\n\\n    const getHeader = (globalFilterKey) => {\\n        return (\\n            <div className=\\\"p-text-right\\\">\\n                <div className=\\\"p-input-icon-left\\\">\\n                    <i className=\\\"pi pi-search\\\"></i>\\n                    <InputText type=\\\"search\\\" onInput={(e) => treeTableFuncMap[`${globalFilterKey}`](e.target.value)} placeholder=\\\"Global Search\\\" size=\\\"50\\\" />\\n                </div>\\n            </div>\\n        );\\n    }\\n\\n    let header1 = getHeader('globalFilter1');\\n    let header2 = getHeader('globalFilter2');\\n\\n    return (\\n        <div>\\n            <div className=\\\"card\\\">\\n                <h5>Lenient Filter</h5>\\n                <TreeTable value={nodes} globalFilter={globalFilter1} header={header1}>\\n                    <Column field=\\\"name\\\" header=\\\"Name\\\" expander filter></Column>\\n                    <Column field=\\\"size\\\" header=\\\"Size\\\" filter></Column>\\n                    <Column field=\\\"type\\\" header=\\\"Type\\\" filter></Column>\\n                </TreeTable>\\n            </div>\\n\\n            <div className=\\\"card\\\">\\n                <h5>Strict Filter</h5>\\n                <TreeTable value={nodes} globalFilter={globalFilter2} header={header2} filterMode=\\\"strict\\\">\\n                    <Column field=\\\"name\\\" header=\\\"Name\\\" expander filter></Column>\\n                    <Column field=\\\"size\\\" header=\\\"Size\\\" filter></Column>\\n                    <Column field=\\\"type\\\" header=\\\"Type\\\" filter></Column>\\n                </TreeTable>\\n            </div>\\n        </div>\\n    )\\n}\\n                \"},'ts':{tabName:'TS Source',content:\"\\nimport React, { useState, useEffect } from 'react';\\nimport { TreeTable } from 'primereact/treetable';\\nimport { Column } from 'primereact/column';\\nimport { InputText } from 'primereact/inputtext';\\nimport { NodeService } from '../service/NodeService';\\n\\nconst TreeTableFilterDemo = () => {\\n    const [nodes, setNodes] = useState([]);\\n    const [globalFilter1, setGlobalFilter1] = useState(null);\\n    const [globalFilter2, setGlobalFilter2] = useState(null);\\n    const nodeservice = new NodeService();\\n\\n    const treeTableFuncMap = {\\n        'globalFilter1': setGlobalFilter1,\\n        'globalFilter2': setGlobalFilter2\\n    };\\n\\n    useEffect(() => {\\n        nodeservice.getTreeTableNodes().then(data => setNodes(data));\\n    }, []); // eslint-disable-line react-hooks/exhaustive-deps\\n\\n    const getHeader = (globalFilterKey) => {\\n        return (\\n            <div className=\\\"p-text-right\\\">\\n                <div className=\\\"p-input-icon-left\\\">\\n                    <i className=\\\"pi pi-search\\\"></i>\\n                    <InputText type=\\\"search\\\" onInput={(e) => treeTableFuncMap[`${globalFilterKey}`](e.target.value)} placeholder=\\\"Global Search\\\" size=\\\"50\\\" />\\n                </div>\\n            </div>\\n        );\\n    }\\n\\n    let header1 = getHeader('globalFilter1');\\n    let header2 = getHeader('globalFilter2');\\n\\n    return (\\n        <div>\\n            <div className=\\\"card\\\">\\n                <h5>Lenient Filter</h5>\\n                <TreeTable value={nodes} globalFilter={globalFilter1} header={header1}>\\n                    <Column field=\\\"name\\\" header=\\\"Name\\\" expander filter></Column>\\n                    <Column field=\\\"size\\\" header=\\\"Size\\\" filter></Column>\\n                    <Column field=\\\"type\\\" header=\\\"Type\\\" filter></Column>\\n                </TreeTable>\\n            </div>\\n\\n            <div className=\\\"card\\\">\\n                <h5>Strict Filter</h5>\\n                <TreeTable value={nodes} globalFilter={globalFilter2} header={header2} filterMode=\\\"strict\\\">\\n                    <Column field=\\\"name\\\" header=\\\"Name\\\" expander filter></Column>\\n                    <Column field=\\\"size\\\" header=\\\"Size\\\" filter></Column>\\n                    <Column field=\\\"type\\\" header=\\\"Type\\\" filter></Column>\\n                </TreeTable>\\n            </div>\\n        </div>\\n    )\\n}\\n                \"}};return _this4;}_createClass(TreeTableFilterDoc,[{key:\"shouldComponentUpdate\",value:function shouldComponentUpdate(){return false;}},{key:\"render\",value:function render(){return/*#__PURE__*/React.createElement(\"div\",{className:\"content-section documentation\"},/*#__PURE__*/React.createElement(TabView,null,useLiveEditorTabs({name:'TreeTableFilterDemo',sources:this.sources,service:'NodeService',data:'treetablenodes'})));}}]);return TreeTableFilterDoc;}(Component);","map":{"version":3,"sources":["C:/Users/zura.ph/WebstormProjects/slotmaster-dashboard/src/showcase/treetable/TreeTableFilterDemo.js"],"names":["React","Component","TreeTable","Column","InputText","NodeService","TabView","useLiveEditorTabs","AppInlineHeader","TreeTableFilterDemo","props","state","nodes","globalFilter1","globalFilter2","nodeservice","getTreeTableNodes","then","data","setState","globalFilterKey","e","target","value","header1","getHeader","header2","TreeTableFilterDoc","sources","tabName","content","name","service"],"mappings":"g4BAAA,MAAOA,CAAAA,KAAP,EAAgBC,SAAhB,KAAiC,OAAjC,CACA,OAASC,SAAT,KAA0B,sCAA1B,CACA,OAASC,MAAT,KAAuB,gCAAvB,CACA,OAASC,SAAT,KAA0B,sCAA1B,CACA,OAASC,WAAT,KAA4B,wBAA5B,CACA,OAASC,OAAT,KAAwB,kCAAxB,CACA,OAASC,iBAAT,KAAiC,0BAAjC,CACA,OAASC,eAAT,KAAgC,uBAAhC,CAEA,UAAaC,CAAAA,mBAAb,0HAEI,6BAAYC,KAAZ,CAAmB,qDACf,uBAAMA,KAAN,EACA,MAAKC,KAAL,CAAa,CACTC,KAAK,CAAE,EADE,CAETC,aAAa,CAAE,IAFN,CAGTC,aAAa,CAAE,IAHN,CAAb,CAKA,MAAKC,WAAL,CAAmB,GAAIV,CAAAA,WAAJ,EAAnB,CAPe,aAQlB,CAVL,iEAYI,4BAAoB,iBAChB,KAAKU,WAAL,CAAiBC,iBAAjB,GAAqCC,IAArC,CAA0C,SAAAC,IAAI,QAAI,CAAA,MAAI,CAACC,QAAL,CAAc,CAAEP,KAAK,CAAEM,IAAT,CAAd,CAAJ,EAA9C,EACH,CAdL,yBAgBI,mBAAUE,eAAV,CAA2B,iBACvB,mBACI,2BAAK,SAAS,CAAC,cAAf,eACI,2BAAK,SAAS,CAAC,mBAAf,eACI,yBAAG,SAAS,CAAC,cAAb,EADJ,cAEI,oBAAC,SAAD,EAAW,IAAI,CAAC,QAAhB,CAAyB,OAAO,CAAE,iBAACC,CAAD,QAAO,CAAA,MAAI,CAACF,QAAL,8BAAoBC,eAApB,EAAwCC,CAAC,CAACC,MAAF,CAASC,KAAjD,EAAP,EAAlC,CAAoG,WAAW,CAAC,eAAhH,CAAgI,IAAI,CAAC,IAArI,EAFJ,CADJ,CADJ,CAQH,CAzBL,sBA2BI,iBAAS,CACL,GAAIC,CAAAA,OAAO,CAAG,KAAKC,SAAL,CAAe,eAAf,CAAd,CACA,GAAIC,CAAAA,OAAO,CAAG,KAAKD,SAAL,CAAe,eAAf,CAAd,CAEA,mBACI,4CACI,2BAAK,SAAS,CAAC,8BAAf,eACI,oBAAC,eAAD,EAAiB,aAAa,CAAC,WAA/B,eACI,wDAAc,yCAAd,CADJ,cAEI,ufAFJ,CADJ,CADJ,cAUI,2BAAK,SAAS,CAAC,gCAAf,eACI,2BAAK,SAAS,CAAC,MAAf,eACI,+CADJ,cAEI,oBAAC,SAAD,EAAW,KAAK,CAAE,KAAKd,KAAL,CAAWC,KAA7B,CAAoC,YAAY,CAAE,KAAKD,KAAL,CAAWE,aAA7D,CAA4E,MAAM,CAAEW,OAApF,eACI,oBAAC,MAAD,EAAQ,KAAK,CAAC,MAAd,CAAqB,MAAM,CAAC,MAA5B,CAAmC,QAAQ,KAA3C,CAA4C,MAAM,KAAlD,EADJ,cAEI,oBAAC,MAAD,EAAQ,KAAK,CAAC,MAAd,CAAqB,MAAM,CAAC,MAA5B,CAAmC,MAAM,KAAzC,EAFJ,cAGI,oBAAC,MAAD,EAAQ,KAAK,CAAC,MAAd,CAAqB,MAAM,CAAC,MAA5B,CAAmC,MAAM,KAAzC,EAHJ,CAFJ,CADJ,cAUI,2BAAK,SAAS,CAAC,MAAf,eACI,8CADJ,cAEI,oBAAC,SAAD,EAAW,KAAK,CAAE,KAAKb,KAAL,CAAWC,KAA7B,CAAoC,YAAY,CAAE,KAAKD,KAAL,CAAWG,aAA7D,CAA4E,MAAM,CAAEY,OAApF,CAA6F,UAAU,CAAC,QAAxG,eACI,oBAAC,MAAD,EAAQ,KAAK,CAAC,MAAd,CAAqB,MAAM,CAAC,MAA5B,CAAmC,QAAQ,KAA3C,CAA4C,MAAM,KAAlD,EADJ,cAEI,oBAAC,MAAD,EAAQ,KAAK,CAAC,MAAd,CAAqB,MAAM,CAAC,MAA5B,CAAmC,MAAM,KAAzC,EAFJ,cAGI,oBAAC,MAAD,EAAQ,KAAK,CAAC,MAAd,CAAqB,MAAM,CAAC,MAA5B,CAAmC,MAAM,KAAzC,EAHJ,CAFJ,CAVJ,CAVJ,cA8BI,oBAAC,kBAAD,MA9BJ,CADJ,CAkCH,CAjEL,iCAAyCzB,SAAzC,E,GAoEM0B,CAAAA,kB,2HAEF,4BAAYjB,KAAZ,CAAmB,qDACf,yBAAMA,KAAN,EAEA,OAAKkB,OAAL,CAAe,CACX,QAAS,CACLC,OAAO,CAAE,cADJ,CAELC,OAAO,60EAFF,CADE,CAkEX,QAAS,CACLD,OAAO,CAAE,cADJ,CAELC,OAAO,0zEAFF,CAlEE,CAgIX,KAAM,CACFD,OAAO,CAAE,WADP,CAEFC,OAAO,0zEAFL,CAhIK,CAAf,CAHe,cAkMlB,C,oEAED,gCAAwB,CACpB,MAAO,MAAP,CACH,C,sBAED,iBAAS,CACL,mBACI,2BAAK,SAAS,CAAC,+BAAf,eACI,oBAAC,OAAD,MAEQvB,iBAAiB,CAAC,CAAEwB,IAAI,CAAE,qBAAR,CAA+BH,OAAO,CAAE,KAAKA,OAA7C,CAAsDI,OAAO,CAAE,aAA/D,CAA8Ed,IAAI,CAAE,gBAApF,CAAD,CAFzB,CADJ,CADJ,CASH,C,gCApN4BjB,S","sourcesContent":["import React, { Component } from 'react';\r\nimport { TreeTable } from '../../components/treetable/TreeTable';\r\nimport { Column } from '../../components/column/Column';\r\nimport { InputText } from '../../components/inputtext/InputText';\r\nimport { NodeService } from '../service/NodeService';\r\nimport { TabView } from '../../components/tabview/TabView';\r\nimport { useLiveEditorTabs }from '../liveeditor/LiveEditor';\r\nimport { AppInlineHeader } from '../../AppInlineHeader';\r\n\r\nexport class TreeTableFilterDemo extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            nodes: [],\r\n            globalFilter1: null,\r\n            globalFilter2: null\r\n        };\r\n        this.nodeservice = new NodeService();\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.nodeservice.getTreeTableNodes().then(data => this.setState({ nodes: data }));\r\n    }\r\n\r\n    getHeader(globalFilterKey) {\r\n        return (\r\n            <div className=\"p-text-right\">\r\n                <div className=\"p-input-icon-left\">\r\n                    <i className=\"pi pi-search\"></i>\r\n                    <InputText type=\"search\" onInput={(e) => this.setState({ [`${globalFilterKey}`]: e.target.value })} placeholder=\"Global Search\" size=\"50\" />\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        let header1 = this.getHeader('globalFilter1');\r\n        let header2 = this.getHeader('globalFilter2');\r\n\r\n        return (\r\n            <div>\r\n                <div className=\"content-section introduction\">\r\n                    <AppInlineHeader changelogText=\"treeTable\">\r\n                        <h1>TreeTable <span>Filter</span></h1>\r\n                        <p>Filtering is enabled by setting the filter property as true in column object. Default match mode is \"startsWith\" and this can be configured using filterMatchMode\r\n                        property of column object that also accepts \"contains\", \"endsWith\", \"equals\", \"in\" and \"custom\". An optional global filter feature is available to search all fields with a keyword.\r\n                            By default input fields are generated as filter elements and using templating any component can be used as a filter.</p>\r\n                    </AppInlineHeader>\r\n                </div>\r\n\r\n                <div className=\"content-section implementation\">\r\n                    <div className=\"card\">\r\n                        <h5>Lenient Filter</h5>\r\n                        <TreeTable value={this.state.nodes} globalFilter={this.state.globalFilter1} header={header1}>\r\n                            <Column field=\"name\" header=\"Name\" expander filter></Column>\r\n                            <Column field=\"size\" header=\"Size\" filter></Column>\r\n                            <Column field=\"type\" header=\"Type\" filter></Column>\r\n                        </TreeTable>\r\n                    </div>\r\n\r\n                    <div className=\"card\">\r\n                        <h5>Strict Filter</h5>\r\n                        <TreeTable value={this.state.nodes} globalFilter={this.state.globalFilter2} header={header2} filterMode=\"strict\">\r\n                            <Column field=\"name\" header=\"Name\" expander filter></Column>\r\n                            <Column field=\"size\" header=\"Size\" filter></Column>\r\n                            <Column field=\"type\" header=\"Type\" filter></Column>\r\n                        </TreeTable>\r\n                    </div>\r\n                </div>\r\n\r\n                <TreeTableFilterDoc />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nclass TreeTableFilterDoc extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.sources = {\r\n            'class': {\r\n                tabName: 'Class Source',\r\n                content: `\r\nimport React, { Component } from 'react';\r\nimport { TreeTable } from 'primereact/treetable';\r\nimport { Column } from 'primereact/column';\r\nimport { InputText } from 'primereact/inputtext';\r\nimport { NodeService } from '../service/NodeService';\r\n\r\nexport class TreeTableFilterDemo extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            nodes: [],\r\n            globalFilter1: null,\r\n            globalFilter2: null\r\n        };\r\n        this.nodeservice = new NodeService();\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.nodeservice.getTreeTableNodes().then(data => this.setState({ nodes: data }));\r\n    }\r\n\r\n    getHeader(globalFilterKey) {\r\n        return (\r\n            <div className=\"p-text-right\">\r\n                <div className=\"p-input-icon-left\">\r\n                    <i className=\"pi pi-search\"></i>\r\n                    <InputText type=\"search\" onInput={(e) => this.setState({ [\\`\\${globalFilterKey}\\`]: e.target.value })} placeholder=\"Global Search\" size=\"50\" />\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        let header1 = this.getHeader('globalFilter1');\r\n        let header2 = this.getHeader('globalFilter2');\r\n\r\n        return (\r\n            <div>\r\n                <div className=\"card\">\r\n                    <h5>Lenient Filter</h5>\r\n                    <TreeTable value={this.state.nodes} globalFilter={this.state.globalFilter1} header={header1}>\r\n                        <Column field=\"name\" header=\"Name\" expander filter></Column>\r\n                        <Column field=\"size\" header=\"Size\" filter></Column>\r\n                        <Column field=\"type\" header=\"Type\" filter></Column>\r\n                    </TreeTable>\r\n                </div>\r\n\r\n                <div className=\"card\">\r\n                    <h5>Strict Filter</h5>\r\n                    <TreeTable value={this.state.nodes} globalFilter={this.state.globalFilter2} header={header2} filterMode=\"strict\">\r\n                        <Column field=\"name\" header=\"Name\" expander filter></Column>\r\n                        <Column field=\"size\" header=\"Size\" filter></Column>\r\n                        <Column field=\"type\" header=\"Type\" filter></Column>\r\n                    </TreeTable>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n                `\r\n            },\r\n            'hooks': {\r\n                tabName: 'Hooks Source',\r\n                content: `\r\nimport React, { useState, useEffect } from 'react';\r\nimport { TreeTable } from 'primereact/treetable';\r\nimport { Column } from 'primereact/column';\r\nimport { InputText } from 'primereact/inputtext';\r\nimport { NodeService } from '../service/NodeService';\r\n\r\nconst TreeTableFilterDemo = () => {\r\n    const [nodes, setNodes] = useState([]);\r\n    const [globalFilter1, setGlobalFilter1] = useState(null);\r\n    const [globalFilter2, setGlobalFilter2] = useState(null);\r\n    const nodeservice = new NodeService();\r\n\r\n    const treeTableFuncMap = {\r\n        'globalFilter1': setGlobalFilter1,\r\n        'globalFilter2': setGlobalFilter2\r\n    };\r\n\r\n    useEffect(() => {\r\n        nodeservice.getTreeTableNodes().then(data => setNodes(data));\r\n    }, []); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n    const getHeader = (globalFilterKey) => {\r\n        return (\r\n            <div className=\"p-text-right\">\r\n                <div className=\"p-input-icon-left\">\r\n                    <i className=\"pi pi-search\"></i>\r\n                    <InputText type=\"search\" onInput={(e) => treeTableFuncMap[\\`\\${globalFilterKey}\\`](e.target.value)} placeholder=\"Global Search\" size=\"50\" />\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    let header1 = getHeader('globalFilter1');\r\n    let header2 = getHeader('globalFilter2');\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"card\">\r\n                <h5>Lenient Filter</h5>\r\n                <TreeTable value={nodes} globalFilter={globalFilter1} header={header1}>\r\n                    <Column field=\"name\" header=\"Name\" expander filter></Column>\r\n                    <Column field=\"size\" header=\"Size\" filter></Column>\r\n                    <Column field=\"type\" header=\"Type\" filter></Column>\r\n                </TreeTable>\r\n            </div>\r\n\r\n            <div className=\"card\">\r\n                <h5>Strict Filter</h5>\r\n                <TreeTable value={nodes} globalFilter={globalFilter2} header={header2} filterMode=\"strict\">\r\n                    <Column field=\"name\" header=\"Name\" expander filter></Column>\r\n                    <Column field=\"size\" header=\"Size\" filter></Column>\r\n                    <Column field=\"type\" header=\"Type\" filter></Column>\r\n                </TreeTable>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n                `\r\n            },\r\n            'ts': {\r\n                tabName: 'TS Source',\r\n                content: `\r\nimport React, { useState, useEffect } from 'react';\r\nimport { TreeTable } from 'primereact/treetable';\r\nimport { Column } from 'primereact/column';\r\nimport { InputText } from 'primereact/inputtext';\r\nimport { NodeService } from '../service/NodeService';\r\n\r\nconst TreeTableFilterDemo = () => {\r\n    const [nodes, setNodes] = useState([]);\r\n    const [globalFilter1, setGlobalFilter1] = useState(null);\r\n    const [globalFilter2, setGlobalFilter2] = useState(null);\r\n    const nodeservice = new NodeService();\r\n\r\n    const treeTableFuncMap = {\r\n        'globalFilter1': setGlobalFilter1,\r\n        'globalFilter2': setGlobalFilter2\r\n    };\r\n\r\n    useEffect(() => {\r\n        nodeservice.getTreeTableNodes().then(data => setNodes(data));\r\n    }, []); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n    const getHeader = (globalFilterKey) => {\r\n        return (\r\n            <div className=\"p-text-right\">\r\n                <div className=\"p-input-icon-left\">\r\n                    <i className=\"pi pi-search\"></i>\r\n                    <InputText type=\"search\" onInput={(e) => treeTableFuncMap[\\`\\${globalFilterKey}\\`](e.target.value)} placeholder=\"Global Search\" size=\"50\" />\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    let header1 = getHeader('globalFilter1');\r\n    let header2 = getHeader('globalFilter2');\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"card\">\r\n                <h5>Lenient Filter</h5>\r\n                <TreeTable value={nodes} globalFilter={globalFilter1} header={header1}>\r\n                    <Column field=\"name\" header=\"Name\" expander filter></Column>\r\n                    <Column field=\"size\" header=\"Size\" filter></Column>\r\n                    <Column field=\"type\" header=\"Type\" filter></Column>\r\n                </TreeTable>\r\n            </div>\r\n\r\n            <div className=\"card\">\r\n                <h5>Strict Filter</h5>\r\n                <TreeTable value={nodes} globalFilter={globalFilter2} header={header2} filterMode=\"strict\">\r\n                    <Column field=\"name\" header=\"Name\" expander filter></Column>\r\n                    <Column field=\"size\" header=\"Size\" filter></Column>\r\n                    <Column field=\"type\" header=\"Type\" filter></Column>\r\n                </TreeTable>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n                `\r\n            }\r\n        }\r\n    }\r\n\r\n    shouldComponentUpdate() {\r\n        return false;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"content-section documentation\">\r\n                <TabView>\r\n                    {\r\n                        useLiveEditorTabs({ name: 'TreeTableFilterDemo', sources: this.sources, service: 'NodeService', data: 'treetablenodes' })\r\n                    }\r\n                </TabView>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}