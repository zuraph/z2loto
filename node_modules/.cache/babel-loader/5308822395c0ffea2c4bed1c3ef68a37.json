{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\zura.ph\\\\WebstormProjects\\\\slotmaster-dashboard\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\zura.ph\\\\WebstormProjects\\\\slotmaster-dashboard\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"C:\\\\Users\\\\zura.ph\\\\WebstormProjects\\\\slotmaster-dashboard\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"C:\\\\Users\\\\zura.ph\\\\WebstormProjects\\\\slotmaster-dashboard\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _createSuper from \"C:\\\\Users\\\\zura.ph\\\\WebstormProjects\\\\slotmaster-dashboard\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"C:\\\\Users\\\\zura.ph\\\\WebstormProjects\\\\slotmaster-dashboard\\\\src\\\\showcase\\\\tree\\\\TreeEventsDemo.js\";\nimport React, { Component } from 'react';\nimport { Tree } from '../../components/tree/Tree';\nimport { Toast } from '../../components/toast/Toast';\nimport { NodeService } from '../service/NodeService';\nimport { TabView } from '../../components/tabview/TabView';\nimport { useLiveEditorTabs } from '../liveeditor/LiveEditor';\nimport { AppInlineHeader } from '../../AppInlineHeader';\nexport var TreeEventsDemo = /*#__PURE__*/function (_Component) {\n  _inherits(TreeEventsDemo, _Component);\n\n  var _super = _createSuper(TreeEventsDemo);\n\n  function TreeEventsDemo(props) {\n    var _this;\n\n    _classCallCheck(this, TreeEventsDemo);\n\n    _this = _super.call(this, props);\n    _this.state = {\n      nodes: [],\n      selectedNodeKey: null\n    };\n    _this.nodeService = new NodeService();\n    _this.onExpand = _this.onExpand.bind(_assertThisInitialized(_this));\n    _this.onCollapse = _this.onCollapse.bind(_assertThisInitialized(_this));\n    _this.onSelect = _this.onSelect.bind(_assertThisInitialized(_this));\n    _this.onUnselect = _this.onUnselect.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(TreeEventsDemo, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      this.nodeService.getTreeNodes().then(function (data) {\n        return _this2.setState({\n          nodes: data\n        });\n      });\n    }\n  }, {\n    key: \"onExpand\",\n    value: function onExpand(event) {\n      this.toast.show({\n        severity: 'success',\n        summary: 'Node Expanded',\n        detail: event.node.label\n      });\n    }\n  }, {\n    key: \"onCollapse\",\n    value: function onCollapse(event) {\n      this.toast.show({\n        severity: 'success',\n        summary: 'Node Collapsed',\n        detail: event.node.label\n      });\n    }\n  }, {\n    key: \"onSelect\",\n    value: function onSelect(event) {\n      this.toast.show({\n        severity: 'info',\n        summary: 'Node Selected',\n        detail: event.node.label\n      });\n    }\n  }, {\n    key: \"onUnselect\",\n    value: function onUnselect(event) {\n      this.toast.show({\n        severity: 'info',\n        summary: 'Node Unselected',\n        detail: event.node.label\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"content-section introduction\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(AppInlineHeader, {\n        changelogText: \"tree\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(\"h1\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 25\n        }\n      }, \"Tree \", /*#__PURE__*/React.createElement(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 34\n        }\n      }, \"Events\")), /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 25\n        }\n      }, \"An event is provided each type of user interaction such as expand, collapse and selection.\"))), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"content-section implementation\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(Toast, {\n        ref: function ref(el) {\n          return _this3.toast = el;\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 21\n        }\n      }), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"card\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(Tree, {\n        value: this.state.nodes,\n        selectionMode: \"single\",\n        selectionKeys: this.state.selectedNodeKey,\n        onSelectionChange: function onSelectionChange(e) {\n          return _this3.setState({\n            selectedNodeKey: e.value\n          });\n        },\n        onExpand: this.onExpand,\n        onCollapse: this.onCollapse,\n        onSelect: this.onSelect,\n        onUnselect: this.onUnselect,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 25\n        }\n      }))), /*#__PURE__*/React.createElement(TreeEventsDemoDoc, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 17\n        }\n      }));\n    }\n  }]);\n\n  return TreeEventsDemo;\n}(Component);\nexport var TreeEventsDemoDoc = /*#__PURE__*/function (_Component2) {\n  _inherits(TreeEventsDemoDoc, _Component2);\n\n  var _super2 = _createSuper(TreeEventsDemoDoc);\n\n  function TreeEventsDemoDoc(props) {\n    var _this4;\n\n    _classCallCheck(this, TreeEventsDemoDoc);\n\n    _this4 = _super2.call(this, props);\n    _this4.sources = {\n      'class': {\n        tabName: 'Class Source',\n        content: \"\\nimport React, { Component } from 'react';\\nimport { Tree } from 'primereact/tree';\\nimport { Toast } from 'primereact/toast';\\nimport { NodeService } from '../service/NodeService';\\n\\nexport class TreeEventsDemo extends Component {\\n\\n    constructor(props) {\\n        super(props);\\n        this.state = {\\n            nodes: [],\\n            selectedNodeKey: null\\n        };\\n\\n        this.nodeService = new NodeService();\\n\\n        this.onExpand = this.onExpand.bind(this);\\n        this.onCollapse = this.onCollapse.bind(this);\\n        this.onSelect = this.onSelect.bind(this);\\n        this.onUnselect = this.onUnselect.bind(this);\\n    }\\n\\n    componentDidMount() {\\n        this.nodeService.getTreeNodes().then(data => this.setState({ nodes: data }));\\n    }\\n\\n    onExpand(event) {\\n        this.toast.show({ severity: 'success', summary: 'Node Expanded', detail: event.node.label });\\n    }\\n\\n    onCollapse(event) {\\n        this.toast.show({ severity: 'success', summary: 'Node Collapsed', detail: event.node.label });\\n    }\\n\\n    onSelect(event) {\\n        this.toast.show({ severity: 'info', summary: 'Node Selected', detail: event.node.label });\\n    }\\n\\n    onUnselect(event) {\\n        this.toast.show({ severity: 'info', summary: 'Node Unselected', detail: event.node.label });\\n    }\\n\\n    render() {\\n        return (\\n            <div>\\n                <Toast ref={(el) => this.toast = el} />\\n\\n                <div className=\\\"card\\\">\\n                    <Tree value={this.state.nodes} selectionMode=\\\"single\\\" selectionKeys={this.state.selectedNodeKey} onSelectionChange={e => this.setState({ selectedNodeKey: e.value })}\\n                        onExpand={this.onExpand} onCollapse={this.onCollapse} onSelect={this.onSelect} onUnselect={this.onUnselect} />\\n                </div>\\n            </div>\\n        )\\n    }\\n}\\n                \"\n      },\n      'hooks': {\n        tabName: 'Hooks Source',\n        content: \"\\nimport React, { useState, useEffect, useRef } from 'react';\\nimport { Tree } from 'primereact/tree';\\nimport { Toast } from 'primereact/toast';\\nimport { NodeService } from '../service/NodeService';\\n\\nconst TreeEventsDemo = () => {\\n    const [nodes, setNodes] = useState([]);\\n    const [selectedNodeKey, setSelectedNodeKey] = useState(null);\\n    const toast = useRef(null);\\n    const nodeService = new NodeService();\\n\\n    useEffect(() => {\\n        nodeService.getTreeNodes().then(data => setNodes(data));\\n    }, []); // eslint-disable-line react-hooks/exhaustive-deps\\n\\n    const onExpand = (event) => {\\n        toast.current.show({ severity: 'success', summary: 'Node Expanded', detail: event.node.label });\\n    }\\n\\n    const onCollapse = (event) => {\\n        toast.current.show({ severity: 'success', summary: 'Node Collapsed', detail: event.node.label });\\n    }\\n\\n    const onSelect = (event) => {\\n        toast.current.show({ severity: 'info', summary: 'Node Selected', detail: event.node.label });\\n    }\\n\\n    const onUnselect = (event) => {\\n        toast.current.show({ severity: 'info', summary: 'Node Unselected', detail: event.node.label });\\n    }\\n\\n    return (\\n        <div>\\n            <Toast ref={toast} />\\n\\n            <div className=\\\"card\\\">\\n                <Tree value={nodes} selectionMode=\\\"single\\\" selectionKeys={selectedNodeKey} onSelectionChange={e => setSelectedNodeKey(e.value)}\\n                    onExpand={onExpand} onCollapse={onCollapse} onSelect={onSelect} onUnselect={onUnselect} />\\n            </div>\\n        </div>\\n    )\\n}\\n                \"\n      },\n      'ts': {\n        tabName: 'TS Source',\n        content: \"\\nimport React, { useState, useEffect, useRef } from 'react';\\nimport { Tree } from 'primereact/tree';\\nimport { Toast } from 'primereact/toast';\\nimport { NodeService } from '../service/NodeService';\\n\\nconst TreeEventsDemo = () => {\\n    const [nodes, setNodes] = useState([]);\\n    const [selectedNodeKey, setSelectedNodeKey] = useState(null);\\n    const toast = useRef(null);\\n    const nodeService = new NodeService();\\n\\n    useEffect(() => {\\n        nodeService.getTreeNodes().then(data => setNodes(data));\\n    }, []); // eslint-disable-line react-hooks/exhaustive-deps\\n\\n    const onExpand = (event) => {\\n        toast.current.show({ severity: 'success', summary: 'Node Expanded', detail: event.node.label });\\n    }\\n\\n    const onCollapse = (event) => {\\n        toast.current.show({ severity: 'success', summary: 'Node Collapsed', detail: event.node.label });\\n    }\\n\\n    const onSelect = (event) => {\\n        toast.current.show({ severity: 'info', summary: 'Node Selected', detail: event.node.label });\\n    }\\n\\n    const onUnselect = (event) => {\\n        toast.current.show({ severity: 'info', summary: 'Node Unselected', detail: event.node.label });\\n    }\\n\\n    return (\\n        <div>\\n            <Toast ref={toast} />\\n\\n            <div className=\\\"card\\\">\\n                <Tree value={nodes} selectionMode=\\\"single\\\" selectionKeys={selectedNodeKey} onSelectionChange={e => setSelectedNodeKey(e.value)}\\n                    onExpand={onExpand} onCollapse={onCollapse} onSelect={onSelect} onUnselect={onUnselect} />\\n            </div>\\n        </div>\\n    )\\n}\\n                \"\n      }\n    };\n    return _this4;\n  }\n\n  _createClass(TreeEventsDemoDoc, [{\n    key: \"shouldComponentUpdate\",\n    value: function shouldComponentUpdate() {\n      return false;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"content-section documentation\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 240,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(TabView, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 241,\n          columnNumber: 17\n        }\n      }, useLiveEditorTabs({\n        name: 'TreeEventsDemo',\n        sources: this.sources,\n        service: 'NodeService',\n        data: 'treenodes'\n      })));\n    }\n  }]);\n\n  return TreeEventsDemoDoc;\n}(Component);","map":{"version":3,"sources":["C:/Users/zura.ph/WebstormProjects/slotmaster-dashboard/src/showcase/tree/TreeEventsDemo.js"],"names":["React","Component","Tree","Toast","NodeService","TabView","useLiveEditorTabs","AppInlineHeader","TreeEventsDemo","props","state","nodes","selectedNodeKey","nodeService","onExpand","bind","onCollapse","onSelect","onUnselect","getTreeNodes","then","data","setState","event","toast","show","severity","summary","detail","node","label","el","e","value","TreeEventsDemoDoc","sources","tabName","content","name","service"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { Tree } from '../../components/tree/Tree';\r\nimport { Toast } from '../../components/toast/Toast';\r\nimport { NodeService } from '../service/NodeService';\r\nimport { TabView } from '../../components/tabview/TabView';\r\nimport { useLiveEditorTabs }from '../liveeditor/LiveEditor';\r\nimport { AppInlineHeader } from '../../AppInlineHeader';\r\n\r\nexport class TreeEventsDemo extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            nodes: [],\r\n            selectedNodeKey: null\r\n        };\r\n\r\n        this.nodeService = new NodeService();\r\n\r\n        this.onExpand = this.onExpand.bind(this);\r\n        this.onCollapse = this.onCollapse.bind(this);\r\n        this.onSelect = this.onSelect.bind(this);\r\n        this.onUnselect = this.onUnselect.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.nodeService.getTreeNodes().then(data => this.setState({ nodes: data }));\r\n    }\r\n\r\n    onExpand(event) {\r\n        this.toast.show({ severity: 'success', summary: 'Node Expanded', detail: event.node.label });\r\n    }\r\n\r\n    onCollapse(event) {\r\n        this.toast.show({ severity: 'success', summary: 'Node Collapsed', detail: event.node.label });\r\n    }\r\n\r\n    onSelect(event) {\r\n        this.toast.show({ severity: 'info', summary: 'Node Selected', detail: event.node.label });\r\n    }\r\n\r\n    onUnselect(event) {\r\n        this.toast.show({ severity: 'info', summary: 'Node Unselected', detail: event.node.label });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div className=\"content-section introduction\">\r\n                    <AppInlineHeader changelogText=\"tree\">\r\n                        <h1>Tree <span>Events</span></h1>\r\n                        <p>An event is provided each type of user interaction such as expand, collapse and selection.</p>\r\n                    </AppInlineHeader>\r\n                </div>\r\n\r\n                <div className=\"content-section implementation\">\r\n                    <Toast ref={(el) => this.toast = el} />\r\n\r\n                    <div className=\"card\">\r\n                        <Tree value={this.state.nodes} selectionMode=\"single\" selectionKeys={this.state.selectedNodeKey} onSelectionChange={e => this.setState({ selectedNodeKey: e.value })}\r\n                            onExpand={this.onExpand} onCollapse={this.onCollapse} onSelect={this.onSelect} onUnselect={this.onUnselect} />\r\n                    </div>\r\n                </div>\r\n\r\n                <TreeEventsDemoDoc />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport class TreeEventsDemoDoc extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.sources = {\r\n            'class': {\r\n                tabName: 'Class Source',\r\n                content: `\r\nimport React, { Component } from 'react';\r\nimport { Tree } from 'primereact/tree';\r\nimport { Toast } from 'primereact/toast';\r\nimport { NodeService } from '../service/NodeService';\r\n\r\nexport class TreeEventsDemo extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            nodes: [],\r\n            selectedNodeKey: null\r\n        };\r\n\r\n        this.nodeService = new NodeService();\r\n\r\n        this.onExpand = this.onExpand.bind(this);\r\n        this.onCollapse = this.onCollapse.bind(this);\r\n        this.onSelect = this.onSelect.bind(this);\r\n        this.onUnselect = this.onUnselect.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.nodeService.getTreeNodes().then(data => this.setState({ nodes: data }));\r\n    }\r\n\r\n    onExpand(event) {\r\n        this.toast.show({ severity: 'success', summary: 'Node Expanded', detail: event.node.label });\r\n    }\r\n\r\n    onCollapse(event) {\r\n        this.toast.show({ severity: 'success', summary: 'Node Collapsed', detail: event.node.label });\r\n    }\r\n\r\n    onSelect(event) {\r\n        this.toast.show({ severity: 'info', summary: 'Node Selected', detail: event.node.label });\r\n    }\r\n\r\n    onUnselect(event) {\r\n        this.toast.show({ severity: 'info', summary: 'Node Unselected', detail: event.node.label });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Toast ref={(el) => this.toast = el} />\r\n\r\n                <div className=\"card\">\r\n                    <Tree value={this.state.nodes} selectionMode=\"single\" selectionKeys={this.state.selectedNodeKey} onSelectionChange={e => this.setState({ selectedNodeKey: e.value })}\r\n                        onExpand={this.onExpand} onCollapse={this.onCollapse} onSelect={this.onSelect} onUnselect={this.onUnselect} />\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n                `\r\n            },\r\n            'hooks': {\r\n                tabName: 'Hooks Source',\r\n                content: `\r\nimport React, { useState, useEffect, useRef } from 'react';\r\nimport { Tree } from 'primereact/tree';\r\nimport { Toast } from 'primereact/toast';\r\nimport { NodeService } from '../service/NodeService';\r\n\r\nconst TreeEventsDemo = () => {\r\n    const [nodes, setNodes] = useState([]);\r\n    const [selectedNodeKey, setSelectedNodeKey] = useState(null);\r\n    const toast = useRef(null);\r\n    const nodeService = new NodeService();\r\n\r\n    useEffect(() => {\r\n        nodeService.getTreeNodes().then(data => setNodes(data));\r\n    }, []); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n    const onExpand = (event) => {\r\n        toast.current.show({ severity: 'success', summary: 'Node Expanded', detail: event.node.label });\r\n    }\r\n\r\n    const onCollapse = (event) => {\r\n        toast.current.show({ severity: 'success', summary: 'Node Collapsed', detail: event.node.label });\r\n    }\r\n\r\n    const onSelect = (event) => {\r\n        toast.current.show({ severity: 'info', summary: 'Node Selected', detail: event.node.label });\r\n    }\r\n\r\n    const onUnselect = (event) => {\r\n        toast.current.show({ severity: 'info', summary: 'Node Unselected', detail: event.node.label });\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Toast ref={toast} />\r\n\r\n            <div className=\"card\">\r\n                <Tree value={nodes} selectionMode=\"single\" selectionKeys={selectedNodeKey} onSelectionChange={e => setSelectedNodeKey(e.value)}\r\n                    onExpand={onExpand} onCollapse={onCollapse} onSelect={onSelect} onUnselect={onUnselect} />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n                `\r\n            },\r\n            'ts': {\r\n                tabName: 'TS Source',\r\n                content: `\r\nimport React, { useState, useEffect, useRef } from 'react';\r\nimport { Tree } from 'primereact/tree';\r\nimport { Toast } from 'primereact/toast';\r\nimport { NodeService } from '../service/NodeService';\r\n\r\nconst TreeEventsDemo = () => {\r\n    const [nodes, setNodes] = useState([]);\r\n    const [selectedNodeKey, setSelectedNodeKey] = useState(null);\r\n    const toast = useRef(null);\r\n    const nodeService = new NodeService();\r\n\r\n    useEffect(() => {\r\n        nodeService.getTreeNodes().then(data => setNodes(data));\r\n    }, []); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n    const onExpand = (event) => {\r\n        toast.current.show({ severity: 'success', summary: 'Node Expanded', detail: event.node.label });\r\n    }\r\n\r\n    const onCollapse = (event) => {\r\n        toast.current.show({ severity: 'success', summary: 'Node Collapsed', detail: event.node.label });\r\n    }\r\n\r\n    const onSelect = (event) => {\r\n        toast.current.show({ severity: 'info', summary: 'Node Selected', detail: event.node.label });\r\n    }\r\n\r\n    const onUnselect = (event) => {\r\n        toast.current.show({ severity: 'info', summary: 'Node Unselected', detail: event.node.label });\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Toast ref={toast} />\r\n\r\n            <div className=\"card\">\r\n                <Tree value={nodes} selectionMode=\"single\" selectionKeys={selectedNodeKey} onSelectionChange={e => setSelectedNodeKey(e.value)}\r\n                    onExpand={onExpand} onCollapse={onCollapse} onSelect={onSelect} onUnselect={onUnselect} />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n                `\r\n            }\r\n        }\r\n    }\r\n\r\n    shouldComponentUpdate() {\r\n        return false;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"content-section documentation\">\r\n                <TabView>\r\n                    {\r\n                        useLiveEditorTabs({ name: 'TreeEventsDemo', sources: this.sources, service: 'NodeService', data: 'treenodes' })\r\n                    }\r\n                </TabView>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}