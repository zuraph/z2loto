{"ast":null,"code":"import _classCallCheck from\"C:\\\\Users\\\\zura.ph\\\\WebstormProjects\\\\slotmaster-dashboard\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";import _createClass from\"C:\\\\Users\\\\zura.ph\\\\WebstormProjects\\\\slotmaster-dashboard\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";import _inherits from\"C:\\\\Users\\\\zura.ph\\\\WebstormProjects\\\\slotmaster-dashboard\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";import _createSuper from\"C:\\\\Users\\\\zura.ph\\\\WebstormProjects\\\\slotmaster-dashboard\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createSuper\";import React,{Component}from'react';import{Link}from'react-router-dom';import{TabView,TabPanel}from'../../components/tabview/TabView';import{CodeHighlight}from'../codehighlight/CodeHighlight';import{useLiveEditorTabs}from'../liveeditor/LiveEditor';export var MessagesDoc=/*#__PURE__*/function(_Component){_inherits(MessagesDoc,_Component);var _super=_createSuper(MessagesDoc);function MessagesDoc(props){var _this;_classCallCheck(this,MessagesDoc);_this=_super.call(this,props);_this.sources={'class':{tabName:'Class Source',content:\"\\nimport React, { Component } from 'react';\\nimport { Messages } from 'primereact/messages';\\nimport { Message } from 'primereact/message';\\nimport { InputText } from 'primereact/inputtext';\\nimport { Button } from 'primereact/button';\\n\\nexport class MessagesDemo extends Component {\\n\\n    constructor(props) {\\n        super(props);\\n\\n        this.addMessages = this.addMessages.bind(this);\\n        this.clearMessages = this.clearMessages.bind(this);\\n    }\\n\\n    componentDidMount() {\\n        this.msgs1.show([\\n            { severity: 'success', summary: 'Success', detail: 'Message Content', sticky: true },\\n            { severity: 'info', summary: 'Info', detail: 'Message Content', sticky: true },\\n            { severity: 'warn', summary: 'Warning', detail: 'Message Content', sticky: true },\\n            { severity: 'error', summary: 'Error', detail: 'Message Content', sticky: true }\\n        ]);\\n\\n        this.msgs3.show({\\n            severity: 'info', sticky: true, content: (\\n                <React.Fragment>\\n                    <img alt=\\\"logo\\\" src=\\\"showcase/images/logo.png\\\" onError={(e) => e.target.src='https://www.primefaces.org/wp-content/uploads/2020/05/placeholder.png'} width=\\\"32\\\" />\\n                    <div className=\\\"p-ml-2\\\">Always bet on Prime.</div>\\n                </React.Fragment>\\n            )\\n        });\\n    }\\n\\n    addMessages() {\\n        this.msgs2.show([\\n            { severity: 'success', summary: 'Success', detail: 'Message Content', sticky: true },\\n            { severity: 'info', summary: 'Info', detail: 'Message Content', sticky: true },\\n            { severity: 'warn', summary: 'Warning', detail: 'Message Content', sticky: true },\\n            { severity: 'error', summary: 'Error', detail: 'Message Content', sticky: true }\\n        ]);\\n    }\\n\\n    clearMessages() {\\n        this.msgs2.clear();\\n    }\\n\\n    render() {\\n        return (\\n            <div>\\n                <div className=\\\"card\\\">\\n                    <h5>Severities</h5>\\n                    <Messages ref={(el) => this.msgs1 = el} />\\n\\n                    <h5>Dynamic</h5>\\n                    <Button type=\\\"button\\\" onClick={this.addMessages} label=\\\"Show\\\" className=\\\"p-mr-2\\\" />\\n                    <Button type=\\\"button\\\" onClick={this.clearMessages} icon=\\\"pi pi-times\\\" label=\\\"Clear\\\" className=\\\"p-button-secondary\\\" />\\n\\n                    <Messages ref={(el) => this.msgs2 = el} />\\n\\n                    <h5>Static Content</h5>\\n                    <Messages ref={(el) => this.msgs3 = el} />\\n\\n                    <h5>Inline Message</h5>\\n                    <p>Message component is used to display inline messages mostly within forms.</p>\\n                    <div className=\\\"p-grid\\\">\\n                        <div className=\\\"p-col-12 p-md-3\\\">\\n                            <Message severity=\\\"info\\\" text=\\\"Message Content\\\" />\\n                        </div>\\n                        <div className=\\\"p-col-12 p-md-3\\\">\\n                            <Message severity=\\\"success\\\" text=\\\"Message Content\\\" />\\n                        </div>\\n                        <div className=\\\"p-col-12 p-md-3\\\">\\n                            <Message severity=\\\"warn\\\" text=\\\"Message Content\\\" />\\n                        </div>\\n                        <div className=\\\"p-col-12 p-md-3\\\">\\n                            <Message severity=\\\"error\\\" text=\\\"Message Content\\\" />\\n                        </div>\\n                    </div>\\n\\n                    <h5>Validation Message</h5>\\n                    <div className=\\\"p-formgroup-inline p-mb-2\\\">\\n                        <label htmlFor=\\\"username1\\\" className=\\\"p-sr-only\\\">Username</label>\\n                        <InputText id=\\\"username1\\\" placeholder=\\\"Username\\\" className=\\\"p-invalid p-mr-2\\\" />\\n                        <Message severity=\\\"error\\\" text=\\\"Username is required\\\" />\\n                    </div>\\n                    <div className=\\\"p-formgroup-inline\\\">\\n                        <label htmlFor=\\\"email\\\" className=\\\"p-sr-only\\\">email</label>\\n                        <InputText id=\\\"email\\\" placeholder=\\\"Email\\\" className=\\\"p-invalid p-mr-2\\\" />\\n                        <Message severity=\\\"error\\\" />\\n                    </div>\\n\\n                    <h5>Form Layout</h5>\\n                    <div className=\\\"p-field p-fluid\\\">\\n                        <label htmlFor=\\\"username2\\\">Username</label>\\n                        <InputText id=\\\"username2\\\" aria-describedby=\\\"username-help\\\" className=\\\"p-invalid p-mr-2\\\" />\\n                        <small id=\\\"username-help\\\" className=\\\"p-error\\\">Username is not available.</small>\\n                    </div>\\n                </div>\\n            </div>\\n        )\\n    }\\n}\\n                \"},'hooks':{tabName:'Hooks Source',content:\"\\nimport React, { useEffect, useRef } from 'react';\\nimport { Messages } from 'primereact/messages';\\nimport { Message } from 'primereact/message';\\nimport { InputText } from 'primereact/inputtext';\\nimport { Button } from 'primereact/button';\\n\\nconst MessagesDemo = () => {\\n    const msgs1 = useRef(null);\\n    const msgs2 = useRef(null);\\n    const msgs3 = useRef(null);\\n\\n    useEffect(() => {\\n        msgs1.current.show([\\n            { severity: 'success', summary: 'Success', detail: 'Message Content', sticky: true },\\n            { severity: 'info', summary: 'Info', detail: 'Message Content', sticky: true },\\n            { severity: 'warn', summary: 'Warning', detail: 'Message Content', sticky: true },\\n            { severity: 'error', summary: 'Error', detail: 'Message Content', sticky: true }\\n        ]);\\n\\n        msgs3.current.show({\\n            severity: 'info', sticky: true, content: (\\n                <React.Fragment>\\n                    <img alt=\\\"logo\\\" src=\\\"showcase/images/logo.png\\\" onError={(e) => e.target.src='https://www.primefaces.org/wp-content/uploads/2020/05/placeholder.png'} width=\\\"32\\\" />\\n                    <div className=\\\"p-ml-2\\\">Always bet on Prime.</div>\\n                </React.Fragment>\\n            )\\n        });\\n    }, []); // eslint-disable-line react-hooks/exhaustive-deps\\n\\n    const addMessages = () => {\\n        msgs2.current.show([\\n            { severity: 'success', summary: 'Success', detail: 'Message Content', sticky: true },\\n            { severity: 'info', summary: 'Info', detail: 'Message Content', sticky: true },\\n            { severity: 'warn', summary: 'Warning', detail: 'Message Content', sticky: true },\\n            { severity: 'error', summary: 'Error', detail: 'Message Content', sticky: true }\\n        ]);\\n    }\\n\\n    const clearMessages = () => {\\n        msgs2.current.clear();\\n    }\\n\\n    return (\\n        <div>\\n            <div className=\\\"card\\\">\\n                <h5>Severities</h5>\\n                <Messages ref={msgs1} />\\n\\n                <h5>Dynamic</h5>\\n                <Button type=\\\"button\\\" onClick={addMessages} label=\\\"Show\\\" className=\\\"p-mr-2\\\" />\\n                <Button type=\\\"button\\\" onClick={clearMessages} icon=\\\"pi pi-times\\\" label=\\\"Clear\\\" className=\\\"p-button-secondary\\\" />\\n\\n                <Messages ref={msgs2} />\\n\\n                <h5>Static Content</h5>\\n                <Messages ref={msgs3} />\\n\\n                <h5>Inline Message</h5>\\n                <p>Message component is used to display inline messages mostly within forms.</p>\\n                <div className=\\\"p-grid\\\">\\n                    <div className=\\\"p-col-12 p-md-3\\\">\\n                        <Message severity=\\\"info\\\" text=\\\"Message Content\\\" />\\n                    </div>\\n                    <div className=\\\"p-col-12 p-md-3\\\">\\n                        <Message severity=\\\"success\\\" text=\\\"Message Content\\\" />\\n                    </div>\\n                    <div className=\\\"p-col-12 p-md-3\\\">\\n                        <Message severity=\\\"warn\\\" text=\\\"Message Content\\\" />\\n                    </div>\\n                    <div className=\\\"p-col-12 p-md-3\\\">\\n                        <Message severity=\\\"error\\\" text=\\\"Message Content\\\" />\\n                    </div>\\n                </div>\\n\\n                <h5>Validation Message</h5>\\n                <div className=\\\"p-formgroup-inline p-mb-2\\\">\\n                    <label htmlFor=\\\"username1\\\" className=\\\"p-sr-only\\\">Username</label>\\n                    <InputText id=\\\"username1\\\" placeholder=\\\"Username\\\" className=\\\"p-invalid p-mr-2\\\" />\\n                    <Message severity=\\\"error\\\" text=\\\"Username is required\\\" />\\n                </div>\\n                <div className=\\\"p-formgroup-inline\\\">\\n                    <label htmlFor=\\\"email\\\" className=\\\"p-sr-only\\\">email</label>\\n                    <InputText id=\\\"email\\\" placeholder=\\\"Email\\\" className=\\\"p-invalid p-mr-2\\\" />\\n                    <Message severity=\\\"error\\\" />\\n                </div>\\n\\n                <h5>Form Layout</h5>\\n                <div className=\\\"p-field p-fluid\\\">\\n                    <label htmlFor=\\\"username2\\\">Username</label>\\n                    <InputText id=\\\"username2\\\" aria-describedby=\\\"username-help\\\" className=\\\"p-invalid p-mr-2\\\" />\\n                    <small id=\\\"username-help\\\" className=\\\"p-error\\\">Username is not available.</small>\\n                </div>\\n            </div>\\n        </div>\\n    )\\n}\\n                \"},'ts':{tabName:'TS Source',content:\"\\nimport React, { useEffect, useRef } from 'react';\\nimport { Messages } from 'primereact/messages';\\nimport { Message } from 'primereact/message';\\nimport { InputText } from 'primereact/inputtext';\\nimport { Button } from 'primereact/button';\\n\\nconst MessagesDemo = () => {\\n    const msgs1 = useRef(null);\\n    const msgs2 = useRef(null);\\n    const msgs3 = useRef(null);\\n\\n    useEffect(() => {\\n        msgs1.current.show([\\n            { severity: 'success', summary: 'Success', detail: 'Message Content', sticky: true },\\n            { severity: 'info', summary: 'Info', detail: 'Message Content', sticky: true },\\n            { severity: 'warn', summary: 'Warning', detail: 'Message Content', sticky: true },\\n            { severity: 'error', summary: 'Error', detail: 'Message Content', sticky: true }\\n        ]);\\n\\n        msgs3.current.show({\\n            severity: 'info', sticky: true, content: (\\n                <React.Fragment>\\n                    <img alt=\\\"logo\\\" src=\\\"showcase/images/logo.png\\\" onError={(e) => e.target.src='https://www.primefaces.org/wp-content/uploads/2020/05/placeholder.png'} width=\\\"32\\\" />\\n                    <div className=\\\"p-ml-2\\\">Always bet on Prime.</div>\\n                </React.Fragment>\\n            )\\n        });\\n    }, []); // eslint-disable-line react-hooks/exhaustive-deps\\n\\n    const addMessages = () => {\\n        msgs2.current.show([\\n            { severity: 'success', summary: 'Success', detail: 'Message Content', sticky: true },\\n            { severity: 'info', summary: 'Info', detail: 'Message Content', sticky: true },\\n            { severity: 'warn', summary: 'Warning', detail: 'Message Content', sticky: true },\\n            { severity: 'error', summary: 'Error', detail: 'Message Content', sticky: true }\\n        ]);\\n    }\\n\\n    const clearMessages = () => {\\n        msgs2.current.clear();\\n    }\\n\\n    return (\\n        <div>\\n            <div className=\\\"card\\\">\\n                <h5>Severities</h5>\\n                <Messages ref={msgs1} />\\n\\n                <h5>Dynamic</h5>\\n                <Button type=\\\"button\\\" onClick={addMessages} label=\\\"Show\\\" className=\\\"p-mr-2\\\" />\\n                <Button type=\\\"button\\\" onClick={clearMessages} icon=\\\"pi pi-times\\\" label=\\\"Clear\\\" className=\\\"p-button-secondary\\\" />\\n\\n                <Messages ref={msgs2} />\\n\\n                <h5>Static Content</h5>\\n                <Messages ref={msgs3} />\\n\\n                <h5>Inline Message</h5>\\n                <p>Message component is used to display inline messages mostly within forms.</p>\\n                <div className=\\\"p-grid\\\">\\n                    <div className=\\\"p-col-12 p-md-3\\\">\\n                        <Message severity=\\\"info\\\" text=\\\"Message Content\\\" />\\n                    </div>\\n                    <div className=\\\"p-col-12 p-md-3\\\">\\n                        <Message severity=\\\"success\\\" text=\\\"Message Content\\\" />\\n                    </div>\\n                    <div className=\\\"p-col-12 p-md-3\\\">\\n                        <Message severity=\\\"warn\\\" text=\\\"Message Content\\\" />\\n                    </div>\\n                    <div className=\\\"p-col-12 p-md-3\\\">\\n                        <Message severity=\\\"error\\\" text=\\\"Message Content\\\" />\\n                    </div>\\n                </div>\\n\\n                <h5>Validation Message</h5>\\n                <div className=\\\"p-formgroup-inline p-mb-2\\\">\\n                    <label htmlFor=\\\"username1\\\" className=\\\"p-sr-only\\\">Username</label>\\n                    <InputText id=\\\"username1\\\" placeholder=\\\"Username\\\" className=\\\"p-invalid p-mr-2\\\" />\\n                    <Message severity=\\\"error\\\" text=\\\"Username is required\\\" />\\n                </div>\\n                <div className=\\\"p-formgroup-inline\\\">\\n                    <label htmlFor=\\\"email\\\" className=\\\"p-sr-only\\\">email</label>\\n                    <InputText id=\\\"email\\\" placeholder=\\\"Email\\\" className=\\\"p-invalid p-mr-2\\\" />\\n                    <Message severity=\\\"error\\\" />\\n                </div>\\n\\n                <h5>Form Layout</h5>\\n                <div className=\\\"p-field p-fluid\\\">\\n                    <label htmlFor=\\\"username2\\\">Username</label>\\n                    <InputText id=\\\"username2\\\" aria-describedby=\\\"username-help\\\" className=\\\"p-invalid p-mr-2\\\" />\\n                    <small id=\\\"username-help\\\" className=\\\"p-error\\\">Username is not available.</small>\\n                </div>\\n            </div>\\n        </div>\\n    )\\n}\\n                \"}};return _this;}_createClass(MessagesDoc,[{key:\"shouldComponentUpdate\",value:function shouldComponentUpdate(){return false;}},{key:\"render\",value:function render(){return/*#__PURE__*/React.createElement(\"div\",{className:\"content-section documentation\"},/*#__PURE__*/React.createElement(TabView,null,/*#__PURE__*/React.createElement(TabPanel,{header:\"Documentation\"},/*#__PURE__*/React.createElement(\"h5\",null,\"Import\"),/*#__PURE__*/React.createElement(CodeHighlight,{lang:\"js\"},\"\\nimport { Messages } from 'primereact/messages';\\nimport { Message } from 'primereact/message';\\n\"),/*#__PURE__*/React.createElement(\"h5\",null,\"Getting Started\"),/*#__PURE__*/React.createElement(\"p\",null,\"A single message is specified by the Message interface in PrimeReact that defines various properties such as severity, summary and detail. Messages are displayed by using the \",/*#__PURE__*/React.createElement(\"i\",null,\"show\"),\" method on the ref of the Messages instance.\"),/*#__PURE__*/React.createElement(\"p\",null,\"Note that for animations, messages requires react-transition-group package.\"),/*#__PURE__*/React.createElement(CodeHighlight,null,\"\\n<Messages ref={messages}></Messages>\\n\"),/*#__PURE__*/React.createElement(CodeHighlight,{lang:\"js\"},\"\\nmessages.current.show({severity: 'success', summary: 'Success Message', detail: 'Order submitted'});\\n\"),/*#__PURE__*/React.createElement(\"h5\",null,\"Message API\"),/*#__PURE__*/React.createElement(\"div\",{className:\"doc-tablewrapper\"},/*#__PURE__*/React.createElement(\"table\",{className:\"doc-table\"},/*#__PURE__*/React.createElement(\"thead\",null,/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"th\",null,\"Name\"),/*#__PURE__*/React.createElement(\"th\",null,\"Type\"),/*#__PURE__*/React.createElement(\"th\",null,\"Default\"),/*#__PURE__*/React.createElement(\"th\",null,\"Description\"))),/*#__PURE__*/React.createElement(\"tbody\",null,/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"td\",null,\"severity\"),/*#__PURE__*/React.createElement(\"td\",null,\"string\"),/*#__PURE__*/React.createElement(\"td\",null,\"null\"),/*#__PURE__*/React.createElement(\"td\",null,\"Severity of the message.\")),/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"td\",null,\"content\"),/*#__PURE__*/React.createElement(\"td\",null,\"element\"),/*#__PURE__*/React.createElement(\"td\",null,\"null\"),/*#__PURE__*/React.createElement(\"td\",null,\"Template of the message.\")),/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"td\",null,\"summary\"),/*#__PURE__*/React.createElement(\"td\",null,\"element\"),/*#__PURE__*/React.createElement(\"td\",null,\"null\"),/*#__PURE__*/React.createElement(\"td\",null,\"Summary content of the message.\")),/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"td\",null,\"detail\"),/*#__PURE__*/React.createElement(\"td\",null,\"element\"),/*#__PURE__*/React.createElement(\"td\",null,\"null\"),/*#__PURE__*/React.createElement(\"td\",null,\"Detail content of the message.\")),/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"td\",null,\"closable\"),/*#__PURE__*/React.createElement(\"td\",null,\"boolean\"),/*#__PURE__*/React.createElement(\"td\",null,\"true\"),/*#__PURE__*/React.createElement(\"td\",null,\"Whether the message can be closed manually using the close icon.\")),/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"td\",null,\"sticky\"),/*#__PURE__*/React.createElement(\"td\",null,\"element\"),/*#__PURE__*/React.createElement(\"td\",null,\"null\"),/*#__PURE__*/React.createElement(\"td\",null,\"When enabled, message is not removed automatically.\")),/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"td\",null,\"life\"),/*#__PURE__*/React.createElement(\"td\",null,\"number\"),/*#__PURE__*/React.createElement(\"td\",null,\"3000\"),/*#__PURE__*/React.createElement(\"td\",null,\"Delay in milliseconds to close the message automatically.\"))))),/*#__PURE__*/React.createElement(\"h5\",null,\"Severities\"),/*#__PURE__*/React.createElement(\"p\",null,\"There are four possible values for the severity of a message.\"),/*#__PURE__*/React.createElement(\"ul\",null,/*#__PURE__*/React.createElement(\"li\",null,\"success\"),/*#__PURE__*/React.createElement(\"li\",null,\"info\"),/*#__PURE__*/React.createElement(\"li\",null,\"warn\"),/*#__PURE__*/React.createElement(\"li\",null,\"error\")),/*#__PURE__*/React.createElement(\"h5\",null,\"Showing Messages\"),/*#__PURE__*/React.createElement(\"p\",null,\"Show method accepts either a single message or an array of messages.\"),/*#__PURE__*/React.createElement(CodeHighlight,null,\"\\n<Messages ref={messages}></Messages>\\n\\n<Button onClick={showSuccess} label=\\\"Success\\\" className=\\\"p-button-success\\\" />\\n<Button onClick={showInfo} label=\\\"Info\\\" className=\\\"p-button-info\\\" />\\n<Button onClick={showWarn} label=\\\"Warn\\\" className=\\\"p-button-warning\\\" />\\n<Button onClick={showError} label=\\\"Error\\\" className=\\\"p-button-danger\\\" />\\n<Button onClick={showMultiple} label=\\\"Multiple\\\" />\\n\"),/*#__PURE__*/React.createElement(CodeHighlight,{lang:\"js\"},\"\\nconst showSuccess = () => {\\n    messages.current.show({ severity: 'success', summary: 'Success Message', detail: 'Order submitted' });\\n}\\n\\nconst showInfo = () => {\\n    messages.current.show({ severity: 'info', summary: 'Info Message', detail: 'PrimeReact rocks' });\\n}\\n\\nconst showWarn = () => {\\n    messages.current.show({ severity: 'warn', summary: 'Warn Message', detail: 'There are unsaved changes' });\\n}\\n\\nconst showError = () => {\\n    messages.current.show({ severity: 'error', summary: 'Error Message', detail: 'Validation failed' });\\n}\\n\\nconst showMultiple = () => {\\n    messages.current.show([\\n        {severity:'info', summary:'Message 1', detail:'PrimeReact rocks'},\\n        {severity:'info', summary:'Message 2', detail:'PrimeReact rocks'},\\n        {severity:'info', summary:'Message 3', detail:'PrimeFaces rocks'}\\n    ]);\\n}\\n\"),/*#__PURE__*/React.createElement(\"h5\",null,\"Clearing Messages\"),/*#__PURE__*/React.createElement(\"p\",null,/*#__PURE__*/React.createElement(\"i\",null,\"clear()\"),\" method removes all messages.\"),/*#__PURE__*/React.createElement(CodeHighlight,{lang:\"js\"},\"\\nmessages.current.clear();\\n\"),/*#__PURE__*/React.createElement(\"h5\",null,\"Replacing Messages\"),/*#__PURE__*/React.createElement(\"p\",null,/*#__PURE__*/React.createElement(\"i\",null,\"replace(newMessages)\"),\" method adds new messages after removing all old messages.\"),/*#__PURE__*/React.createElement(CodeHighlight,{lang:\"js\"},\"\\nmessages.current.replace(newMessages);\\n\"),/*#__PURE__*/React.createElement(\"h5\",null,\"Closable\"),/*#__PURE__*/React.createElement(\"p\",null,\"Messages are closable by default resulting in a close icon being displayed on top right corner. In order to disable closable messages, set \",/*#__PURE__*/React.createElement(\"i\",null,\"closable\"),\" to false.\"),/*#__PURE__*/React.createElement(CodeHighlight,{lang:\"js\"},\"\\nmessages.current.show({closable: false, severity: 'error', summary: 'Error Message', detail: 'Validation failed'});\\n\"),/*#__PURE__*/React.createElement(\"h5\",null,\"Sticky\"),/*#__PURE__*/React.createElement(\"p\",null,\"Messages are cleared automatically after the timeout defined by \",/*#__PURE__*/React.createElement(\"i\",null,\"life\"),\" property which is 3 seconds by default. Use \",/*#__PURE__*/React.createElement(\"i\",null,\"sticky\"),\" mode to make them stay until they are manually removed.\"),/*#__PURE__*/React.createElement(CodeHighlight,{lang:\"js\"},\"\\n//sticky\\nmessages.current.show({ sticky: true, severity: 'error', summary: 'Error Message', detail: 'Validation failed' });\\n\\n//automatically removed after 5 seconds\\nmessages.current.show({ life: 5000, severity: 'error', summary: 'Error Message', detail: 'Validation failed' });\\n\"),/*#__PURE__*/React.createElement(\"h5\",null,\"Message Component\"),/*#__PURE__*/React.createElement(\"p\",null,\"Message component is useful in cases where a single message needs to be displayed related to an element such as forms. It has two properties, \",/*#__PURE__*/React.createElement(\"i\",null,\"severity\"),\" and \",/*#__PURE__*/React.createElement(\"i\",null,\"text\"),\" of the message.\"),/*#__PURE__*/React.createElement(CodeHighlight,null,\"\\n<h5>Inline Message CSS</h5>\\n<p>CSS helpers to display inline messages mostly within forms.</p>\\n<Message severity=\\\"info\\\" text=\\\"PrimeNG Rocks\\\"></Message>\\n<Message severity=\\\"success\\\" text=\\\"Record Saved\\\"></Message>\\n<Message severity=\\\"warn\\\" text=\\\"Are you sure?\\\"></Message>\\n<Message severity=\\\"error\\\" text=\\\"Field is required\\\"></Message>\\n\"),/*#__PURE__*/React.createElement(\"h5\",null,\"Properties of Message\"),/*#__PURE__*/React.createElement(\"div\",{className:\"doc-tablewrapper\"},/*#__PURE__*/React.createElement(\"table\",{className:\"doc-table\"},/*#__PURE__*/React.createElement(\"thead\",null,/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"th\",null,\"Name\"),/*#__PURE__*/React.createElement(\"th\",null,\"Type\"),/*#__PURE__*/React.createElement(\"th\",null,\"Default\"),/*#__PURE__*/React.createElement(\"th\",null,\"Description\"))),/*#__PURE__*/React.createElement(\"tbody\",null,/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"td\",null,\"id\"),/*#__PURE__*/React.createElement(\"td\",null,\"string\"),/*#__PURE__*/React.createElement(\"td\",null,\"null\"),/*#__PURE__*/React.createElement(\"td\",null,\"Unique identifier of the element.\")),/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"td\",null,\"className\"),/*#__PURE__*/React.createElement(\"td\",null,\"string\"),/*#__PURE__*/React.createElement(\"td\",null,\"null\"),/*#__PURE__*/React.createElement(\"td\",null,\"Style class of the element.\")),/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"td\",null,\"style\"),/*#__PURE__*/React.createElement(\"td\",null,\"string\"),/*#__PURE__*/React.createElement(\"td\",null,\"null\"),/*#__PURE__*/React.createElement(\"td\",null,\"Inline style of the element.\")),/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"td\",null,\"severity\"),/*#__PURE__*/React.createElement(\"td\",null,\"string\"),/*#__PURE__*/React.createElement(\"td\",null,\"null\"),/*#__PURE__*/React.createElement(\"td\",null,\"Severity level of the message.\")),/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"td\",null,\"style\"),/*#__PURE__*/React.createElement(\"td\",null,\"string\"),/*#__PURE__*/React.createElement(\"td\",null,\"null\"),/*#__PURE__*/React.createElement(\"td\",null,\"Message text.\")),/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"td\",null,\"content\"),/*#__PURE__*/React.createElement(\"td\",null,\"element\"),/*#__PURE__*/React.createElement(\"td\",null,\"null\"),/*#__PURE__*/React.createElement(\"td\",null,\"Template of the message.\"))))),/*#__PURE__*/React.createElement(\"h5\",null,\"Properties of Messages\"),/*#__PURE__*/React.createElement(\"div\",{className:\"doc-tablewrapper\"},/*#__PURE__*/React.createElement(\"table\",{className:\"doc-table\"},/*#__PURE__*/React.createElement(\"thead\",null,/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"th\",null,\"Name\"),/*#__PURE__*/React.createElement(\"th\",null,\"Type\"),/*#__PURE__*/React.createElement(\"th\",null,\"Default\"),/*#__PURE__*/React.createElement(\"th\",null,\"Description\"))),/*#__PURE__*/React.createElement(\"tbody\",null,/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"td\",null,\"id\"),/*#__PURE__*/React.createElement(\"td\",null,\"string\"),/*#__PURE__*/React.createElement(\"td\",null,\"null\"),/*#__PURE__*/React.createElement(\"td\",null,\"Unique identifier of the element.\")),/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"td\",null,\"className\"),/*#__PURE__*/React.createElement(\"td\",null,\"string\"),/*#__PURE__*/React.createElement(\"td\",null,\"null\"),/*#__PURE__*/React.createElement(\"td\",null,\"Style class of the element.\")),/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"td\",null,\"style\"),/*#__PURE__*/React.createElement(\"td\",null,\"string\"),/*#__PURE__*/React.createElement(\"td\",null,\"null\"),/*#__PURE__*/React.createElement(\"td\",null,\"Inline style of the element.\"))))),/*#__PURE__*/React.createElement(\"h5\",null,\"Events of Messages\"),/*#__PURE__*/React.createElement(\"div\",{className:\"doc-tablewrapper\"},/*#__PURE__*/React.createElement(\"table\",{className:\"doc-table\"},/*#__PURE__*/React.createElement(\"thead\",null,/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"th\",null,\"Name\"),/*#__PURE__*/React.createElement(\"th\",null,\"Parameters\"),/*#__PURE__*/React.createElement(\"th\",null,\"Description\"))),/*#__PURE__*/React.createElement(\"tbody\",null,/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"td\",null,\"onRemove\"),/*#__PURE__*/React.createElement(\"td\",null,\"message: Removed message \"),/*#__PURE__*/React.createElement(\"td\",null,\"Callback to invoke when a message is removed.\")),/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"td\",null,\"onClick\"),/*#__PURE__*/React.createElement(\"td\",null,\"message: Clicked message \"),/*#__PURE__*/React.createElement(\"td\",null,\"Callback to invoke when a message gets clicked.\"))))),/*#__PURE__*/React.createElement(\"h5\",null,\"Styling\"),/*#__PURE__*/React.createElement(\"p\",null,\"Following is the list of structural style classes, for theming classes visit \",/*#__PURE__*/React.createElement(Link,{to:\"/theming\"},\" theming\"),\" page.\"),/*#__PURE__*/React.createElement(\"div\",{className:\"doc-tablewrapper\"},/*#__PURE__*/React.createElement(\"table\",{className:\"doc-table\"},/*#__PURE__*/React.createElement(\"thead\",null,/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"th\",null,\"Name\"),/*#__PURE__*/React.createElement(\"th\",null,\"Element\"))),/*#__PURE__*/React.createElement(\"tbody\",null,/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"td\",null,\"p-messages\"),/*#__PURE__*/React.createElement(\"td\",null,\"Container element.\")),/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"td\",null,\"p-messages-info\"),/*#__PURE__*/React.createElement(\"td\",null,\"Container element when displaying info messages.\")),/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"td\",null,\"p-messages-warn\"),/*#__PURE__*/React.createElement(\"td\",null,\"Container element when displaying warning messages.\")),/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"td\",null,\"p-messages-error\"),/*#__PURE__*/React.createElement(\"td\",null,\"Container element when displaying error messages.\")),/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"td\",null,\"p-messages-success\"),/*#__PURE__*/React.createElement(\"td\",null,\"Container element when displaying success messages.\")),/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"td\",null,\"p-messages-close\"),/*#__PURE__*/React.createElement(\"td\",null,\"Close icon.\")),/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"td\",null,\"p-messages-icon\"),/*#__PURE__*/React.createElement(\"td\",null,\"Severity icon.\")),/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"td\",null,\"p-messages-summary\"),/*#__PURE__*/React.createElement(\"td\",null,\"Summary of a message.\")),/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"td\",null,\"p-messages-detail\"),/*#__PURE__*/React.createElement(\"td\",null,\"Detail of a message.\")))),/*#__PURE__*/React.createElement(\"h5\",null,\"Dependencies\"),/*#__PURE__*/React.createElement(\"ul\",null,/*#__PURE__*/React.createElement(\"li\",null,\"react-transition-group\")))),useLiveEditorTabs({name:'MessagesDemo',sources:this.sources})));}}]);return MessagesDoc;}(Component);","map":{"version":3,"sources":["C:/Users/zura.ph/WebstormProjects/slotmaster-dashboard/src/showcase/messages/MessagesDoc.js"],"names":["React","Component","Link","TabView","TabPanel","CodeHighlight","useLiveEditorTabs","MessagesDoc","props","sources","tabName","content","name"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { TabView, TabPanel } from '../../components/tabview/TabView';\r\nimport { CodeHighlight } from '../codehighlight/CodeHighlight';\r\nimport { useLiveEditorTabs }from '../liveeditor/LiveEditor';\r\n\r\nexport class MessagesDoc extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.sources = {\r\n            'class': {\r\n                tabName: 'Class Source',\r\n                content: `\r\nimport React, { Component } from 'react';\r\nimport { Messages } from 'primereact/messages';\r\nimport { Message } from 'primereact/message';\r\nimport { InputText } from 'primereact/inputtext';\r\nimport { Button } from 'primereact/button';\r\n\r\nexport class MessagesDemo extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.addMessages = this.addMessages.bind(this);\r\n        this.clearMessages = this.clearMessages.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.msgs1.show([\r\n            { severity: 'success', summary: 'Success', detail: 'Message Content', sticky: true },\r\n            { severity: 'info', summary: 'Info', detail: 'Message Content', sticky: true },\r\n            { severity: 'warn', summary: 'Warning', detail: 'Message Content', sticky: true },\r\n            { severity: 'error', summary: 'Error', detail: 'Message Content', sticky: true }\r\n        ]);\r\n\r\n        this.msgs3.show({\r\n            severity: 'info', sticky: true, content: (\r\n                <React.Fragment>\r\n                    <img alt=\"logo\" src=\"showcase/images/logo.png\" onError={(e) => e.target.src='https://www.primefaces.org/wp-content/uploads/2020/05/placeholder.png'} width=\"32\" />\r\n                    <div className=\"p-ml-2\">Always bet on Prime.</div>\r\n                </React.Fragment>\r\n            )\r\n        });\r\n    }\r\n\r\n    addMessages() {\r\n        this.msgs2.show([\r\n            { severity: 'success', summary: 'Success', detail: 'Message Content', sticky: true },\r\n            { severity: 'info', summary: 'Info', detail: 'Message Content', sticky: true },\r\n            { severity: 'warn', summary: 'Warning', detail: 'Message Content', sticky: true },\r\n            { severity: 'error', summary: 'Error', detail: 'Message Content', sticky: true }\r\n        ]);\r\n    }\r\n\r\n    clearMessages() {\r\n        this.msgs2.clear();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div className=\"card\">\r\n                    <h5>Severities</h5>\r\n                    <Messages ref={(el) => this.msgs1 = el} />\r\n\r\n                    <h5>Dynamic</h5>\r\n                    <Button type=\"button\" onClick={this.addMessages} label=\"Show\" className=\"p-mr-2\" />\r\n                    <Button type=\"button\" onClick={this.clearMessages} icon=\"pi pi-times\" label=\"Clear\" className=\"p-button-secondary\" />\r\n\r\n                    <Messages ref={(el) => this.msgs2 = el} />\r\n\r\n                    <h5>Static Content</h5>\r\n                    <Messages ref={(el) => this.msgs3 = el} />\r\n\r\n                    <h5>Inline Message</h5>\r\n                    <p>Message component is used to display inline messages mostly within forms.</p>\r\n                    <div className=\"p-grid\">\r\n                        <div className=\"p-col-12 p-md-3\">\r\n                            <Message severity=\"info\" text=\"Message Content\" />\r\n                        </div>\r\n                        <div className=\"p-col-12 p-md-3\">\r\n                            <Message severity=\"success\" text=\"Message Content\" />\r\n                        </div>\r\n                        <div className=\"p-col-12 p-md-3\">\r\n                            <Message severity=\"warn\" text=\"Message Content\" />\r\n                        </div>\r\n                        <div className=\"p-col-12 p-md-3\">\r\n                            <Message severity=\"error\" text=\"Message Content\" />\r\n                        </div>\r\n                    </div>\r\n\r\n                    <h5>Validation Message</h5>\r\n                    <div className=\"p-formgroup-inline p-mb-2\">\r\n                        <label htmlFor=\"username1\" className=\"p-sr-only\">Username</label>\r\n                        <InputText id=\"username1\" placeholder=\"Username\" className=\"p-invalid p-mr-2\" />\r\n                        <Message severity=\"error\" text=\"Username is required\" />\r\n                    </div>\r\n                    <div className=\"p-formgroup-inline\">\r\n                        <label htmlFor=\"email\" className=\"p-sr-only\">email</label>\r\n                        <InputText id=\"email\" placeholder=\"Email\" className=\"p-invalid p-mr-2\" />\r\n                        <Message severity=\"error\" />\r\n                    </div>\r\n\r\n                    <h5>Form Layout</h5>\r\n                    <div className=\"p-field p-fluid\">\r\n                        <label htmlFor=\"username2\">Username</label>\r\n                        <InputText id=\"username2\" aria-describedby=\"username-help\" className=\"p-invalid p-mr-2\" />\r\n                        <small id=\"username-help\" className=\"p-error\">Username is not available.</small>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n                `\r\n            },\r\n            'hooks': {\r\n                tabName: 'Hooks Source',\r\n                content: `\r\nimport React, { useEffect, useRef } from 'react';\r\nimport { Messages } from 'primereact/messages';\r\nimport { Message } from 'primereact/message';\r\nimport { InputText } from 'primereact/inputtext';\r\nimport { Button } from 'primereact/button';\r\n\r\nconst MessagesDemo = () => {\r\n    const msgs1 = useRef(null);\r\n    const msgs2 = useRef(null);\r\n    const msgs3 = useRef(null);\r\n\r\n    useEffect(() => {\r\n        msgs1.current.show([\r\n            { severity: 'success', summary: 'Success', detail: 'Message Content', sticky: true },\r\n            { severity: 'info', summary: 'Info', detail: 'Message Content', sticky: true },\r\n            { severity: 'warn', summary: 'Warning', detail: 'Message Content', sticky: true },\r\n            { severity: 'error', summary: 'Error', detail: 'Message Content', sticky: true }\r\n        ]);\r\n\r\n        msgs3.current.show({\r\n            severity: 'info', sticky: true, content: (\r\n                <React.Fragment>\r\n                    <img alt=\"logo\" src=\"showcase/images/logo.png\" onError={(e) => e.target.src='https://www.primefaces.org/wp-content/uploads/2020/05/placeholder.png'} width=\"32\" />\r\n                    <div className=\"p-ml-2\">Always bet on Prime.</div>\r\n                </React.Fragment>\r\n            )\r\n        });\r\n    }, []); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n    const addMessages = () => {\r\n        msgs2.current.show([\r\n            { severity: 'success', summary: 'Success', detail: 'Message Content', sticky: true },\r\n            { severity: 'info', summary: 'Info', detail: 'Message Content', sticky: true },\r\n            { severity: 'warn', summary: 'Warning', detail: 'Message Content', sticky: true },\r\n            { severity: 'error', summary: 'Error', detail: 'Message Content', sticky: true }\r\n        ]);\r\n    }\r\n\r\n    const clearMessages = () => {\r\n        msgs2.current.clear();\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"card\">\r\n                <h5>Severities</h5>\r\n                <Messages ref={msgs1} />\r\n\r\n                <h5>Dynamic</h5>\r\n                <Button type=\"button\" onClick={addMessages} label=\"Show\" className=\"p-mr-2\" />\r\n                <Button type=\"button\" onClick={clearMessages} icon=\"pi pi-times\" label=\"Clear\" className=\"p-button-secondary\" />\r\n\r\n                <Messages ref={msgs2} />\r\n\r\n                <h5>Static Content</h5>\r\n                <Messages ref={msgs3} />\r\n\r\n                <h5>Inline Message</h5>\r\n                <p>Message component is used to display inline messages mostly within forms.</p>\r\n                <div className=\"p-grid\">\r\n                    <div className=\"p-col-12 p-md-3\">\r\n                        <Message severity=\"info\" text=\"Message Content\" />\r\n                    </div>\r\n                    <div className=\"p-col-12 p-md-3\">\r\n                        <Message severity=\"success\" text=\"Message Content\" />\r\n                    </div>\r\n                    <div className=\"p-col-12 p-md-3\">\r\n                        <Message severity=\"warn\" text=\"Message Content\" />\r\n                    </div>\r\n                    <div className=\"p-col-12 p-md-3\">\r\n                        <Message severity=\"error\" text=\"Message Content\" />\r\n                    </div>\r\n                </div>\r\n\r\n                <h5>Validation Message</h5>\r\n                <div className=\"p-formgroup-inline p-mb-2\">\r\n                    <label htmlFor=\"username1\" className=\"p-sr-only\">Username</label>\r\n                    <InputText id=\"username1\" placeholder=\"Username\" className=\"p-invalid p-mr-2\" />\r\n                    <Message severity=\"error\" text=\"Username is required\" />\r\n                </div>\r\n                <div className=\"p-formgroup-inline\">\r\n                    <label htmlFor=\"email\" className=\"p-sr-only\">email</label>\r\n                    <InputText id=\"email\" placeholder=\"Email\" className=\"p-invalid p-mr-2\" />\r\n                    <Message severity=\"error\" />\r\n                </div>\r\n\r\n                <h5>Form Layout</h5>\r\n                <div className=\"p-field p-fluid\">\r\n                    <label htmlFor=\"username2\">Username</label>\r\n                    <InputText id=\"username2\" aria-describedby=\"username-help\" className=\"p-invalid p-mr-2\" />\r\n                    <small id=\"username-help\" className=\"p-error\">Username is not available.</small>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n                `\r\n            },\r\n            'ts': {\r\n                tabName: 'TS Source',\r\n                content: `\r\nimport React, { useEffect, useRef } from 'react';\r\nimport { Messages } from 'primereact/messages';\r\nimport { Message } from 'primereact/message';\r\nimport { InputText } from 'primereact/inputtext';\r\nimport { Button } from 'primereact/button';\r\n\r\nconst MessagesDemo = () => {\r\n    const msgs1 = useRef(null);\r\n    const msgs2 = useRef(null);\r\n    const msgs3 = useRef(null);\r\n\r\n    useEffect(() => {\r\n        msgs1.current.show([\r\n            { severity: 'success', summary: 'Success', detail: 'Message Content', sticky: true },\r\n            { severity: 'info', summary: 'Info', detail: 'Message Content', sticky: true },\r\n            { severity: 'warn', summary: 'Warning', detail: 'Message Content', sticky: true },\r\n            { severity: 'error', summary: 'Error', detail: 'Message Content', sticky: true }\r\n        ]);\r\n\r\n        msgs3.current.show({\r\n            severity: 'info', sticky: true, content: (\r\n                <React.Fragment>\r\n                    <img alt=\"logo\" src=\"showcase/images/logo.png\" onError={(e) => e.target.src='https://www.primefaces.org/wp-content/uploads/2020/05/placeholder.png'} width=\"32\" />\r\n                    <div className=\"p-ml-2\">Always bet on Prime.</div>\r\n                </React.Fragment>\r\n            )\r\n        });\r\n    }, []); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n    const addMessages = () => {\r\n        msgs2.current.show([\r\n            { severity: 'success', summary: 'Success', detail: 'Message Content', sticky: true },\r\n            { severity: 'info', summary: 'Info', detail: 'Message Content', sticky: true },\r\n            { severity: 'warn', summary: 'Warning', detail: 'Message Content', sticky: true },\r\n            { severity: 'error', summary: 'Error', detail: 'Message Content', sticky: true }\r\n        ]);\r\n    }\r\n\r\n    const clearMessages = () => {\r\n        msgs2.current.clear();\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"card\">\r\n                <h5>Severities</h5>\r\n                <Messages ref={msgs1} />\r\n\r\n                <h5>Dynamic</h5>\r\n                <Button type=\"button\" onClick={addMessages} label=\"Show\" className=\"p-mr-2\" />\r\n                <Button type=\"button\" onClick={clearMessages} icon=\"pi pi-times\" label=\"Clear\" className=\"p-button-secondary\" />\r\n\r\n                <Messages ref={msgs2} />\r\n\r\n                <h5>Static Content</h5>\r\n                <Messages ref={msgs3} />\r\n\r\n                <h5>Inline Message</h5>\r\n                <p>Message component is used to display inline messages mostly within forms.</p>\r\n                <div className=\"p-grid\">\r\n                    <div className=\"p-col-12 p-md-3\">\r\n                        <Message severity=\"info\" text=\"Message Content\" />\r\n                    </div>\r\n                    <div className=\"p-col-12 p-md-3\">\r\n                        <Message severity=\"success\" text=\"Message Content\" />\r\n                    </div>\r\n                    <div className=\"p-col-12 p-md-3\">\r\n                        <Message severity=\"warn\" text=\"Message Content\" />\r\n                    </div>\r\n                    <div className=\"p-col-12 p-md-3\">\r\n                        <Message severity=\"error\" text=\"Message Content\" />\r\n                    </div>\r\n                </div>\r\n\r\n                <h5>Validation Message</h5>\r\n                <div className=\"p-formgroup-inline p-mb-2\">\r\n                    <label htmlFor=\"username1\" className=\"p-sr-only\">Username</label>\r\n                    <InputText id=\"username1\" placeholder=\"Username\" className=\"p-invalid p-mr-2\" />\r\n                    <Message severity=\"error\" text=\"Username is required\" />\r\n                </div>\r\n                <div className=\"p-formgroup-inline\">\r\n                    <label htmlFor=\"email\" className=\"p-sr-only\">email</label>\r\n                    <InputText id=\"email\" placeholder=\"Email\" className=\"p-invalid p-mr-2\" />\r\n                    <Message severity=\"error\" />\r\n                </div>\r\n\r\n                <h5>Form Layout</h5>\r\n                <div className=\"p-field p-fluid\">\r\n                    <label htmlFor=\"username2\">Username</label>\r\n                    <InputText id=\"username2\" aria-describedby=\"username-help\" className=\"p-invalid p-mr-2\" />\r\n                    <small id=\"username-help\" className=\"p-error\">Username is not available.</small>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n                `\r\n            }\r\n        }\r\n    }\r\n\r\n    shouldComponentUpdate() {\r\n        return false;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"content-section documentation\">\r\n                <TabView>\r\n                    <TabPanel header=\"Documentation\">\r\n                        <h5>Import</h5>\r\n<CodeHighlight lang=\"js\">\r\n{`\r\nimport { Messages } from 'primereact/messages';\r\nimport { Message } from 'primereact/message';\r\n`}\r\n</CodeHighlight>\r\n\r\n                        <h5>Getting Started</h5>\r\n                        <p>A single message is specified by the Message interface in PrimeReact that defines various properties such as severity,\r\n               summary and detail. Messages are displayed by using the <i>show</i> method on the ref of the Messages instance.</p>\r\n\r\n                        <p>Note that for animations, messages requires react-transition-group package.</p>\r\n\r\n<CodeHighlight>\r\n{`\r\n<Messages ref={messages}></Messages>\r\n`}\r\n</CodeHighlight>\r\n\r\n<CodeHighlight lang=\"js\">\r\n{`\r\nmessages.current.show({severity: 'success', summary: 'Success Message', detail: 'Order submitted'});\r\n`}\r\n</CodeHighlight>\r\n\r\n                        <h5>Message API</h5>\r\n                        <div className=\"doc-tablewrapper\">\r\n                            <table className=\"doc-table\">\r\n                                <thead>\r\n                                    <tr>\r\n                                        <th>Name</th>\r\n                                        <th>Type</th>\r\n                                        <th>Default</th>\r\n                                        <th>Description</th>\r\n                                    </tr>\r\n                                </thead>\r\n                                <tbody>\r\n                                    <tr>\r\n                                        <td>severity</td>\r\n                                        <td>string</td>\r\n                                        <td>null</td>\r\n                                        <td>Severity of the message.</td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>content</td>\r\n                                        <td>element</td>\r\n                                        <td>null</td>\r\n                                        <td>Template of the message.</td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>summary</td>\r\n                                        <td>element</td>\r\n                                        <td>null</td>\r\n                                        <td>Summary content of the message.</td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>detail</td>\r\n                                        <td>element</td>\r\n                                        <td>null</td>\r\n                                        <td>Detail content of the message.</td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>closable</td>\r\n                                        <td>boolean</td>\r\n                                        <td>true</td>\r\n                                        <td>Whether the message can be closed manually using the close icon.</td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>sticky</td>\r\n                                        <td>element</td>\r\n                                        <td>null</td>\r\n                                        <td>When enabled, message is not removed automatically.</td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>life</td>\r\n                                        <td>number</td>\r\n                                        <td>3000</td>\r\n                                        <td>Delay in milliseconds to close the message automatically.</td>\r\n                                    </tr>\r\n                                </tbody>\r\n                            </table>\r\n                        </div>\r\n\r\n                        <h5>Severities</h5>\r\n                        <p>There are four possible values for the severity of a message.</p>\r\n\r\n                        <ul>\r\n                            <li>success</li>\r\n                            <li>info</li>\r\n                            <li>warn</li>\r\n                            <li>error</li>\r\n                        </ul>\r\n\r\n                        <h5>Showing Messages</h5>\r\n                        <p>Show method accepts either a single message or an array of messages.</p>\r\n\r\n<CodeHighlight>\r\n{`\r\n<Messages ref={messages}></Messages>\r\n\r\n<Button onClick={showSuccess} label=\"Success\" className=\"p-button-success\" />\r\n<Button onClick={showInfo} label=\"Info\" className=\"p-button-info\" />\r\n<Button onClick={showWarn} label=\"Warn\" className=\"p-button-warning\" />\r\n<Button onClick={showError} label=\"Error\" className=\"p-button-danger\" />\r\n<Button onClick={showMultiple} label=\"Multiple\" />\r\n`}\r\n</CodeHighlight>\r\n\r\n<CodeHighlight lang=\"js\">\r\n{`\r\nconst showSuccess = () => {\r\n    messages.current.show({ severity: 'success', summary: 'Success Message', detail: 'Order submitted' });\r\n}\r\n\r\nconst showInfo = () => {\r\n    messages.current.show({ severity: 'info', summary: 'Info Message', detail: 'PrimeReact rocks' });\r\n}\r\n\r\nconst showWarn = () => {\r\n    messages.current.show({ severity: 'warn', summary: 'Warn Message', detail: 'There are unsaved changes' });\r\n}\r\n\r\nconst showError = () => {\r\n    messages.current.show({ severity: 'error', summary: 'Error Message', detail: 'Validation failed' });\r\n}\r\n\r\nconst showMultiple = () => {\r\n    messages.current.show([\r\n        {severity:'info', summary:'Message 1', detail:'PrimeReact rocks'},\r\n        {severity:'info', summary:'Message 2', detail:'PrimeReact rocks'},\r\n        {severity:'info', summary:'Message 3', detail:'PrimeFaces rocks'}\r\n    ]);\r\n}\r\n`}\r\n</CodeHighlight>\r\n\r\n                        <h5>Clearing Messages</h5>\r\n                        <p><i>clear()</i> method removes all messages.</p>\r\n\r\n<CodeHighlight lang=\"js\">\r\n{`\r\nmessages.current.clear();\r\n`}\r\n</CodeHighlight>\r\n\r\n                        <h5>Replacing Messages</h5>\r\n                        <p><i>replace(newMessages)</i> method adds new messages after removing all old messages.</p>\r\n\r\n<CodeHighlight lang=\"js\">\r\n{`\r\nmessages.current.replace(newMessages);\r\n`}\r\n</CodeHighlight>\r\n\r\n                        <h5>Closable</h5>\r\n                        <p>Messages are closable by default resulting in a close icon being displayed on top right corner. In order to disable closable messages, set <i>closable</i> to false.</p>\r\n\r\n<CodeHighlight lang=\"js\">\r\n{`\r\nmessages.current.show({closable: false, severity: 'error', summary: 'Error Message', detail: 'Validation failed'});\r\n`}\r\n</CodeHighlight>\r\n\r\n                        <h5>Sticky</h5>\r\n                        <p>Messages are cleared automatically after the timeout defined by <i>life</i> property which is 3 seconds by default. Use <i>sticky</i> mode to make them stay until\r\n                they are manually removed.</p>\r\n\r\n<CodeHighlight lang=\"js\">\r\n{`\r\n//sticky\r\nmessages.current.show({ sticky: true, severity: 'error', summary: 'Error Message', detail: 'Validation failed' });\r\n\r\n//automatically removed after 5 seconds\r\nmessages.current.show({ life: 5000, severity: 'error', summary: 'Error Message', detail: 'Validation failed' });\r\n`}\r\n</CodeHighlight>\r\n\r\n\r\n                        <h5>Message Component</h5>\r\n                        <p>Message component is useful in cases where a single message needs to be displayed related to an element such as forms. It has two properties, <i>severity</i> and <i>text</i> of the message.</p>\r\n<CodeHighlight>\r\n{`\r\n<h5>Inline Message CSS</h5>\r\n<p>CSS helpers to display inline messages mostly within forms.</p>\r\n<Message severity=\"info\" text=\"PrimeNG Rocks\"></Message>\r\n<Message severity=\"success\" text=\"Record Saved\"></Message>\r\n<Message severity=\"warn\" text=\"Are you sure?\"></Message>\r\n<Message severity=\"error\" text=\"Field is required\"></Message>\r\n`}\r\n</CodeHighlight>\r\n\r\n                        <h5>Properties of Message</h5>\r\n                        <div className=\"doc-tablewrapper\">\r\n                            <table className=\"doc-table\">\r\n                                <thead>\r\n                                    <tr>\r\n                                        <th>Name</th>\r\n                                        <th>Type</th>\r\n                                        <th>Default</th>\r\n                                        <th>Description</th>\r\n                                    </tr>\r\n                                </thead>\r\n                                <tbody>\r\n                                    <tr>\r\n                                        <td>id</td>\r\n                                        <td>string</td>\r\n                                        <td>null</td>\r\n                                        <td>Unique identifier of the element.</td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>className</td>\r\n                                        <td>string</td>\r\n                                        <td>null</td>\r\n                                        <td>Style class of the element.</td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>style</td>\r\n                                        <td>string</td>\r\n                                        <td>null</td>\r\n                                        <td>Inline style of the element.</td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>severity</td>\r\n                                        <td>string</td>\r\n                                        <td>null</td>\r\n                                        <td>Severity level of the message.</td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>style</td>\r\n                                        <td>string</td>\r\n                                        <td>null</td>\r\n                                        <td>Message text.</td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>content</td>\r\n                                        <td>element</td>\r\n                                        <td>null</td>\r\n                                        <td>Template of the message.</td>\r\n                                    </tr>\r\n                                </tbody>\r\n                            </table>\r\n                        </div>\r\n\r\n                        <h5>Properties of Messages</h5>\r\n                        <div className=\"doc-tablewrapper\">\r\n                            <table className=\"doc-table\">\r\n                                <thead>\r\n                                    <tr>\r\n                                        <th>Name</th>\r\n                                        <th>Type</th>\r\n                                        <th>Default</th>\r\n                                        <th>Description</th>\r\n                                    </tr>\r\n                                </thead>\r\n                                <tbody>\r\n                                    <tr>\r\n                                        <td>id</td>\r\n                                        <td>string</td>\r\n                                        <td>null</td>\r\n                                        <td>Unique identifier of the element.</td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>className</td>\r\n                                        <td>string</td>\r\n                                        <td>null</td>\r\n                                        <td>Style class of the element.</td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>style</td>\r\n                                        <td>string</td>\r\n                                        <td>null</td>\r\n                                        <td>Inline style of the element.</td>\r\n                                    </tr>\r\n                                </tbody>\r\n                            </table>\r\n                        </div>\r\n\r\n                        <h5>Events of Messages</h5>\r\n                        <div className=\"doc-tablewrapper\">\r\n                            <table className=\"doc-table\">\r\n                                <thead>\r\n                                    <tr>\r\n                                        <th>Name</th>\r\n                                        <th>Parameters</th>\r\n                                        <th>Description</th>\r\n                                    </tr>\r\n                                </thead>\r\n                                <tbody>\r\n                                    <tr>\r\n                                        <td>onRemove</td>\r\n                                        <td>message: Removed message </td>\r\n                                        <td>Callback to invoke when a message is removed.</td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>onClick</td>\r\n                                        <td>message: Clicked message </td>\r\n                                        <td>Callback to invoke when a message gets clicked.</td>\r\n                                    </tr>\r\n                                </tbody>\r\n                            </table>\r\n                        </div>\r\n\r\n                        <h5>Styling</h5>\r\n                        <p>Following is the list of structural style classes, for theming classes visit <Link to=\"/theming\"> theming</Link> page.</p>\r\n                        <div className=\"doc-tablewrapper\">\r\n                            <table className=\"doc-table\">\r\n                                <thead>\r\n                                    <tr>\r\n                                        <th>Name</th>\r\n                                        <th>Element</th>\r\n                                    </tr>\r\n                                </thead>\r\n                                <tbody>\r\n                                    <tr>\r\n                                        <td>p-messages</td>\r\n                                        <td>Container element.</td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>p-messages-info</td>\r\n                                        <td>Container element when displaying info messages.</td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>p-messages-warn</td>\r\n                                        <td>Container element when displaying warning messages.</td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>p-messages-error</td>\r\n                                        <td>Container element when displaying error messages.</td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>p-messages-success</td>\r\n                                        <td>Container element when displaying success messages.</td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>p-messages-close</td>\r\n                                        <td>Close icon.</td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>p-messages-icon</td>\r\n                                        <td>Severity icon.</td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>p-messages-summary</td>\r\n                                        <td>Summary of a message.</td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>p-messages-detail</td>\r\n                                        <td>Detail of a message.</td>\r\n                                    </tr>\r\n                                </tbody>\r\n                            </table>\r\n\r\n                            <h5>Dependencies</h5>\r\n                            <ul>\r\n                                <li>react-transition-group</li>\r\n                            </ul>\r\n                        </div>\r\n\r\n                    </TabPanel>\r\n\r\n                    {\r\n                        useLiveEditorTabs({ name: 'MessagesDemo', sources: this.sources })\r\n                    }\r\n                </TabView>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}