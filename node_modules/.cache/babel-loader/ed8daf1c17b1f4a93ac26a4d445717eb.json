{"ast":null,"code":"import _classCallCheck from\"C:\\\\Users\\\\zura.ph\\\\WebstormProjects\\\\slotmaster-dashboard\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";import _createClass from\"C:\\\\Users\\\\zura.ph\\\\WebstormProjects\\\\slotmaster-dashboard\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";import _inherits from\"C:\\\\Users\\\\zura.ph\\\\WebstormProjects\\\\slotmaster-dashboard\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";import _createSuper from\"C:\\\\Users\\\\zura.ph\\\\WebstormProjects\\\\slotmaster-dashboard\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createSuper\";import React,{Component}from'react';import{Link}from'react-router-dom';import{TabView,TabPanel}from'../../components/tabview/TabView';import{CodeHighlight}from'../codehighlight/CodeHighlight';import{useLiveEditorTabs}from'../liveeditor/LiveEditor';export var PaginatorDoc=/*#__PURE__*/function(_Component){_inherits(PaginatorDoc,_Component);var _super=_createSuper(PaginatorDoc);function PaginatorDoc(props){var _this;_classCallCheck(this,PaginatorDoc);_this=_super.call(this,props);_this.sources={'class':{tabName:'Class Source',content:\"\\nimport React, { Component } from 'react';\\nimport { Paginator } from 'primereact/paginator';\\nimport { Button } from 'primereact/button';\\nimport { Ripple } from 'primereact/ripple';\\nimport { Dropdown } from 'primereact/dropdown';\\nimport { InputText } from 'primereact/inputtext';\\nimport { Slider } from 'primereact/slider';\\nimport { Tooltip } from 'primereact/tooltip';\\nimport classNames from 'classnames';\\nimport './PaginatorDemo.css';\\n\\nexport class PaginatorDemo extends Component {\\n\\n    constructor(props) {\\n        super(props);\\n\\n        this.state = {\\n            basicFirst: 0,\\n            basicRows: 10,\\n            customFirst1: 0,\\n            customRows1: 10,\\n            customFirst2: 0,\\n            customRows2: 10,\\n            customFirst3: 0,\\n            customRows3: 10,\\n            contentFirst: 0,\\n            currentPage: 1,\\n            pageInputTooltip: 'Press \\\\'Enter\\\\' key to go to this page.'\\n        };\\n\\n        this.onBasicPageChange = this.onBasicPageChange.bind(this);\\n        this.onCustomPageChange1 = this.onCustomPageChange1.bind(this);\\n        this.onCustomPageChange2 = this.onCustomPageChange2.bind(this);\\n        this.onCustomPageChange3 = this.onCustomPageChange3.bind(this);\\n        this.onContentPageChange = this.onContentPageChange.bind(this);\\n        this.onPageInputKeyDown = this.onPageInputKeyDown.bind(this);\\n        this.onPageInputChange = this.onPageInputChange.bind(this);\\n    }\\n\\n    onBasicPageChange(event) {\\n        this.setState({\\n            basicFirst: event.first,\\n            basicRows: event.rows\\n        });\\n    }\\n\\n    onCustomPageChange1(event) {\\n        this.setState({\\n            customFirst1: event.first,\\n            customRows1: event.rows,\\n            currentPage: event.page + 1\\n        });\\n    }\\n\\n    onCustomPageChange2(event) {\\n        this.setState({\\n            customFirst2: event.first,\\n            customRows2: event.rows\\n        });\\n    }\\n\\n    onCustomPageChange3(event) {\\n        this.setState({\\n            customFirst3: event.first,\\n            customRows3: event.rows\\n        });\\n    }\\n\\n    onContentPageChange(event) {\\n        this.setState({\\n            contentFirst: event.first,\\n            contentRows: event.rows\\n        });\\n    }\\n\\n    onPageInputKeyDown(event, options) {\\n        if (event.key === 'Enter') {\\n            const page = parseInt(this.state.currentPage);\\n            if (page < 0 || page > options.totalPages) {\\n                this.setState({ pageInputTooltip: `Value must be between 1 and ${options.totalPages}.`})\\n            }\\n            else {\\n                const first = this.state.currentPage ? options.rows * (page - 1) : 0;\\n\\n                this.setState({ customFirst1: first, pageInputTooltip: 'Press \\\\'Enter\\\\' key to go to this page.' });\\n            }\\n        }\\n    }\\n\\n    onPageInputChange(event) {\\n        this.setState({ currentPage: event.target.value });\\n    }\\n\\n    render() {\\n        const leftContent = <Button type=\\\"button\\\" icon=\\\"pi pi-refresh\\\" onClick={() => this.setState({ contentFirst: 0 })} />;\\n        const rightContent = <Button type=\\\"button\\\" icon=\\\"pi pi-search\\\" />;\\n        const template1 = {\\n            layout: 'PrevPageLink PageLinks NextPageLink RowsPerPageDropdown CurrentPageReport',\\n            'PrevPageLink': (options) => {\\n                return (\\n                    <button type=\\\"button\\\" className={options.className} onClick={options.onClick} disabled={options.disabled}>\\n                        <span className=\\\"p-p-3\\\">Previous</span>\\n                        <Ripple />\\n                    </button>\\n                )\\n            },\\n            'NextPageLink': (options) => {\\n                return (\\n                    <button type=\\\"button\\\" className={options.className} onClick={options.onClick} disabled={options.disabled}>\\n                        <span className=\\\"p-p-3\\\">Next</span>\\n                        <Ripple />\\n                    </button>\\n                )\\n            },\\n            'PageLinks': (options) => {\\n                if ((options.view.startPage === options.page && options.view.startPage !== 0) || (options.view.endPage === options.page && options.page + 1 !== options.totalPages)) {\\n                    const className = classNames(options.className, { 'p-disabled': true });\\n\\n                    return <span className={className} style={{ userSelect: 'none' }}>...</span>;\\n                }\\n\\n                return (\\n                    <button type=\\\"button\\\" className={options.className} onClick={options.onClick}>\\n                        {options.page + 1}\\n                        <Ripple />\\n                    </button>\\n                )\\n            },\\n            'RowsPerPageDropdown': (options) => {\\n                const dropdownOptions = [\\n                    { label: 10, value: 10 },\\n                    { label: 20, value: 20 },\\n                    { label: 30, value: 30 },\\n                    { label: 'All', value: options.totalRecords }\\n                ];\\n\\n                return <Dropdown value={options.value} options={dropdownOptions} onChange={options.onChange} appendTo={document.body} />;\\n            },\\n            'CurrentPageReport': (options) => {\\n                return (\\n                    <span className=\\\"p-mx-3\\\" style={{ color: 'var(--text-color)', userSelect: 'none' }}>\\n                        Go to <InputText size=\\\"2\\\" className=\\\"p-ml-1\\\" value={this.state.currentPage} tooltip={this.state.pageInputTooltip}\\n                            onKeyDown={(e) => this.onPageInputKeyDown(e, options)} onChange={this.onPageInputChange}/>\\n                    </span>\\n                )\\n            }\\n        };\\n        const template2 = {\\n            layout: 'RowsPerPageDropdown CurrentPageReport PrevPageLink NextPageLink',\\n            'RowsPerPageDropdown': (options) => {\\n                const dropdownOptions = [\\n                    { label: 5, value: 5 },\\n                    { label: 10, value: 10 },\\n                    { label: 20, value: 20 },\\n                    { label: 120, value: 120 }\\n                ];\\n\\n                return (\\n                    <>\\n                        <span className=\\\"p-mx-1\\\" style={{ color: 'var(--text-color)', userSelect: 'none' }}>Items per page: </span>\\n                        <Dropdown value={options.value} options={dropdownOptions} onChange={options.onChange} appendTo={document.body} />\\n                    </>\\n                );\\n            },\\n            'CurrentPageReport': (options) => {\\n                return (\\n                    <span style={{ color: 'var(--text-color)', userSelect: 'none', width: '120px', textAlign: 'center' }}>\\n                        {options.first} - {options.last} of {options.totalRecords}\\n                    </span>\\n                )\\n            }\\n        };\\n        const template3 = {\\n            layout: 'RowsPerPageDropdown PrevPageLink PageLinks NextPageLink CurrentPageReport',\\n            'RowsPerPageDropdown': (options) => {\\n                return (\\n                    <div className=\\\"p-d-flex p-ai-center\\\">\\n                        <Tooltip target=\\\".slider>.p-slider-handle\\\" content={`${options.value} / page`} position=\\\"top\\\" event=\\\"focus\\\" />\\n\\n                        <span className=\\\"p-mr-3\\\" style={{ color: 'var(--text-color)', userSelect: 'none' }}>Items per page: </span>\\n                        <Slider className=\\\"slider\\\" value={options.value} onChange={options.onChange} min={10} max={120} step={30} style={{ width: '10rem' }} />\\n                    </div>\\n                );\\n            },\\n            'CurrentPageReport': (options) => {\\n                return (\\n                    <span style={{ color: 'var(--text-color)', userSelect: 'none', width: '120px', textAlign: 'center' }}>\\n                        {options.first} - {options.last} of {options.totalRecords}\\n                    </span>\\n                )\\n            }\\n        }\\n\\n        return (\\n            <div className=\\\"paginator-demo\\\">\\n                <div className=\\\"card\\\">\\n                    <h5>Basic</h5>\\n                    <Paginator first={this.state.basicFirst} rows={this.state.basicRows} totalRecords={120} rowsPerPageOptions={[10, 20, 30]} onPageChange={this.onBasicPageChange}></Paginator>\\n\\n                    <h5>Custom Template</h5>\\n                    <Paginator template={template1} first={this.state.customFirst1} rows={this.state.customRows1} totalRecords={120} onPageChange={this.onCustomPageChange1}></Paginator>\\n                    <Paginator template={template2} first={this.state.customFirst2} rows={this.state.customRows2} totalRecords={120} onPageChange={this.onCustomPageChange2} className=\\\"p-jc-end p-my-3\\\"></Paginator>\\n                    <Paginator template={template3} first={this.state.customFirst3} rows={this.state.customRows3} totalRecords={120} onPageChange={this.onCustomPageChange3} className=\\\"p-jc-start p-my-3\\\"></Paginator>\\n\\n                    <h5>Left and Right Content</h5>\\n                    <Paginator first={this.state.contentFirst} rows={1} totalRecords={12} onPageChange={this.onContentPageChange}\\n                        leftContent={leftContent} rightContent={rightContent}\\n                        template=\\\"FirstPageLink PrevPageLink CurrentPageReport NextPageLink LastPageLink\\\"></Paginator>\\n\\n                    <div className=\\\"image-gallery\\\">\\n                        <img alt={this.state.contentFirst} src={`showcase/demo/images/nature/nature${this.state.contentFirst + 1}.jpg`} onError={(e) => e.target.src = 'https://www.primefaces.org/wp-content/uploads/2020/05/placeholder.png'} />\\n                    </div>\\n                </div>\\n            </div>\\n        );\\n    }\\n}\\n                \"},'hooks':{tabName:'Hooks Source',content:\"\\nimport React, { useState } from 'react';\\nimport { Paginator } from 'primereact/paginator';\\nimport { Button } from 'primereact/button';\\nimport { Ripple } from 'primereact/ripple';\\nimport { Dropdown } from 'primereact/dropdown';\\nimport { InputText } from 'primereact/inputtext';\\nimport { Slider } from 'primereact/slider';\\nimport { Tooltip } from 'primereact/tooltip';\\nimport classNames from 'classnames';\\nimport './PaginatorDemo.css';\\n\\nconst PaginatorDemo = () => {\\n    const [basicFirst, setBasicFirst] = useState(0);\\n    const [basicRows, setBasicRows] = useState(10);\\n    const [basicCustomFirst1, setBasicCustomFirst1] = useState(0);\\n    const [customRows1, setCustomRows1] = useState(10);\\n    const [customFirst2, setCustomFirst2] = useState(0);\\n    const [customRows2, setCustomRows2] = useState(10);\\n    const [customFirst3, setCustomFirst3] = useState(0);\\n    const [customRows3, setCustomRows3] = useState(10);\\n    const [contentFirst, setContentFirst] = useState(0);\\n    const [currentPage, setCurrentPage] = useState(1);\\n    const [pageInputTooltip, setPageInputTooltip]: useState('Press \\\\'Enter\\\\' key to go to this page.');\\n\\n    const onBasicPageChange = (event) => {\\n        setBasicFirst(event.first);\\n        setBasicRows(event.rows);\\n    }\\n\\n    const onCustomPageChange1 = (event) => {\\n        setCustomFirst1(event.first);\\n        setCustomRows1(event.rows);\\n        setCurrentPage(event.page + 1);\\n    }\\n\\n    const onCustomPageChange2 = (event) => {\\n        setCustomFirst2(event.first);\\n        setCustomRows2(event.rows);\\n    }\\n\\n    const onCustomPageChange3 = (event) => {\\n        setCustomFirst3(event.first);\\n        setCustomRows3(event.rows);\\n    }\\n\\n    const onContentPageChange = (event) => {\\n        setContentFirst(event.first);\\n        setContentRows(event.rows);\\n    }\\n\\n    const onPageInputKeyDown = (event, options) => {\\n        if (event.key === 'Enter') {\\n            const page = parseInt(currentPage);\\n            if (page < 0 || page > options.totalPages) {\\n                setPageInputTooltip(`Value must be between 1 and ${options.totalPages}.`);\\n            }\\n            else {\\n                const first = currentPage ? options.rows * (page - 1) : 0;\\n\\n                setCustomFirst1(first);\\n                setPageInputTooltip('Press \\\\'Enter\\\\' key to go to this page.');\\n            }\\n        }\\n    }\\n\\n    const onPageInputChange = (event) => {\\n        setCurrentPage(event.target.value);\\n    }\\n\\n    const leftContent = <Button type=\\\"button\\\" icon=\\\"pi pi-refresh\\\" onClick={() => setContentFirst(0)} />;\\n    const rightContent = <Button type=\\\"button\\\" icon=\\\"pi pi-search\\\" />;\\n    const template1 = {\\n        layout: 'PrevPageLink PageLinks NextPageLink RowsPerPageDropdown CurrentPageReport',\\n        'PrevPageLink': (options) => {\\n            return (\\n                <button type=\\\"button\\\" className={options.className} onClick={options.onClick} disabled={options.disabled}>\\n                    <span className=\\\"p-p-3\\\">Previous</span>\\n                    <Ripple />\\n                </button>\\n            )\\n        },\\n        'NextPageLink': (options) => {\\n            return (\\n                <button type=\\\"button\\\" className={options.className} onClick={options.onClick} disabled={options.disabled}>\\n                    <span className=\\\"p-p-3\\\">Next</span>\\n                    <Ripple />\\n                </button>\\n            )\\n        },\\n        'PageLinks': (options) => {\\n            if ((options.view.startPage === options.page && options.view.startPage !== 0) || (options.view.endPage === options.page && options.page + 1 !== options.totalPages)) {\\n                const className = classNames(options.className, { 'p-disabled': true });\\n\\n                return <span className={className} style={{ userSelect: 'none' }}>...</span>;\\n            }\\n\\n            return (\\n                <button type=\\\"button\\\" className={options.className} onClick={options.onClick}>\\n                    {options.page + 1}\\n                    <Ripple />\\n                </button>\\n            )\\n        },\\n        'RowsPerPageDropdown': (options) => {\\n            const dropdownOptions = [\\n                { label: 10, value: 10 },\\n                { label: 20, value: 20 },\\n                { label: 30, value: 30 },\\n                { label: 'All', value: options.totalRecords }\\n            ];\\n\\n            return <Dropdown value={options.value} options={dropdownOptions} onChange={options.onChange} appendTo={document.body} />;\\n        },\\n        'CurrentPageReport': (options) => {\\n            return (\\n                <span className=\\\"p-mx-3\\\" style={{ color: 'var(--text-color)', userSelect: 'none' }}>\\n                    Go to <InputText size=\\\"2\\\" className=\\\"p-ml-1\\\" value={currentPage} tooltip={pageInputTooltip}\\n                        onKeyDown={(e) => onPageInputKeyDown(e, options)} onChange={onPageInputChange}/>\\n                </span>\\n            )\\n        }\\n    };\\n    const template2 = {\\n        layout: 'RowsPerPageDropdown CurrentPageReport PrevPageLink NextPageLink',\\n        'RowsPerPageDropdown': (options) => {\\n            const dropdownOptions = [\\n                { label: 5, value: 5 },\\n                { label: 10, value: 10 },\\n                { label: 20, value: 20 },\\n                { label: 120, value: 120 }\\n            ];\\n\\n            return (\\n                <>\\n                    <span className=\\\"p-mx-1\\\" style={{ color: 'var(--text-color)', userSelect: 'none' }}>Items per page: </span>\\n                    <Dropdown value={options.value} options={dropdownOptions} onChange={options.onChange} appendTo={document.body} />\\n                </>\\n            );\\n        },\\n        'CurrentPageReport': (options) => {\\n            return (\\n                <span style={{ color: 'var(--text-color)', userSelect: 'none', width: '120px', textAlign: 'center' }}>\\n                    {options.first} - {options.last} of {options.totalRecords}\\n                </span>\\n            )\\n        }\\n    };\\n    const template3 = {\\n        layout: 'RowsPerPageDropdown PrevPageLink PageLinks NextPageLink CurrentPageReport',\\n        'RowsPerPageDropdown': (options) => {\\n            return (\\n                <div className=\\\"p-d-flex p-ai-center\\\">\\n                    <Tooltip target=\\\".slider>.p-slider-handle\\\" content={`${options.value} / page`} position=\\\"top\\\" event=\\\"focus\\\" />\\n\\n                    <span className=\\\"p-mr-3\\\" style={{ color: 'var(--text-color)', userSelect: 'none' }}>Items per page: </span>\\n                    <Slider className=\\\"slider\\\" value={options.value} onChange={options.onChange} min={10} max={120} step={30} style={{ width: '10rem' }} />\\n                </div>\\n            );\\n        },\\n        'CurrentPageReport': (options) => {\\n            return (\\n                <span style={{ color: 'var(--text-color)', userSelect: 'none', width: '120px', textAlign: 'center' }}>\\n                    {options.first} - {options.last} of {options.totalRecords}\\n                </span>\\n            )\\n        }\\n    }\\n\\n    return (\\n        <div className=\\\"paginator-demo\\\">\\n            <div className=\\\"card\\\">\\n                <h5>Basic</h5>\\n                <Paginator first={basicFirst} rows={basicRows} totalRecords={120} rowsPerPageOptions={[10, 20, 30]} onPageChange={onBasicPageChange}></Paginator>\\n\\n                <h5>Custom Template</h5>\\n                <Paginator template={template1} first={customFirst1} rows={customRows1} totalRecords={120} onPageChange={onCustomPageChange1}></Paginator>\\n                <Paginator template={template2} first={customFirst2} rows={customRows2} totalRecords={120} onPageChange={onCustomPageChange2} className=\\\"p-jc-end p-my-3\\\"></Paginator>\\n                <Paginator template={template3} first={customFirst3} rows={customRows3} totalRecords={120} onPageChange={onCustomPageChange3} className=\\\"p-jc-start p-my-3\\\"></Paginator>\\n\\n                <h5>Left and Right Content</h5>\\n                <Paginator first={contentFirst} rows={1} totalRecords={12} onPageChange={onContentPageChange}\\n                    leftContent={leftContent} rightContent={rightContent}\\n                    template=\\\"FirstPageLink PrevPageLink CurrentPageReport NextPageLink LastPageLink\\\"></Paginator>\\n\\n                <div className=\\\"image-gallery\\\">\\n                    <img alt={contentFirst} src={`showcase/demo/images/nature/nature${contentFirst + 1}.jpg`} onError={(e) => e.target.src = 'https://www.primefaces.org/wp-content/uploads/2020/05/placeholder.png'} />\\n                </div>\\n            </div>\\n        </div>\\n    );\\n}\\n                \"},'ts':{tabName:'TS Source',content:\"\\nimport React, { useState } from 'react';\\nimport { Paginator } from 'primereact/paginator';\\nimport { Button } from 'primereact/button';\\nimport { Ripple } from 'primereact/ripple';\\nimport { Dropdown } from 'primereact/dropdown';\\nimport { InputText } from 'primereact/inputtext';\\nimport { Slider } from 'primereact/slider';\\nimport { Tooltip } from 'primereact/tooltip';\\nimport classNames from 'classnames';\\nimport './PaginatorDemo.css';\\n\\nconst PaginatorDemo = () => {\\n    const [basicFirst, setBasicFirst] = useState(0);\\n    const [basicRows, setBasicRows] = useState(10);\\n    const [basicCustomFirst1, setBasicCustomFirst1] = useState(0);\\n    const [customRows1, setCustomRows1] = useState(10);\\n    const [customFirst2, setCustomFirst2] = useState(0);\\n    const [customRows2, setCustomRows2] = useState(10);\\n    const [customFirst3, setCustomFirst3] = useState(0);\\n    const [customRows3, setCustomRows3] = useState(10);\\n    const [contentFirst, setContentFirst] = useState(0);\\n    const [currentPage, setCurrentPage] = useState(1);\\n    const [pageInputTooltip, setPageInputTooltip]: useState('Press \\\\'Enter\\\\' key to go to this page.');\\n\\n    const onBasicPageChange = (event) => {\\n        setBasicFirst(event.first);\\n        setBasicRows(event.rows);\\n    }\\n\\n    const onCustomPageChange1 = (event) => {\\n        setCustomFirst1(event.first);\\n        setCustomRows1(event.rows);\\n        setCurrentPage(event.page + 1);\\n    }\\n\\n    const onCustomPageChange2 = (event) => {\\n        setCustomFirst2(event.first);\\n        setCustomRows2(event.rows);\\n    }\\n\\n    const onCustomPageChange3 = (event) => {\\n        setCustomFirst3(event.first);\\n        setCustomRows3(event.rows);\\n    }\\n\\n    const onContentPageChange = (event) => {\\n        setContentFirst(event.first);\\n        setContentRows(event.rows);\\n    }\\n\\n    const onPageInputKeyDown = (event, options) => {\\n        if (event.key === 'Enter') {\\n            const page = parseInt(currentPage);\\n            if (page < 0 || page > options.totalPages) {\\n                setPageInputTooltip(`Value must be between 1 and ${options.totalPages}.`);\\n            }\\n            else {\\n                const first = currentPage ? options.rows * (page - 1) : 0;\\n\\n                setCustomFirst1(first);\\n                setPageInputTooltip('Press \\\\'Enter\\\\' key to go to this page.');\\n            }\\n        }\\n    }\\n\\n    const onPageInputChange = (event) => {\\n        setCurrentPage(event.target.value);\\n    }\\n\\n    const leftContent = <Button type=\\\"button\\\" icon=\\\"pi pi-refresh\\\" onClick={() => setContentFirst(0)} />;\\n    const rightContent = <Button type=\\\"button\\\" icon=\\\"pi pi-search\\\" />;\\n    const template1 = {\\n        layout: 'PrevPageLink PageLinks NextPageLink RowsPerPageDropdown CurrentPageReport',\\n        'PrevPageLink': (options) => {\\n            return (\\n                <button type=\\\"button\\\" className={options.className} onClick={options.onClick} disabled={options.disabled}>\\n                    <span className=\\\"p-p-3\\\">Previous</span>\\n                    <Ripple />\\n                </button>\\n            )\\n        },\\n        'NextPageLink': (options) => {\\n            return (\\n                <button type=\\\"button\\\" className={options.className} onClick={options.onClick} disabled={options.disabled}>\\n                    <span className=\\\"p-p-3\\\">Next</span>\\n                    <Ripple />\\n                </button>\\n            )\\n        },\\n        'PageLinks': (options) => {\\n            if ((options.view.startPage === options.page && options.view.startPage !== 0) || (options.view.endPage === options.page && options.page + 1 !== options.totalPages)) {\\n                const className = classNames(options.className, { 'p-disabled': true });\\n\\n                return <span className={className} style={{ userSelect: 'none' }}>...</span>;\\n            }\\n\\n            return (\\n                <button type=\\\"button\\\" className={options.className} onClick={options.onClick}>\\n                    {options.page + 1}\\n                    <Ripple />\\n                </button>\\n            )\\n        },\\n        'RowsPerPageDropdown': (options) => {\\n            const dropdownOptions = [\\n                { label: 10, value: 10 },\\n                { label: 20, value: 20 },\\n                { label: 30, value: 30 },\\n                { label: 'All', value: options.totalRecords }\\n            ];\\n\\n            return <Dropdown value={options.value} options={dropdownOptions} onChange={options.onChange} appendTo={document.body} />;\\n        },\\n        'CurrentPageReport': (options) => {\\n            return (\\n                <span className=\\\"p-mx-3\\\" style={{ color: 'var(--text-color)', userSelect: 'none' }}>\\n                    Go to <InputText size=\\\"2\\\" className=\\\"p-ml-1\\\" value={currentPage} tooltip={pageInputTooltip}\\n                        onKeyDown={(e) => onPageInputKeyDown(e, options)} onChange={onPageInputChange}/>\\n                </span>\\n            )\\n        }\\n    };\\n    const template2 = {\\n        layout: 'RowsPerPageDropdown CurrentPageReport PrevPageLink NextPageLink',\\n        'RowsPerPageDropdown': (options) => {\\n            const dropdownOptions = [\\n                { label: 5, value: 5 },\\n                { label: 10, value: 10 },\\n                { label: 20, value: 20 },\\n                { label: 120, value: 120 }\\n            ];\\n\\n            return (\\n                <>\\n                    <span className=\\\"p-mx-1\\\" style={{ color: 'var(--text-color)', userSelect: 'none' }}>Items per page: </span>\\n                    <Dropdown value={options.value} options={dropdownOptions} onChange={options.onChange} appendTo={document.body} />\\n                </>\\n            );\\n        },\\n        'CurrentPageReport': (options) => {\\n            return (\\n                <span style={{ color: 'var(--text-color)', userSelect: 'none', width: '120px', textAlign: 'center' }}>\\n                    {options.first} - {options.last} of {options.totalRecords}\\n                </span>\\n            )\\n        }\\n    };\\n    const template3 = {\\n        layout: 'RowsPerPageDropdown PrevPageLink PageLinks NextPageLink CurrentPageReport',\\n        'RowsPerPageDropdown': (options) => {\\n            return (\\n                <div className=\\\"p-d-flex p-ai-center\\\">\\n                    <Tooltip target=\\\".slider>.p-slider-handle\\\" content={`${options.value} / page`} position=\\\"top\\\" event=\\\"focus\\\" />\\n\\n                    <span className=\\\"p-mr-3\\\" style={{ color: 'var(--text-color)', userSelect: 'none' }}>Items per page: </span>\\n                    <Slider className=\\\"slider\\\" value={options.value} onChange={options.onChange} min={10} max={120} step={30} style={{ width: '10rem' }} />\\n                </div>\\n            );\\n        },\\n        'CurrentPageReport': (options) => {\\n            return (\\n                <span style={{ color: 'var(--text-color)', userSelect: 'none', width: '120px', textAlign: 'center' }}>\\n                    {options.first} - {options.last} of {options.totalRecords}\\n                </span>\\n            )\\n        }\\n    }\\n\\n    return (\\n        <div className=\\\"paginator-demo\\\">\\n            <div className=\\\"card\\\">\\n                <h5>Basic</h5>\\n                <Paginator first={basicFirst} rows={basicRows} totalRecords={120} rowsPerPageOptions={[10, 20, 30]} onPageChange={onBasicPageChange}></Paginator>\\n\\n                <h5>Custom Template</h5>\\n                <Paginator template={template1} first={customFirst1} rows={customRows1} totalRecords={120} onPageChange={onCustomPageChange1}></Paginator>\\n                <Paginator template={template2} first={customFirst2} rows={customRows2} totalRecords={120} onPageChange={onCustomPageChange2} className=\\\"p-jc-end p-my-3\\\"></Paginator>\\n                <Paginator template={template3} first={customFirst3} rows={customRows3} totalRecords={120} onPageChange={onCustomPageChange3} className=\\\"p-jc-start p-my-3\\\"></Paginator>\\n\\n                <h5>Left and Right Content</h5>\\n                <Paginator first={contentFirst} rows={1} totalRecords={12} onPageChange={onContentPageChange}\\n                    leftContent={leftContent} rightContent={rightContent}\\n                    template=\\\"FirstPageLink PrevPageLink CurrentPageReport NextPageLink LastPageLink\\\"></Paginator>\\n\\n                <div className=\\\"image-gallery\\\">\\n                    <img alt={contentFirst} src={`showcase/demo/images/nature/nature${contentFirst + 1}.jpg`} onError={(e) => e.target.src = 'https://www.primefaces.org/wp-content/uploads/2020/05/placeholder.png'} />\\n                </div>\\n            </div>\\n        </div>\\n    );\\n}\\n                \"}};_this.extFiles={'src/demo/PaginatorDemo.css':{content:\"\\n.paginator-demo .p-button.p-button-icon-only {\\n    border-radius: 0;\\n}\\n\\n.paginator-demo .image-gallery {\\n    text-align: center;\\n    padding: 1rem;\\n}\\n                \"}};return _this;}_createClass(PaginatorDoc,[{key:\"shouldComponentUpdate\",value:function shouldComponentUpdate(){return false;}},{key:\"render\",value:function render(){return/*#__PURE__*/React.createElement(\"div\",{className:\"content-section documentation\"},/*#__PURE__*/React.createElement(TabView,null,/*#__PURE__*/React.createElement(TabPanel,{header:\"Documentation\"},/*#__PURE__*/React.createElement(\"h5\",null,\"Import\"),/*#__PURE__*/React.createElement(CodeHighlight,{lang:\"js\"},\"\\nimport { Paginator } from 'primereact/paginator';\\n\"),/*#__PURE__*/React.createElement(\"h5\",null,\"Getting Started\"),/*#__PURE__*/React.createElement(\"p\",null,\"Paginator is used as a controlled component with \",/*#__PURE__*/React.createElement(\"i\",null,\"first\"),\", \",/*#__PURE__*/React.createElement(\"i\",null,\"rows\"),\" (optional) and \",/*#__PURE__*/React.createElement(\"i\",null,\"onPageChange\"),\" properties.\"),/*#__PURE__*/React.createElement(CodeHighlight,null,\"\\n<Paginator first={first} rows={rows} onPageChange={(e) => setFirst(e.first)}></Paginator>\\n\"),/*#__PURE__*/React.createElement(\"h5\",null,\"Rows and TotalRecords\"),/*#__PURE__*/React.createElement(\"p\",null,\"Rows and TotalRecords define how many pages the paginator should display. Paginator below will have 10 pages.\"),/*#__PURE__*/React.createElement(CodeHighlight,null,\"\\n<Paginator rows={10} totalRecords={120} first={first} onPageChange={(e) => setFirst(e.first)}></Paginator>\\n\"),/*#__PURE__*/React.createElement(\"h5\",null,\"Rows Per Page\"),/*#__PURE__*/React.createElement(\"p\",null,\"Number of items per page can be changed by the user using a dropdown if you define rowsPerPageOptions as an array of possible values. In this case, rows property should also be updated\"),/*#__PURE__*/React.createElement(CodeHighlight,{lang:\"js\"},\"\\nconst onPageChange = (e) => {\\n    setFirst(e.first);\\n    setRows(e.rows);\\n}\\n\"),/*#__PURE__*/React.createElement(CodeHighlight,null,\"\\n<Paginator first={first} rows={rows} totalRecords={120} rowsPerPageOptions={[10,20,30]} onPageChange={onPageChange}></Paginator>\\n\"),/*#__PURE__*/React.createElement(\"h5\",null,\"Template\"),/*#__PURE__*/React.createElement(\"p\",null,\"Paginator elements can be customized using the template property using the predefined keys, default value is \\\"FirstPageLink PrevPageLink PageLinks NextPageLink LastPageLink RowsPerPageDropdown\\\". Here are the available elements that can be placed inside a paginator.\"),/*#__PURE__*/React.createElement(\"ul\",null,/*#__PURE__*/React.createElement(\"li\",null,\"FirstPageLink\"),/*#__PURE__*/React.createElement(\"li\",null,\"PrevPageLink\"),/*#__PURE__*/React.createElement(\"li\",null,\"PageLinks\"),/*#__PURE__*/React.createElement(\"li\",null,\"NextPageLink\"),/*#__PURE__*/React.createElement(\"li\",null,\"LastPageLink\"),/*#__PURE__*/React.createElement(\"li\",null,\"RowsPerPageDropdown\"),/*#__PURE__*/React.createElement(\"li\",null,\"CurrentPageReport\")),/*#__PURE__*/React.createElement(\"p\",null,\"The pagination element is fully customizable. To make special paginators, an object can be given to the \",/*#__PURE__*/React.createElement(\"i\",null,\"template\"),\" property as below.\"),/*#__PURE__*/React.createElement(CodeHighlight,{lang:\"js\"},\"\\nconst template = {\\n    layout: 'FirstPageLink PrevPageLink PageLinks NextPageLink LastPageLink RowsPerPageDropdown CurrentPageReport', // The above keys can be set in the desired order.\\n    'FirstPageLink': (options) => {\\n        // options.onClick: Click event for the default element.\\n        // options.className: Style class of the default element.\\n        // options.iconClassName: Style class of the default icon element.\\n        // options.disabled: Indicates whether the element is disabled.\\n        // options.element: Default element created by the component.\\n        // options.props: Component props.\\n\\n        return CustomElement;\\n    },\\n    'PrevPageLink': (options) => {\\n        // options.onClick: Click event for the default element.\\n        // options.className: Style class of the default element.\\n        // options.iconClassName: Style class of the default icon element.\\n        // options.disabled: Indicates whether the element is disabled.\\n        // options.element: Default element created by the component.\\n        // options.props: Component props.\\n\\n        return CustomElement;\\n    },\\n    'PageLinks': (options) => {\\n        // options.onClick: Click event for the default element.\\n        // options.className: Style class of the default element.\\n        // options.view: {\\n        //     startPage: // First page displayed in view\\n        //     endPage:   // Last page displayed in view\\n        // }\\n        // options.page: Current page in loop.\\n        // options.currentPage: Current selected page.\\n        // options.totalPages: Total pages in paginator\\n        // options.element: Default element created by the component.\\n        // options.props: Component props.\\n\\n        return CustomElement;\\n    },\\n    'NextPageLink': (options) => {\\n        // options.onClick: Click event for the default element.\\n        // options.className: Style class of the default element.\\n        // options.iconClassName: Style class of the default icon element.\\n        // options.disabled: Indicates whether the element is disabled.\\n        // options.element: Default element created by the component.\\n        // options.props: Component props.\\n\\n        return CustomElement;\\n    },\\n    'LastPageLink': (options) => {\\n        // options.onClick: Click event for the default element.\\n        // options.className: Style class of the default element.\\n        // options.iconClassName: Style class of the default icon element.\\n        // options.disabled: Indicates whether the element is disabled.\\n        // options.element: Default element created by the component.\\n        // options.props: Component props.\\n\\n        return CustomElement;\\n    },\\n    'RowsPerPageDropdown': (options) => {\\n        // options.value: Current selected value in the default element.\\n        // options.onChange: Change event for default element.\\n        // options.currentPage: Current selected page.\\n        // options.totalPages: Total pages in paginator.\\n        // options.totalRecords: Total records in paginator.\\n        // options.element: Default element created by the component.\\n        // options.props: Component props.\\n\\n        return CustomElement;\\n    },\\n    'CurrentPageReport': (options) => {\\n        // options.currentPage: Current selected page.\\n        // options.totalPages: Total pages in paginator.\\n        // options.first: Zero-relative number of the first row to be displayed.\\n        // options.rows: Row count in a page.\\n        // options.totalRecords: Total records in paginator.\\n        // options.className: Style class of the default element.\\n        // options.element: Default element created by the component.\\n        // options.props: Component props.\\n\\n        return CustomElement;\\n    }\\n};\\n\"),/*#__PURE__*/React.createElement(CodeHighlight,null,\"\\n<Paginator template={template} first={this.state.customFirst} rows={this.state.customRows} totalRecords={120} onPageChange={this.onCustomPageChange}></Paginator>\\n\"),/*#__PURE__*/React.createElement(\"h5\",null,\"CurrentPageReport\"),/*#__PURE__*/React.createElement(\"p\",null,\"Current page report item in the itemplate displays information about the pagination state. Default value is ({currentPage} of {totalPages}) whereas available placeholders are the following;\"),/*#__PURE__*/React.createElement(\"ul\",null,/*#__PURE__*/React.createElement(\"li\",null,\"{currentPage}\"),/*#__PURE__*/React.createElement(\"li\",null,\"{totalPages}\"),/*#__PURE__*/React.createElement(\"li\",null,\"{rows}\"),/*#__PURE__*/React.createElement(\"li\",null,\"{first}\"),/*#__PURE__*/React.createElement(\"li\",null,\"{last}\"),/*#__PURE__*/React.createElement(\"li\",null,\"{totalRecords}\")),/*#__PURE__*/React.createElement(\"h5\",null,\"Properties\"),/*#__PURE__*/React.createElement(\"div\",{className:\"doc-tablewrapper\"},/*#__PURE__*/React.createElement(\"table\",{className:\"doc-table\"},/*#__PURE__*/React.createElement(\"thead\",null,/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"th\",null,\"Name\"),/*#__PURE__*/React.createElement(\"th\",null,\"Type\"),/*#__PURE__*/React.createElement(\"th\",null,\"Default\"),/*#__PURE__*/React.createElement(\"th\",null,\"Description\"))),/*#__PURE__*/React.createElement(\"tbody\",null,/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"td\",null,\"totalRecords\"),/*#__PURE__*/React.createElement(\"td\",null,\"number\"),/*#__PURE__*/React.createElement(\"td\",null,\"0\"),/*#__PURE__*/React.createElement(\"td\",null,\"Number of total records.\")),/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"td\",null,\"rows\"),/*#__PURE__*/React.createElement(\"td\",null,\"number\"),/*#__PURE__*/React.createElement(\"td\",null,\"0\"),/*#__PURE__*/React.createElement(\"td\",null,\"Data count to display per page.\")),/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"td\",null,\"first\"),/*#__PURE__*/React.createElement(\"td\",null,\"number\"),/*#__PURE__*/React.createElement(\"td\",null,\"0\"),/*#__PURE__*/React.createElement(\"td\",null,\"Zero-relative number of the first row to be displayed.\")),/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"td\",null,\"pageLinkSize\"),/*#__PURE__*/React.createElement(\"td\",null,\"number\"),/*#__PURE__*/React.createElement(\"td\",null,\"5\"),/*#__PURE__*/React.createElement(\"td\",null,\"Number of page links to display.\")),/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"td\",null,\"rowsPerPageOptions\"),/*#__PURE__*/React.createElement(\"td\",null,\"array\"),/*#__PURE__*/React.createElement(\"td\",null,\"null\"),/*#__PURE__*/React.createElement(\"td\",null,\"Array of integer values to display inside rows per page dropdown.\")),/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"td\",null,\"style\"),/*#__PURE__*/React.createElement(\"td\",null,\"string\"),/*#__PURE__*/React.createElement(\"td\",null,\"null\"),/*#__PURE__*/React.createElement(\"td\",null,\"Inline style of the element.\")),/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"td\",null,\"className\"),/*#__PURE__*/React.createElement(\"td\",null,\"string\"),/*#__PURE__*/React.createElement(\"td\",null,\"null\"),/*#__PURE__*/React.createElement(\"td\",null,\"Style class of the element.\")),/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"td\",null,\"template\"),/*#__PURE__*/React.createElement(\"td\",null,\"string|object\"),/*#__PURE__*/React.createElement(\"td\",null,\"FirstPageLink PrevPageLink PageLinks NextPageLink LastPageLink RowsPerPageDropdown\"),/*#__PURE__*/React.createElement(\"td\",null,\"Template of the paginator.\")),/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"td\",null,\"leftContent\"),/*#__PURE__*/React.createElement(\"td\",null,\"any\"),/*#__PURE__*/React.createElement(\"td\",null,\"null\"),/*#__PURE__*/React.createElement(\"td\",null,\"Content to inject into the left side of the paginator.\")),/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"td\",null,\"rightContent\"),/*#__PURE__*/React.createElement(\"td\",null,\"any\"),/*#__PURE__*/React.createElement(\"td\",null,\"null\"),/*#__PURE__*/React.createElement(\"td\",null,\"Content to inject into the right side of the paginator.\")),/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"td\",null,\"currentPageReportTemplate\"),/*#__PURE__*/React.createElement(\"td\",null,\"string\"),/*#__PURE__*/React.createElement(\"td\",null,\"({currentPage} of {totalPages})\"),/*#__PURE__*/React.createElement(\"td\",null,\"Template of the current page report element. Available placeholders are {currentPage},{totalPages},{rows},{first},{last} and {totalRecords}\")),/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"td\",null,\"dropdownAppendTo\"),/*#__PURE__*/React.createElement(\"td\",null,\"any\"),/*#__PURE__*/React.createElement(\"td\",null,\"null\"),/*#__PURE__*/React.createElement(\"td\",null,\"Target element to attach the paginator dropdown overlay.\"))))),/*#__PURE__*/React.createElement(\"h5\",null,\"Events\"),/*#__PURE__*/React.createElement(\"div\",{className:\"doc-tablewrapper\"},/*#__PURE__*/React.createElement(\"table\",{className:\"doc-table\"},/*#__PURE__*/React.createElement(\"thead\",null,/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"th\",null,\"Name\"),/*#__PURE__*/React.createElement(\"th\",null,\"Parameters\"),/*#__PURE__*/React.createElement(\"th\",null,\"Description\"))),/*#__PURE__*/React.createElement(\"tbody\",null,/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"td\",null,\"onPageChange\"),/*#__PURE__*/React.createElement(\"td\",null,\"event.page: New page number \",/*#__PURE__*/React.createElement(\"br\",null),\"event.first: Index of first record \",/*#__PURE__*/React.createElement(\"br\",null),\"event.rows: Number of rows to display in new page \",/*#__PURE__*/React.createElement(\"br\",null),\"event.page: Index of the new page \",/*#__PURE__*/React.createElement(\"br\",null),\"event.pageCount: Total number of pages\"),/*#__PURE__*/React.createElement(\"td\",null,\"Callback to invoke when page changes, the event object contains information about the new state.\"))))),/*#__PURE__*/React.createElement(\"h5\",null,\"Styling\"),/*#__PURE__*/React.createElement(\"p\",null,\"Following is the list of structural style classes, for theming classes visit \",/*#__PURE__*/React.createElement(Link,{to:\"/theming\"},\" theming\"),\" page.\"),/*#__PURE__*/React.createElement(\"div\",{className:\"doc-tablewrapper\"},/*#__PURE__*/React.createElement(\"table\",{className:\"doc-table\"},/*#__PURE__*/React.createElement(\"thead\",null,/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"th\",null,\"Name\"),/*#__PURE__*/React.createElement(\"th\",null,\"Element\"))),/*#__PURE__*/React.createElement(\"tbody\",null,/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"td\",null,\"p-paginator\"),/*#__PURE__*/React.createElement(\"td\",null,\"Container element.\")),/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"td\",null,\"p-paginator-first\"),/*#__PURE__*/React.createElement(\"td\",null,\"First page element.\")),/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"td\",null,\"p-paginator-prev\"),/*#__PURE__*/React.createElement(\"td\",null,\"Previous page element.\")),/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"td\",null,\"p-paginator-pages\"),/*#__PURE__*/React.createElement(\"td\",null,\"Container of page links.\")),/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"td\",null,\"p-paginator-page\"),/*#__PURE__*/React.createElement(\"td\",null,\"A page link.\")),/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"td\",null,\"p-paginator-next\"),/*#__PURE__*/React.createElement(\"td\",null,\"Next pge element.\")),/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"td\",null,\"p-paginator-last\"),/*#__PURE__*/React.createElement(\"td\",null,\"Last page element.\")),/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"td\",null,\"p-paginator-rpp-options\"),/*#__PURE__*/React.createElement(\"td\",null,\"Rows per page dropdown.\")))),/*#__PURE__*/React.createElement(\"h5\",null,\"Dependencies\"),/*#__PURE__*/React.createElement(\"p\",null,\"None.\"))),useLiveEditorTabs({name:'PaginatorDemo',sources:this.sources,extFiles:this.extFiles})));}}]);return PaginatorDoc;}(Component);","map":{"version":3,"sources":["C:/Users/zura.ph/WebstormProjects/slotmaster-dashboard/src/showcase/paginator/PaginatorDoc.js"],"names":["React","Component","Link","TabView","TabPanel","CodeHighlight","useLiveEditorTabs","PaginatorDoc","props","sources","tabName","content","extFiles","name"],"mappings":"wsBAAA,MAAOA,CAAAA,KAAP,EAAgBC,SAAhB,KAAiC,OAAjC,CACA,OAASC,IAAT,KAAqB,kBAArB,CACA,OAASC,OAAT,CAAkBC,QAAlB,KAAkC,kCAAlC,CACA,OAASC,aAAT,KAA8B,gCAA9B,CACA,OAASC,iBAAT,KAAiC,0BAAjC,CAEA,UAAaC,CAAAA,YAAb,4GAEI,sBAAYC,KAAZ,CAAmB,8CACf,uBAAMA,KAAN,EAEA,MAAKC,OAAL,CAAe,CACX,QAAS,CACLC,OAAO,CAAE,cADJ,CAELC,OAAO,8pTAFF,CADE,CA+NX,QAAS,CACLD,OAAO,CAAE,cADJ,CAELC,OAAO,qjRAFF,CA/NE,CAmaX,KAAM,CACFD,OAAO,CAAE,WADP,CAEFC,OAAO,qjRAFL,CAnaK,CAAf,CAymBA,MAAKC,QAAL,CAAgB,CACZ,6BAA8B,CAC1BD,OAAO,mLADmB,CADlB,CAAhB,CA5mBe,aA0nBlB,CA5nBL,8DA8nBI,gCAAwB,CACpB,MAAO,MAAP,CACH,CAhoBL,sBAkoBI,iBAAS,CACL,mBACI,2BAAK,SAAS,CAAC,+BAAf,eACI,oBAAC,OAAD,mBACI,oBAAC,QAAD,EAAU,MAAM,CAAC,eAAjB,eACI,uCADJ,cAEpB,oBAAC,aAAD,EAAe,IAAI,CAAC,IAApB,0DAFoB,cAQI,gDARJ,cASI,8FAAoD,qCAApD,mBAAkE,oCAAlE,iCAA6F,4CAA7F,gBATJ,cAWpB,oBAAC,aAAD,sGAXoB,cAiBI,sDAjBJ,cAkBI,6IAlBJ,cAmBpB,oBAAC,aAAD,uHAnBoB,cAyBI,8CAzBJ,cA0BI,wNA1BJ,cA6BpB,oBAAC,aAAD,EAAe,IAAI,CAAC,IAApB,uFA7BoB,cAqCpB,oBAAC,aAAD,6IArCoB,cA2CI,yCA3CJ,cA4CI,2SA5CJ,cAgDI,2CACI,8CADJ,cAEI,6CAFJ,cAGI,0CAHJ,cAII,6CAJJ,cAKI,6CALJ,cAMI,oDANJ,cAOI,kDAPJ,CAhDJ,cA0DI,qJAA2G,wCAA3G,uBA1DJ,cA2DpB,oBAAC,aAAD,EAAe,IAAI,CAAC,IAApB,2uHA3DoB,cAgJpB,oBAAC,aAAD,8KAhJoB,cAsJI,kDAtJJ,cAuJI,6NAvJJ,cAyJI,2CACI,8CADJ,cAEI,6CAFJ,cAGI,uCAHJ,cAII,wCAJJ,cAKI,uCALJ,cAMI,+CANJ,CAzJJ,cAkKI,2CAlKJ,cAmKI,2BAAK,SAAS,CAAC,kBAAf,eACI,6BAAO,SAAS,CAAC,WAAjB,eACI,8CACI,2CACI,qCADJ,cAEI,qCAFJ,cAGI,wCAHJ,cAII,4CAJJ,CADJ,CADJ,cASI,8CACI,2CACI,6CADJ,cAEI,uCAFJ,cAGI,kCAHJ,cAII,yDAJJ,CADJ,cAOI,2CACI,qCADJ,cAEI,uCAFJ,cAGI,kCAHJ,cAII,gEAJJ,CAPJ,cAaI,2CACI,sCADJ,cAEI,uCAFJ,cAGI,kCAHJ,cAII,uFAJJ,CAbJ,cAmBI,2CACI,6CADJ,cAEI,uCAFJ,cAGI,kCAHJ,cAII,iEAJJ,CAnBJ,cAyBI,2CACI,mDADJ,cAEI,sCAFJ,cAGI,qCAHJ,cAII,kGAJJ,CAzBJ,cA+BI,2CACI,sCADJ,cAEI,uCAFJ,cAGI,qCAHJ,cAII,6DAJJ,CA/BJ,cAqCI,2CACI,0CADJ,cAEI,uCAFJ,cAGI,qCAHJ,cAII,4DAJJ,CArCJ,cA2CI,2CACI,yCADJ,cAEI,8CAFJ,cAGI,mHAHJ,cAII,2DAJJ,CA3CJ,cAiDI,2CACI,4CADJ,cAEI,oCAFJ,cAGI,qCAHJ,cAII,uFAJJ,CAjDJ,cAuDI,2CACI,6CADJ,cAEI,oCAFJ,cAGI,qCAHJ,cAII,wFAJJ,CAvDJ,cA6DI,2CACI,0DADJ,cAEI,uCAFJ,cAGI,gEAHJ,cAII,4KAJJ,CA7DJ,cAoEI,2CACI,iDADJ,cAEI,oCAFJ,cAGI,qCAHJ,cAII,yFAJJ,CApEJ,CATJ,CADJ,CAnKJ,cA2PI,uCA3PJ,cA4PI,2BAAK,SAAS,CAAC,kBAAf,eACI,6BAAO,SAAS,CAAC,WAAjB,eACI,8CACI,2CACI,qCADJ,cAEI,2CAFJ,cAGI,4CAHJ,CADJ,CADJ,cAQI,8CACI,2CACI,6CADJ,cAEI,0EAAgC,8BAAhC,oDAC2B,8BAD3B,mEAE0C,8BAF1C,mDAG0B,8BAH1B,0CAFJ,cAQI,iIARJ,CADJ,CARJ,CADJ,CA5PJ,cAoRI,wCApRJ,cAqRI,0HAAgF,oBAAC,IAAD,EAAM,EAAE,CAAC,UAAT,aAAhF,UArRJ,cAsRI,2BAAK,SAAS,CAAC,kBAAf,eACI,6BAAO,SAAS,CAAC,WAAjB,eACI,8CACI,2CACI,qCADJ,cAEI,wCAFJ,CADJ,CADJ,cAOI,8CACI,2CACI,4CADJ,cAEI,mDAFJ,CADJ,cAKI,2CACI,kDADJ,cAEI,oDAFJ,CALJ,cASI,2CACI,iDADJ,cAEI,uDAFJ,CATJ,cAaI,2CACI,kDADJ,cAEI,yDAFJ,CAbJ,cAiBI,2CACI,iDADJ,cAEI,6CAFJ,CAjBJ,cAqBI,2CACI,iDADJ,cAEI,kDAFJ,CArBJ,cAyBI,2CACI,iDADJ,cAEI,mDAFJ,CAzBJ,cA6BI,2CACI,wDADJ,cAEI,wDAFJ,CA7BJ,CAPJ,CADJ,cA4CI,6CA5CJ,cA6CI,qCA7CJ,CAtRJ,CADJ,CA0UQL,iBAAiB,CAAC,CAAEO,IAAI,CAAE,eAAR,CAAyBJ,OAAO,CAAE,KAAKA,OAAvC,CAAgDG,QAAQ,CAAE,KAAKA,QAA/D,CAAD,CA1UzB,CADJ,CADJ,CAiVH,CAp9BL,0BAAkCX,SAAlC","sourcesContent":["import React, { Component } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { TabView, TabPanel } from '../../components/tabview/TabView';\r\nimport { CodeHighlight } from '../codehighlight/CodeHighlight';\r\nimport { useLiveEditorTabs }from '../liveeditor/LiveEditor';\r\n\r\nexport class PaginatorDoc extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.sources = {\r\n            'class': {\r\n                tabName: 'Class Source',\r\n                content: `\r\nimport React, { Component } from 'react';\r\nimport { Paginator } from 'primereact/paginator';\r\nimport { Button } from 'primereact/button';\r\nimport { Ripple } from 'primereact/ripple';\r\nimport { Dropdown } from 'primereact/dropdown';\r\nimport { InputText } from 'primereact/inputtext';\r\nimport { Slider } from 'primereact/slider';\r\nimport { Tooltip } from 'primereact/tooltip';\r\nimport classNames from 'classnames';\r\nimport './PaginatorDemo.css';\r\n\r\nexport class PaginatorDemo extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            basicFirst: 0,\r\n            basicRows: 10,\r\n            customFirst1: 0,\r\n            customRows1: 10,\r\n            customFirst2: 0,\r\n            customRows2: 10,\r\n            customFirst3: 0,\r\n            customRows3: 10,\r\n            contentFirst: 0,\r\n            currentPage: 1,\r\n            pageInputTooltip: 'Press \\\\'Enter\\\\' key to go to this page.'\r\n        };\r\n\r\n        this.onBasicPageChange = this.onBasicPageChange.bind(this);\r\n        this.onCustomPageChange1 = this.onCustomPageChange1.bind(this);\r\n        this.onCustomPageChange2 = this.onCustomPageChange2.bind(this);\r\n        this.onCustomPageChange3 = this.onCustomPageChange3.bind(this);\r\n        this.onContentPageChange = this.onContentPageChange.bind(this);\r\n        this.onPageInputKeyDown = this.onPageInputKeyDown.bind(this);\r\n        this.onPageInputChange = this.onPageInputChange.bind(this);\r\n    }\r\n\r\n    onBasicPageChange(event) {\r\n        this.setState({\r\n            basicFirst: event.first,\r\n            basicRows: event.rows\r\n        });\r\n    }\r\n\r\n    onCustomPageChange1(event) {\r\n        this.setState({\r\n            customFirst1: event.first,\r\n            customRows1: event.rows,\r\n            currentPage: event.page + 1\r\n        });\r\n    }\r\n\r\n    onCustomPageChange2(event) {\r\n        this.setState({\r\n            customFirst2: event.first,\r\n            customRows2: event.rows\r\n        });\r\n    }\r\n\r\n    onCustomPageChange3(event) {\r\n        this.setState({\r\n            customFirst3: event.first,\r\n            customRows3: event.rows\r\n        });\r\n    }\r\n\r\n    onContentPageChange(event) {\r\n        this.setState({\r\n            contentFirst: event.first,\r\n            contentRows: event.rows\r\n        });\r\n    }\r\n\r\n    onPageInputKeyDown(event, options) {\r\n        if (event.key === 'Enter') {\r\n            const page = parseInt(this.state.currentPage);\r\n            if (page < 0 || page > options.totalPages) {\r\n                this.setState({ pageInputTooltip: \\`Value must be between 1 and \\${options.totalPages}.\\`})\r\n            }\r\n            else {\r\n                const first = this.state.currentPage ? options.rows * (page - 1) : 0;\r\n\r\n                this.setState({ customFirst1: first, pageInputTooltip: 'Press \\\\'Enter\\\\' key to go to this page.' });\r\n            }\r\n        }\r\n    }\r\n\r\n    onPageInputChange(event) {\r\n        this.setState({ currentPage: event.target.value });\r\n    }\r\n\r\n    render() {\r\n        const leftContent = <Button type=\"button\" icon=\"pi pi-refresh\" onClick={() => this.setState({ contentFirst: 0 })} />;\r\n        const rightContent = <Button type=\"button\" icon=\"pi pi-search\" />;\r\n        const template1 = {\r\n            layout: 'PrevPageLink PageLinks NextPageLink RowsPerPageDropdown CurrentPageReport',\r\n            'PrevPageLink': (options) => {\r\n                return (\r\n                    <button type=\"button\" className={options.className} onClick={options.onClick} disabled={options.disabled}>\r\n                        <span className=\"p-p-3\">Previous</span>\r\n                        <Ripple />\r\n                    </button>\r\n                )\r\n            },\r\n            'NextPageLink': (options) => {\r\n                return (\r\n                    <button type=\"button\" className={options.className} onClick={options.onClick} disabled={options.disabled}>\r\n                        <span className=\"p-p-3\">Next</span>\r\n                        <Ripple />\r\n                    </button>\r\n                )\r\n            },\r\n            'PageLinks': (options) => {\r\n                if ((options.view.startPage === options.page && options.view.startPage !== 0) || (options.view.endPage === options.page && options.page + 1 !== options.totalPages)) {\r\n                    const className = classNames(options.className, { 'p-disabled': true });\r\n\r\n                    return <span className={className} style={{ userSelect: 'none' }}>...</span>;\r\n                }\r\n\r\n                return (\r\n                    <button type=\"button\" className={options.className} onClick={options.onClick}>\r\n                        {options.page + 1}\r\n                        <Ripple />\r\n                    </button>\r\n                )\r\n            },\r\n            'RowsPerPageDropdown': (options) => {\r\n                const dropdownOptions = [\r\n                    { label: 10, value: 10 },\r\n                    { label: 20, value: 20 },\r\n                    { label: 30, value: 30 },\r\n                    { label: 'All', value: options.totalRecords }\r\n                ];\r\n\r\n                return <Dropdown value={options.value} options={dropdownOptions} onChange={options.onChange} appendTo={document.body} />;\r\n            },\r\n            'CurrentPageReport': (options) => {\r\n                return (\r\n                    <span className=\"p-mx-3\" style={{ color: 'var(--text-color)', userSelect: 'none' }}>\r\n                        Go to <InputText size=\"2\" className=\"p-ml-1\" value={this.state.currentPage} tooltip={this.state.pageInputTooltip}\r\n                            onKeyDown={(e) => this.onPageInputKeyDown(e, options)} onChange={this.onPageInputChange}/>\r\n                    </span>\r\n                )\r\n            }\r\n        };\r\n        const template2 = {\r\n            layout: 'RowsPerPageDropdown CurrentPageReport PrevPageLink NextPageLink',\r\n            'RowsPerPageDropdown': (options) => {\r\n                const dropdownOptions = [\r\n                    { label: 5, value: 5 },\r\n                    { label: 10, value: 10 },\r\n                    { label: 20, value: 20 },\r\n                    { label: 120, value: 120 }\r\n                ];\r\n\r\n                return (\r\n                    <>\r\n                        <span className=\"p-mx-1\" style={{ color: 'var(--text-color)', userSelect: 'none' }}>Items per page: </span>\r\n                        <Dropdown value={options.value} options={dropdownOptions} onChange={options.onChange} appendTo={document.body} />\r\n                    </>\r\n                );\r\n            },\r\n            'CurrentPageReport': (options) => {\r\n                return (\r\n                    <span style={{ color: 'var(--text-color)', userSelect: 'none', width: '120px', textAlign: 'center' }}>\r\n                        {options.first} - {options.last} of {options.totalRecords}\r\n                    </span>\r\n                )\r\n            }\r\n        };\r\n        const template3 = {\r\n            layout: 'RowsPerPageDropdown PrevPageLink PageLinks NextPageLink CurrentPageReport',\r\n            'RowsPerPageDropdown': (options) => {\r\n                return (\r\n                    <div className=\"p-d-flex p-ai-center\">\r\n                        <Tooltip target=\".slider>.p-slider-handle\" content={\\`\\${options.value} / page\\`} position=\"top\" event=\"focus\" />\r\n\r\n                        <span className=\"p-mr-3\" style={{ color: 'var(--text-color)', userSelect: 'none' }}>Items per page: </span>\r\n                        <Slider className=\"slider\" value={options.value} onChange={options.onChange} min={10} max={120} step={30} style={{ width: '10rem' }} />\r\n                    </div>\r\n                );\r\n            },\r\n            'CurrentPageReport': (options) => {\r\n                return (\r\n                    <span style={{ color: 'var(--text-color)', userSelect: 'none', width: '120px', textAlign: 'center' }}>\r\n                        {options.first} - {options.last} of {options.totalRecords}\r\n                    </span>\r\n                )\r\n            }\r\n        }\r\n\r\n        return (\r\n            <div className=\"paginator-demo\">\r\n                <div className=\"card\">\r\n                    <h5>Basic</h5>\r\n                    <Paginator first={this.state.basicFirst} rows={this.state.basicRows} totalRecords={120} rowsPerPageOptions={[10, 20, 30]} onPageChange={this.onBasicPageChange}></Paginator>\r\n\r\n                    <h5>Custom Template</h5>\r\n                    <Paginator template={template1} first={this.state.customFirst1} rows={this.state.customRows1} totalRecords={120} onPageChange={this.onCustomPageChange1}></Paginator>\r\n                    <Paginator template={template2} first={this.state.customFirst2} rows={this.state.customRows2} totalRecords={120} onPageChange={this.onCustomPageChange2} className=\"p-jc-end p-my-3\"></Paginator>\r\n                    <Paginator template={template3} first={this.state.customFirst3} rows={this.state.customRows3} totalRecords={120} onPageChange={this.onCustomPageChange3} className=\"p-jc-start p-my-3\"></Paginator>\r\n\r\n                    <h5>Left and Right Content</h5>\r\n                    <Paginator first={this.state.contentFirst} rows={1} totalRecords={12} onPageChange={this.onContentPageChange}\r\n                        leftContent={leftContent} rightContent={rightContent}\r\n                        template=\"FirstPageLink PrevPageLink CurrentPageReport NextPageLink LastPageLink\"></Paginator>\r\n\r\n                    <div className=\"image-gallery\">\r\n                        <img alt={this.state.contentFirst} src={\\`showcase/demo/images/nature/nature\\${this.state.contentFirst + 1}.jpg\\`} onError={(e) => e.target.src = 'https://www.primefaces.org/wp-content/uploads/2020/05/placeholder.png'} />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n                `\r\n            },\r\n            'hooks': {\r\n                tabName: 'Hooks Source',\r\n                content: `\r\nimport React, { useState } from 'react';\r\nimport { Paginator } from 'primereact/paginator';\r\nimport { Button } from 'primereact/button';\r\nimport { Ripple } from 'primereact/ripple';\r\nimport { Dropdown } from 'primereact/dropdown';\r\nimport { InputText } from 'primereact/inputtext';\r\nimport { Slider } from 'primereact/slider';\r\nimport { Tooltip } from 'primereact/tooltip';\r\nimport classNames from 'classnames';\r\nimport './PaginatorDemo.css';\r\n\r\nconst PaginatorDemo = () => {\r\n    const [basicFirst, setBasicFirst] = useState(0);\r\n    const [basicRows, setBasicRows] = useState(10);\r\n    const [basicCustomFirst1, setBasicCustomFirst1] = useState(0);\r\n    const [customRows1, setCustomRows1] = useState(10);\r\n    const [customFirst2, setCustomFirst2] = useState(0);\r\n    const [customRows2, setCustomRows2] = useState(10);\r\n    const [customFirst3, setCustomFirst3] = useState(0);\r\n    const [customRows3, setCustomRows3] = useState(10);\r\n    const [contentFirst, setContentFirst] = useState(0);\r\n    const [currentPage, setCurrentPage] = useState(1);\r\n    const [pageInputTooltip, setPageInputTooltip]: useState('Press \\\\'Enter\\\\' key to go to this page.');\r\n\r\n    const onBasicPageChange = (event) => {\r\n        setBasicFirst(event.first);\r\n        setBasicRows(event.rows);\r\n    }\r\n\r\n    const onCustomPageChange1 = (event) => {\r\n        setCustomFirst1(event.first);\r\n        setCustomRows1(event.rows);\r\n        setCurrentPage(event.page + 1);\r\n    }\r\n\r\n    const onCustomPageChange2 = (event) => {\r\n        setCustomFirst2(event.first);\r\n        setCustomRows2(event.rows);\r\n    }\r\n\r\n    const onCustomPageChange3 = (event) => {\r\n        setCustomFirst3(event.first);\r\n        setCustomRows3(event.rows);\r\n    }\r\n\r\n    const onContentPageChange = (event) => {\r\n        setContentFirst(event.first);\r\n        setContentRows(event.rows);\r\n    }\r\n\r\n    const onPageInputKeyDown = (event, options) => {\r\n        if (event.key === 'Enter') {\r\n            const page = parseInt(currentPage);\r\n            if (page < 0 || page > options.totalPages) {\r\n                setPageInputTooltip(\\`Value must be between 1 and \\${options.totalPages}.\\`);\r\n            }\r\n            else {\r\n                const first = currentPage ? options.rows * (page - 1) : 0;\r\n\r\n                setCustomFirst1(first);\r\n                setPageInputTooltip('Press \\\\'Enter\\\\' key to go to this page.');\r\n            }\r\n        }\r\n    }\r\n\r\n    const onPageInputChange = (event) => {\r\n        setCurrentPage(event.target.value);\r\n    }\r\n\r\n    const leftContent = <Button type=\"button\" icon=\"pi pi-refresh\" onClick={() => setContentFirst(0)} />;\r\n    const rightContent = <Button type=\"button\" icon=\"pi pi-search\" />;\r\n    const template1 = {\r\n        layout: 'PrevPageLink PageLinks NextPageLink RowsPerPageDropdown CurrentPageReport',\r\n        'PrevPageLink': (options) => {\r\n            return (\r\n                <button type=\"button\" className={options.className} onClick={options.onClick} disabled={options.disabled}>\r\n                    <span className=\"p-p-3\">Previous</span>\r\n                    <Ripple />\r\n                </button>\r\n            )\r\n        },\r\n        'NextPageLink': (options) => {\r\n            return (\r\n                <button type=\"button\" className={options.className} onClick={options.onClick} disabled={options.disabled}>\r\n                    <span className=\"p-p-3\">Next</span>\r\n                    <Ripple />\r\n                </button>\r\n            )\r\n        },\r\n        'PageLinks': (options) => {\r\n            if ((options.view.startPage === options.page && options.view.startPage !== 0) || (options.view.endPage === options.page && options.page + 1 !== options.totalPages)) {\r\n                const className = classNames(options.className, { 'p-disabled': true });\r\n\r\n                return <span className={className} style={{ userSelect: 'none' }}>...</span>;\r\n            }\r\n\r\n            return (\r\n                <button type=\"button\" className={options.className} onClick={options.onClick}>\r\n                    {options.page + 1}\r\n                    <Ripple />\r\n                </button>\r\n            )\r\n        },\r\n        'RowsPerPageDropdown': (options) => {\r\n            const dropdownOptions = [\r\n                { label: 10, value: 10 },\r\n                { label: 20, value: 20 },\r\n                { label: 30, value: 30 },\r\n                { label: 'All', value: options.totalRecords }\r\n            ];\r\n\r\n            return <Dropdown value={options.value} options={dropdownOptions} onChange={options.onChange} appendTo={document.body} />;\r\n        },\r\n        'CurrentPageReport': (options) => {\r\n            return (\r\n                <span className=\"p-mx-3\" style={{ color: 'var(--text-color)', userSelect: 'none' }}>\r\n                    Go to <InputText size=\"2\" className=\"p-ml-1\" value={currentPage} tooltip={pageInputTooltip}\r\n                        onKeyDown={(e) => onPageInputKeyDown(e, options)} onChange={onPageInputChange}/>\r\n                </span>\r\n            )\r\n        }\r\n    };\r\n    const template2 = {\r\n        layout: 'RowsPerPageDropdown CurrentPageReport PrevPageLink NextPageLink',\r\n        'RowsPerPageDropdown': (options) => {\r\n            const dropdownOptions = [\r\n                { label: 5, value: 5 },\r\n                { label: 10, value: 10 },\r\n                { label: 20, value: 20 },\r\n                { label: 120, value: 120 }\r\n            ];\r\n\r\n            return (\r\n                <>\r\n                    <span className=\"p-mx-1\" style={{ color: 'var(--text-color)', userSelect: 'none' }}>Items per page: </span>\r\n                    <Dropdown value={options.value} options={dropdownOptions} onChange={options.onChange} appendTo={document.body} />\r\n                </>\r\n            );\r\n        },\r\n        'CurrentPageReport': (options) => {\r\n            return (\r\n                <span style={{ color: 'var(--text-color)', userSelect: 'none', width: '120px', textAlign: 'center' }}>\r\n                    {options.first} - {options.last} of {options.totalRecords}\r\n                </span>\r\n            )\r\n        }\r\n    };\r\n    const template3 = {\r\n        layout: 'RowsPerPageDropdown PrevPageLink PageLinks NextPageLink CurrentPageReport',\r\n        'RowsPerPageDropdown': (options) => {\r\n            return (\r\n                <div className=\"p-d-flex p-ai-center\">\r\n                    <Tooltip target=\".slider>.p-slider-handle\" content={\\`\\${options.value} / page\\`} position=\"top\" event=\"focus\" />\r\n\r\n                    <span className=\"p-mr-3\" style={{ color: 'var(--text-color)', userSelect: 'none' }}>Items per page: </span>\r\n                    <Slider className=\"slider\" value={options.value} onChange={options.onChange} min={10} max={120} step={30} style={{ width: '10rem' }} />\r\n                </div>\r\n            );\r\n        },\r\n        'CurrentPageReport': (options) => {\r\n            return (\r\n                <span style={{ color: 'var(--text-color)', userSelect: 'none', width: '120px', textAlign: 'center' }}>\r\n                    {options.first} - {options.last} of {options.totalRecords}\r\n                </span>\r\n            )\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"paginator-demo\">\r\n            <div className=\"card\">\r\n                <h5>Basic</h5>\r\n                <Paginator first={basicFirst} rows={basicRows} totalRecords={120} rowsPerPageOptions={[10, 20, 30]} onPageChange={onBasicPageChange}></Paginator>\r\n\r\n                <h5>Custom Template</h5>\r\n                <Paginator template={template1} first={customFirst1} rows={customRows1} totalRecords={120} onPageChange={onCustomPageChange1}></Paginator>\r\n                <Paginator template={template2} first={customFirst2} rows={customRows2} totalRecords={120} onPageChange={onCustomPageChange2} className=\"p-jc-end p-my-3\"></Paginator>\r\n                <Paginator template={template3} first={customFirst3} rows={customRows3} totalRecords={120} onPageChange={onCustomPageChange3} className=\"p-jc-start p-my-3\"></Paginator>\r\n\r\n                <h5>Left and Right Content</h5>\r\n                <Paginator first={contentFirst} rows={1} totalRecords={12} onPageChange={onContentPageChange}\r\n                    leftContent={leftContent} rightContent={rightContent}\r\n                    template=\"FirstPageLink PrevPageLink CurrentPageReport NextPageLink LastPageLink\"></Paginator>\r\n\r\n                <div className=\"image-gallery\">\r\n                    <img alt={contentFirst} src={\\`showcase/demo/images/nature/nature\\${contentFirst + 1}.jpg\\`} onError={(e) => e.target.src = 'https://www.primefaces.org/wp-content/uploads/2020/05/placeholder.png'} />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n                `\r\n            },\r\n            'ts': {\r\n                tabName: 'TS Source',\r\n                content: `\r\nimport React, { useState } from 'react';\r\nimport { Paginator } from 'primereact/paginator';\r\nimport { Button } from 'primereact/button';\r\nimport { Ripple } from 'primereact/ripple';\r\nimport { Dropdown } from 'primereact/dropdown';\r\nimport { InputText } from 'primereact/inputtext';\r\nimport { Slider } from 'primereact/slider';\r\nimport { Tooltip } from 'primereact/tooltip';\r\nimport classNames from 'classnames';\r\nimport './PaginatorDemo.css';\r\n\r\nconst PaginatorDemo = () => {\r\n    const [basicFirst, setBasicFirst] = useState(0);\r\n    const [basicRows, setBasicRows] = useState(10);\r\n    const [basicCustomFirst1, setBasicCustomFirst1] = useState(0);\r\n    const [customRows1, setCustomRows1] = useState(10);\r\n    const [customFirst2, setCustomFirst2] = useState(0);\r\n    const [customRows2, setCustomRows2] = useState(10);\r\n    const [customFirst3, setCustomFirst3] = useState(0);\r\n    const [customRows3, setCustomRows3] = useState(10);\r\n    const [contentFirst, setContentFirst] = useState(0);\r\n    const [currentPage, setCurrentPage] = useState(1);\r\n    const [pageInputTooltip, setPageInputTooltip]: useState('Press \\\\'Enter\\\\' key to go to this page.');\r\n\r\n    const onBasicPageChange = (event) => {\r\n        setBasicFirst(event.first);\r\n        setBasicRows(event.rows);\r\n    }\r\n\r\n    const onCustomPageChange1 = (event) => {\r\n        setCustomFirst1(event.first);\r\n        setCustomRows1(event.rows);\r\n        setCurrentPage(event.page + 1);\r\n    }\r\n\r\n    const onCustomPageChange2 = (event) => {\r\n        setCustomFirst2(event.first);\r\n        setCustomRows2(event.rows);\r\n    }\r\n\r\n    const onCustomPageChange3 = (event) => {\r\n        setCustomFirst3(event.first);\r\n        setCustomRows3(event.rows);\r\n    }\r\n\r\n    const onContentPageChange = (event) => {\r\n        setContentFirst(event.first);\r\n        setContentRows(event.rows);\r\n    }\r\n\r\n    const onPageInputKeyDown = (event, options) => {\r\n        if (event.key === 'Enter') {\r\n            const page = parseInt(currentPage);\r\n            if (page < 0 || page > options.totalPages) {\r\n                setPageInputTooltip(\\`Value must be between 1 and \\${options.totalPages}.\\`);\r\n            }\r\n            else {\r\n                const first = currentPage ? options.rows * (page - 1) : 0;\r\n\r\n                setCustomFirst1(first);\r\n                setPageInputTooltip('Press \\\\'Enter\\\\' key to go to this page.');\r\n            }\r\n        }\r\n    }\r\n\r\n    const onPageInputChange = (event) => {\r\n        setCurrentPage(event.target.value);\r\n    }\r\n\r\n    const leftContent = <Button type=\"button\" icon=\"pi pi-refresh\" onClick={() => setContentFirst(0)} />;\r\n    const rightContent = <Button type=\"button\" icon=\"pi pi-search\" />;\r\n    const template1 = {\r\n        layout: 'PrevPageLink PageLinks NextPageLink RowsPerPageDropdown CurrentPageReport',\r\n        'PrevPageLink': (options) => {\r\n            return (\r\n                <button type=\"button\" className={options.className} onClick={options.onClick} disabled={options.disabled}>\r\n                    <span className=\"p-p-3\">Previous</span>\r\n                    <Ripple />\r\n                </button>\r\n            )\r\n        },\r\n        'NextPageLink': (options) => {\r\n            return (\r\n                <button type=\"button\" className={options.className} onClick={options.onClick} disabled={options.disabled}>\r\n                    <span className=\"p-p-3\">Next</span>\r\n                    <Ripple />\r\n                </button>\r\n            )\r\n        },\r\n        'PageLinks': (options) => {\r\n            if ((options.view.startPage === options.page && options.view.startPage !== 0) || (options.view.endPage === options.page && options.page + 1 !== options.totalPages)) {\r\n                const className = classNames(options.className, { 'p-disabled': true });\r\n\r\n                return <span className={className} style={{ userSelect: 'none' }}>...</span>;\r\n            }\r\n\r\n            return (\r\n                <button type=\"button\" className={options.className} onClick={options.onClick}>\r\n                    {options.page + 1}\r\n                    <Ripple />\r\n                </button>\r\n            )\r\n        },\r\n        'RowsPerPageDropdown': (options) => {\r\n            const dropdownOptions = [\r\n                { label: 10, value: 10 },\r\n                { label: 20, value: 20 },\r\n                { label: 30, value: 30 },\r\n                { label: 'All', value: options.totalRecords }\r\n            ];\r\n\r\n            return <Dropdown value={options.value} options={dropdownOptions} onChange={options.onChange} appendTo={document.body} />;\r\n        },\r\n        'CurrentPageReport': (options) => {\r\n            return (\r\n                <span className=\"p-mx-3\" style={{ color: 'var(--text-color)', userSelect: 'none' }}>\r\n                    Go to <InputText size=\"2\" className=\"p-ml-1\" value={currentPage} tooltip={pageInputTooltip}\r\n                        onKeyDown={(e) => onPageInputKeyDown(e, options)} onChange={onPageInputChange}/>\r\n                </span>\r\n            )\r\n        }\r\n    };\r\n    const template2 = {\r\n        layout: 'RowsPerPageDropdown CurrentPageReport PrevPageLink NextPageLink',\r\n        'RowsPerPageDropdown': (options) => {\r\n            const dropdownOptions = [\r\n                { label: 5, value: 5 },\r\n                { label: 10, value: 10 },\r\n                { label: 20, value: 20 },\r\n                { label: 120, value: 120 }\r\n            ];\r\n\r\n            return (\r\n                <>\r\n                    <span className=\"p-mx-1\" style={{ color: 'var(--text-color)', userSelect: 'none' }}>Items per page: </span>\r\n                    <Dropdown value={options.value} options={dropdownOptions} onChange={options.onChange} appendTo={document.body} />\r\n                </>\r\n            );\r\n        },\r\n        'CurrentPageReport': (options) => {\r\n            return (\r\n                <span style={{ color: 'var(--text-color)', userSelect: 'none', width: '120px', textAlign: 'center' }}>\r\n                    {options.first} - {options.last} of {options.totalRecords}\r\n                </span>\r\n            )\r\n        }\r\n    };\r\n    const template3 = {\r\n        layout: 'RowsPerPageDropdown PrevPageLink PageLinks NextPageLink CurrentPageReport',\r\n        'RowsPerPageDropdown': (options) => {\r\n            return (\r\n                <div className=\"p-d-flex p-ai-center\">\r\n                    <Tooltip target=\".slider>.p-slider-handle\" content={\\`\\${options.value} / page\\`} position=\"top\" event=\"focus\" />\r\n\r\n                    <span className=\"p-mr-3\" style={{ color: 'var(--text-color)', userSelect: 'none' }}>Items per page: </span>\r\n                    <Slider className=\"slider\" value={options.value} onChange={options.onChange} min={10} max={120} step={30} style={{ width: '10rem' }} />\r\n                </div>\r\n            );\r\n        },\r\n        'CurrentPageReport': (options) => {\r\n            return (\r\n                <span style={{ color: 'var(--text-color)', userSelect: 'none', width: '120px', textAlign: 'center' }}>\r\n                    {options.first} - {options.last} of {options.totalRecords}\r\n                </span>\r\n            )\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"paginator-demo\">\r\n            <div className=\"card\">\r\n                <h5>Basic</h5>\r\n                <Paginator first={basicFirst} rows={basicRows} totalRecords={120} rowsPerPageOptions={[10, 20, 30]} onPageChange={onBasicPageChange}></Paginator>\r\n\r\n                <h5>Custom Template</h5>\r\n                <Paginator template={template1} first={customFirst1} rows={customRows1} totalRecords={120} onPageChange={onCustomPageChange1}></Paginator>\r\n                <Paginator template={template2} first={customFirst2} rows={customRows2} totalRecords={120} onPageChange={onCustomPageChange2} className=\"p-jc-end p-my-3\"></Paginator>\r\n                <Paginator template={template3} first={customFirst3} rows={customRows3} totalRecords={120} onPageChange={onCustomPageChange3} className=\"p-jc-start p-my-3\"></Paginator>\r\n\r\n                <h5>Left and Right Content</h5>\r\n                <Paginator first={contentFirst} rows={1} totalRecords={12} onPageChange={onContentPageChange}\r\n                    leftContent={leftContent} rightContent={rightContent}\r\n                    template=\"FirstPageLink PrevPageLink CurrentPageReport NextPageLink LastPageLink\"></Paginator>\r\n\r\n                <div className=\"image-gallery\">\r\n                    <img alt={contentFirst} src={\\`showcase/demo/images/nature/nature\\${contentFirst + 1}.jpg\\`} onError={(e) => e.target.src = 'https://www.primefaces.org/wp-content/uploads/2020/05/placeholder.png'} />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n                `\r\n            }\r\n        };\r\n\r\n        this.extFiles = {\r\n            'src/demo/PaginatorDemo.css': {\r\n                content: `\r\n.paginator-demo .p-button.p-button-icon-only {\r\n    border-radius: 0;\r\n}\r\n\r\n.paginator-demo .image-gallery {\r\n    text-align: center;\r\n    padding: 1rem;\r\n}\r\n                `\r\n            }\r\n        }\r\n    }\r\n\r\n    shouldComponentUpdate() {\r\n        return false;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"content-section documentation\">\r\n                <TabView>\r\n                    <TabPanel header=\"Documentation\">\r\n                        <h5>Import</h5>\r\n<CodeHighlight lang=\"js\">\r\n{`\r\nimport { Paginator } from 'primereact/paginator';\r\n`}\r\n</CodeHighlight>\r\n\r\n                        <h5>Getting Started</h5>\r\n                        <p>Paginator is used as a controlled component with <i>first</i>, <i>rows</i> (optional) and <i>onPageChange</i> properties.</p>\r\n\r\n<CodeHighlight>\r\n{`\r\n<Paginator first={first} rows={rows} onPageChange={(e) => setFirst(e.first)}></Paginator>\r\n`}\r\n</CodeHighlight>\r\n\r\n                        <h5>Rows and TotalRecords</h5>\r\n                        <p>Rows and TotalRecords define how many pages the paginator should display. Paginator below will have 10 pages.</p>\r\n<CodeHighlight>\r\n{`\r\n<Paginator rows={10} totalRecords={120} first={first} onPageChange={(e) => setFirst(e.first)}></Paginator>\r\n`}\r\n</CodeHighlight>\r\n\r\n                        <h5>Rows Per Page</h5>\r\n                        <p>Number of items per page can be changed by the user using a dropdown if you define rowsPerPageOptions as an array of possible values. In this case,\r\n                        rows property should also be updated\r\n            </p>\r\n<CodeHighlight lang=\"js\">\r\n{`\r\nconst onPageChange = (e) => {\r\n    setFirst(e.first);\r\n    setRows(e.rows);\r\n}\r\n`}\r\n</CodeHighlight>\r\n<CodeHighlight>\r\n{`\r\n<Paginator first={first} rows={rows} totalRecords={120} rowsPerPageOptions={[10,20,30]} onPageChange={onPageChange}></Paginator>\r\n`}\r\n</CodeHighlight>\r\n\r\n                        <h5>Template</h5>\r\n                        <p>Paginator elements can be customized using the template property using the predefined keys, default value is\r\n                        \"FirstPageLink PrevPageLink PageLinks NextPageLink LastPageLink RowsPerPageDropdown\". Here are the available elements that\r\n            can be placed inside a paginator.</p>\r\n\r\n                        <ul>\r\n                            <li>FirstPageLink</li>\r\n                            <li>PrevPageLink</li>\r\n                            <li>PageLinks</li>\r\n                            <li>NextPageLink</li>\r\n                            <li>LastPageLink</li>\r\n                            <li>RowsPerPageDropdown</li>\r\n                            <li>CurrentPageReport</li>\r\n                        </ul>\r\n\r\n                        <p>The pagination element is fully customizable. To make special paginators, an object can be given to the <i>template</i> property as below.</p>\r\n<CodeHighlight lang=\"js\">\r\n{`\r\nconst template = {\r\n    layout: 'FirstPageLink PrevPageLink PageLinks NextPageLink LastPageLink RowsPerPageDropdown CurrentPageReport', // The above keys can be set in the desired order.\r\n    'FirstPageLink': (options) => {\r\n        // options.onClick: Click event for the default element.\r\n        // options.className: Style class of the default element.\r\n        // options.iconClassName: Style class of the default icon element.\r\n        // options.disabled: Indicates whether the element is disabled.\r\n        // options.element: Default element created by the component.\r\n        // options.props: Component props.\r\n\r\n        return CustomElement;\r\n    },\r\n    'PrevPageLink': (options) => {\r\n        // options.onClick: Click event for the default element.\r\n        // options.className: Style class of the default element.\r\n        // options.iconClassName: Style class of the default icon element.\r\n        // options.disabled: Indicates whether the element is disabled.\r\n        // options.element: Default element created by the component.\r\n        // options.props: Component props.\r\n\r\n        return CustomElement;\r\n    },\r\n    'PageLinks': (options) => {\r\n        // options.onClick: Click event for the default element.\r\n        // options.className: Style class of the default element.\r\n        // options.view: {\r\n        //     startPage: // First page displayed in view\r\n        //     endPage:   // Last page displayed in view\r\n        // }\r\n        // options.page: Current page in loop.\r\n        // options.currentPage: Current selected page.\r\n        // options.totalPages: Total pages in paginator\r\n        // options.element: Default element created by the component.\r\n        // options.props: Component props.\r\n\r\n        return CustomElement;\r\n    },\r\n    'NextPageLink': (options) => {\r\n        // options.onClick: Click event for the default element.\r\n        // options.className: Style class of the default element.\r\n        // options.iconClassName: Style class of the default icon element.\r\n        // options.disabled: Indicates whether the element is disabled.\r\n        // options.element: Default element created by the component.\r\n        // options.props: Component props.\r\n\r\n        return CustomElement;\r\n    },\r\n    'LastPageLink': (options) => {\r\n        // options.onClick: Click event for the default element.\r\n        // options.className: Style class of the default element.\r\n        // options.iconClassName: Style class of the default icon element.\r\n        // options.disabled: Indicates whether the element is disabled.\r\n        // options.element: Default element created by the component.\r\n        // options.props: Component props.\r\n\r\n        return CustomElement;\r\n    },\r\n    'RowsPerPageDropdown': (options) => {\r\n        // options.value: Current selected value in the default element.\r\n        // options.onChange: Change event for default element.\r\n        // options.currentPage: Current selected page.\r\n        // options.totalPages: Total pages in paginator.\r\n        // options.totalRecords: Total records in paginator.\r\n        // options.element: Default element created by the component.\r\n        // options.props: Component props.\r\n\r\n        return CustomElement;\r\n    },\r\n    'CurrentPageReport': (options) => {\r\n        // options.currentPage: Current selected page.\r\n        // options.totalPages: Total pages in paginator.\r\n        // options.first: Zero-relative number of the first row to be displayed.\r\n        // options.rows: Row count in a page.\r\n        // options.totalRecords: Total records in paginator.\r\n        // options.className: Style class of the default element.\r\n        // options.element: Default element created by the component.\r\n        // options.props: Component props.\r\n\r\n        return CustomElement;\r\n    }\r\n};\r\n`}\r\n</CodeHighlight>\r\n<CodeHighlight>\r\n{`\r\n<Paginator template={template} first={this.state.customFirst} rows={this.state.customRows} totalRecords={120} onPageChange={this.onCustomPageChange}></Paginator>\r\n`}\r\n</CodeHighlight>\r\n\r\n                        <h5>CurrentPageReport</h5>\r\n                        <p>Current page report item in the itemplate displays information about the pagination state. Default value is (&#123;currentPage&#125; of &#123;totalPages&#125;)\r\n                whereas available placeholders are the following;</p>\r\n                        <ul>\r\n                            <li>&#123;currentPage&#125;</li>\r\n                            <li>&#123;totalPages&#125;</li>\r\n                            <li>&#123;rows&#125;</li>\r\n                            <li>&#123;first&#125;</li>\r\n                            <li>&#123;last&#125;</li>\r\n                            <li>&#123;totalRecords&#125;</li>\r\n                        </ul>\r\n\r\n                        <h5>Properties</h5>\r\n                        <div className=\"doc-tablewrapper\">\r\n                            <table className=\"doc-table\">\r\n                                <thead>\r\n                                    <tr>\r\n                                        <th>Name</th>\r\n                                        <th>Type</th>\r\n                                        <th>Default</th>\r\n                                        <th>Description</th>\r\n                                    </tr>\r\n                                </thead>\r\n                                <tbody>\r\n                                    <tr>\r\n                                        <td>totalRecords</td>\r\n                                        <td>number</td>\r\n                                        <td>0</td>\r\n                                        <td>Number of total records.</td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>rows</td>\r\n                                        <td>number</td>\r\n                                        <td>0</td>\r\n                                        <td>Data count to display per page.</td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>first</td>\r\n                                        <td>number</td>\r\n                                        <td>0</td>\r\n                                        <td>Zero-relative number of the first row to be displayed.</td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>pageLinkSize</td>\r\n                                        <td>number</td>\r\n                                        <td>5</td>\r\n                                        <td>Number of page links to display.</td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>rowsPerPageOptions</td>\r\n                                        <td>array</td>\r\n                                        <td>null</td>\r\n                                        <td>Array of integer values to display inside rows per page dropdown.</td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>style</td>\r\n                                        <td>string</td>\r\n                                        <td>null</td>\r\n                                        <td>Inline style of the element.</td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>className</td>\r\n                                        <td>string</td>\r\n                                        <td>null</td>\r\n                                        <td>Style class of the element.</td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>template</td>\r\n                                        <td>string|object</td>\r\n                                        <td>FirstPageLink PrevPageLink PageLinks NextPageLink LastPageLink RowsPerPageDropdown</td>\r\n                                        <td>Template of the paginator.</td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>leftContent</td>\r\n                                        <td>any</td>\r\n                                        <td>null</td>\r\n                                        <td>Content to inject into the left side of the paginator.</td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>rightContent</td>\r\n                                        <td>any</td>\r\n                                        <td>null</td>\r\n                                        <td>Content to inject into the right side of the paginator.</td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>currentPageReportTemplate</td>\r\n                                        <td>string</td>\r\n                                        <td>(&#123;currentPage&#125; of &#123;totalPages&#125;)</td>\r\n                                        <td>Template of the current page report element. Available placeholders are\r\n                                        &#123;currentPage&#125;,&#123;totalPages&#125;,&#123;rows&#125;,&#123;first&#125;,&#123;last&#125; and &#123;totalRecords&#125;</td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>dropdownAppendTo</td>\r\n                                        <td>any</td>\r\n                                        <td>null</td>\r\n                                        <td>Target element to attach the paginator dropdown overlay.</td>\r\n                                    </tr>\r\n                                </tbody>\r\n                            </table>\r\n                        </div>\r\n\r\n                        <h5>Events</h5>\r\n                        <div className=\"doc-tablewrapper\">\r\n                            <table className=\"doc-table\">\r\n                                <thead>\r\n                                    <tr>\r\n                                        <th>Name</th>\r\n                                        <th>Parameters</th>\r\n                                        <th>Description</th>\r\n                                    </tr>\r\n                                </thead>\r\n                                <tbody>\r\n                                    <tr>\r\n                                        <td>onPageChange</td>\r\n                                        <td>event.page: New page number <br />\r\n                                event.first: Index of first record <br />\r\n                                event.rows: Number of rows to display in new page <br />\r\n                                event.page: Index of the new page <br />\r\n                                event.pageCount: Total number of pages\r\n                            </td>\r\n                                        <td>Callback to invoke when page changes, the event object contains information about the new state.</td>\r\n                                    </tr>\r\n                                </tbody>\r\n                            </table>\r\n                        </div>\r\n\r\n                        <h5>Styling</h5>\r\n                        <p>Following is the list of structural style classes, for theming classes visit <Link to=\"/theming\"> theming</Link> page.</p>\r\n                        <div className=\"doc-tablewrapper\">\r\n                            <table className=\"doc-table\">\r\n                                <thead>\r\n                                    <tr>\r\n                                        <th>Name</th>\r\n                                        <th>Element</th>\r\n                                    </tr>\r\n                                </thead>\r\n                                <tbody>\r\n                                    <tr>\r\n                                        <td>p-paginator</td>\r\n                                        <td>Container element.</td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>p-paginator-first</td>\r\n                                        <td>First page element.</td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>p-paginator-prev</td>\r\n                                        <td>Previous page element.</td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>p-paginator-pages</td>\r\n                                        <td>Container of page links.</td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>p-paginator-page</td>\r\n                                        <td>A page link.</td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>p-paginator-next</td>\r\n                                        <td>Next pge element.</td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>p-paginator-last</td>\r\n                                        <td>Last page element.</td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>p-paginator-rpp-options</td>\r\n                                        <td>Rows per page dropdown.</td>\r\n                                    </tr>\r\n                                </tbody>\r\n                            </table>\r\n\r\n                            <h5>Dependencies</h5>\r\n                            <p>None.</p>\r\n                        </div>\r\n\r\n                    </TabPanel>\r\n\r\n                    {\r\n                        useLiveEditorTabs({ name: 'PaginatorDemo', sources: this.sources, extFiles: this.extFiles })\r\n                    }\r\n                </TabView>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}