{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\zura.ph\\\\WebstormProjects\\\\slotmaster-dashboard\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\zura.ph\\\\WebstormProjects\\\\slotmaster-dashboard\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _inherits from \"C:\\\\Users\\\\zura.ph\\\\WebstormProjects\\\\slotmaster-dashboard\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _createSuper from \"C:\\\\Users\\\\zura.ph\\\\WebstormProjects\\\\slotmaster-dashboard\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"C:\\\\Users\\\\zura.ph\\\\WebstormProjects\\\\slotmaster-dashboard\\\\src\\\\showcase\\\\treetable\\\\TreeTablePageDemo.js\";\nimport React, { Component } from 'react';\nimport { TreeTable } from '../../components/treetable/TreeTable';\nimport { Column } from '../../components/column/Column';\nimport { TabView } from '../../components/tabview/TabView';\nimport { useLiveEditorTabs } from '../liveeditor/LiveEditor';\nimport { AppInlineHeader } from '../../AppInlineHeader';\nexport var TreeTablePageDemo = /*#__PURE__*/function (_Component) {\n  _inherits(TreeTablePageDemo, _Component);\n\n  var _super = _createSuper(TreeTablePageDemo);\n\n  function TreeTablePageDemo(props) {\n    var _this;\n\n    _classCallCheck(this, TreeTablePageDemo);\n\n    _this = _super.call(this, props);\n    _this.state = {\n      nodes: []\n    };\n    return _this;\n  }\n\n  _createClass(TreeTablePageDemo, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var files = [];\n\n      for (var i = 0; i < 50; i++) {\n        var node = {\n          key: i,\n          data: {\n            name: 'Item ' + i,\n            size: Math.floor(Math.random() * 1000) + 1 + 'kb',\n            type: 'Type ' + i\n          },\n          children: [{\n            key: i + ' - 0',\n            data: {\n              name: 'Item ' + i + ' - 0',\n              size: Math.floor(Math.random() * 1000) + 1 + 'kb',\n              type: 'Type ' + i\n            }\n          }]\n        };\n        files.push(node);\n      }\n\n      this.setState({\n        nodes: files\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"content-section introduction\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(AppInlineHeader, {\n        changelogText: \"treeTable\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(\"h1\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 25\n        }\n      }, \"TreeTable \", /*#__PURE__*/React.createElement(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 39\n        }\n      }, \"Page\")), /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 25\n        }\n      }, \"Pagination is enabled by setting paginator property to true and defining a rows property to specify the number of rows per page.\"))), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"content-section implementation\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"card\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(TreeTable, {\n        value: this.state.nodes,\n        paginator: true,\n        rows: 10,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(Column, {\n        field: \"name\",\n        header: \"Name\",\n        expander: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 29\n        }\n      }), /*#__PURE__*/React.createElement(Column, {\n        field: \"size\",\n        header: \"Size\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 29\n        }\n      }), /*#__PURE__*/React.createElement(Column, {\n        field: \"type\",\n        header: \"Type\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 29\n        }\n      })))), /*#__PURE__*/React.createElement(TreeTablePageDemoDoc, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 17\n        }\n      }));\n    }\n  }]);\n\n  return TreeTablePageDemo;\n}(Component);\n\nvar TreeTablePageDemoDoc = /*#__PURE__*/function (_Component2) {\n  _inherits(TreeTablePageDemoDoc, _Component2);\n\n  var _super2 = _createSuper(TreeTablePageDemoDoc);\n\n  function TreeTablePageDemoDoc(props) {\n    var _this2;\n\n    _classCallCheck(this, TreeTablePageDemoDoc);\n\n    _this2 = _super2.call(this, props);\n    _this2.sources = {\n      'class': {\n        tabName: 'Class Source',\n        content: \"\\nimport React, { Component } from 'react';\\nimport { TreeTable } from 'primereact/treetable';\\nimport { Column } from 'primereact/column';\\n\\nexport class TreeTablePageDemo extends Component {\\n\\n    constructor(props) {\\n        super(props);\\n        this.state = {\\n            nodes: []\\n        };\\n    }\\n\\n    componentDidMount() {\\n        let files = [];\\n        for (let i = 0; i < 50; i++) {\\n            let node = {\\n                key: i,\\n                data: {\\n                    name: 'Item ' + i,\\n                    size: Math.floor(Math.random() * 1000) + 1 + 'kb',\\n                    type: 'Type ' + i\\n                },\\n                children: [\\n                    {\\n                        key: i + ' - 0',\\n                        data: {\\n                            name: 'Item ' + i + ' - 0',\\n                            size: Math.floor(Math.random() * 1000) + 1 + 'kb',\\n                            type: 'Type ' + i\\n                        }\\n                    }\\n                ]\\n            };\\n\\n            files.push(node);\\n        }\\n\\n        this.setState({\\n            nodes: files\\n        });\\n    }\\n\\n    render() {\\n        return (\\n            <div>\\n                <div className=\\\"card\\\">\\n                    <TreeTable value={this.state.nodes} paginator rows={10}>\\n                        <Column field=\\\"name\\\" header=\\\"Name\\\" expander></Column>\\n                        <Column field=\\\"size\\\" header=\\\"Size\\\"></Column>\\n                        <Column field=\\\"type\\\" header=\\\"Type\\\"></Column>\\n                    </TreeTable>\\n                </div>\\n            </div>\\n        )\\n    }\\n}\\n                \"\n      },\n      'hooks': {\n        tabName: 'Hooks Source',\n        content: \"\\nimport React, { useState, useEffect } from 'react';\\nimport { TreeTable } from 'primereact/treetable';\\nimport { Column } from 'primereact/column';\\n\\nconst TreeTablePageDemo = () => {\\n    const [nodes, setNodes] = useState([]);\\n\\n    useEffect(() => {\\n        let files = [];\\n        for (let i = 0; i < 50; i++) {\\n            let node = {\\n                key: i,\\n                data: {\\n                    name: 'Item ' + i,\\n                    size: Math.floor(Math.random() * 1000) + 1 + 'kb',\\n                    type: 'Type ' + i\\n                },\\n                children: [\\n                    {\\n                        key: i + ' - 0',\\n                        data: {\\n                            name: 'Item ' + i + ' - 0',\\n                            size: Math.floor(Math.random() * 1000) + 1 + 'kb',\\n                            type: 'Type ' + i\\n                        }\\n                    }\\n                ]\\n            };\\n\\n            files.push(node);\\n        }\\n\\n        setNodes(files);\\n    }, []); // eslint-disable-line react-hooks/exhaustive-deps\\n\\n    return (\\n        <div>\\n            <div className=\\\"card\\\">\\n                <TreeTable value={nodes} paginator rows={10}>\\n                    <Column field=\\\"name\\\" header=\\\"Name\\\" expander></Column>\\n                    <Column field=\\\"size\\\" header=\\\"Size\\\"></Column>\\n                    <Column field=\\\"type\\\" header=\\\"Type\\\"></Column>\\n                </TreeTable>\\n            </div>\\n        </div>\\n    );\\n}\\n                \"\n      },\n      'ts': {\n        tabName: 'TS Source',\n        content: \"\\nimport React, { useState, useEffect } from 'react';\\nimport { TreeTable } from 'primereact/treetable';\\nimport { Column } from 'primereact/column';\\n\\nconst TreeTablePageDemo = () => {\\n    const [nodes, setNodes] = useState([]);\\n\\n    useEffect(() => {\\n        let files = [];\\n        for (let i = 0; i < 50; i++) {\\n            let node = {\\n                key: i,\\n                data: {\\n                    name: 'Item ' + i,\\n                    size: Math.floor(Math.random() * 1000) + 1 + 'kb',\\n                    type: 'Type ' + i\\n                },\\n                children: [\\n                    {\\n                        key: i + ' - 0',\\n                        data: {\\n                            name: 'Item ' + i + ' - 0',\\n                            size: Math.floor(Math.random() * 1000) + 1 + 'kb',\\n                            type: 'Type ' + i\\n                        }\\n                    }\\n                ]\\n            };\\n\\n            files.push(node);\\n        }\\n\\n        setNodes(files);\\n    }, []); // eslint-disable-line react-hooks/exhaustive-deps\\n\\n    return (\\n        <div>\\n            <div className=\\\"card\\\">\\n                <TreeTable value={nodes} paginator rows={10}>\\n                    <Column field=\\\"name\\\" header=\\\"Name\\\" expander></Column>\\n                    <Column field=\\\"size\\\" header=\\\"Size\\\"></Column>\\n                    <Column field=\\\"type\\\" header=\\\"Type\\\"></Column>\\n                </TreeTable>\\n            </div>\\n        </div>\\n    );\\n}\\n                \"\n      }\n    };\n    return _this2;\n  }\n\n  _createClass(TreeTablePageDemoDoc, [{\n    key: \"shouldComponentUpdate\",\n    value: function shouldComponentUpdate() {\n      return false;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"content-section documentation\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 254,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(TabView, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 255,\n          columnNumber: 17\n        }\n      }, useLiveEditorTabs({\n        name: 'TreeTablePageDemo',\n        sources: this.sources\n      })));\n    }\n  }]);\n\n  return TreeTablePageDemoDoc;\n}(Component);","map":{"version":3,"sources":["C:/Users/zura.ph/WebstormProjects/slotmaster-dashboard/src/showcase/treetable/TreeTablePageDemo.js"],"names":["React","Component","TreeTable","Column","TabView","useLiveEditorTabs","AppInlineHeader","TreeTablePageDemo","props","state","nodes","files","i","node","key","data","name","size","Math","floor","random","type","children","push","setState","TreeTablePageDemoDoc","sources","tabName","content"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { TreeTable } from '../../components/treetable/TreeTable';\r\nimport { Column } from '../../components/column/Column';\r\nimport { TabView } from '../../components/tabview/TabView';\r\nimport { useLiveEditorTabs }from '../liveeditor/LiveEditor';\r\nimport { AppInlineHeader } from '../../AppInlineHeader';\r\n\r\nexport class TreeTablePageDemo extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            nodes: []\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        let files = [];\r\n        for (let i = 0; i < 50; i++) {\r\n            let node = {\r\n                key: i,\r\n                data: {\r\n                    name: 'Item ' + i,\r\n                    size: Math.floor(Math.random() * 1000) + 1 + 'kb',\r\n                    type: 'Type ' + i\r\n                },\r\n                children: [\r\n                    {\r\n                        key: i + ' - 0',\r\n                        data: {\r\n                            name: 'Item ' + i + ' - 0',\r\n                            size: Math.floor(Math.random() * 1000) + 1 + 'kb',\r\n                            type: 'Type ' + i\r\n                        }\r\n                    }\r\n                ]\r\n            };\r\n\r\n            files.push(node);\r\n        }\r\n\r\n        this.setState({\r\n            nodes: files\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div className=\"content-section introduction\">\r\n                    <AppInlineHeader changelogText=\"treeTable\">\r\n                        <h1>TreeTable <span>Page</span></h1>\r\n                        <p>Pagination is enabled by setting paginator property to true and defining a rows property to specify the number of rows per page.</p>\r\n                    </AppInlineHeader>\r\n                </div>\r\n\r\n                <div className=\"content-section implementation\">\r\n                    <div className=\"card\">\r\n                        <TreeTable value={this.state.nodes} paginator rows={10}>\r\n                            <Column field=\"name\" header=\"Name\" expander></Column>\r\n                            <Column field=\"size\" header=\"Size\"></Column>\r\n                            <Column field=\"type\" header=\"Type\"></Column>\r\n                        </TreeTable>\r\n                    </div>\r\n                </div>\r\n\r\n                <TreeTablePageDemoDoc />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nclass TreeTablePageDemoDoc extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.sources = {\r\n            'class': {\r\n                tabName: 'Class Source',\r\n                content: `\r\nimport React, { Component } from 'react';\r\nimport { TreeTable } from 'primereact/treetable';\r\nimport { Column } from 'primereact/column';\r\n\r\nexport class TreeTablePageDemo extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            nodes: []\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        let files = [];\r\n        for (let i = 0; i < 50; i++) {\r\n            let node = {\r\n                key: i,\r\n                data: {\r\n                    name: 'Item ' + i,\r\n                    size: Math.floor(Math.random() * 1000) + 1 + 'kb',\r\n                    type: 'Type ' + i\r\n                },\r\n                children: [\r\n                    {\r\n                        key: i + ' - 0',\r\n                        data: {\r\n                            name: 'Item ' + i + ' - 0',\r\n                            size: Math.floor(Math.random() * 1000) + 1 + 'kb',\r\n                            type: 'Type ' + i\r\n                        }\r\n                    }\r\n                ]\r\n            };\r\n\r\n            files.push(node);\r\n        }\r\n\r\n        this.setState({\r\n            nodes: files\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div className=\"card\">\r\n                    <TreeTable value={this.state.nodes} paginator rows={10}>\r\n                        <Column field=\"name\" header=\"Name\" expander></Column>\r\n                        <Column field=\"size\" header=\"Size\"></Column>\r\n                        <Column field=\"type\" header=\"Type\"></Column>\r\n                    </TreeTable>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n                `\r\n            },\r\n            'hooks': {\r\n                tabName: 'Hooks Source',\r\n                content: `\r\nimport React, { useState, useEffect } from 'react';\r\nimport { TreeTable } from 'primereact/treetable';\r\nimport { Column } from 'primereact/column';\r\n\r\nconst TreeTablePageDemo = () => {\r\n    const [nodes, setNodes] = useState([]);\r\n\r\n    useEffect(() => {\r\n        let files = [];\r\n        for (let i = 0; i < 50; i++) {\r\n            let node = {\r\n                key: i,\r\n                data: {\r\n                    name: 'Item ' + i,\r\n                    size: Math.floor(Math.random() * 1000) + 1 + 'kb',\r\n                    type: 'Type ' + i\r\n                },\r\n                children: [\r\n                    {\r\n                        key: i + ' - 0',\r\n                        data: {\r\n                            name: 'Item ' + i + ' - 0',\r\n                            size: Math.floor(Math.random() * 1000) + 1 + 'kb',\r\n                            type: 'Type ' + i\r\n                        }\r\n                    }\r\n                ]\r\n            };\r\n\r\n            files.push(node);\r\n        }\r\n\r\n        setNodes(files);\r\n    }, []); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"card\">\r\n                <TreeTable value={nodes} paginator rows={10}>\r\n                    <Column field=\"name\" header=\"Name\" expander></Column>\r\n                    <Column field=\"size\" header=\"Size\"></Column>\r\n                    <Column field=\"type\" header=\"Type\"></Column>\r\n                </TreeTable>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n                `\r\n            },\r\n            'ts': {\r\n                tabName: 'TS Source',\r\n                content: `\r\nimport React, { useState, useEffect } from 'react';\r\nimport { TreeTable } from 'primereact/treetable';\r\nimport { Column } from 'primereact/column';\r\n\r\nconst TreeTablePageDemo = () => {\r\n    const [nodes, setNodes] = useState([]);\r\n\r\n    useEffect(() => {\r\n        let files = [];\r\n        for (let i = 0; i < 50; i++) {\r\n            let node = {\r\n                key: i,\r\n                data: {\r\n                    name: 'Item ' + i,\r\n                    size: Math.floor(Math.random() * 1000) + 1 + 'kb',\r\n                    type: 'Type ' + i\r\n                },\r\n                children: [\r\n                    {\r\n                        key: i + ' - 0',\r\n                        data: {\r\n                            name: 'Item ' + i + ' - 0',\r\n                            size: Math.floor(Math.random() * 1000) + 1 + 'kb',\r\n                            type: 'Type ' + i\r\n                        }\r\n                    }\r\n                ]\r\n            };\r\n\r\n            files.push(node);\r\n        }\r\n\r\n        setNodes(files);\r\n    }, []); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"card\">\r\n                <TreeTable value={nodes} paginator rows={10}>\r\n                    <Column field=\"name\" header=\"Name\" expander></Column>\r\n                    <Column field=\"size\" header=\"Size\"></Column>\r\n                    <Column field=\"type\" header=\"Type\"></Column>\r\n                </TreeTable>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n                `\r\n            }\r\n        }\r\n    }\r\n\r\n    shouldComponentUpdate() {\r\n        return false;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"content-section documentation\">\r\n                <TabView>\r\n                    {\r\n                        useLiveEditorTabs({ name: 'TreeTablePageDemo', sources: this.sources })\r\n                    }\r\n                </TabView>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}