{"ast":null,"code":"import _objectSpread from \"C:\\\\Users\\\\zura.ph\\\\WebstormProjects\\\\zloto\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\nimport _classCallCheck from \"C:\\\\Users\\\\zura.ph\\\\WebstormProjects\\\\zloto\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\zura.ph\\\\WebstormProjects\\\\zloto\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _inherits from \"C:\\\\Users\\\\zura.ph\\\\WebstormProjects\\\\zloto\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _createSuper from \"C:\\\\Users\\\\zura.ph\\\\WebstormProjects\\\\zloto\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"C:\\\\Users\\\\zura.ph\\\\WebstormProjects\\\\zloto\\\\src\\\\showcase\\\\tree\\\\TreeContextMenuDemo.js\";\nimport React, { Component } from 'react';\nimport { Tree } from '../../components/tree/Tree';\nimport { ContextMenu } from '../../components/contextmenu/ContextMenu';\nimport { Toast } from '../../components/toast/Toast';\nimport { NodeService } from '../service/NodeService';\nimport { TabView } from '../../components/tabview/TabView';\nimport { useLiveEditorTabs } from '../liveeditor/LiveEditor';\nimport { AppInlineHeader } from '../../AppInlineHeader';\nexport var TreeContextMenuDemo = /*#__PURE__*/function (_Component) {\n  _inherits(TreeContextMenuDemo, _Component);\n\n  var _super = _createSuper(TreeContextMenuDemo);\n\n  function TreeContextMenuDemo(props) {\n    var _this;\n\n    _classCallCheck(this, TreeContextMenuDemo);\n\n    _this = _super.call(this, props);\n    _this.state = {\n      nodes: null,\n      expandedKeys: {},\n      selectedNodeKey: null\n    };\n    _this.menu = [{\n      label: 'View Key',\n      icon: 'pi pi-search',\n      command: function command() {\n        _this.toast.show({\n          severity: 'success',\n          summary: 'Node Key',\n          detail: _this.state.selectedNodeKey\n        });\n      }\n    }, {\n      label: 'Toggle',\n      icon: 'pi pi-cog',\n      command: function command() {\n        var expandedKeys = _objectSpread({}, _this.state.expandedKeys);\n\n        if (expandedKeys[_this.state.selectedNodeKey]) delete expandedKeys[_this.state.selectedNodeKey];else expandedKeys[_this.state.selectedNodeKey] = true;\n\n        _this.setState({\n          expandedKeys: expandedKeys\n        });\n      }\n    }];\n    _this.nodeService = new NodeService();\n    return _this;\n  }\n\n  _createClass(TreeContextMenuDemo, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      this.nodeService.getTreeNodes().then(function (data) {\n        return _this2.setState({\n          nodes: data\n        });\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"content-section introduction\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(AppInlineHeader, {\n        changelogText: \"tree\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(\"h1\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 25\n        }\n      }, \"Tree \", /*#__PURE__*/React.createElement(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 34\n        }\n      }, \"ContextMenu\")), /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 25\n        }\n      }, \"Tree has exclusive integration with the ContextMenu component with support for different menus depending on the node.\"))), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"content-section implementation\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(Toast, {\n        ref: function ref(el) {\n          return _this3.toast = el;\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 21\n        }\n      }), /*#__PURE__*/React.createElement(ContextMenu, {\n        model: this.menu,\n        ref: function ref(el) {\n          return _this3.cm = el;\n        },\n        onHide: function onHide() {\n          return _this3.setState({\n            selectedNodeKey: null\n          });\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 21\n        }\n      }), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"card\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(Tree, {\n        value: this.state.nodes,\n        expandedKeys: this.state.expandedKeys,\n        onToggle: function onToggle(e) {\n          return _this3.setState({\n            expandedKeys: e.value\n          });\n        },\n        contextMenuSelectionKey: this.state.selectedNodeKey,\n        onContextMenuSelectionChange: function onContextMenuSelectionChange(event) {\n          return _this3.setState({\n            selectedNodeKey: event.value\n          });\n        },\n        onContextMenu: function onContextMenu(event) {\n          return _this3.cm.show(event.originalEvent);\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 25\n        }\n      }))), /*#__PURE__*/React.createElement(TreeContextMenuDemoDoc, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 17\n        }\n      }));\n    }\n  }]);\n\n  return TreeContextMenuDemo;\n}(Component);\nexport var TreeContextMenuDemoDoc = /*#__PURE__*/function (_Component2) {\n  _inherits(TreeContextMenuDemoDoc, _Component2);\n\n  var _super2 = _createSuper(TreeContextMenuDemoDoc);\n\n  function TreeContextMenuDemoDoc(props) {\n    var _this4;\n\n    _classCallCheck(this, TreeContextMenuDemoDoc);\n\n    _this4 = _super2.call(this, props);\n    _this4.sources = {\n      'class': {\n        tabName: 'Class Source',\n        content: \"\\nimport React, { Component } from 'react';\\nimport { Tree } from 'primereact/tree';\\nimport { ContextMenu } from 'primereact/contextmenu';\\nimport { Toast} from 'primereact/toast';\\nimport { NodeService } from '../service/NodeService';\\n\\nexport class TreeContextMenuDemo extends Component {\\n\\n    constructor(props) {\\n        super(props);\\n        this.state = {\\n            nodes: null,\\n            expandedKeys: {},\\n            selectedNodeKey: null\\n        };\\n\\n        this.menu = [\\n            {\\n                label: 'View Key',\\n                icon: 'pi pi-search',\\n                command: () => {\\n                    this.toast.show({severity: 'success', summary: 'Node Key', detail: this.state.selectedNodeKey});\\n                }\\n            },\\n            {\\n                label: 'Toggle',\\n                icon: 'pi pi-cog',\\n                command: () => {\\n                    let expandedKeys = {...this.state.expandedKeys};\\n                    if (expandedKeys[this.state.selectedNodeKey])\\n                        delete expandedKeys[this.state.selectedNodeKey];\\n                    else\\n                        expandedKeys[this.state.selectedNodeKey] = true;\\n\\n                    this.setState({expandedKeys: expandedKeys});\\n                }\\n            }\\n        ];\\n\\n        this.nodeService = new NodeService();\\n    }\\n\\n    componentDidMount() {\\n        this.nodeService.getTreeNodes().then(data => this.setState({ nodes: data }));\\n    }\\n\\n    render() {\\n        return (\\n            <div>\\n                <Toast ref={(el) => this.toast = el} />\\n\\n                <ContextMenu model={this.menu} ref={el => this.cm = el} onHide={() => this.setState({ selectedNodeKey: null })}/>\\n\\n                <div className=\\\"card\\\">\\n                    <Tree value={this.state.nodes} expandedKeys={this.state.expandedKeys} onToggle={e => this.setState({ expandedKeys: e.value })}\\n                        contextMenuSelectionKey={this.state.selectedNodeKey} onContextMenuSelectionChange={event => this.setState({ selectedNodeKey: event.value })}\\n                        onContextMenu={event => this.cm.show(event.originalEvent)} />\\n                </div>\\n            </div>\\n        )\\n    }\\n}\\n                \"\n      },\n      'hooks': {\n        tabName: 'Hooks Source',\n        content: \"\\nimport React, { useState, useEffect, useRef } from 'react';\\nimport { Tree } from 'primereact/tree';\\nimport { ContextMenu } from 'primereact/contextmenu';\\nimport { Toast} from 'primereact/toast';\\nimport { NodeService } from '../service/NodeService';\\n\\nconst TreeContextMenuDemo = () => {\\n    const [nodes, setNodes] = useState(null);\\n    const [expandedKeys, setExpandedKeys] = useState({});\\n    const [selectedNodeKey, setSelectedNodeKey] = useState(null);\\n    const toast = useRef(null);\\n    const cm = useRef(null);\\n    const menu = [\\n        {\\n            label: 'View Key',\\n            icon: 'pi pi-search',\\n            command: () => {\\n                toast.current.show({severity: 'success', summary: 'Node Key', detail: selectedNodeKey});\\n            }\\n        },\\n        {\\n            label: 'Toggle',\\n            icon: 'pi pi-cog',\\n            command: () => {\\n                let _expandedKeys = {...expandedKeys};\\n                if (_expandedKeys[selectedNodeKey])\\n                    delete _expandedKeys[selectedNodeKey];\\n                else\\n                    _expandedKeys[selectedNodeKey] = true;\\n\\n                setExpandedKeys(_expandedKeys);\\n            }\\n        }\\n    ];\\n\\n    const nodeService = new NodeService();\\n\\n    useEffect(() => {\\n        nodeService.getTreeNodes().then(data => setNodes(data));\\n    }, []); // eslint-disable-line react-hooks/exhaustive-deps\\n\\n    return (\\n        <div>\\n            <Toast ref={toast} />\\n\\n            <ContextMenu model={menu} ref={cm} onHide={() => setSelectedNodeKey(null)}/>\\n\\n            <div className=\\\"card\\\">\\n                <Tree value={nodes} expandedKeys={expandedKeys} onToggle={e => setExpandedKeys(e.value)}\\n                    contextMenuSelectionKey={selectedNodeKey} onContextMenuSelectionChange={event => setSelectedNodeKey(event.value)}\\n                    onContextMenu={event => cm.current.show(event.originalEvent)} />\\n            </div>\\n        </div>\\n    )\\n}\\n                \"\n      },\n      'ts': {\n        tabName: 'TS Source',\n        content: \"\\nimport React, { useState, useEffect, useRef } from 'react';\\nimport { Tree } from 'primereact/tree';\\nimport { ContextMenu } from 'primereact/contextmenu';\\nimport { Toast} from 'primereact/toast';\\nimport { NodeService } from '../service/NodeService';\\n\\nconst TreeContextMenuDemo = () => {\\n    const [nodes, setNodes] = useState(null);\\n    const [expandedKeys, setExpandedKeys] = useState({});\\n    const [selectedNodeKey, setSelectedNodeKey] = useState(null);\\n    const toast = useRef(null);\\n    const cm = useRef(null);\\n    const menu = [\\n        {\\n            label: 'View Key',\\n            icon: 'pi pi-search',\\n            command: () => {\\n                toast.current.show({severity: 'success', summary: 'Node Key', detail: selectedNodeKey});\\n            }\\n        },\\n        {\\n            label: 'Toggle',\\n            icon: 'pi pi-cog',\\n            command: () => {\\n                let _expandedKeys = {...expandedKeys};\\n                if (_expandedKeys[selectedNodeKey])\\n                    delete _expandedKeys[selectedNodeKey];\\n                else\\n                    _expandedKeys[selectedNodeKey] = true;\\n\\n                setExpandedKeys(_expandedKeys);\\n            }\\n        }\\n    ];\\n\\n    const nodeService = new NodeService();\\n\\n    useEffect(() => {\\n        nodeService.getTreeNodes().then(data => setNodes(data));\\n    }, []); // eslint-disable-line react-hooks/exhaustive-deps\\n\\n    return (\\n        <div>\\n            <Toast ref={toast} />\\n\\n            <ContextMenu model={menu} ref={cm} onHide={() => setSelectedNodeKey(null)}/>\\n\\n            <div className=\\\"card\\\">\\n                <Tree value={nodes} expandedKeys={expandedKeys} onToggle={e => setExpandedKeys(e.value)}\\n                    contextMenuSelectionKey={selectedNodeKey} onContextMenuSelectionChange={event => setSelectedNodeKey(event.value)}\\n                    onContextMenu={event => cm.current.show(event.originalEvent)} />\\n            </div>\\n        </div>\\n    )\\n}\\n                \"\n      }\n    };\n    return _this4;\n  }\n\n  _createClass(TreeContextMenuDemoDoc, [{\n    key: \"shouldComponentUpdate\",\n    value: function shouldComponentUpdate() {\n      return false;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"content-section documentation\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 280,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(TabView, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 281,\n          columnNumber: 17\n        }\n      }, useLiveEditorTabs({\n        name: 'TreeContextMenuDemo',\n        sources: this.sources,\n        service: 'NodeService',\n        data: 'treenodes'\n      })));\n    }\n  }]);\n\n  return TreeContextMenuDemoDoc;\n}(Component);","map":{"version":3,"sources":["C:/Users/zura.ph/WebstormProjects/zloto/src/showcase/tree/TreeContextMenuDemo.js"],"names":["React","Component","Tree","ContextMenu","Toast","NodeService","TabView","useLiveEditorTabs","AppInlineHeader","TreeContextMenuDemo","props","state","nodes","expandedKeys","selectedNodeKey","menu","label","icon","command","toast","show","severity","summary","detail","setState","nodeService","getTreeNodes","then","data","el","cm","e","value","event","originalEvent","TreeContextMenuDemoDoc","sources","tabName","content","name","service"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { Tree } from '../../components/tree/Tree';\r\nimport { ContextMenu } from '../../components/contextmenu/ContextMenu';\r\nimport { Toast} from '../../components/toast/Toast';\r\nimport { NodeService } from '../service/NodeService';\r\nimport { TabView } from '../../components/tabview/TabView';\r\nimport { useLiveEditorTabs }from '../liveeditor/LiveEditor';\r\nimport { AppInlineHeader } from '../../AppInlineHeader';\r\n\r\nexport class TreeContextMenuDemo extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            nodes: null,\r\n            expandedKeys: {},\r\n            selectedNodeKey: null\r\n        };\r\n\r\n        this.menu = [\r\n            {\r\n                label: 'View Key',\r\n                icon: 'pi pi-search',\r\n                command: () => {\r\n                    this.toast.show({severity: 'success', summary: 'Node Key', detail: this.state.selectedNodeKey});\r\n                }\r\n            },\r\n            {\r\n                label: 'Toggle',\r\n                icon: 'pi pi-cog',\r\n                command: () => {\r\n                    let expandedKeys = {...this.state.expandedKeys};\r\n                    if (expandedKeys[this.state.selectedNodeKey])\r\n                        delete expandedKeys[this.state.selectedNodeKey];\r\n                    else\r\n                        expandedKeys[this.state.selectedNodeKey] = true;\r\n\r\n                    this.setState({expandedKeys: expandedKeys});\r\n                }\r\n            }\r\n        ];\r\n\r\n        this.nodeService = new NodeService();\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.nodeService.getTreeNodes().then(data => this.setState({ nodes: data }));\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div className=\"content-section introduction\">\r\n                    <AppInlineHeader changelogText=\"tree\">\r\n                        <h1>Tree <span>ContextMenu</span></h1>\r\n                        <p>Tree has exclusive integration with the ContextMenu component with support for different menus depending on the node.</p>\r\n                    </AppInlineHeader>\r\n                </div>\r\n\r\n                <div className=\"content-section implementation\">\r\n                    <Toast ref={(el) => this.toast = el} />\r\n\r\n                    <ContextMenu model={this.menu} ref={el => this.cm = el} onHide={() => this.setState({ selectedNodeKey: null })}/>\r\n\r\n                    <div className=\"card\">\r\n                        <Tree value={this.state.nodes} expandedKeys={this.state.expandedKeys} onToggle={e => this.setState({ expandedKeys: e.value })}\r\n                            contextMenuSelectionKey={this.state.selectedNodeKey} onContextMenuSelectionChange={event => this.setState({ selectedNodeKey: event.value })}\r\n                            onContextMenu={event => this.cm.show(event.originalEvent)} />\r\n                    </div>\r\n                </div>\r\n\r\n                <TreeContextMenuDemoDoc />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport class TreeContextMenuDemoDoc extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.sources = {\r\n            'class': {\r\n                tabName: 'Class Source',\r\n                content: `\r\nimport React, { Component } from 'react';\r\nimport { Tree } from 'primereact/tree';\r\nimport { ContextMenu } from 'primereact/contextmenu';\r\nimport { Toast} from 'primereact/toast';\r\nimport { NodeService } from '../service/NodeService';\r\n\r\nexport class TreeContextMenuDemo extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            nodes: null,\r\n            expandedKeys: {},\r\n            selectedNodeKey: null\r\n        };\r\n\r\n        this.menu = [\r\n            {\r\n                label: 'View Key',\r\n                icon: 'pi pi-search',\r\n                command: () => {\r\n                    this.toast.show({severity: 'success', summary: 'Node Key', detail: this.state.selectedNodeKey});\r\n                }\r\n            },\r\n            {\r\n                label: 'Toggle',\r\n                icon: 'pi pi-cog',\r\n                command: () => {\r\n                    let expandedKeys = {...this.state.expandedKeys};\r\n                    if (expandedKeys[this.state.selectedNodeKey])\r\n                        delete expandedKeys[this.state.selectedNodeKey];\r\n                    else\r\n                        expandedKeys[this.state.selectedNodeKey] = true;\r\n\r\n                    this.setState({expandedKeys: expandedKeys});\r\n                }\r\n            }\r\n        ];\r\n\r\n        this.nodeService = new NodeService();\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.nodeService.getTreeNodes().then(data => this.setState({ nodes: data }));\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Toast ref={(el) => this.toast = el} />\r\n\r\n                <ContextMenu model={this.menu} ref={el => this.cm = el} onHide={() => this.setState({ selectedNodeKey: null })}/>\r\n\r\n                <div className=\"card\">\r\n                    <Tree value={this.state.nodes} expandedKeys={this.state.expandedKeys} onToggle={e => this.setState({ expandedKeys: e.value })}\r\n                        contextMenuSelectionKey={this.state.selectedNodeKey} onContextMenuSelectionChange={event => this.setState({ selectedNodeKey: event.value })}\r\n                        onContextMenu={event => this.cm.show(event.originalEvent)} />\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n                `\r\n            },\r\n            'hooks': {\r\n                tabName: 'Hooks Source',\r\n                content: `\r\nimport React, { useState, useEffect, useRef } from 'react';\r\nimport { Tree } from 'primereact/tree';\r\nimport { ContextMenu } from 'primereact/contextmenu';\r\nimport { Toast} from 'primereact/toast';\r\nimport { NodeService } from '../service/NodeService';\r\n\r\nconst TreeContextMenuDemo = () => {\r\n    const [nodes, setNodes] = useState(null);\r\n    const [expandedKeys, setExpandedKeys] = useState({});\r\n    const [selectedNodeKey, setSelectedNodeKey] = useState(null);\r\n    const toast = useRef(null);\r\n    const cm = useRef(null);\r\n    const menu = [\r\n        {\r\n            label: 'View Key',\r\n            icon: 'pi pi-search',\r\n            command: () => {\r\n                toast.current.show({severity: 'success', summary: 'Node Key', detail: selectedNodeKey});\r\n            }\r\n        },\r\n        {\r\n            label: 'Toggle',\r\n            icon: 'pi pi-cog',\r\n            command: () => {\r\n                let _expandedKeys = {...expandedKeys};\r\n                if (_expandedKeys[selectedNodeKey])\r\n                    delete _expandedKeys[selectedNodeKey];\r\n                else\r\n                    _expandedKeys[selectedNodeKey] = true;\r\n\r\n                setExpandedKeys(_expandedKeys);\r\n            }\r\n        }\r\n    ];\r\n\r\n    const nodeService = new NodeService();\r\n\r\n    useEffect(() => {\r\n        nodeService.getTreeNodes().then(data => setNodes(data));\r\n    }, []); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n    return (\r\n        <div>\r\n            <Toast ref={toast} />\r\n\r\n            <ContextMenu model={menu} ref={cm} onHide={() => setSelectedNodeKey(null)}/>\r\n\r\n            <div className=\"card\">\r\n                <Tree value={nodes} expandedKeys={expandedKeys} onToggle={e => setExpandedKeys(e.value)}\r\n                    contextMenuSelectionKey={selectedNodeKey} onContextMenuSelectionChange={event => setSelectedNodeKey(event.value)}\r\n                    onContextMenu={event => cm.current.show(event.originalEvent)} />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n                `\r\n            },\r\n            'ts': {\r\n                tabName: 'TS Source',\r\n                content: `\r\nimport React, { useState, useEffect, useRef } from 'react';\r\nimport { Tree } from 'primereact/tree';\r\nimport { ContextMenu } from 'primereact/contextmenu';\r\nimport { Toast} from 'primereact/toast';\r\nimport { NodeService } from '../service/NodeService';\r\n\r\nconst TreeContextMenuDemo = () => {\r\n    const [nodes, setNodes] = useState(null);\r\n    const [expandedKeys, setExpandedKeys] = useState({});\r\n    const [selectedNodeKey, setSelectedNodeKey] = useState(null);\r\n    const toast = useRef(null);\r\n    const cm = useRef(null);\r\n    const menu = [\r\n        {\r\n            label: 'View Key',\r\n            icon: 'pi pi-search',\r\n            command: () => {\r\n                toast.current.show({severity: 'success', summary: 'Node Key', detail: selectedNodeKey});\r\n            }\r\n        },\r\n        {\r\n            label: 'Toggle',\r\n            icon: 'pi pi-cog',\r\n            command: () => {\r\n                let _expandedKeys = {...expandedKeys};\r\n                if (_expandedKeys[selectedNodeKey])\r\n                    delete _expandedKeys[selectedNodeKey];\r\n                else\r\n                    _expandedKeys[selectedNodeKey] = true;\r\n\r\n                setExpandedKeys(_expandedKeys);\r\n            }\r\n        }\r\n    ];\r\n\r\n    const nodeService = new NodeService();\r\n\r\n    useEffect(() => {\r\n        nodeService.getTreeNodes().then(data => setNodes(data));\r\n    }, []); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n    return (\r\n        <div>\r\n            <Toast ref={toast} />\r\n\r\n            <ContextMenu model={menu} ref={cm} onHide={() => setSelectedNodeKey(null)}/>\r\n\r\n            <div className=\"card\">\r\n                <Tree value={nodes} expandedKeys={expandedKeys} onToggle={e => setExpandedKeys(e.value)}\r\n                    contextMenuSelectionKey={selectedNodeKey} onContextMenuSelectionChange={event => setSelectedNodeKey(event.value)}\r\n                    onContextMenu={event => cm.current.show(event.originalEvent)} />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n                `\r\n            }\r\n        }\r\n    }\r\n\r\n    shouldComponentUpdate() {\r\n        return false;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"content-section documentation\">\r\n                <TabView>\r\n                    {\r\n                        useLiveEditorTabs({ name: 'TreeContextMenuDemo', sources: this.sources, service: 'NodeService', data: 'treenodes' })\r\n                    }\r\n                </TabView>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}