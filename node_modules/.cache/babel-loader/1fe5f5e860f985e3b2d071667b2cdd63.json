{"ast":null,"code":"import _createForOfIteratorHelper from \"C:\\\\Users\\\\zura.ph\\\\WebstormProjects\\\\slotmaster-dashboard\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createForOfIteratorHelper\";\nimport _objectSpread from \"C:\\\\Users\\\\zura.ph\\\\WebstormProjects\\\\slotmaster-dashboard\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\nimport _classCallCheck from \"C:\\\\Users\\\\zura.ph\\\\WebstormProjects\\\\slotmaster-dashboard\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\zura.ph\\\\WebstormProjects\\\\slotmaster-dashboard\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"C:\\\\Users\\\\zura.ph\\\\WebstormProjects\\\\slotmaster-dashboard\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"C:\\\\Users\\\\zura.ph\\\\WebstormProjects\\\\slotmaster-dashboard\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _createSuper from \"C:\\\\Users\\\\zura.ph\\\\WebstormProjects\\\\slotmaster-dashboard\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"C:\\\\Users\\\\zura.ph\\\\WebstormProjects\\\\slotmaster-dashboard\\\\src\\\\components\\\\tree\\\\UITreeNode.js\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { classNames } from '../utils/ClassNames';\nimport DomHandler from '../utils/DomHandler';\nimport { Ripple } from '../ripple/Ripple';\nexport var UITreeNode = /*#__PURE__*/function (_Component) {\n  _inherits(UITreeNode, _Component);\n\n  var _super = _createSuper(UITreeNode);\n\n  function UITreeNode(props) {\n    var _this;\n\n    _classCallCheck(this, UITreeNode);\n\n    _this = _super.call(this, props);\n    _this.onClick = _this.onClick.bind(_assertThisInitialized(_this));\n    _this.onRightClick = _this.onRightClick.bind(_assertThisInitialized(_this));\n    _this.onTouchEnd = _this.onTouchEnd.bind(_assertThisInitialized(_this));\n    _this.onTogglerClick = _this.onTogglerClick.bind(_assertThisInitialized(_this));\n    _this.onNodeKeyDown = _this.onNodeKeyDown.bind(_assertThisInitialized(_this));\n    _this.propagateUp = _this.propagateUp.bind(_assertThisInitialized(_this));\n    _this.onDrop = _this.onDrop.bind(_assertThisInitialized(_this));\n    _this.onDragOver = _this.onDragOver.bind(_assertThisInitialized(_this));\n    _this.onDragEnter = _this.onDragEnter.bind(_assertThisInitialized(_this));\n    _this.onDragLeave = _this.onDragLeave.bind(_assertThisInitialized(_this));\n    _this.onDragStart = _this.onDragStart.bind(_assertThisInitialized(_this));\n    _this.onDragEnd = _this.onDragEnd.bind(_assertThisInitialized(_this));\n    _this.onDropPointDragOver = _this.onDropPointDragOver.bind(_assertThisInitialized(_this));\n    _this.onDropPointDragEnter = _this.onDropPointDragEnter.bind(_assertThisInitialized(_this));\n    _this.onDropPointDragLeave = _this.onDropPointDragLeave.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(UITreeNode, [{\n    key: \"isLeaf\",\n    value: function isLeaf() {\n      return this.props.isNodeLeaf(this.props.node);\n    }\n  }, {\n    key: \"expand\",\n    value: function expand(event) {\n      var expandedKeys = this.props.expandedKeys ? _objectSpread({}, this.props.expandedKeys) : {};\n      expandedKeys[this.props.node.key] = true;\n      this.props.onToggle({\n        originalEvent: event,\n        value: expandedKeys\n      });\n      this.invokeToggleEvents(event, true);\n    }\n  }, {\n    key: \"collapse\",\n    value: function collapse(event) {\n      var expandedKeys = _objectSpread({}, this.props.expandedKeys);\n\n      delete expandedKeys[this.props.node.key];\n      this.props.onToggle({\n        originalEvent: event,\n        value: expandedKeys\n      });\n      this.invokeToggleEvents(event, false);\n    }\n  }, {\n    key: \"onTogglerClick\",\n    value: function onTogglerClick(event) {\n      if (this.props.disabled) {\n        return;\n      }\n\n      if (this.isExpanded()) this.collapse(event);else this.expand(event);\n    }\n  }, {\n    key: \"invokeToggleEvents\",\n    value: function invokeToggleEvents(event, expanded) {\n      if (expanded) {\n        if (this.props.onExpand) {\n          this.props.onExpand({\n            originalEvent: event,\n            node: this.props.node\n          });\n        }\n      } else {\n        if (this.props.onCollapse) {\n          this.props.onCollapse({\n            originalEvent: event,\n            node: this.props.node\n          });\n        }\n      }\n    }\n  }, {\n    key: \"isExpanded\",\n    value: function isExpanded() {\n      return this.props.expandedKeys ? this.props.expandedKeys[this.props.node.key] !== undefined : false;\n    }\n  }, {\n    key: \"onNodeKeyDown\",\n    value: function onNodeKeyDown(event) {\n      if (this.props.disabled) {\n        return;\n      }\n\n      var nodeElement = event.target.parentElement;\n\n      if (!DomHandler.hasClass(nodeElement, 'p-treenode')) {\n        return;\n      }\n\n      switch (event.which) {\n        //down arrow\n        case 40:\n          var listElement = nodeElement.children[1];\n\n          if (listElement) {\n            this.focusNode(listElement.children[0]);\n          } else {\n            var nextNodeElement = nodeElement.nextElementSibling;\n\n            if (nextNodeElement) {\n              this.focusNode(nextNodeElement);\n            } else {\n              var nextSiblingAncestor = this.findNextSiblingOfAncestor(nodeElement);\n\n              if (nextSiblingAncestor) {\n                this.focusNode(nextSiblingAncestor);\n              }\n            }\n          }\n\n          event.preventDefault();\n          break;\n        //up arrow\n\n        case 38:\n          if (nodeElement.previousElementSibling) {\n            this.focusNode(this.findLastVisibleDescendant(nodeElement.previousElementSibling));\n          } else {\n            var parentNodeElement = this.getParentNodeElement(nodeElement);\n\n            if (parentNodeElement) {\n              this.focusNode(parentNodeElement);\n            }\n          }\n\n          event.preventDefault();\n          break;\n        //right arrow\n\n        case 39:\n          if (!this.isExpanded()) {\n            this.expand(event);\n          }\n\n          event.preventDefault();\n          break;\n        //left arrow\n\n        case 37:\n          if (this.isExpanded()) {\n            this.collapse(event);\n          }\n\n          event.preventDefault();\n          break;\n        //enter\n\n        case 13:\n          this.onClick(event);\n          event.preventDefault();\n          break;\n\n        default:\n          //no op\n          break;\n      }\n    }\n  }, {\n    key: \"findNextSiblingOfAncestor\",\n    value: function findNextSiblingOfAncestor(nodeElement) {\n      var parentNodeElement = this.getParentNodeElement(nodeElement);\n\n      if (parentNodeElement) {\n        if (parentNodeElement.nextElementSibling) return parentNodeElement.nextElementSibling;else return this.findNextSiblingOfAncestor(parentNodeElement);\n      } else {\n        return null;\n      }\n    }\n  }, {\n    key: \"findLastVisibleDescendant\",\n    value: function findLastVisibleDescendant(nodeElement) {\n      var childrenListElement = nodeElement.children[1];\n\n      if (childrenListElement) {\n        var lastChildElement = childrenListElement.children[childrenListElement.children.length - 1];\n        return this.findLastVisibleDescendant(lastChildElement);\n      } else {\n        return nodeElement;\n      }\n    }\n  }, {\n    key: \"getParentNodeElement\",\n    value: function getParentNodeElement(nodeElement) {\n      var parentNodeElement = nodeElement.parentElement.parentElement;\n      return DomHandler.hasClass(parentNodeElement, 'p-treenode') ? parentNodeElement : null;\n    }\n  }, {\n    key: \"focusNode\",\n    value: function focusNode(element) {\n      element.children[0].focus();\n    }\n  }, {\n    key: \"onClick\",\n    value: function onClick(event) {\n      if (event.target.className && event.target.className.constructor === String && event.target.className.indexOf('p-tree-toggler') === 0 || this.props.disabled) {\n        return;\n      }\n\n      if (this.props.selectionMode && this.props.node.selectable !== false) {\n        var selectionKeys;\n\n        if (this.isCheckboxSelectionMode()) {\n          var checked = this.isChecked();\n          selectionKeys = this.props.selectionKeys ? _objectSpread({}, this.props.selectionKeys) : {};\n\n          if (checked) {\n            if (this.props.propagateSelectionDown) this.propagateDown(this.props.node, false, selectionKeys);else delete selectionKeys[this.props.node.key];\n\n            if (this.props.propagateSelectionUp && this.props.onPropagateUp) {\n              this.props.onPropagateUp({\n                originalEvent: event,\n                check: false,\n                selectionKeys: selectionKeys\n              });\n            }\n\n            if (this.props.onUnselect) {\n              this.props.onUnselect({\n                originalEvent: event,\n                node: this.props.node\n              });\n            }\n          } else {\n            if (this.props.propagateSelectionDown) this.propagateDown(this.props.node, true, selectionKeys);else selectionKeys[this.props.node.key] = {\n              checked: true\n            };\n\n            if (this.props.propagateSelectionUp && this.props.onPropagateUp) {\n              this.props.onPropagateUp({\n                originalEvent: event,\n                check: true,\n                selectionKeys: selectionKeys\n              });\n            }\n\n            if (this.props.onSelect) {\n              this.props.onSelect({\n                originalEvent: event,\n                node: this.props.node\n              });\n            }\n          }\n        } else {\n          var selected = this.isSelected();\n          var metaSelection = this.nodeTouched ? false : this.props.metaKeySelection;\n\n          if (metaSelection) {\n            var metaKey = event.metaKey || event.ctrlKey;\n\n            if (selected && metaKey) {\n              if (this.isSingleSelectionMode()) {\n                selectionKeys = null;\n              } else {\n                selectionKeys = _objectSpread({}, this.props.selectionKeys);\n                delete selectionKeys[this.props.node.key];\n              }\n\n              if (this.props.onUnselect) {\n                this.props.onUnselect({\n                  originalEvent: event,\n                  node: this.props.node\n                });\n              }\n            } else {\n              if (this.isSingleSelectionMode()) {\n                selectionKeys = this.props.node.key;\n              } else if (this.isMultipleSelectionMode()) {\n                selectionKeys = !metaKey ? {} : this.props.selectionKeys ? _objectSpread({}, this.props.selectionKeys) : {};\n                selectionKeys[this.props.node.key] = true;\n              }\n\n              if (this.props.onSelect) {\n                this.props.onSelect({\n                  originalEvent: event,\n                  node: this.props.node\n                });\n              }\n            }\n          } else {\n            if (this.isSingleSelectionMode()) {\n              if (selected) {\n                selectionKeys = null;\n\n                if (this.props.onUnselect) {\n                  this.props.onUnselect({\n                    originalEvent: event,\n                    node: this.props.node\n                  });\n                }\n              } else {\n                selectionKeys = this.props.node.key;\n\n                if (this.props.onSelect) {\n                  this.props.onSelect({\n                    originalEvent: event,\n                    node: this.props.node\n                  });\n                }\n              }\n            } else {\n              if (selected) {\n                selectionKeys = _objectSpread({}, this.props.selectionKeys);\n                delete selectionKeys[this.props.node.key];\n\n                if (this.props.onUnselect) {\n                  this.props.onUnselect({\n                    originalEvent: event,\n                    node: this.props.node\n                  });\n                }\n              } else {\n                selectionKeys = this.props.selectionKeys ? _objectSpread({}, this.props.selectionKeys) : {};\n                selectionKeys[this.props.node.key] = true;\n\n                if (this.props.onSelect) {\n                  this.props.onSelect({\n                    originalEvent: event,\n                    node: this.props.node\n                  });\n                }\n              }\n            }\n          }\n        }\n\n        if (this.props.onSelectionChange) {\n          this.props.onSelectionChange({\n            originalEvent: event,\n            value: selectionKeys\n          });\n        }\n      }\n\n      this.nodeTouched = false;\n    }\n  }, {\n    key: \"onRightClick\",\n    value: function onRightClick(event) {\n      if (this.props.disabled) {\n        return;\n      }\n\n      DomHandler.clearSelection();\n\n      if (this.props.onContextMenuSelectionChange) {\n        this.props.onContextMenuSelectionChange({\n          originalEvent: event,\n          value: this.props.node.key\n        });\n      }\n\n      if (this.props.onContextMenu) {\n        this.props.onContextMenu({\n          originalEvent: event,\n          node: this.props.node\n        });\n      }\n    }\n  }, {\n    key: \"propagateUp\",\n    value: function propagateUp(event) {\n      var check = event.check;\n      var selectionKeys = event.selectionKeys;\n      var checkedChildCount = 0;\n      var childPartialSelected = false;\n\n      var _iterator = _createForOfIteratorHelper(this.props.node.children),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var child = _step.value;\n          if (selectionKeys[child.key] && selectionKeys[child.key].checked) checkedChildCount++;else if (selectionKeys[child.key] && selectionKeys[child.key].partialChecked) childPartialSelected = true;\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      if (check && checkedChildCount === this.props.node.children.length) {\n        selectionKeys[this.props.node.key] = {\n          checked: true,\n          partialChecked: false\n        };\n      } else {\n        if (!check) {\n          delete selectionKeys[this.props.node.key];\n        }\n\n        if (childPartialSelected || checkedChildCount > 0 && checkedChildCount !== this.props.node.children.length) selectionKeys[this.props.node.key] = {\n          checked: false,\n          partialChecked: true\n        };else selectionKeys[this.props.node.key] = {\n          checked: false,\n          partialChecked: false\n        };\n      }\n\n      if (this.props.propagateSelectionUp && this.props.onPropagateUp) {\n        this.props.onPropagateUp(event);\n      }\n    }\n  }, {\n    key: \"propagateDown\",\n    value: function propagateDown(node, check, selectionKeys) {\n      if (check) selectionKeys[node.key] = {\n        checked: true,\n        partialChecked: false\n      };else delete selectionKeys[node.key];\n\n      if (node.children && node.children.length) {\n        for (var i = 0; i < node.children.length; i++) {\n          this.propagateDown(node.children[i], check, selectionKeys);\n        }\n      }\n    }\n  }, {\n    key: \"isSelected\",\n    value: function isSelected() {\n      if (this.props.selectionMode && this.props.selectionKeys) return this.isSingleSelectionMode() ? this.props.selectionKeys === this.props.node.key : this.props.selectionKeys[this.props.node.key] !== undefined;else return false;\n    }\n  }, {\n    key: \"isChecked\",\n    value: function isChecked() {\n      return this.props.selectionKeys ? this.props.selectionKeys[this.props.node.key] && this.props.selectionKeys[this.props.node.key].checked : false;\n    }\n  }, {\n    key: \"isPartialChecked\",\n    value: function isPartialChecked() {\n      return this.props.selectionKeys ? this.props.selectionKeys[this.props.node.key] && this.props.selectionKeys[this.props.node.key].partialChecked : false;\n    }\n  }, {\n    key: \"isSingleSelectionMode\",\n    value: function isSingleSelectionMode() {\n      return this.props.selectionMode && this.props.selectionMode === 'single';\n    }\n  }, {\n    key: \"isMultipleSelectionMode\",\n    value: function isMultipleSelectionMode() {\n      return this.props.selectionMode && this.props.selectionMode === 'multiple';\n    }\n  }, {\n    key: \"isCheckboxSelectionMode\",\n    value: function isCheckboxSelectionMode() {\n      return this.props.selectionMode && this.props.selectionMode === 'checkbox';\n    }\n  }, {\n    key: \"onTouchEnd\",\n    value: function onTouchEnd() {\n      this.nodeTouched = true;\n    }\n  }, {\n    key: \"onDropPoint\",\n    value: function onDropPoint(event, position) {\n      event.preventDefault();\n\n      if (this.props.node.droppable !== false) {\n        DomHandler.removeClass(event.target, 'p-treenode-droppoint-active');\n\n        if (this.props.onDropPoint) {\n          this.props.onDropPoint({\n            originalEvent: event,\n            path: this.props.path,\n            index: this.props.index,\n            position: position\n          });\n        }\n      }\n    }\n  }, {\n    key: \"onDropPointDragOver\",\n    value: function onDropPointDragOver(event) {\n      if (event.dataTransfer.types[1] === this.props.dragdropScope.toLocaleLowerCase()) {\n        event.dataTransfer.dropEffect = 'move';\n        event.preventDefault();\n      }\n    }\n  }, {\n    key: \"onDropPointDragEnter\",\n    value: function onDropPointDragEnter(event) {\n      if (event.dataTransfer.types[1] === this.props.dragdropScope.toLocaleLowerCase()) {\n        DomHandler.addClass(event.target, 'p-treenode-droppoint-active');\n      }\n    }\n  }, {\n    key: \"onDropPointDragLeave\",\n    value: function onDropPointDragLeave(event) {\n      if (event.dataTransfer.types[1] === this.props.dragdropScope.toLocaleLowerCase()) {\n        DomHandler.removeClass(event.target, 'p-treenode-droppoint-active');\n      }\n    }\n  }, {\n    key: \"onDrop\",\n    value: function onDrop(event) {\n      if (this.props.dragdropScope && this.props.node.droppable !== false) {\n        DomHandler.removeClass(this.contentElement, 'p-treenode-dragover');\n        event.preventDefault();\n        event.stopPropagation();\n\n        if (this.props.onDrop) {\n          this.props.onDrop({\n            originalEvent: event,\n            path: this.props.path,\n            index: this.props.index\n          });\n        }\n      }\n    }\n  }, {\n    key: \"onDragOver\",\n    value: function onDragOver(event) {\n      if (event.dataTransfer.types[1] === this.props.dragdropScope.toLocaleLowerCase() && this.props.node.droppable !== false) {\n        event.dataTransfer.dropEffect = 'move';\n        event.preventDefault();\n        event.stopPropagation();\n      }\n    }\n  }, {\n    key: \"onDragEnter\",\n    value: function onDragEnter(event) {\n      if (event.dataTransfer.types[1] === this.props.dragdropScope.toLocaleLowerCase() && this.props.node.droppable !== false) {\n        DomHandler.addClass(this.contentElement, 'p-treenode-dragover');\n      }\n    }\n  }, {\n    key: \"onDragLeave\",\n    value: function onDragLeave(event) {\n      if (event.dataTransfer.types[1] === this.props.dragdropScope.toLocaleLowerCase() && this.props.node.droppable !== false) {\n        var rect = event.currentTarget.getBoundingClientRect();\n\n        if (event.nativeEvent.x > rect.left + rect.width || event.nativeEvent.x < rect.left || event.nativeEvent.y >= Math.floor(rect.top + rect.height) || event.nativeEvent.y < rect.top) {\n          DomHandler.removeClass(this.contentElement, 'p-treenode-dragover');\n        }\n      }\n    }\n  }, {\n    key: \"onDragStart\",\n    value: function onDragStart(event) {\n      event.dataTransfer.setData(\"text\", this.props.dragdropScope);\n      event.dataTransfer.setData(this.props.dragdropScope, this.props.dragdropScope);\n\n      if (this.props.onDragStart) {\n        this.props.onDragStart({\n          originalEvent: event,\n          path: this.props.path,\n          index: this.props.index\n        });\n      }\n    }\n  }, {\n    key: \"onDragEnd\",\n    value: function onDragEnd(event) {\n      if (this.props.onDragEnd) {\n        this.props.onDragEnd({\n          originalEvent: event\n        });\n      }\n    }\n  }, {\n    key: \"renderLabel\",\n    value: function renderLabel() {\n      var label = this.props.nodeTemplate ? this.props.nodeTemplate(this.props.node) : this.props.node.label;\n      return /*#__PURE__*/React.createElement(\"span\", {\n        className: \"p-treenode-label\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 628,\n          columnNumber: 13\n        }\n      }, label);\n    }\n  }, {\n    key: \"renderCheckbox\",\n    value: function renderCheckbox() {\n      if (this.isCheckboxSelectionMode() && this.props.node.selectable !== false) {\n        var checked = this.isChecked();\n        var partialChecked = this.isPartialChecked();\n        var className = classNames('p-checkbox-box', {\n          'p-highlight': checked,\n          'p-indeterminate': partialChecked,\n          'p-disabled': this.props.disabled\n        });\n        var icon = classNames('p-checkbox-icon p-c', {\n          'pi pi-check': checked,\n          'pi pi-minus': partialChecked\n        });\n        return /*#__PURE__*/React.createElement(\"div\", {\n          className: \"p-checkbox p-component\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 642,\n            columnNumber: 17\n          }\n        }, /*#__PURE__*/React.createElement(\"div\", {\n          className: className,\n          role: \"checkbox\",\n          \"aria-checked\": checked,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 643,\n            columnNumber: 21\n          }\n        }, /*#__PURE__*/React.createElement(\"span\", {\n          className: icon,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 644,\n            columnNumber: 25\n          }\n        })));\n      }\n\n      return null;\n    }\n  }, {\n    key: \"renderIcon\",\n    value: function renderIcon(expanded) {\n      var icon = this.props.node.icon || (expanded ? this.props.node.expandedIcon : this.props.node.collapsedIcon);\n\n      if (icon) {\n        var className = classNames('p-treenode-icon', icon);\n        return /*#__PURE__*/React.createElement(\"span\", {\n          className: className,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 660,\n            columnNumber: 16\n          }\n        });\n      }\n\n      return null;\n    }\n  }, {\n    key: \"renderToggler\",\n    value: function renderToggler(expanded) {\n      var iconClassName = classNames('p-tree-toggler-icon pi pi-fw', {\n        'pi-chevron-right': !expanded,\n        'pi-chevron-down': expanded\n      });\n      return /*#__PURE__*/React.createElement(\"button\", {\n        type: \"button\",\n        className: \"p-tree-toggler p-link\",\n        tabIndex: -1,\n        onClick: this.onTogglerClick,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 671,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        className: iconClassName,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 672,\n          columnNumber: 17\n        }\n      }), /*#__PURE__*/React.createElement(Ripple, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 673,\n          columnNumber: 17\n        }\n      }));\n    }\n  }, {\n    key: \"renderDropPoint\",\n    value: function renderDropPoint(position) {\n      var _this2 = this;\n\n      if (this.props.dragdropScope) {\n        return /*#__PURE__*/React.createElement(\"li\", {\n          className: \"p-treenode-droppoint\",\n          onDrop: function onDrop(event) {\n            return _this2.onDropPoint(event, position);\n          },\n          onDragOver: this.onDropPointDragOver,\n          onDragEnter: this.onDropPointDragEnter,\n          onDragLeave: this.onDropPointDragLeave,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 681,\n            columnNumber: 17\n          }\n        });\n      }\n\n      return null;\n    }\n  }, {\n    key: \"renderContent\",\n    value: function renderContent() {\n      var _this3 = this;\n\n      var selected = this.isSelected();\n      var checked = this.isChecked();\n      var className = classNames('p-treenode-content', this.props.node.className, {\n        'p-treenode-selectable': this.props.selectionMode && this.props.node.selectable !== false,\n        'p-highlight': this.isCheckboxSelectionMode() ? checked : selected,\n        'p-highlight-contextmenu': this.props.contextMenuSelectionKey && this.props.contextMenuSelectionKey === this.props.node.key,\n        'p-disabled': this.props.disabled\n      });\n      var expanded = this.isExpanded();\n      var toggler = this.renderToggler(expanded);\n      var checkbox = this.renderCheckbox();\n      var icon = this.renderIcon(expanded);\n      var label = this.renderLabel();\n      var tabIndex = this.props.disabled ? undefined : 0;\n      return /*#__PURE__*/React.createElement(\"div\", {\n        ref: function ref(el) {\n          return _this3.contentElement = el;\n        },\n        className: className,\n        style: this.props.node.style,\n        onClick: this.onClick,\n        onContextMenu: this.onRightClick,\n        onTouchEnd: this.onTouchEnd,\n        draggable: this.props.dragdropScope && this.props.node.draggable !== false && !this.props.disabled,\n        onDrop: this.onDrop,\n        onDragOver: this.onDragOver,\n        onDragEnter: this.onDragEnter,\n        onDragLeave: this.onDragLeave,\n        onDragStart: this.onDragStart,\n        onDragEnd: this.onDragEnd,\n        tabIndex: tabIndex,\n        onKeyDown: this.onNodeKeyDown,\n        role: \"treeitem\",\n        \"aria-posinset\": this.props.index + 1,\n        \"aria-expanded\": this.isExpanded(),\n        \"aria-selected\": checked || selected,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 706,\n          columnNumber: 13\n        }\n      }, toggler, checkbox, icon, label);\n    }\n  }, {\n    key: \"renderChildren\",\n    value: function renderChildren() {\n      var _this4 = this;\n\n      if (this.props.node.children && this.props.node.children.length && this.isExpanded()) {\n        return /*#__PURE__*/React.createElement(\"ul\", {\n          className: \"p-treenode-children\",\n          role: \"group\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 721,\n            columnNumber: 17\n          }\n        }, this.props.node.children.map(function (childNode, index) {\n          return /*#__PURE__*/React.createElement(UITreeNode, {\n            key: childNode.key || childNode.label,\n            node: childNode,\n            parent: _this4.props.node,\n            index: index,\n            last: index === _this4.props.node.children.length - 1,\n            path: _this4.props.path + '-' + index,\n            disabled: _this4.props.disabled,\n            selectionMode: _this4.props.selectionMode,\n            selectionKeys: _this4.props.selectionKeys,\n            onSelectionChange: _this4.props.onSelectionChange,\n            metaKeySelection: _this4.props.metaKeySelection,\n            propagateSelectionDown: _this4.props.propagateSelectionDown,\n            propagateSelectionUp: _this4.props.propagateSelectionUp,\n            contextMenuSelectionKey: _this4.props.contextMenuSelectionKey,\n            onContextMenuSelectionChange: _this4.props.onContextMenuSelectionChange,\n            onContextMenu: _this4.props.onContextMenu,\n            onExpand: _this4.props.onExpand,\n            onCollapse: _this4.props.onCollapse,\n            onSelect: _this4.props.onSelect,\n            onUnselect: _this4.props.onUnselect,\n            expandedKeys: _this4.props.expandedKeys,\n            onToggle: _this4.props.onToggle,\n            onPropagateUp: _this4.propagateUp,\n            nodeTemplate: _this4.props.nodeTemplate,\n            isNodeLeaf: _this4.props.isNodeLeaf,\n            dragdropScope: _this4.props.dragdropScope,\n            onDragStart: _this4.props.onDragStart,\n            onDragEnd: _this4.props.onDragEnd,\n            onDrop: _this4.props.onDrop,\n            onDropPoint: _this4.props.onDropPoint,\n            __self: _this4,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 725,\n              columnNumber: 33\n            }\n          });\n        }));\n      }\n\n      return null;\n    }\n  }, {\n    key: \"renderNode\",\n    value: function renderNode() {\n      var className = classNames('p-treenode', {\n        'p-treenode-leaf': this.isLeaf()\n      }, this.props.node.className);\n      var content = this.renderContent();\n      var children = this.renderChildren();\n      return /*#__PURE__*/React.createElement(\"li\", {\n        className: className,\n        style: this.props.node.style,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 748,\n          columnNumber: 13\n        }\n      }, content, children);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var node = this.renderNode();\n\n      if (this.props.dragdropScope && !this.props.disabled) {\n        var beforeDropPoint = this.renderDropPoint(-1);\n        var afterDropPoint = this.props.last ? this.renderDropPoint(1) : null;\n        return /*#__PURE__*/React.createElement(React.Fragment, null, beforeDropPoint, node, afterDropPoint);\n      } else {\n        return node;\n      }\n    }\n  }]);\n\n  return UITreeNode;\n}(Component);\nUITreeNode.defaultProps = {\n  node: null,\n  index: null,\n  last: null,\n  parent: null,\n  path: null,\n  disabled: false,\n  selectionMode: null,\n  selectionKeys: null,\n  contextMenuSelectionKey: null,\n  metaKeySelection: true,\n  expandedKeys: null,\n  propagateSelectionUp: true,\n  propagateSelectionDown: true,\n  dragdropScope: null,\n  ariaLabel: null,\n  ariaLabelledBy: null,\n  nodeTemplate: null,\n  isNodeLeaf: null,\n  onSelect: null,\n  onUnselect: null,\n  onExpand: null,\n  onCollapse: null,\n  onToggle: null,\n  onSelectionChange: null,\n  onContextMenuSelectionChange: null,\n  onPropagateUp: null,\n  onDragStart: null,\n  onDragEnd: null,\n  onDrop: null,\n  onDropPoint: null,\n  onContextMenu: null\n};\nUITreeNode.propTypes = {\n  node: PropTypes.object,\n  index: PropTypes.number,\n  last: PropTypes.bool,\n  parent: PropTypes.object,\n  path: PropTypes.string,\n  disabled: PropTypes.bool,\n  selectionMode: PropTypes.string,\n  selectionKeys: PropTypes.any,\n  contextMenuSelectionKey: PropTypes.any,\n  metaKeySelection: PropTypes.bool,\n  expandedKeys: PropTypes.object,\n  propagateSelectionUp: PropTypes.bool,\n  propagateSelectionDown: PropTypes.bool,\n  dragdropScope: PropTypes.string,\n  ariaLabel: PropTypes.string,\n  ariaLabelledBy: PropTypes.string,\n  nodeTemplate: PropTypes.func,\n  isNodeLeaf: PropTypes.func,\n  onSelect: PropTypes.func,\n  onUnselect: PropTypes.func,\n  onExpand: PropTypes.func,\n  onCollapse: PropTypes.func,\n  onToggle: PropTypes.func,\n  onSelectionChange: PropTypes.func,\n  onContextMenuSelectionChange: PropTypes.func,\n  onPropagateUp: PropTypes.func,\n  onDragStart: PropTypes.func,\n  onDragEnd: PropTypes.func,\n  onDrop: PropTypes.func,\n  onDropPoint: PropTypes.func,\n  onContextMenu: PropTypes.func\n};","map":{"version":3,"sources":["C:/Users/zura.ph/WebstormProjects/slotmaster-dashboard/src/components/tree/UITreeNode.js"],"names":["React","Component","PropTypes","classNames","DomHandler","Ripple","UITreeNode","props","onClick","bind","onRightClick","onTouchEnd","onTogglerClick","onNodeKeyDown","propagateUp","onDrop","onDragOver","onDragEnter","onDragLeave","onDragStart","onDragEnd","onDropPointDragOver","onDropPointDragEnter","onDropPointDragLeave","isNodeLeaf","node","event","expandedKeys","key","onToggle","originalEvent","value","invokeToggleEvents","disabled","isExpanded","collapse","expand","expanded","onExpand","onCollapse","undefined","nodeElement","target","parentElement","hasClass","which","listElement","children","focusNode","nextNodeElement","nextElementSibling","nextSiblingAncestor","findNextSiblingOfAncestor","preventDefault","previousElementSibling","findLastVisibleDescendant","parentNodeElement","getParentNodeElement","childrenListElement","lastChildElement","length","element","focus","className","constructor","String","indexOf","selectionMode","selectable","selectionKeys","isCheckboxSelectionMode","checked","isChecked","propagateSelectionDown","propagateDown","propagateSelectionUp","onPropagateUp","check","onUnselect","onSelect","selected","isSelected","metaSelection","nodeTouched","metaKeySelection","metaKey","ctrlKey","isSingleSelectionMode","isMultipleSelectionMode","onSelectionChange","clearSelection","onContextMenuSelectionChange","onContextMenu","checkedChildCount","childPartialSelected","child","partialChecked","i","position","droppable","removeClass","onDropPoint","path","index","dataTransfer","types","dragdropScope","toLocaleLowerCase","dropEffect","addClass","contentElement","stopPropagation","rect","currentTarget","getBoundingClientRect","nativeEvent","x","left","width","y","Math","floor","top","height","setData","label","nodeTemplate","isPartialChecked","icon","expandedIcon","collapsedIcon","iconClassName","contextMenuSelectionKey","toggler","renderToggler","checkbox","renderCheckbox","renderIcon","renderLabel","tabIndex","el","style","draggable","map","childNode","isLeaf","content","renderContent","renderChildren","renderNode","beforeDropPoint","renderDropPoint","afterDropPoint","last","defaultProps","parent","ariaLabel","ariaLabelledBy","propTypes","object","number","bool","string","any","func"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { classNames } from '../utils/ClassNames';\r\nimport DomHandler from '../utils/DomHandler';\r\nimport { Ripple } from '../ripple/Ripple';\r\n\r\nexport class UITreeNode extends Component {\r\n\r\n    static defaultProps = {\r\n        node: null,\r\n        index: null,\r\n        last: null,\r\n        parent: null,\r\n        path: null,\r\n        disabled: false,\r\n        selectionMode: null,\r\n        selectionKeys: null,\r\n        contextMenuSelectionKey: null,\r\n        metaKeySelection: true,\r\n        expandedKeys: null,\r\n        propagateSelectionUp: true,\r\n        propagateSelectionDown: true,\r\n        dragdropScope: null,\r\n        ariaLabel: null,\r\n        ariaLabelledBy: null,\r\n        nodeTemplate: null,\r\n        isNodeLeaf: null,\r\n        onSelect: null,\r\n        onUnselect: null,\r\n        onExpand: null,\r\n        onCollapse: null,\r\n        onToggle: null,\r\n        onSelectionChange: null,\r\n        onContextMenuSelectionChange: null,\r\n        onPropagateUp: null,\r\n        onDragStart: null,\r\n        onDragEnd: null,\r\n        onDrop: null,\r\n        onDropPoint: null,\r\n        onContextMenu: null\r\n    }\r\n\r\n    static propTypes = {\r\n        node: PropTypes.object,\r\n        index: PropTypes.number,\r\n        last: PropTypes.bool,\r\n        parent: PropTypes.object,\r\n        path: PropTypes.string,\r\n        disabled: PropTypes.bool,\r\n        selectionMode: PropTypes.string,\r\n        selectionKeys: PropTypes.any,\r\n        contextMenuSelectionKey: PropTypes.any,\r\n        metaKeySelection: PropTypes.bool,\r\n        expandedKeys: PropTypes.object,\r\n        propagateSelectionUp: PropTypes.bool,\r\n        propagateSelectionDown: PropTypes.bool,\r\n        dragdropScope: PropTypes.string,\r\n        ariaLabel: PropTypes.string,\r\n        ariaLabelledBy: PropTypes.string,\r\n        nodeTemplate: PropTypes.func,\r\n        isNodeLeaf: PropTypes.func,\r\n        onSelect: PropTypes.func,\r\n        onUnselect: PropTypes.func,\r\n        onExpand: PropTypes.func,\r\n        onCollapse: PropTypes.func,\r\n        onToggle: PropTypes.func,\r\n        onSelectionChange: PropTypes.func,\r\n        onContextMenuSelectionChange: PropTypes.func,\r\n        onPropagateUp: PropTypes.func,\r\n        onDragStart: PropTypes.func,\r\n        onDragEnd: PropTypes.func,\r\n        onDrop: PropTypes.func,\r\n        onDropPoint: PropTypes.func,\r\n        onContextMenu: PropTypes.func\r\n    }\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.onClick = this.onClick.bind(this);\r\n        this.onRightClick = this.onRightClick.bind(this);\r\n        this.onTouchEnd = this.onTouchEnd.bind(this);\r\n        this.onTogglerClick = this.onTogglerClick.bind(this);\r\n        this.onNodeKeyDown = this.onNodeKeyDown.bind(this);\r\n        this.propagateUp = this.propagateUp.bind(this);\r\n\r\n        this.onDrop = this.onDrop.bind(this);\r\n        this.onDragOver = this.onDragOver.bind(this);\r\n        this.onDragEnter = this.onDragEnter.bind(this);\r\n        this.onDragLeave = this.onDragLeave.bind(this);\r\n        this.onDragStart = this.onDragStart.bind(this);\r\n        this.onDragEnd = this.onDragEnd.bind(this);\r\n        this.onDropPointDragOver = this.onDropPointDragOver.bind(this);\r\n        this.onDropPointDragEnter = this.onDropPointDragEnter.bind(this);\r\n        this.onDropPointDragLeave = this.onDropPointDragLeave.bind(this);\r\n    }\r\n\r\n    isLeaf() {\r\n        return this.props.isNodeLeaf(this.props.node);\r\n    }\r\n\r\n    expand(event) {\r\n        let expandedKeys = this.props.expandedKeys ? {...this.props.expandedKeys} : {};\r\n        expandedKeys[this.props.node.key] = true;\r\n\r\n        this.props.onToggle({\r\n            originalEvent: event,\r\n            value: expandedKeys\r\n        });\r\n\r\n        this.invokeToggleEvents(event, true);\r\n    }\r\n\r\n    collapse(event) {\r\n        let expandedKeys = {...this.props.expandedKeys};\r\n        delete expandedKeys[this.props.node.key];\r\n\r\n        this.props.onToggle({\r\n            originalEvent: event,\r\n            value: expandedKeys\r\n        });\r\n\r\n        this.invokeToggleEvents(event, false);\r\n    }\r\n\r\n    onTogglerClick(event) {\r\n        if (this.props.disabled) {\r\n            return;\r\n        }\r\n\r\n        if (this.isExpanded())\r\n            this.collapse(event);\r\n        else\r\n            this.expand(event);\r\n    }\r\n\r\n    invokeToggleEvents(event, expanded) {\r\n        if (expanded) {\r\n            if (this.props.onExpand) {\r\n                this.props.onExpand({\r\n                    originalEvent: event,\r\n                    node: this.props.node\r\n                });\r\n            }\r\n        }\r\n        else {\r\n            if (this.props.onCollapse) {\r\n                this.props.onCollapse({\r\n                    originalEvent: event,\r\n                    node: this.props.node\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    isExpanded() {\r\n        return this.props.expandedKeys ? this.props.expandedKeys[this.props.node.key] !== undefined : false;\r\n    }\r\n\r\n    onNodeKeyDown(event) {\r\n        if (this.props.disabled) {\r\n            return;\r\n        }\r\n\r\n        const nodeElement = event.target.parentElement;\r\n\r\n        if (!DomHandler.hasClass(nodeElement, 'p-treenode')) {\r\n            return;\r\n        }\r\n\r\n        switch (event.which) {\r\n            //down arrow\r\n            case 40:\r\n                const listElement = nodeElement.children[1];\r\n                if (listElement) {\r\n                    this.focusNode(listElement.children[0]);\r\n                }\r\n                else {\r\n                    const nextNodeElement = nodeElement.nextElementSibling;\r\n                    if (nextNodeElement) {\r\n                        this.focusNode(nextNodeElement);\r\n                    }\r\n                    else {\r\n                        let nextSiblingAncestor = this.findNextSiblingOfAncestor(nodeElement);\r\n                        if (nextSiblingAncestor) {\r\n                            this.focusNode(nextSiblingAncestor);\r\n                        }\r\n                    }\r\n                }\r\n\r\n                event.preventDefault();\r\n            break;\r\n\r\n            //up arrow\r\n            case 38:\r\n                if (nodeElement.previousElementSibling) {\r\n                    this.focusNode(this.findLastVisibleDescendant(nodeElement.previousElementSibling));\r\n                }\r\n                else {\r\n                    let parentNodeElement = this.getParentNodeElement(nodeElement);\r\n                    if (parentNodeElement) {\r\n                        this.focusNode(parentNodeElement);\r\n                    }\r\n                }\r\n\r\n                event.preventDefault();\r\n            break;\r\n\r\n            //right arrow\r\n            case 39:\r\n                if (!this.isExpanded()) {\r\n                    this.expand(event);\r\n                }\r\n\r\n                event.preventDefault();\r\n            break;\r\n\r\n            //left arrow\r\n            case 37:\r\n                if (this.isExpanded()) {\r\n                    this.collapse(event);\r\n                }\r\n\r\n                event.preventDefault();\r\n            break;\r\n\r\n            //enter\r\n            case 13:\r\n                this.onClick(event);\r\n                event.preventDefault();\r\n            break;\r\n\r\n            default:\r\n                //no op\r\n            break;\r\n        }\r\n    }\r\n\r\n    findNextSiblingOfAncestor(nodeElement) {\r\n        let parentNodeElement = this.getParentNodeElement(nodeElement);\r\n        if (parentNodeElement) {\r\n            if (parentNodeElement.nextElementSibling)\r\n                return parentNodeElement.nextElementSibling;\r\n            else\r\n                return this.findNextSiblingOfAncestor(parentNodeElement);\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    findLastVisibleDescendant(nodeElement) {\r\n        const childrenListElement = nodeElement.children[1];\r\n        if (childrenListElement) {\r\n            const lastChildElement = childrenListElement.children[childrenListElement.children.length - 1];\r\n\r\n            return this.findLastVisibleDescendant(lastChildElement);\r\n        }\r\n        else {\r\n            return nodeElement;\r\n        }\r\n    }\r\n\r\n    getParentNodeElement(nodeElement) {\r\n        const parentNodeElement = nodeElement.parentElement.parentElement;\r\n\r\n        return DomHandler.hasClass(parentNodeElement, 'p-treenode') ? parentNodeElement : null;\r\n    }\r\n\r\n    focusNode(element) {\r\n        element.children[0].focus();\r\n    }\r\n\r\n    onClick(event) {\r\n        if ((event.target.className && event.target.className.constructor === String && event.target.className.indexOf('p-tree-toggler') === 0) || this.props.disabled) {\r\n            return;\r\n        }\r\n\r\n        if (this.props.selectionMode && this.props.node.selectable !== false) {\r\n            let selectionKeys;\r\n\r\n            if (this.isCheckboxSelectionMode()) {\r\n                const checked = this.isChecked();\r\n                selectionKeys = this.props.selectionKeys ? {...this.props.selectionKeys} : {};\r\n\r\n                if (checked) {\r\n                    if (this.props.propagateSelectionDown)\r\n                        this.propagateDown(this.props.node, false, selectionKeys);\r\n                    else\r\n                        delete selectionKeys[this.props.node.key];\r\n\r\n                    if (this.props.propagateSelectionUp && this.props.onPropagateUp) {\r\n                        this.props.onPropagateUp({\r\n                            originalEvent: event,\r\n                            check: false,\r\n                            selectionKeys: selectionKeys\r\n                        });\r\n                    }\r\n\r\n                    if (this.props.onUnselect) {\r\n                        this.props.onUnselect({\r\n                            originalEvent: event,\r\n                            node: this.props.node\r\n                        });\r\n                    }\r\n                }\r\n                else {\r\n                    if (this.props.propagateSelectionDown)\r\n                        this.propagateDown(this.props.node, true, selectionKeys);\r\n                    else\r\n                        selectionKeys[this.props.node.key] = {checked: true};\r\n\r\n                        if (this.props.propagateSelectionUp && this.props.onPropagateUp) {\r\n                            this.props.onPropagateUp({\r\n                                originalEvent: event,\r\n                                check: true,\r\n                                selectionKeys: selectionKeys\r\n                            });\r\n                        }\r\n\r\n                    if (this.props.onSelect) {\r\n                        this.props.onSelect({\r\n                            originalEvent: event,\r\n                            node: this.props.node\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                const selected = this.isSelected();\r\n                const metaSelection = this.nodeTouched ? false : this.props.metaKeySelection;\r\n\r\n                if (metaSelection) {\r\n                    let metaKey = (event.metaKey||event.ctrlKey);\r\n\r\n                    if (selected && metaKey) {\r\n                        if (this.isSingleSelectionMode()) {\r\n                            selectionKeys = null;\r\n                        }\r\n                        else {\r\n                            selectionKeys = {...this.props.selectionKeys};\r\n                            delete selectionKeys[this.props.node.key];\r\n                        }\r\n\r\n                        if (this.props.onUnselect) {\r\n                            this.props.onUnselect({\r\n                                originalEvent: event,\r\n                                node: this.props.node\r\n                            });\r\n                        }\r\n                    }\r\n                    else {\r\n                        if (this.isSingleSelectionMode()) {\r\n                            selectionKeys = this.props.node.key;\r\n                        }\r\n                        else if (this.isMultipleSelectionMode()) {\r\n                            selectionKeys = !metaKey ? {} : (this.props.selectionKeys ? {...this.props.selectionKeys} : {});\r\n                            selectionKeys[this.props.node.key] = true;\r\n                        }\r\n\r\n                        if (this.props.onSelect) {\r\n                            this.props.onSelect({\r\n                                originalEvent: event,\r\n                                node: this.props.node\r\n                            });\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    if (this.isSingleSelectionMode()) {\r\n                        if (selected) {\r\n                            selectionKeys = null;\r\n\r\n                            if (this.props.onUnselect) {\r\n                                this.props.onUnselect({\r\n                                    originalEvent: event,\r\n                                    node: this.props.node\r\n                                });\r\n                            }\r\n                        }\r\n                        else {\r\n                            selectionKeys = this.props.node.key;\r\n\r\n                            if (this.props.onSelect) {\r\n                                this.props.onSelect({\r\n                                    originalEvent: event,\r\n                                    node: this.props.node\r\n                                });\r\n                            }\r\n                        }\r\n                    }\r\n                    else {\r\n                        if (selected) {\r\n                            selectionKeys = {...this.props.selectionKeys};\r\n                            delete selectionKeys[this.props.node.key];\r\n\r\n                            if (this.props.onUnselect) {\r\n                                this.props.onUnselect({\r\n                                    originalEvent: event,\r\n                                    node: this.props.node\r\n                                });\r\n                            }\r\n                        }\r\n                        else {\r\n                            selectionKeys = this.props.selectionKeys ? {...this.props.selectionKeys} : {};\r\n                            selectionKeys[this.props.node.key] = true;\r\n\r\n                            if (this.props.onSelect) {\r\n                                this.props.onSelect({\r\n                                    originalEvent: event,\r\n                                    node: this.props.node\r\n                                });\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (this.props.onSelectionChange) {\r\n                this.props.onSelectionChange({\r\n                    originalEvent: event,\r\n                    value: selectionKeys\r\n                })\r\n            }\r\n        }\r\n\r\n        this.nodeTouched = false;\r\n    }\r\n\r\n    onRightClick(event) {\r\n        if (this.props.disabled) {\r\n            return;\r\n        }\r\n\r\n        DomHandler.clearSelection();\r\n\r\n        if (this.props.onContextMenuSelectionChange) {\r\n            this.props.onContextMenuSelectionChange({\r\n                originalEvent: event,\r\n                value: this.props.node.key\r\n            })\r\n        }\r\n\r\n        if (this.props.onContextMenu) {\r\n            this.props.onContextMenu({\r\n                originalEvent: event,\r\n                node: this.props.node\r\n            });\r\n        }\r\n    }\r\n\r\n    propagateUp(event) {\r\n        let check = event.check;\r\n        let selectionKeys = event.selectionKeys;\r\n        let checkedChildCount = 0;\r\n        let childPartialSelected = false;\r\n\r\n        for(let child of this.props.node.children) {\r\n            if(selectionKeys[child.key] && selectionKeys[child.key].checked)\r\n                checkedChildCount++;\r\n            else if(selectionKeys[child.key] && selectionKeys[child.key].partialChecked)\r\n                childPartialSelected = true;\r\n        }\r\n\r\n        if(check && checkedChildCount === this.props.node.children.length) {\r\n            selectionKeys[this.props.node.key] = {checked: true, partialChecked: false};\r\n        }\r\n        else {\r\n            if (!check) {\r\n                delete selectionKeys[this.props.node.key];\r\n            }\r\n\r\n            if(childPartialSelected || (checkedChildCount > 0 && checkedChildCount !== this.props.node.children.length))\r\n                selectionKeys[this.props.node.key] = {checked: false, partialChecked: true};\r\n            else\r\n                selectionKeys[this.props.node.key] = {checked: false, partialChecked: false};\r\n        }\r\n\r\n        if (this.props.propagateSelectionUp && this.props.onPropagateUp) {\r\n            this.props.onPropagateUp(event);\r\n        }\r\n    }\r\n\r\n    propagateDown(node, check, selectionKeys) {\r\n        if(check)\r\n            selectionKeys[node.key] = {checked: true, partialChecked: false};\r\n        else\r\n            delete selectionKeys[node.key];\r\n\r\n        if (node.children && node.children.length) {\r\n            for (let i = 0; i < node.children.length; i++) {\r\n                this.propagateDown(node.children[i], check, selectionKeys);\r\n            }\r\n        }\r\n    }\r\n\r\n    isSelected() {\r\n        if (this.props.selectionMode && this.props.selectionKeys)\r\n            return this.isSingleSelectionMode() ? this.props.selectionKeys === this.props.node.key : this.props.selectionKeys[this.props.node.key] !== undefined;\r\n        else\r\n            return false;\r\n    }\r\n\r\n    isChecked() {\r\n        return this.props.selectionKeys ? this.props.selectionKeys[this.props.node.key] && this.props.selectionKeys[this.props.node.key].checked: false;\r\n    }\r\n\r\n    isPartialChecked() {\r\n        return this.props.selectionKeys ? this.props.selectionKeys[this.props.node.key] && this.props.selectionKeys[this.props.node.key].partialChecked: false;\r\n    }\r\n\r\n    isSingleSelectionMode() {\r\n        return this.props.selectionMode && this.props.selectionMode === 'single';\r\n    }\r\n\r\n    isMultipleSelectionMode() {\r\n        return this.props.selectionMode && this.props.selectionMode === 'multiple';\r\n    }\r\n\r\n    isCheckboxSelectionMode() {\r\n        return this.props.selectionMode && this.props.selectionMode === 'checkbox';\r\n    }\r\n\r\n    onTouchEnd() {\r\n        this.nodeTouched = true;\r\n    }\r\n\r\n    onDropPoint(event, position) {\r\n        event.preventDefault();\r\n\r\n        if (this.props.node.droppable !== false) {\r\n            DomHandler.removeClass(event.target, 'p-treenode-droppoint-active');\r\n\r\n            if (this.props.onDropPoint) {\r\n                this.props.onDropPoint({\r\n                    originalEvent: event,\r\n                    path: this.props.path,\r\n                    index: this.props.index,\r\n                    position: position\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    onDropPointDragOver(event) {\r\n        if (event.dataTransfer.types[1] === this.props.dragdropScope.toLocaleLowerCase()) {\r\n            event.dataTransfer.dropEffect = 'move';\r\n            event.preventDefault();\r\n        }\r\n    }\r\n\r\n    onDropPointDragEnter(event) {\r\n        if (event.dataTransfer.types[1] === this.props.dragdropScope.toLocaleLowerCase()) {\r\n            DomHandler.addClass(event.target, 'p-treenode-droppoint-active');\r\n        }\r\n    }\r\n\r\n    onDropPointDragLeave(event) {\r\n        if (event.dataTransfer.types[1] === this.props.dragdropScope.toLocaleLowerCase()) {\r\n            DomHandler.removeClass(event.target, 'p-treenode-droppoint-active');\r\n        }\r\n    }\r\n\r\n    onDrop(event) {\r\n        if (this.props.dragdropScope && this.props.node.droppable !== false) {\r\n            DomHandler.removeClass(this.contentElement, 'p-treenode-dragover');\r\n            event.preventDefault();\r\n            event.stopPropagation();\r\n\r\n            if (this.props.onDrop) {\r\n                this.props.onDrop({\r\n                    originalEvent: event,\r\n                    path: this.props.path,\r\n                    index: this.props.index\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    onDragOver(event) {\r\n        if (event.dataTransfer.types[1] === this.props.dragdropScope.toLocaleLowerCase() && this.props.node.droppable !== false) {\r\n            event.dataTransfer.dropEffect = 'move';\r\n            event.preventDefault();\r\n            event.stopPropagation();\r\n        }\r\n    }\r\n\r\n    onDragEnter(event) {\r\n        if (event.dataTransfer.types[1] === this.props.dragdropScope.toLocaleLowerCase() && this.props.node.droppable !== false) {\r\n            DomHandler.addClass(this.contentElement, 'p-treenode-dragover');\r\n        }\r\n    }\r\n\r\n    onDragLeave(event) {\r\n        if (event.dataTransfer.types[1] === this.props.dragdropScope.toLocaleLowerCase() && this.props.node.droppable !== false) {\r\n            let rect = event.currentTarget.getBoundingClientRect();\r\n            if (event.nativeEvent.x > rect.left + rect.width || event.nativeEvent.x < rect.left || event.nativeEvent.y >= Math.floor(rect.top + rect.height) || event.nativeEvent.y < rect.top) {\r\n                DomHandler.removeClass(this.contentElement, 'p-treenode-dragover');\r\n            }\r\n        }\r\n    }\r\n\r\n    onDragStart(event) {\r\n        event.dataTransfer.setData(\"text\", this.props.dragdropScope);\r\n        event.dataTransfer.setData(this.props.dragdropScope, this.props.dragdropScope);\r\n\r\n        if (this.props.onDragStart) {\r\n            this.props.onDragStart({\r\n                originalEvent: event,\r\n                path: this.props.path,\r\n                index: this.props.index\r\n            });\r\n        }\r\n    }\r\n\r\n    onDragEnd(event) {\r\n        if (this.props.onDragEnd) {\r\n            this.props.onDragEnd({\r\n                originalEvent: event\r\n            });\r\n        }\r\n    }\r\n\r\n    renderLabel() {\r\n        const label = this.props.nodeTemplate ? this.props.nodeTemplate(this.props.node) : this.props.node.label;\r\n\r\n        return (\r\n            <span className=\"p-treenode-label\">\r\n                {label}\r\n            </span>\r\n        );\r\n    }\r\n\r\n    renderCheckbox() {\r\n        if (this.isCheckboxSelectionMode() && this.props.node.selectable !== false) {\r\n            const checked = this.isChecked();\r\n            const partialChecked = this.isPartialChecked();\r\n            const className = classNames('p-checkbox-box', {'p-highlight': checked, 'p-indeterminate': partialChecked, 'p-disabled': this.props.disabled});\r\n            const icon = classNames('p-checkbox-icon p-c', {'pi pi-check': checked, 'pi pi-minus': partialChecked});\r\n\r\n            return (\r\n                <div className=\"p-checkbox p-component\">\r\n                    <div className={className} role=\"checkbox\" aria-checked={checked}>\r\n                        <span className={icon}></span>\r\n                    </div>\r\n                </div>\r\n            )\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    renderIcon(expanded) {\r\n        let icon = this.props.node.icon || (expanded  ? this.props.node.expandedIcon : this.props.node.collapsedIcon);\r\n\r\n        if (icon) {\r\n            let className = classNames('p-treenode-icon', icon);\r\n\r\n            return (\r\n               <span className={className}></span>\r\n            );\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    renderToggler(expanded) {\r\n        const iconClassName = classNames('p-tree-toggler-icon pi pi-fw', {'pi-chevron-right': !expanded, 'pi-chevron-down': expanded});\r\n\r\n        return (\r\n            <button type=\"button\" className=\"p-tree-toggler p-link\" tabIndex={-1} onClick={this.onTogglerClick}>\r\n                <span className={iconClassName}></span>\r\n                <Ripple />\r\n            </button>\r\n        );\r\n    }\r\n\r\n    renderDropPoint(position) {\r\n        if (this.props.dragdropScope) {\r\n            return (\r\n                <li className=\"p-treenode-droppoint\" onDrop={event => this.onDropPoint(event, position)} onDragOver={this.onDropPointDragOver}\r\n                        onDragEnter={this.onDropPointDragEnter} onDragLeave={this.onDropPointDragLeave}></li>\r\n            );\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    renderContent() {\r\n        const selected = this.isSelected();\r\n        const checked = this.isChecked();\r\n        const className = classNames('p-treenode-content', this.props.node.className, {\r\n                'p-treenode-selectable': (this.props.selectionMode && this.props.node.selectable !== false),\r\n                'p-highlight': this.isCheckboxSelectionMode() ? checked : selected,\r\n                'p-highlight-contextmenu': (this.props.contextMenuSelectionKey && this.props.contextMenuSelectionKey === this.props.node.key),\r\n                'p-disabled': this.props.disabled\r\n            });\r\n        const expanded = this.isExpanded();\r\n        const toggler = this.renderToggler(expanded);\r\n        const checkbox = this.renderCheckbox();\r\n        const icon = this.renderIcon(expanded);\r\n        const label = this.renderLabel();\r\n        const tabIndex = this.props.disabled ? undefined : 0;\r\n\r\n        return (\r\n            <div ref={(el) => this.contentElement = el} className={className} style={this.props.node.style} onClick={this.onClick} onContextMenu={this.onRightClick} onTouchEnd={this.onTouchEnd} draggable={this.props.dragdropScope && this.props.node.draggable !== false && !this.props.disabled}\r\n                onDrop={this.onDrop} onDragOver={this.onDragOver} onDragEnter={this.onDragEnter} onDragLeave={this.onDragLeave}\r\n                onDragStart={this.onDragStart} onDragEnd={this.onDragEnd} tabIndex={tabIndex} onKeyDown={this.onNodeKeyDown}\r\n                role=\"treeitem\" aria-posinset={this.props.index + 1} aria-expanded={this.isExpanded()} aria-selected={checked || selected}>\r\n                {toggler}\r\n                {checkbox}\r\n                {icon}\r\n                {label}\r\n            </div>\r\n        );\r\n    }\r\n\r\n    renderChildren() {\r\n        if (this.props.node.children && this.props.node.children.length && this.isExpanded()) {\r\n            return (\r\n                <ul className=\"p-treenode-children\" role=\"group\">\r\n                    {\r\n                        this.props.node.children.map((childNode, index) => {\r\n                            return (\r\n                                <UITreeNode key={childNode.key||childNode.label} node={childNode} parent={this.props.node} index={index} last={index === this.props.node.children.length - 1} path={this.props.path + '-' + index} disabled={this.props.disabled}\r\n                                    selectionMode={this.props.selectionMode} selectionKeys={this.props.selectionKeys} onSelectionChange={this.props.onSelectionChange} metaKeySelection={this.props.metaKeySelection}\r\n                                    propagateSelectionDown={this.props.propagateSelectionDown} propagateSelectionUp={this.props.propagateSelectionUp}\r\n                                    contextMenuSelectionKey={this.props.contextMenuSelectionKey} onContextMenuSelectionChange={this.props.onContextMenuSelectionChange} onContextMenu={this.props.onContextMenu}\r\n                                    onExpand={this.props.onExpand} onCollapse={this.props.onCollapse} onSelect={this.props.onSelect} onUnselect={this.props.onUnselect}\r\n                                    expandedKeys={this.props.expandedKeys} onToggle={this.props.onToggle} onPropagateUp={this.propagateUp} nodeTemplate={this.props.nodeTemplate} isNodeLeaf={this.props.isNodeLeaf}\r\n                                    dragdropScope={this.props.dragdropScope} onDragStart={this.props.onDragStart} onDragEnd={this.props.onDragEnd} onDrop={this.props.onDrop} onDropPoint={this.props.onDropPoint} />\r\n                            );\r\n                        })\r\n                    }\r\n                </ul>\r\n            )\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    renderNode() {\r\n        const className = classNames('p-treenode', {'p-treenode-leaf': this.isLeaf()}, this.props.node.className)\r\n        const content = this.renderContent();\r\n        const children = this.renderChildren();\r\n\r\n        return (\r\n            <li className={className} style={this.props.node.style}>\r\n                {content}\r\n                {children}\r\n            </li>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        const node = this.renderNode();\r\n\r\n        if (this.props.dragdropScope && !this.props.disabled) {\r\n            const beforeDropPoint = this.renderDropPoint(-1);\r\n            const afterDropPoint = this.props.last ? this.renderDropPoint(1) : null;\r\n\r\n            return (\r\n                <>\r\n                    {beforeDropPoint}\r\n                    {node}\r\n                    {afterDropPoint}\r\n                </>\r\n            );\r\n        }\r\n        else {\r\n            return node;\r\n        }\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}