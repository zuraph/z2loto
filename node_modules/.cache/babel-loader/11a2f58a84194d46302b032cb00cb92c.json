{"ast":null,"code":"/*!\n@fullcalendar/timegrid v4.0.1\nDocs & License: https://fullcalendar.io/\n(c) 2019 Adam Shaw\n*/\n(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@fullcalendar/core'), require('@fullcalendar/daygrid')) : typeof define === 'function' && define.amd ? define(['exports', '@fullcalendar/core', '@fullcalendar/daygrid'], factory) : (global = global || self, factory(global.FullCalendarTimeGrid = {}, global.FullCalendar, global.FullCalendarDayGrid));\n})(this, function (exports, core, daygrid) {\n  'use strict';\n  /*! *****************************************************************************\r\n  Copyright (c) Microsoft Corporation. All rights reserved.\r\n  Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\n  this file except in compliance with the License. You may obtain a copy of the\r\n  License at http://www.apache.org/licenses/LICENSE-2.0\r\n    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n  KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\n  WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\n  MERCHANTABLITY OR NON-INFRINGEMENT.\r\n    See the Apache Version 2.0 License for specific language governing permissions\r\n  and limitations under the License.\r\n  ***************************************************************************** */\n\n  /* global Reflect, Promise */\n\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  function __extends(d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  }\n\n  var _assign = function __assign() {\n    _assign = Object.assign || function __assign(t) {\n      for (var s, i = 1, n = arguments.length; i < n; i++) {\n        s = arguments[i];\n\n        for (var p in s) {\n          if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n        }\n      }\n\n      return t;\n    };\n\n    return _assign.apply(this, arguments);\n  };\n  /*\n  Only handles foreground segs.\n  Does not own rendering. Use for low-level util methods by TimeGrid.\n  */\n\n\n  var TimeGridEventRenderer =\n  /** @class */\n  function (_super) {\n    __extends(TimeGridEventRenderer, _super);\n\n    function TimeGridEventRenderer(timeGrid) {\n      var _this = _super.call(this, timeGrid.context) || this;\n\n      _this.timeGrid = timeGrid;\n      _this.fullTimeFormat = core.createFormatter({\n        hour: 'numeric',\n        minute: '2-digit',\n        separator: _this.context.options.defaultRangeSeparator\n      });\n      return _this;\n    } // Given an array of foreground segments, render a DOM element for each, computes position,\n    // and attaches to the column inner-container elements.\n\n\n    TimeGridEventRenderer.prototype.attachSegs = function (segs, mirrorInfo) {\n      var segsByCol = this.timeGrid.groupSegsByCol(segs); // order the segs within each column\n      // TODO: have groupSegsByCol do this?\n\n      for (var col = 0; col < segsByCol.length; col++) {\n        segsByCol[col] = this.sortEventSegs(segsByCol[col]);\n      }\n\n      this.segsByCol = segsByCol;\n      this.timeGrid.attachSegsByCol(segsByCol, this.timeGrid.fgContainerEls);\n    };\n\n    TimeGridEventRenderer.prototype.detachSegs = function (segs) {\n      segs.forEach(function (seg) {\n        core.removeElement(seg.el);\n      });\n      this.segsByCol = null;\n    };\n\n    TimeGridEventRenderer.prototype.computeSegSizes = function (allSegs) {\n      var _a = this,\n          timeGrid = _a.timeGrid,\n          segsByCol = _a.segsByCol;\n\n      var colCnt = timeGrid.colCnt;\n      timeGrid.computeSegVerticals(allSegs); // horizontals relies on this\n\n      if (segsByCol) {\n        for (var col = 0; col < colCnt; col++) {\n          this.computeSegHorizontals(segsByCol[col]); // compute horizontal coordinates, z-index's, and reorder the array\n        }\n      }\n    };\n\n    TimeGridEventRenderer.prototype.assignSegSizes = function (allSegs) {\n      var _a = this,\n          timeGrid = _a.timeGrid,\n          segsByCol = _a.segsByCol;\n\n      var colCnt = timeGrid.colCnt;\n      timeGrid.assignSegVerticals(allSegs); // horizontals relies on this\n\n      if (segsByCol) {\n        for (var col = 0; col < colCnt; col++) {\n          this.assignSegCss(segsByCol[col]);\n        }\n      }\n    }; // Computes a default event time formatting string if `eventTimeFormat` is not explicitly defined\n\n\n    TimeGridEventRenderer.prototype.computeEventTimeFormat = function () {\n      return {\n        hour: 'numeric',\n        minute: '2-digit',\n        meridiem: false\n      };\n    }; // Computes a default `displayEventEnd` value if one is not expliclty defined\n\n\n    TimeGridEventRenderer.prototype.computeDisplayEventEnd = function () {\n      return true;\n    }; // Renders the HTML for a single event segment's default rendering\n\n\n    TimeGridEventRenderer.prototype.renderSegHtml = function (seg, mirrorInfo) {\n      var eventRange = seg.eventRange;\n      var eventDef = eventRange.def;\n      var eventUi = eventRange.ui;\n      var allDay = eventDef.allDay;\n      var isDraggable = eventUi.startEditable;\n      var isResizableFromStart = seg.isStart && eventUi.durationEditable && this.context.options.eventResizableFromStart;\n      var isResizableFromEnd = seg.isEnd && eventUi.durationEditable;\n      var classes = this.getSegClasses(seg, isDraggable, isResizableFromStart || isResizableFromEnd, mirrorInfo);\n      var skinCss = core.cssToStr(this.getSkinCss(eventUi));\n      var timeText;\n      var fullTimeText; // more verbose time text. for the print stylesheet\n\n      var startTimeText; // just the start time text\n\n      classes.unshift('fc-time-grid-event'); // if the event appears to span more than one day...\n\n      if (core.isMultiDayRange(eventRange.range)) {\n        // Don't display time text on segments that run entirely through a day.\n        // That would appear as midnight-midnight and would look dumb.\n        // Otherwise, display the time text for the *segment's* times (like 6pm-midnight or midnight-10am)\n        if (seg.isStart || seg.isEnd) {\n          var unzonedStart = seg.start;\n          var unzonedEnd = seg.end;\n          timeText = this._getTimeText(unzonedStart, unzonedEnd, allDay); // TODO: give the timezones\n\n          fullTimeText = this._getTimeText(unzonedStart, unzonedEnd, allDay, this.fullTimeFormat);\n          startTimeText = this._getTimeText(unzonedStart, unzonedEnd, allDay, null, false); // displayEnd=false\n        }\n      } else {\n        // Display the normal time text for the *event's* times\n        timeText = this.getTimeText(eventRange);\n        fullTimeText = this.getTimeText(eventRange, this.fullTimeFormat);\n        startTimeText = this.getTimeText(eventRange, null, false); // displayEnd=false\n      }\n\n      return '<a class=\"' + classes.join(' ') + '\"' + (eventDef.url ? ' href=\"' + core.htmlEscape(eventDef.url) + '\"' : '') + (skinCss ? ' style=\"' + skinCss + '\"' : '') + '>' + '<div class=\"fc-content\">' + (timeText ? '<div class=\"fc-time\"' + ' data-start=\"' + core.htmlEscape(startTimeText) + '\"' + ' data-full=\"' + core.htmlEscape(fullTimeText) + '\"' + '>' + '<span>' + core.htmlEscape(timeText) + '</span>' + '</div>' : '') + (eventDef.title ? '<div class=\"fc-title\">' + core.htmlEscape(eventDef.title) + '</div>' : '') + '</div>' + (\n      /* TODO: write CSS for this\n      (isResizableFromStart ?\n        '<div class=\"fc-resizer fc-start-resizer\"></div>' :\n        ''\n        ) +\n      */\n      isResizableFromEnd ? '<div class=\"fc-resizer fc-end-resizer\"></div>' : '') + '</a>';\n    }; // Given an array of segments that are all in the same column, sets the backwardCoord and forwardCoord on each.\n    // Assumed the segs are already ordered.\n    // NOTE: Also reorders the given array by date!\n\n\n    TimeGridEventRenderer.prototype.computeSegHorizontals = function (segs) {\n      var levels;\n      var level0;\n      var i;\n      levels = buildSlotSegLevels(segs);\n      computeForwardSlotSegs(levels);\n\n      if (level0 = levels[0]) {\n        for (i = 0; i < level0.length; i++) {\n          computeSlotSegPressures(level0[i]);\n        }\n\n        for (i = 0; i < level0.length; i++) {\n          this.computeSegForwardBack(level0[i], 0, 0);\n        }\n      }\n    }; // Calculate seg.forwardCoord and seg.backwardCoord for the segment, where both values range\n    // from 0 to 1. If the calendar is left-to-right, the seg.backwardCoord maps to \"left\" and\n    // seg.forwardCoord maps to \"right\" (via percentage). Vice-versa if the calendar is right-to-left.\n    //\n    // The segment might be part of a \"series\", which means consecutive segments with the same pressure\n    // who's width is unknown until an edge has been hit. `seriesBackwardPressure` is the number of\n    // segments behind this one in the current series, and `seriesBackwardCoord` is the starting\n    // coordinate of the first segment in the series.\n\n\n    TimeGridEventRenderer.prototype.computeSegForwardBack = function (seg, seriesBackwardPressure, seriesBackwardCoord) {\n      var forwardSegs = seg.forwardSegs;\n      var i;\n\n      if (seg.forwardCoord === undefined) {\n        // not already computed\n        if (!forwardSegs.length) {\n          // if there are no forward segments, this segment should butt up against the edge\n          seg.forwardCoord = 1;\n        } else {\n          // sort highest pressure first\n          this.sortForwardSegs(forwardSegs); // this segment's forwardCoord will be calculated from the backwardCoord of the\n          // highest-pressure forward segment.\n\n          this.computeSegForwardBack(forwardSegs[0], seriesBackwardPressure + 1, seriesBackwardCoord);\n          seg.forwardCoord = forwardSegs[0].backwardCoord;\n        } // calculate the backwardCoord from the forwardCoord. consider the series\n\n\n        seg.backwardCoord = seg.forwardCoord - (seg.forwardCoord - seriesBackwardCoord) / ( // available width for series\n        seriesBackwardPressure + 1); // # of segments in the series\n        // use this segment's coordinates to computed the coordinates of the less-pressurized\n        // forward segments\n\n        for (i = 0; i < forwardSegs.length; i++) {\n          this.computeSegForwardBack(forwardSegs[i], 0, seg.forwardCoord);\n        }\n      }\n    };\n\n    TimeGridEventRenderer.prototype.sortForwardSegs = function (forwardSegs) {\n      var objs = forwardSegs.map(buildTimeGridSegCompareObj);\n      var specs = [// put higher-pressure first\n      {\n        field: 'forwardPressure',\n        order: -1\n      }, // put segments that are closer to initial edge first (and favor ones with no coords yet)\n      {\n        field: 'backwardCoord',\n        order: 1\n      }].concat(this.context.view.eventOrderSpecs);\n      objs.sort(function (obj0, obj1) {\n        return core.compareByFieldSpecs(obj0, obj1, specs);\n      });\n      return objs.map(function (c) {\n        return c._seg;\n      });\n    }; // Given foreground event segments that have already had their position coordinates computed,\n    // assigns position-related CSS values to their elements.\n\n\n    TimeGridEventRenderer.prototype.assignSegCss = function (segs) {\n      for (var _i = 0, segs_1 = segs; _i < segs_1.length; _i++) {\n        var seg = segs_1[_i];\n        core.applyStyle(seg.el, this.generateSegCss(seg));\n\n        if (seg.level > 0) {\n          seg.el.classList.add('fc-time-grid-event-inset');\n        } // if the event is short that the title will be cut off,\n        // attach a className that condenses the title into the time area.\n\n\n        if (seg.eventRange.def.title && seg.bottom - seg.top < 30) {\n          seg.el.classList.add('fc-short'); // TODO: \"condensed\" is a better name\n        }\n      }\n    }; // Generates an object with CSS properties/values that should be applied to an event segment element.\n    // Contains important positioning-related properties that should be applied to any event element, customized or not.\n\n\n    TimeGridEventRenderer.prototype.generateSegCss = function (seg) {\n      var shouldOverlap = this.context.options.slotEventOverlap;\n      var backwardCoord = seg.backwardCoord; // the left side if LTR. the right side if RTL. floating-point\n\n      var forwardCoord = seg.forwardCoord; // the right side if LTR. the left side if RTL. floating-point\n\n      var props = this.timeGrid.generateSegVerticalCss(seg); // get top/bottom first\n\n      var isRtl = this.timeGrid.isRtl;\n      var left; // amount of space from left edge, a fraction of the total width\n\n      var right; // amount of space from right edge, a fraction of the total width\n\n      if (shouldOverlap) {\n        // double the width, but don't go beyond the maximum forward coordinate (1.0)\n        forwardCoord = Math.min(1, backwardCoord + (forwardCoord - backwardCoord) * 2);\n      }\n\n      if (isRtl) {\n        left = 1 - forwardCoord;\n        right = backwardCoord;\n      } else {\n        left = backwardCoord;\n        right = 1 - forwardCoord;\n      }\n\n      props.zIndex = seg.level + 1; // convert from 0-base to 1-based\n\n      props.left = left * 100 + '%';\n      props.right = right * 100 + '%';\n\n      if (shouldOverlap && seg.forwardPressure) {\n        // add padding to the edge so that forward stacked events don't cover the resizer's icon\n        props[isRtl ? 'marginLeft' : 'marginRight'] = 10 * 2; // 10 is a guesstimate of the icon's width\n      }\n\n      return props;\n    };\n\n    return TimeGridEventRenderer;\n  }(core.FgEventRenderer); // Builds an array of segments \"levels\". The first level will be the leftmost tier of segments if the calendar is\n  // left-to-right, or the rightmost if the calendar is right-to-left. Assumes the segments are already ordered by date.\n\n\n  function buildSlotSegLevels(segs) {\n    var levels = [];\n    var i;\n    var seg;\n    var j;\n\n    for (i = 0; i < segs.length; i++) {\n      seg = segs[i]; // go through all the levels and stop on the first level where there are no collisions\n\n      for (j = 0; j < levels.length; j++) {\n        if (!computeSlotSegCollisions(seg, levels[j]).length) {\n          break;\n        }\n      }\n\n      seg.level = j;\n      (levels[j] || (levels[j] = [])).push(seg);\n    }\n\n    return levels;\n  } // For every segment, figure out the other segments that are in subsequent\n  // levels that also occupy the same vertical space. Accumulate in seg.forwardSegs\n\n\n  function computeForwardSlotSegs(levels) {\n    var i;\n    var level;\n    var j;\n    var seg;\n    var k;\n\n    for (i = 0; i < levels.length; i++) {\n      level = levels[i];\n\n      for (j = 0; j < level.length; j++) {\n        seg = level[j];\n        seg.forwardSegs = [];\n\n        for (k = i + 1; k < levels.length; k++) {\n          computeSlotSegCollisions(seg, levels[k], seg.forwardSegs);\n        }\n      }\n    }\n  } // Figure out which path forward (via seg.forwardSegs) results in the longest path until\n  // the furthest edge is reached. The number of segments in this path will be seg.forwardPressure\n\n\n  function computeSlotSegPressures(seg) {\n    var forwardSegs = seg.forwardSegs;\n    var forwardPressure = 0;\n    var i;\n    var forwardSeg;\n\n    if (seg.forwardPressure === undefined) {\n      // not already computed\n      for (i = 0; i < forwardSegs.length; i++) {\n        forwardSeg = forwardSegs[i]; // figure out the child's maximum forward path\n\n        computeSlotSegPressures(forwardSeg); // either use the existing maximum, or use the child's forward pressure\n        // plus one (for the forwardSeg itself)\n\n        forwardPressure = Math.max(forwardPressure, 1 + forwardSeg.forwardPressure);\n      }\n\n      seg.forwardPressure = forwardPressure;\n    }\n  } // Find all the segments in `otherSegs` that vertically collide with `seg`.\n  // Append into an optionally-supplied `results` array and return.\n\n\n  function computeSlotSegCollisions(seg, otherSegs, results) {\n    if (results === void 0) {\n      results = [];\n    }\n\n    for (var i = 0; i < otherSegs.length; i++) {\n      if (isSlotSegCollision(seg, otherSegs[i])) {\n        results.push(otherSegs[i]);\n      }\n    }\n\n    return results;\n  } // Do these segments occupy the same vertical space?\n\n\n  function isSlotSegCollision(seg1, seg2) {\n    return seg1.bottom > seg2.top && seg1.top < seg2.bottom;\n  }\n\n  function buildTimeGridSegCompareObj(seg) {\n    var obj = core.buildSegCompareObj(seg);\n    obj.forwardPressure = seg.forwardPressure;\n    obj.backwardCoord = seg.backwardCoord;\n    return obj;\n  }\n\n  var TimeGridMirrorRenderer =\n  /** @class */\n  function (_super) {\n    __extends(TimeGridMirrorRenderer, _super);\n\n    function TimeGridMirrorRenderer() {\n      return _super !== null && _super.apply(this, arguments) || this;\n    }\n\n    TimeGridMirrorRenderer.prototype.attachSegs = function (segs, mirrorInfo) {\n      this.segsByCol = this.timeGrid.groupSegsByCol(segs);\n      this.timeGrid.attachSegsByCol(this.segsByCol, this.timeGrid.mirrorContainerEls);\n      this.sourceSeg = mirrorInfo.sourceSeg;\n    };\n\n    TimeGridMirrorRenderer.prototype.generateSegCss = function (seg) {\n      var props = _super.prototype.generateSegCss.call(this, seg);\n\n      var sourceSeg = this.sourceSeg;\n\n      if (sourceSeg && sourceSeg.col === seg.col) {\n        var sourceSegProps = _super.prototype.generateSegCss.call(this, sourceSeg);\n\n        props.left = sourceSegProps.left;\n        props.right = sourceSegProps.right;\n        props.marginLeft = sourceSegProps.marginLeft;\n        props.marginRight = sourceSegProps.marginRight;\n      }\n\n      return props;\n    };\n\n    return TimeGridMirrorRenderer;\n  }(TimeGridEventRenderer);\n\n  var TimeGridFillRenderer =\n  /** @class */\n  function (_super) {\n    __extends(TimeGridFillRenderer, _super);\n\n    function TimeGridFillRenderer(timeGrid) {\n      var _this = _super.call(this, timeGrid.context) || this;\n\n      _this.timeGrid = timeGrid;\n      return _this;\n    }\n\n    TimeGridFillRenderer.prototype.attachSegs = function (type, segs) {\n      var timeGrid = this.timeGrid;\n      var containerEls; // TODO: more efficient lookup\n\n      if (type === 'bgEvent') {\n        containerEls = timeGrid.bgContainerEls;\n      } else if (type === 'businessHours') {\n        containerEls = timeGrid.businessContainerEls;\n      } else if (type === 'highlight') {\n        containerEls = timeGrid.highlightContainerEls;\n      }\n\n      timeGrid.attachSegsByCol(timeGrid.groupSegsByCol(segs), containerEls);\n      return segs.map(function (seg) {\n        return seg.el;\n      });\n    };\n\n    TimeGridFillRenderer.prototype.computeSegSizes = function (segs) {\n      this.timeGrid.computeSegVerticals(segs);\n    };\n\n    TimeGridFillRenderer.prototype.assignSegSizes = function (segs) {\n      this.timeGrid.assignSegVerticals(segs);\n    };\n\n    return TimeGridFillRenderer;\n  }(core.FillRenderer);\n  /* A component that renders one or more columns of vertical time slots\n  ----------------------------------------------------------------------------------------------------------------------*/\n  // potential nice values for the slot-duration and interval-duration\n  // from largest to smallest\n\n\n  var AGENDA_STOCK_SUB_DURATIONS = [{\n    hours: 1\n  }, {\n    minutes: 30\n  }, {\n    minutes: 15\n  }, {\n    seconds: 30\n  }, {\n    seconds: 15\n  }];\n\n  var TimeGrid =\n  /** @class */\n  function (_super) {\n    __extends(TimeGrid, _super);\n\n    function TimeGrid(context, el, renderProps) {\n      var _this = _super.call(this, context, el) || this;\n\n      _this.isSlatSizesDirty = false;\n      _this.isColSizesDirty = false;\n      _this.renderSlats = core.memoizeRendering(_this._renderSlats);\n      var eventRenderer = _this.eventRenderer = new TimeGridEventRenderer(_this);\n      var fillRenderer = _this.fillRenderer = new TimeGridFillRenderer(_this);\n      _this.mirrorRenderer = new TimeGridMirrorRenderer(_this);\n      var renderColumns = _this.renderColumns = core.memoizeRendering(_this._renderColumns, _this._unrenderColumns);\n      _this.renderBusinessHours = core.memoizeRendering(fillRenderer.renderSegs.bind(fillRenderer, 'businessHours'), fillRenderer.unrender.bind(fillRenderer, 'businessHours'), [renderColumns]);\n      _this.renderDateSelection = core.memoizeRendering(_this._renderDateSelection, _this._unrenderDateSelection, [renderColumns]);\n      _this.renderFgEvents = core.memoizeRendering(eventRenderer.renderSegs.bind(eventRenderer), eventRenderer.unrender.bind(eventRenderer), [renderColumns]);\n      _this.renderBgEvents = core.memoizeRendering(fillRenderer.renderSegs.bind(fillRenderer, 'bgEvent'), fillRenderer.unrender.bind(fillRenderer, 'bgEvent'), [renderColumns]);\n      _this.renderEventSelection = core.memoizeRendering(eventRenderer.selectByInstanceId.bind(eventRenderer), eventRenderer.unselectByInstanceId.bind(eventRenderer), [_this.renderFgEvents]);\n      _this.renderEventDrag = core.memoizeRendering(_this._renderEventDrag, _this._unrenderEventDrag, [renderColumns]);\n      _this.renderEventResize = core.memoizeRendering(_this._renderEventResize, _this._unrenderEventResize, [renderColumns]);\n\n      _this.processOptions();\n\n      el.innerHTML = '<div class=\"fc-bg\"></div>' + '<div class=\"fc-slats\"></div>' + '<hr class=\"fc-divider ' + _this.theme.getClass('widgetHeader') + '\" style=\"display:none\" />';\n      _this.rootBgContainerEl = el.querySelector('.fc-bg');\n      _this.slatContainerEl = el.querySelector('.fc-slats');\n      _this.bottomRuleEl = el.querySelector('.fc-divider');\n      _this.renderProps = renderProps;\n      return _this;\n    }\n    /* Options\n    ------------------------------------------------------------------------------------------------------------------*/\n    // Parses various options into properties of this object\n\n\n    TimeGrid.prototype.processOptions = function () {\n      var slotDuration = this.opt('slotDuration');\n      var snapDuration = this.opt('snapDuration');\n      var snapsPerSlot;\n      var input;\n      slotDuration = core.createDuration(slotDuration);\n      snapDuration = snapDuration ? core.createDuration(snapDuration) : slotDuration;\n      snapsPerSlot = core.wholeDivideDurations(slotDuration, snapDuration);\n\n      if (snapsPerSlot === null) {\n        snapDuration = slotDuration;\n        snapsPerSlot = 1; // TODO: say warning?\n      }\n\n      this.slotDuration = slotDuration;\n      this.snapDuration = snapDuration;\n      this.snapsPerSlot = snapsPerSlot; // might be an array value (for TimelineView).\n      // if so, getting the most granular entry (the last one probably).\n\n      input = this.opt('slotLabelFormat');\n\n      if (Array.isArray(input)) {\n        input = input[input.length - 1];\n      }\n\n      this.labelFormat = core.createFormatter(input || {\n        hour: 'numeric',\n        minute: '2-digit',\n        omitZeroMinute: true,\n        meridiem: 'short'\n      });\n      input = this.opt('slotLabelInterval');\n      this.labelInterval = input ? core.createDuration(input) : this.computeLabelInterval(slotDuration);\n    }; // Computes an automatic value for slotLabelInterval\n\n\n    TimeGrid.prototype.computeLabelInterval = function (slotDuration) {\n      var i;\n      var labelInterval;\n      var slotsPerLabel; // find the smallest stock label interval that results in more than one slots-per-label\n\n      for (i = AGENDA_STOCK_SUB_DURATIONS.length - 1; i >= 0; i--) {\n        labelInterval = core.createDuration(AGENDA_STOCK_SUB_DURATIONS[i]);\n        slotsPerLabel = core.wholeDivideDurations(labelInterval, slotDuration);\n\n        if (slotsPerLabel !== null && slotsPerLabel > 1) {\n          return labelInterval;\n        }\n      }\n\n      return slotDuration; // fall back\n    };\n    /* Rendering\n    ------------------------------------------------------------------------------------------------------------------*/\n\n\n    TimeGrid.prototype.render = function (props) {\n      var cells = props.cells;\n      this.colCnt = cells.length;\n      this.renderSlats(props.dateProfile);\n      this.renderColumns(props.cells, props.dateProfile);\n      this.renderBusinessHours(props.businessHourSegs);\n      this.renderDateSelection(props.dateSelectionSegs);\n      this.renderFgEvents(props.fgEventSegs);\n      this.renderBgEvents(props.bgEventSegs);\n      this.renderEventSelection(props.eventSelection);\n      this.renderEventDrag(props.eventDrag);\n      this.renderEventResize(props.eventResize);\n    };\n\n    TimeGrid.prototype.destroy = function () {\n      _super.prototype.destroy.call(this); // should unrender everything else too\n\n\n      this.renderSlats.unrender();\n      this.renderColumns.unrender();\n    };\n\n    TimeGrid.prototype.updateSize = function (isResize) {\n      var _a = this,\n          fillRenderer = _a.fillRenderer,\n          eventRenderer = _a.eventRenderer,\n          mirrorRenderer = _a.mirrorRenderer;\n\n      if (isResize || this.isSlatSizesDirty) {\n        this.buildSlatPositions();\n        this.isSlatSizesDirty = false;\n      }\n\n      if (isResize || this.isColSizesDirty) {\n        this.buildColPositions();\n        this.isColSizesDirty = false;\n      }\n\n      fillRenderer.computeSizes(isResize);\n      eventRenderer.computeSizes(isResize);\n      mirrorRenderer.computeSizes(isResize);\n      fillRenderer.assignSizes(isResize);\n      eventRenderer.assignSizes(isResize);\n      mirrorRenderer.assignSizes(isResize);\n    };\n\n    TimeGrid.prototype._renderSlats = function (dateProfile) {\n      var theme = this.theme;\n      this.slatContainerEl.innerHTML = '<table class=\"' + theme.getClass('tableGrid') + '\">' + this.renderSlatRowHtml(dateProfile) + '</table>';\n      this.slatEls = core.findElements(this.slatContainerEl, 'tr');\n      this.slatPositions = new core.PositionCache(this.el, this.slatEls, false, true // vertical\n      );\n      this.isSlatSizesDirty = true;\n    }; // Generates the HTML for the horizontal \"slats\" that run width-wise. Has a time axis on a side. Depends on RTL.\n\n\n    TimeGrid.prototype.renderSlatRowHtml = function (dateProfile) {\n      var _a = this,\n          dateEnv = _a.dateEnv,\n          theme = _a.theme,\n          isRtl = _a.isRtl;\n\n      var html = '';\n      var dayStart = core.startOfDay(dateProfile.renderRange.start);\n      var slotTime = dateProfile.minTime;\n      var slotIterator = core.createDuration(0);\n      var slotDate; // will be on the view's first day, but we only care about its time\n\n      var isLabeled;\n      var axisHtml; // Calculate the time for each slot\n\n      while (core.asRoughMs(slotTime) < core.asRoughMs(dateProfile.maxTime)) {\n        slotDate = dateEnv.add(dayStart, slotTime);\n        isLabeled = core.wholeDivideDurations(slotIterator, this.labelInterval) !== null;\n        axisHtml = '<td class=\"fc-axis fc-time ' + theme.getClass('widgetContent') + '\">' + (isLabeled ? '<span>' + // for matchCellWidths\n        core.htmlEscape(dateEnv.format(slotDate, this.labelFormat)) + '</span>' : '') + '</td>';\n        html += '<tr data-time=\"' + core.formatIsoTimeString(slotDate) + '\"' + (isLabeled ? '' : ' class=\"fc-minor\"') + '>' + (!isRtl ? axisHtml : '') + '<td class=\"' + theme.getClass('widgetContent') + '\"></td>' + (isRtl ? axisHtml : '') + '</tr>';\n        slotTime = core.addDurations(slotTime, this.slotDuration);\n        slotIterator = core.addDurations(slotIterator, this.slotDuration);\n      }\n\n      return html;\n    };\n\n    TimeGrid.prototype._renderColumns = function (cells, dateProfile) {\n      var theme = this.theme;\n      var bgRow = new daygrid.DayBgRow(this.context);\n      this.rootBgContainerEl.innerHTML = '<table class=\"' + theme.getClass('tableGrid') + '\">' + bgRow.renderHtml({\n        cells: cells,\n        dateProfile: dateProfile,\n        renderIntroHtml: this.renderProps.renderBgIntroHtml\n      }) + '</table>';\n      this.colEls = core.findElements(this.el, '.fc-day, .fc-disabled-day');\n\n      if (this.isRtl) {\n        this.colEls.reverse();\n      }\n\n      this.colPositions = new core.PositionCache(this.el, this.colEls, true, // horizontal\n      false);\n      this.renderContentSkeleton();\n      this.isColSizesDirty = true;\n    };\n\n    TimeGrid.prototype._unrenderColumns = function () {\n      this.unrenderContentSkeleton();\n    };\n    /* Content Skeleton\n    ------------------------------------------------------------------------------------------------------------------*/\n    // Renders the DOM that the view's content will live in\n\n\n    TimeGrid.prototype.renderContentSkeleton = function () {\n      var parts = [];\n      var skeletonEl;\n      parts.push(this.renderProps.renderIntroHtml());\n\n      for (var i = 0; i < this.colCnt; i++) {\n        parts.push('<td>' + '<div class=\"fc-content-col\">' + '<div class=\"fc-event-container fc-mirror-container\"></div>' + '<div class=\"fc-event-container\"></div>' + '<div class=\"fc-highlight-container\"></div>' + '<div class=\"fc-bgevent-container\"></div>' + '<div class=\"fc-business-container\"></div>' + '</div>' + '</td>');\n      }\n\n      if (this.isRtl) {\n        parts.reverse();\n      }\n\n      skeletonEl = this.contentSkeletonEl = core.htmlToElement('<div class=\"fc-content-skeleton\">' + '<table>' + '<tr>' + parts.join('') + '</tr>' + '</table>' + '</div>');\n      this.colContainerEls = core.findElements(skeletonEl, '.fc-content-col');\n      this.mirrorContainerEls = core.findElements(skeletonEl, '.fc-mirror-container');\n      this.fgContainerEls = core.findElements(skeletonEl, '.fc-event-container:not(.fc-mirror-container)');\n      this.bgContainerEls = core.findElements(skeletonEl, '.fc-bgevent-container');\n      this.highlightContainerEls = core.findElements(skeletonEl, '.fc-highlight-container');\n      this.businessContainerEls = core.findElements(skeletonEl, '.fc-business-container');\n\n      if (this.isRtl) {\n        this.colContainerEls.reverse();\n        this.mirrorContainerEls.reverse();\n        this.fgContainerEls.reverse();\n        this.bgContainerEls.reverse();\n        this.highlightContainerEls.reverse();\n        this.businessContainerEls.reverse();\n      }\n\n      this.el.appendChild(skeletonEl);\n    };\n\n    TimeGrid.prototype.unrenderContentSkeleton = function () {\n      core.removeElement(this.contentSkeletonEl);\n    }; // Given a flat array of segments, return an array of sub-arrays, grouped by each segment's col\n\n\n    TimeGrid.prototype.groupSegsByCol = function (segs) {\n      var segsByCol = [];\n      var i;\n\n      for (i = 0; i < this.colCnt; i++) {\n        segsByCol.push([]);\n      }\n\n      for (i = 0; i < segs.length; i++) {\n        segsByCol[segs[i].col].push(segs[i]);\n      }\n\n      return segsByCol;\n    }; // Given segments grouped by column, insert the segments' elements into a parallel array of container\n    // elements, each living within a column.\n\n\n    TimeGrid.prototype.attachSegsByCol = function (segsByCol, containerEls) {\n      var col;\n      var segs;\n      var i;\n\n      for (col = 0; col < this.colCnt; col++) {\n        // iterate each column grouping\n        segs = segsByCol[col];\n\n        for (i = 0; i < segs.length; i++) {\n          containerEls[col].appendChild(segs[i].el);\n        }\n      }\n    };\n    /* Now Indicator\n    ------------------------------------------------------------------------------------------------------------------*/\n\n\n    TimeGrid.prototype.getNowIndicatorUnit = function () {\n      return 'minute'; // will refresh on the minute\n    };\n\n    TimeGrid.prototype.renderNowIndicator = function (segs, date) {\n      // HACK: if date columns not ready for some reason (scheduler)\n      if (!this.colContainerEls) {\n        return;\n      }\n\n      var top = this.computeDateTop(date);\n      var nodes = [];\n      var i; // render lines within the columns\n\n      for (i = 0; i < segs.length; i++) {\n        var lineEl = core.createElement('div', {\n          className: 'fc-now-indicator fc-now-indicator-line'\n        });\n        lineEl.style.top = top + 'px';\n        this.colContainerEls[segs[i].col].appendChild(lineEl);\n        nodes.push(lineEl);\n      } // render an arrow over the axis\n\n\n      if (segs.length > 0) {\n        // is the current time in view?\n        var arrowEl = core.createElement('div', {\n          className: 'fc-now-indicator fc-now-indicator-arrow'\n        });\n        arrowEl.style.top = top + 'px';\n        this.contentSkeletonEl.appendChild(arrowEl);\n        nodes.push(arrowEl);\n      }\n\n      this.nowIndicatorEls = nodes;\n    };\n\n    TimeGrid.prototype.unrenderNowIndicator = function () {\n      if (this.nowIndicatorEls) {\n        this.nowIndicatorEls.forEach(core.removeElement);\n        this.nowIndicatorEls = null;\n      }\n    };\n    /* Coordinates\n    ------------------------------------------------------------------------------------------------------------------*/\n\n\n    TimeGrid.prototype.getTotalSlatHeight = function () {\n      return this.slatContainerEl.offsetHeight;\n    }; // Computes the top coordinate, relative to the bounds of the grid, of the given date.\n    // A `startOfDayDate` must be given for avoiding ambiguity over how to treat midnight.\n\n\n    TimeGrid.prototype.computeDateTop = function (when, startOfDayDate) {\n      if (!startOfDayDate) {\n        startOfDayDate = core.startOfDay(when);\n      }\n\n      return this.computeTimeTop(when.valueOf() - startOfDayDate.valueOf());\n    }; // Computes the top coordinate, relative to the bounds of the grid, of the given time (a Duration).\n\n\n    TimeGrid.prototype.computeTimeTop = function (timeMs) {\n      var len = this.slatEls.length;\n      var dateProfile = this.props.dateProfile;\n      var slatCoverage = (timeMs - core.asRoughMs(dateProfile.minTime)) / core.asRoughMs(this.slotDuration); // floating-point value of # of slots covered\n\n      var slatIndex;\n      var slatRemainder; // compute a floating-point number for how many slats should be progressed through.\n      // from 0 to number of slats (inclusive)\n      // constrained because minTime/maxTime might be customized.\n\n      slatCoverage = Math.max(0, slatCoverage);\n      slatCoverage = Math.min(len, slatCoverage); // an integer index of the furthest whole slat\n      // from 0 to number slats (*exclusive*, so len-1)\n\n      slatIndex = Math.floor(slatCoverage);\n      slatIndex = Math.min(slatIndex, len - 1); // how much further through the slatIndex slat (from 0.0-1.0) must be covered in addition.\n      // could be 1.0 if slatCoverage is covering *all* the slots\n\n      slatRemainder = slatCoverage - slatIndex;\n      return this.slatPositions.tops[slatIndex] + this.slatPositions.getHeight(slatIndex) * slatRemainder;\n    }; // For each segment in an array, computes and assigns its top and bottom properties\n\n\n    TimeGrid.prototype.computeSegVerticals = function (segs) {\n      var eventMinHeight = this.opt('timeGridEventMinHeight');\n      var i;\n      var seg;\n      var dayDate;\n\n      for (i = 0; i < segs.length; i++) {\n        seg = segs[i];\n        dayDate = this.props.cells[seg.col].date;\n        seg.top = this.computeDateTop(seg.start, dayDate);\n        seg.bottom = Math.max(seg.top + eventMinHeight, this.computeDateTop(seg.end, dayDate));\n      }\n    }; // Given segments that already have their top/bottom properties computed, applies those values to\n    // the segments' elements.\n\n\n    TimeGrid.prototype.assignSegVerticals = function (segs) {\n      var i;\n      var seg;\n\n      for (i = 0; i < segs.length; i++) {\n        seg = segs[i];\n        core.applyStyle(seg.el, this.generateSegVerticalCss(seg));\n      }\n    }; // Generates an object with CSS properties for the top/bottom coordinates of a segment element\n\n\n    TimeGrid.prototype.generateSegVerticalCss = function (seg) {\n      return {\n        top: seg.top,\n        bottom: -seg.bottom // flipped because needs to be space beyond bottom edge of event container\n\n      };\n    };\n    /* Sizing\n    ------------------------------------------------------------------------------------------------------------------*/\n\n\n    TimeGrid.prototype.buildColPositions = function () {\n      this.colPositions.build();\n    };\n\n    TimeGrid.prototype.buildSlatPositions = function () {\n      this.slatPositions.build();\n    };\n    /* Hit System\n    ------------------------------------------------------------------------------------------------------------------*/\n\n\n    TimeGrid.prototype.positionToHit = function (positionLeft, positionTop) {\n      var _a = this,\n          dateEnv = _a.dateEnv,\n          snapsPerSlot = _a.snapsPerSlot,\n          slatPositions = _a.slatPositions,\n          colPositions = _a.colPositions;\n\n      var colIndex = colPositions.leftToIndex(positionLeft);\n      var slatIndex = slatPositions.topToIndex(positionTop);\n\n      if (colIndex != null && slatIndex != null) {\n        var slatTop = slatPositions.tops[slatIndex];\n        var slatHeight = slatPositions.getHeight(slatIndex);\n        var partial = (positionTop - slatTop) / slatHeight; // floating point number between 0 and 1\n\n        var localSnapIndex = Math.floor(partial * snapsPerSlot); // the snap # relative to start of slat\n\n        var snapIndex = slatIndex * snapsPerSlot + localSnapIndex;\n        var dayDate = this.props.cells[colIndex].date;\n        var time = core.addDurations(this.props.dateProfile.minTime, core.multiplyDuration(this.snapDuration, snapIndex));\n        var start = dateEnv.add(dayDate, time);\n        var end = dateEnv.add(start, this.snapDuration);\n        return {\n          col: colIndex,\n          dateSpan: {\n            range: {\n              start: start,\n              end: end\n            },\n            allDay: false\n          },\n          dayEl: this.colEls[colIndex],\n          relativeRect: {\n            left: colPositions.lefts[colIndex],\n            right: colPositions.rights[colIndex],\n            top: slatTop,\n            bottom: slatTop + slatHeight\n          }\n        };\n      }\n    };\n    /* Event Drag Visualization\n    ------------------------------------------------------------------------------------------------------------------*/\n\n\n    TimeGrid.prototype._renderEventDrag = function (state) {\n      if (state) {\n        this.eventRenderer.hideByHash(state.affectedInstances);\n\n        if (state.isEvent) {\n          this.mirrorRenderer.renderSegs(state.segs, {\n            isDragging: true,\n            sourceSeg: state.sourceSeg\n          });\n        } else {\n          this.fillRenderer.renderSegs('highlight', state.segs);\n        }\n      }\n    };\n\n    TimeGrid.prototype._unrenderEventDrag = function (state) {\n      if (state) {\n        this.eventRenderer.showByHash(state.affectedInstances);\n        this.mirrorRenderer.unrender(state.segs, {\n          isDragging: true,\n          sourceSeg: state.sourceSeg\n        });\n        this.fillRenderer.unrender('highlight');\n      }\n    };\n    /* Event Resize Visualization\n    ------------------------------------------------------------------------------------------------------------------*/\n\n\n    TimeGrid.prototype._renderEventResize = function (state) {\n      if (state) {\n        this.eventRenderer.hideByHash(state.affectedInstances);\n        this.mirrorRenderer.renderSegs(state.segs, {\n          isResizing: true,\n          sourceSeg: state.sourceSeg\n        });\n      }\n    };\n\n    TimeGrid.prototype._unrenderEventResize = function (state) {\n      if (state) {\n        this.eventRenderer.showByHash(state.affectedInstances);\n        this.mirrorRenderer.unrender(state.segs, {\n          isResizing: true,\n          sourceSeg: state.sourceSeg\n        });\n      }\n    };\n    /* Selection\n    ------------------------------------------------------------------------------------------------------------------*/\n    // Renders a visual indication of a selection. Overrides the default, which was to simply render a highlight.\n\n\n    TimeGrid.prototype._renderDateSelection = function (segs) {\n      if (segs) {\n        if (this.opt('selectMirror')) {\n          this.mirrorRenderer.renderSegs(segs, {\n            isSelecting: true\n          });\n        } else {\n          this.fillRenderer.renderSegs('highlight', segs);\n        }\n      }\n    };\n\n    TimeGrid.prototype._unrenderDateSelection = function (segs) {\n      this.mirrorRenderer.unrender(segs, {\n        isSelecting: true\n      });\n      this.fillRenderer.unrender('highlight');\n    };\n\n    return TimeGrid;\n  }(core.DateComponent);\n\n  var AllDaySplitter =\n  /** @class */\n  function (_super) {\n    __extends(AllDaySplitter, _super);\n\n    function AllDaySplitter() {\n      return _super !== null && _super.apply(this, arguments) || this;\n    }\n\n    AllDaySplitter.prototype.getKeyInfo = function () {\n      return {\n        allDay: {},\n        timed: {}\n      };\n    };\n\n    AllDaySplitter.prototype.getKeysForDateSpan = function (dateSpan) {\n      if (dateSpan.allDay) {\n        return ['allDay'];\n      } else {\n        return ['timed'];\n      }\n    };\n\n    AllDaySplitter.prototype.getKeysForEventDef = function (eventDef) {\n      if (!eventDef.allDay) {\n        return ['timed'];\n      } else if (core.hasBgRendering(eventDef)) {\n        return ['timed', 'allDay'];\n      } else {\n        return ['allDay'];\n      }\n    };\n\n    return AllDaySplitter;\n  }(core.Splitter);\n\n  var TIMEGRID_ALL_DAY_EVENT_LIMIT = 5;\n  var WEEK_HEADER_FORMAT = core.createFormatter({\n    week: 'short'\n  });\n  /* An abstract class for all timegrid-related views. Displays one more columns with time slots running vertically.\n  ----------------------------------------------------------------------------------------------------------------------*/\n  // Is a manager for the TimeGrid subcomponent and possibly the DayGrid subcomponent (if allDaySlot is on).\n  // Responsible for managing width/height.\n\n  var TimeGridView =\n  /** @class */\n  function (_super) {\n    __extends(TimeGridView, _super);\n\n    function TimeGridView(context, viewSpec, dateProfileGenerator, parentEl) {\n      var _this = _super.call(this, context, viewSpec, dateProfileGenerator, parentEl) || this;\n\n      _this.splitter = new AllDaySplitter();\n      /* Header Render Methods\n      ------------------------------------------------------------------------------------------------------------------*/\n      // Generates the HTML that will go before the day-of week header cells\n\n      _this.renderHeadIntroHtml = function () {\n        var _a = _this,\n            theme = _a.theme,\n            dateEnv = _a.dateEnv;\n        var range = _this.props.dateProfile.renderRange;\n        var dayCnt = core.diffDays(range.start, range.end);\n        var weekText;\n\n        if (_this.opt('weekNumbers')) {\n          weekText = dateEnv.format(range.start, WEEK_HEADER_FORMAT);\n          return '' + '<th class=\"fc-axis fc-week-number ' + theme.getClass('widgetHeader') + '\" ' + _this.axisStyleAttr() + '>' + core.buildGotoAnchorHtml( // aside from link, important for matchCellWidths\n          _this, {\n            date: range.start,\n            type: 'week',\n            forceOff: dayCnt > 1\n          }, core.htmlEscape(weekText) // inner HTML\n          ) + '</th>';\n        } else {\n          return '<th class=\"fc-axis ' + theme.getClass('widgetHeader') + '\" ' + _this.axisStyleAttr() + '></th>';\n        }\n      };\n      /* Time Grid Render Methods\n      ------------------------------------------------------------------------------------------------------------------*/\n      // Generates the HTML that goes before the bg of the TimeGrid slot area. Long vertical column.\n\n\n      _this.renderTimeGridBgIntroHtml = function () {\n        var theme = _this.theme;\n        return '<td class=\"fc-axis ' + theme.getClass('widgetContent') + '\" ' + _this.axisStyleAttr() + '></td>';\n      }; // Generates the HTML that goes before all other types of cells.\n      // Affects content-skeleton, mirror-skeleton, highlight-skeleton for both the time-grid and day-grid.\n\n\n      _this.renderTimeGridIntroHtml = function () {\n        return '<td class=\"fc-axis\" ' + _this.axisStyleAttr() + '></td>';\n      };\n      /* Day Grid Render Methods\n      ------------------------------------------------------------------------------------------------------------------*/\n      // Generates the HTML that goes before the all-day cells\n\n\n      _this.renderDayGridBgIntroHtml = function () {\n        var theme = _this.theme;\n        return '' + '<td class=\"fc-axis ' + theme.getClass('widgetContent') + '\" ' + _this.axisStyleAttr() + '>' + '<span>' + // needed for matchCellWidths\n        core.getAllDayHtml(_this) + '</span>' + '</td>';\n      }; // Generates the HTML that goes before all other types of cells.\n      // Affects content-skeleton, mirror-skeleton, highlight-skeleton for both the time-grid and day-grid.\n\n\n      _this.renderDayGridIntroHtml = function () {\n        return '<td class=\"fc-axis\" ' + _this.axisStyleAttr() + '></td>';\n      };\n\n      _this.el.classList.add('fc-timeGrid-view');\n\n      _this.el.innerHTML = _this.renderSkeletonHtml();\n      _this.scroller = new core.ScrollComponent('hidden', // overflow x\n      'auto' // overflow y\n      );\n      var timeGridWrapEl = _this.scroller.el;\n\n      _this.el.querySelector('.fc-body > tr > td').appendChild(timeGridWrapEl);\n\n      timeGridWrapEl.classList.add('fc-time-grid-container');\n      var timeGridEl = core.createElement('div', {\n        className: 'fc-time-grid'\n      });\n      timeGridWrapEl.appendChild(timeGridEl);\n      _this.timeGrid = new TimeGrid(_this.context, timeGridEl, {\n        renderBgIntroHtml: _this.renderTimeGridBgIntroHtml,\n        renderIntroHtml: _this.renderTimeGridIntroHtml\n      });\n\n      if (_this.opt('allDaySlot')) {\n        // should we display the \"all-day\" area?\n        _this.dayGrid = new daygrid.DayGrid( // the all-day subcomponent of this view\n        _this.context, _this.el.querySelector('.fc-day-grid'), {\n          renderNumberIntroHtml: _this.renderDayGridIntroHtml,\n          renderBgIntroHtml: _this.renderDayGridBgIntroHtml,\n          renderIntroHtml: _this.renderDayGridIntroHtml,\n          colWeekNumbersVisible: false,\n          cellWeekNumbersVisible: false\n        }); // have the day-grid extend it's coordinate area over the <hr> dividing the two grids\n\n        _this.dayGrid.bottomCoordPadding = _this.el.querySelector('.fc-divider').offsetHeight;\n      }\n\n      return _this;\n    }\n\n    TimeGridView.prototype.destroy = function () {\n      _super.prototype.destroy.call(this);\n\n      this.timeGrid.destroy();\n\n      if (this.dayGrid) {\n        this.dayGrid.destroy();\n      }\n\n      this.scroller.destroy();\n    };\n    /* Rendering\n    ------------------------------------------------------------------------------------------------------------------*/\n    // Builds the HTML skeleton for the view.\n    // The day-grid and time-grid components will render inside containers defined by this HTML.\n\n\n    TimeGridView.prototype.renderSkeletonHtml = function () {\n      var theme = this.theme;\n      return '' + '<table class=\"' + theme.getClass('tableGrid') + '\">' + (this.opt('columnHeader') ? '<thead class=\"fc-head\">' + '<tr>' + '<td class=\"fc-head-container ' + theme.getClass('widgetHeader') + '\">&nbsp;</td>' + '</tr>' + '</thead>' : '') + '<tbody class=\"fc-body\">' + '<tr>' + '<td class=\"' + theme.getClass('widgetContent') + '\">' + (this.opt('allDaySlot') ? '<div class=\"fc-day-grid\"></div>' + '<hr class=\"fc-divider ' + theme.getClass('widgetHeader') + '\" />' : '') + '</td>' + '</tr>' + '</tbody>' + '</table>';\n    };\n    /* Now Indicator\n    ------------------------------------------------------------------------------------------------------------------*/\n\n\n    TimeGridView.prototype.getNowIndicatorUnit = function () {\n      return this.timeGrid.getNowIndicatorUnit();\n    }; // subclasses should implement\n    // renderNowIndicator(date: DateMarker) {\n    // }\n\n\n    TimeGridView.prototype.unrenderNowIndicator = function () {\n      this.timeGrid.unrenderNowIndicator();\n    };\n    /* Dimensions\n    ------------------------------------------------------------------------------------------------------------------*/\n\n\n    TimeGridView.prototype.updateSize = function (isResize, viewHeight, isAuto) {\n      _super.prototype.updateSize.call(this, isResize, viewHeight, isAuto); // will call updateBaseSize. important that executes first\n\n\n      this.timeGrid.updateSize(isResize);\n\n      if (this.dayGrid) {\n        this.dayGrid.updateSize(isResize);\n      }\n    }; // Adjusts the vertical dimensions of the view to the specified values\n\n\n    TimeGridView.prototype.updateBaseSize = function (isResize, viewHeight, isAuto) {\n      var _this = this;\n\n      var eventLimit;\n      var scrollerHeight;\n      var scrollbarWidths; // make all axis cells line up\n\n      this.axisWidth = core.matchCellWidths(core.findElements(this.el, '.fc-axis')); // hack to give the view some height prior to timeGrid's columns being rendered\n      // TODO: separate setting height from scroller VS timeGrid.\n\n      if (!this.timeGrid.colEls) {\n        if (!isAuto) {\n          scrollerHeight = this.computeScrollerHeight(viewHeight);\n          this.scroller.setHeight(scrollerHeight);\n        }\n\n        return;\n      } // set of fake row elements that must compensate when scroller has scrollbars\n\n\n      var noScrollRowEls = core.findElements(this.el, '.fc-row').filter(function (node) {\n        return !_this.scroller.el.contains(node);\n      }); // reset all dimensions back to the original state\n\n      this.timeGrid.bottomRuleEl.style.display = 'none'; // will be shown later if this <hr> is necessary\n\n      this.scroller.clear(); // sets height to 'auto' and clears overflow\n\n      noScrollRowEls.forEach(core.uncompensateScroll); // limit number of events in the all-day area\n\n      if (this.dayGrid) {\n        this.dayGrid.removeSegPopover(); // kill the \"more\" popover if displayed\n\n        eventLimit = this.opt('eventLimit');\n\n        if (eventLimit && typeof eventLimit !== 'number') {\n          eventLimit = TIMEGRID_ALL_DAY_EVENT_LIMIT; // make sure \"auto\" goes to a real number\n        }\n\n        if (eventLimit) {\n          this.dayGrid.limitRows(eventLimit);\n        }\n      }\n\n      if (!isAuto) {\n        // should we force dimensions of the scroll container?\n        scrollerHeight = this.computeScrollerHeight(viewHeight);\n        this.scroller.setHeight(scrollerHeight);\n        scrollbarWidths = this.scroller.getScrollbarWidths();\n\n        if (scrollbarWidths.left || scrollbarWidths.right) {\n          // using scrollbars?\n          // make the all-day and header rows lines up\n          noScrollRowEls.forEach(function (rowEl) {\n            core.compensateScroll(rowEl, scrollbarWidths);\n          }); // the scrollbar compensation might have changed text flow, which might affect height, so recalculate\n          // and reapply the desired height to the scroller.\n\n          scrollerHeight = this.computeScrollerHeight(viewHeight);\n          this.scroller.setHeight(scrollerHeight);\n        } // guarantees the same scrollbar widths\n\n\n        this.scroller.lockOverflow(scrollbarWidths); // if there's any space below the slats, show the horizontal rule.\n        // this won't cause any new overflow, because lockOverflow already called.\n\n        if (this.timeGrid.getTotalSlatHeight() < scrollerHeight) {\n          this.timeGrid.bottomRuleEl.style.display = '';\n        }\n      }\n    }; // given a desired total height of the view, returns what the height of the scroller should be\n\n\n    TimeGridView.prototype.computeScrollerHeight = function (viewHeight) {\n      return viewHeight - core.subtractInnerElHeight(this.el, this.scroller.el); // everything that's NOT the scroller\n    };\n    /* Scroll\n    ------------------------------------------------------------------------------------------------------------------*/\n    // Computes the initial pre-configured scroll state prior to allowing the user to change it\n\n\n    TimeGridView.prototype.computeInitialDateScroll = function () {\n      var scrollTime = core.createDuration(this.opt('scrollTime'));\n      var top = this.timeGrid.computeTimeTop(scrollTime.milliseconds); // zoom can give weird floating-point values. rather scroll a little bit further\n\n      top = Math.ceil(top);\n\n      if (top) {\n        top++; // to overcome top border that slots beyond the first have. looks better\n      }\n\n      return {\n        top: top\n      };\n    };\n\n    TimeGridView.prototype.queryDateScroll = function () {\n      return {\n        top: this.scroller.getScrollTop()\n      };\n    };\n\n    TimeGridView.prototype.applyDateScroll = function (scroll) {\n      if (scroll.top !== undefined) {\n        this.scroller.setScrollTop(scroll.top);\n      }\n    }; // Generates an HTML attribute string for setting the width of the axis, if it is known\n\n\n    TimeGridView.prototype.axisStyleAttr = function () {\n      if (this.axisWidth != null) {\n        return 'style=\"width:' + this.axisWidth + 'px\"';\n      }\n\n      return '';\n    };\n\n    return TimeGridView;\n  }(core.View);\n\n  TimeGridView.prototype.usesMinMaxTime = true; // indicates that minTime/maxTime affects rendering\n\n  var SimpleTimeGrid =\n  /** @class */\n  function (_super) {\n    __extends(SimpleTimeGrid, _super);\n\n    function SimpleTimeGrid(context, timeGrid) {\n      var _this = _super.call(this, context, timeGrid.el) || this;\n\n      _this.buildDayRanges = core.memoize(buildDayRanges);\n      _this.slicer = new TimeGridSlicer();\n      _this.timeGrid = timeGrid;\n      context.calendar.registerInteractiveComponent(_this, {\n        el: _this.timeGrid.el\n      });\n      return _this;\n    }\n\n    SimpleTimeGrid.prototype.destroy = function () {\n      _super.prototype.destroy.call(this);\n\n      this.calendar.unregisterInteractiveComponent(this);\n    };\n\n    SimpleTimeGrid.prototype.render = function (props) {\n      var dateProfile = props.dateProfile,\n          dayTable = props.dayTable;\n      var dayRanges = this.dayRanges = this.buildDayRanges(dayTable, dateProfile, this.dateEnv);\n      this.timeGrid.receiveProps(_assign({}, this.slicer.sliceProps(props, dateProfile, null, this.timeGrid, dayRanges), {\n        dateProfile: dateProfile,\n        cells: dayTable.cells[0]\n      }));\n    };\n\n    SimpleTimeGrid.prototype.renderNowIndicator = function (date) {\n      this.timeGrid.renderNowIndicator(this.slicer.sliceNowDate(date, this.timeGrid, this.dayRanges), date);\n    };\n\n    SimpleTimeGrid.prototype.queryHit = function (positionLeft, positionTop) {\n      var rawHit = this.timeGrid.positionToHit(positionLeft, positionTop);\n\n      if (rawHit) {\n        return {\n          component: this.timeGrid,\n          dateSpan: rawHit.dateSpan,\n          dayEl: rawHit.dayEl,\n          rect: {\n            left: rawHit.relativeRect.left,\n            right: rawHit.relativeRect.right,\n            top: rawHit.relativeRect.top,\n            bottom: rawHit.relativeRect.bottom\n          },\n          layer: 0\n        };\n      }\n    };\n\n    return SimpleTimeGrid;\n  }(core.DateComponent);\n\n  function buildDayRanges(dayTable, dateProfile, dateEnv) {\n    var ranges = [];\n\n    for (var _i = 0, _a = dayTable.headerDates; _i < _a.length; _i++) {\n      var date = _a[_i];\n      ranges.push({\n        start: dateEnv.add(date, dateProfile.minTime),\n        end: dateEnv.add(date, dateProfile.maxTime)\n      });\n    }\n\n    return ranges;\n  }\n\n  var TimeGridSlicer =\n  /** @class */\n  function (_super) {\n    __extends(TimeGridSlicer, _super);\n\n    function TimeGridSlicer() {\n      return _super !== null && _super.apply(this, arguments) || this;\n    }\n\n    TimeGridSlicer.prototype.sliceRange = function (range, dayRanges) {\n      var segs = [];\n\n      for (var col = 0; col < dayRanges.length; col++) {\n        var segRange = core.intersectRanges(range, dayRanges[col]);\n\n        if (segRange) {\n          segs.push({\n            start: segRange.start,\n            end: segRange.end,\n            isStart: segRange.start.valueOf() === range.start.valueOf(),\n            isEnd: segRange.end.valueOf() === range.end.valueOf(),\n            col: col\n          });\n        }\n      }\n\n      return segs;\n    };\n\n    return TimeGridSlicer;\n  }(core.Slicer);\n\n  var TimeGridView$1 =\n  /** @class */\n  function (_super) {\n    __extends(TimeGridView, _super);\n\n    function TimeGridView(_context, viewSpec, dateProfileGenerator, parentEl) {\n      var _this = _super.call(this, _context, viewSpec, dateProfileGenerator, parentEl) || this;\n\n      _this.buildDayTable = core.memoize(buildDayTable);\n\n      if (_this.opt('columnHeader')) {\n        _this.header = new core.DayHeader(_this.context, _this.el.querySelector('.fc-head-container'));\n      }\n\n      _this.simpleTimeGrid = new SimpleTimeGrid(_this.context, _this.timeGrid);\n\n      if (_this.dayGrid) {\n        _this.simpleDayGrid = new daygrid.SimpleDayGrid(_this.context, _this.dayGrid);\n      }\n\n      return _this;\n    }\n\n    TimeGridView.prototype.destroy = function () {\n      _super.prototype.destroy.call(this);\n\n      if (this.header) {\n        this.header.destroy();\n      }\n\n      this.simpleTimeGrid.destroy();\n\n      if (this.simpleDayGrid) {\n        this.simpleDayGrid.destroy();\n      }\n    };\n\n    TimeGridView.prototype.render = function (props) {\n      _super.prototype.render.call(this, props); // for flags for updateSize\n\n\n      var dateProfile = this.props.dateProfile;\n      var dayTable = this.buildDayTable(dateProfile, this.dateProfileGenerator);\n      var splitProps = this.splitter.splitProps(props);\n\n      if (this.header) {\n        this.header.receiveProps({\n          dateProfile: dateProfile,\n          dates: dayTable.headerDates,\n          datesRepDistinctDays: true,\n          renderIntroHtml: this.renderHeadIntroHtml\n        });\n      }\n\n      this.simpleTimeGrid.receiveProps(_assign({}, splitProps['timed'], {\n        dateProfile: dateProfile,\n        dayTable: dayTable\n      }));\n\n      if (this.simpleDayGrid) {\n        this.simpleDayGrid.receiveProps(_assign({}, splitProps['allDay'], {\n          dateProfile: dateProfile,\n          dayTable: dayTable,\n          nextDayThreshold: this.nextDayThreshold,\n          isRigid: false\n        }));\n      }\n    };\n\n    TimeGridView.prototype.renderNowIndicator = function (date) {\n      this.simpleTimeGrid.renderNowIndicator(date);\n    };\n\n    return TimeGridView;\n  }(TimeGridView);\n\n  function buildDayTable(dateProfile, dateProfileGenerator) {\n    var daySeries = new core.DaySeries(dateProfile.renderRange, dateProfileGenerator);\n    return new core.DayTable(daySeries, false);\n  }\n\n  var main = core.createPlugin({\n    defaultView: 'timeGridWeek',\n    views: {\n      timeGrid: {\n        class: TimeGridView$1,\n        allDaySlot: true,\n        slotDuration: '00:30:00',\n        slotEventOverlap: true // a bad name. confused with overlap/constraint system\n\n      },\n      timeGridDay: {\n        type: 'timeGrid',\n        duration: {\n          days: 1\n        }\n      },\n      timeGridWeek: {\n        type: 'timeGrid',\n        duration: {\n          weeks: 1\n        }\n      }\n    }\n  });\n  exports.TimeGridView = TimeGridView$1;\n  exports.AbstractTimeGridView = TimeGridView;\n  exports.buildDayTable = buildDayTable;\n  exports.buildDayRanges = buildDayRanges;\n  exports.TimeGridSlicer = TimeGridSlicer;\n  exports.default = main;\n  exports.TimeGrid = TimeGrid;\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n});","map":{"version":3,"sources":["C:/Users/zura.ph/WebstormProjects/slotmaster-dashboard/node_modules/@fullcalendar/timegrid/main.js"],"names":["global","factory","exports","module","require","define","amd","self","FullCalendarTimeGrid","FullCalendar","FullCalendarDayGrid","core","daygrid","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","constructor","prototype","create","__assign","assign","t","s","i","n","arguments","length","call","apply","TimeGridEventRenderer","_super","timeGrid","_this","context","fullTimeFormat","createFormatter","hour","minute","separator","options","defaultRangeSeparator","attachSegs","segs","mirrorInfo","segsByCol","groupSegsByCol","col","sortEventSegs","attachSegsByCol","fgContainerEls","detachSegs","forEach","seg","removeElement","el","computeSegSizes","allSegs","_a","colCnt","computeSegVerticals","computeSegHorizontals","assignSegSizes","assignSegVerticals","assignSegCss","computeEventTimeFormat","meridiem","computeDisplayEventEnd","renderSegHtml","eventRange","eventDef","def","eventUi","ui","allDay","isDraggable","startEditable","isResizableFromStart","isStart","durationEditable","eventResizableFromStart","isResizableFromEnd","isEnd","classes","getSegClasses","skinCss","cssToStr","getSkinCss","timeText","fullTimeText","startTimeText","unshift","isMultiDayRange","range","unzonedStart","start","unzonedEnd","end","_getTimeText","getTimeText","join","url","htmlEscape","title","levels","level0","buildSlotSegLevels","computeForwardSlotSegs","computeSlotSegPressures","computeSegForwardBack","seriesBackwardPressure","seriesBackwardCoord","forwardSegs","forwardCoord","undefined","sortForwardSegs","backwardCoord","objs","map","buildTimeGridSegCompareObj","specs","field","order","concat","view","eventOrderSpecs","sort","obj0","obj1","compareByFieldSpecs","c","_seg","_i","segs_1","applyStyle","generateSegCss","level","classList","add","bottom","top","shouldOverlap","slotEventOverlap","props","generateSegVerticalCss","isRtl","left","right","Math","min","zIndex","forwardPressure","FgEventRenderer","j","computeSlotSegCollisions","push","k","forwardSeg","max","otherSegs","results","isSlotSegCollision","seg1","seg2","obj","buildSegCompareObj","TimeGridMirrorRenderer","mirrorContainerEls","sourceSeg","sourceSegProps","marginLeft","marginRight","TimeGridFillRenderer","type","containerEls","bgContainerEls","businessContainerEls","highlightContainerEls","FillRenderer","AGENDA_STOCK_SUB_DURATIONS","hours","minutes","seconds","TimeGrid","renderProps","isSlatSizesDirty","isColSizesDirty","renderSlats","memoizeRendering","_renderSlats","eventRenderer","fillRenderer","mirrorRenderer","renderColumns","_renderColumns","_unrenderColumns","renderBusinessHours","renderSegs","bind","unrender","renderDateSelection","_renderDateSelection","_unrenderDateSelection","renderFgEvents","renderBgEvents","renderEventSelection","selectByInstanceId","unselectByInstanceId","renderEventDrag","_renderEventDrag","_unrenderEventDrag","renderEventResize","_renderEventResize","_unrenderEventResize","processOptions","innerHTML","theme","getClass","rootBgContainerEl","querySelector","slatContainerEl","bottomRuleEl","slotDuration","opt","snapDuration","snapsPerSlot","input","createDuration","wholeDivideDurations","isArray","labelFormat","omitZeroMinute","labelInterval","computeLabelInterval","slotsPerLabel","render","cells","dateProfile","businessHourSegs","dateSelectionSegs","fgEventSegs","bgEventSegs","eventSelection","eventDrag","eventResize","destroy","updateSize","isResize","buildSlatPositions","buildColPositions","computeSizes","assignSizes","renderSlatRowHtml","slatEls","findElements","slatPositions","PositionCache","dateEnv","html","dayStart","startOfDay","renderRange","slotTime","minTime","slotIterator","slotDate","isLabeled","axisHtml","asRoughMs","maxTime","format","formatIsoTimeString","addDurations","bgRow","DayBgRow","renderHtml","renderIntroHtml","renderBgIntroHtml","colEls","reverse","colPositions","renderContentSkeleton","unrenderContentSkeleton","parts","skeletonEl","contentSkeletonEl","htmlToElement","colContainerEls","appendChild","getNowIndicatorUnit","renderNowIndicator","date","computeDateTop","nodes","lineEl","createElement","className","style","arrowEl","nowIndicatorEls","unrenderNowIndicator","getTotalSlatHeight","offsetHeight","when","startOfDayDate","computeTimeTop","valueOf","timeMs","len","slatCoverage","slatIndex","slatRemainder","floor","tops","getHeight","eventMinHeight","dayDate","build","positionToHit","positionLeft","positionTop","colIndex","leftToIndex","topToIndex","slatTop","slatHeight","partial","localSnapIndex","snapIndex","time","multiplyDuration","dateSpan","dayEl","relativeRect","lefts","rights","state","hideByHash","affectedInstances","isEvent","isDragging","showByHash","isResizing","isSelecting","DateComponent","AllDaySplitter","getKeyInfo","timed","getKeysForDateSpan","getKeysForEventDef","hasBgRendering","Splitter","TIMEGRID_ALL_DAY_EVENT_LIMIT","WEEK_HEADER_FORMAT","week","TimeGridView","viewSpec","dateProfileGenerator","parentEl","splitter","renderHeadIntroHtml","dayCnt","diffDays","weekText","axisStyleAttr","buildGotoAnchorHtml","forceOff","renderTimeGridBgIntroHtml","renderTimeGridIntroHtml","renderDayGridBgIntroHtml","getAllDayHtml","renderDayGridIntroHtml","renderSkeletonHtml","scroller","ScrollComponent","timeGridWrapEl","timeGridEl","dayGrid","DayGrid","renderNumberIntroHtml","colWeekNumbersVisible","cellWeekNumbersVisible","bottomCoordPadding","viewHeight","isAuto","updateBaseSize","eventLimit","scrollerHeight","scrollbarWidths","axisWidth","matchCellWidths","computeScrollerHeight","setHeight","noScrollRowEls","filter","node","contains","display","clear","uncompensateScroll","removeSegPopover","limitRows","getScrollbarWidths","rowEl","compensateScroll","lockOverflow","subtractInnerElHeight","computeInitialDateScroll","scrollTime","milliseconds","ceil","queryDateScroll","getScrollTop","applyDateScroll","scroll","setScrollTop","View","usesMinMaxTime","SimpleTimeGrid","buildDayRanges","memoize","slicer","TimeGridSlicer","calendar","registerInteractiveComponent","unregisterInteractiveComponent","dayTable","dayRanges","receiveProps","sliceProps","sliceNowDate","queryHit","rawHit","component","rect","layer","ranges","headerDates","sliceRange","segRange","intersectRanges","Slicer","TimeGridView$1","_context","buildDayTable","header","DayHeader","simpleTimeGrid","simpleDayGrid","SimpleDayGrid","splitProps","dates","datesRepDistinctDays","nextDayThreshold","isRigid","daySeries","DaySeries","DayTable","main","createPlugin","defaultView","views","class","allDaySlot","timeGridDay","duration","days","timeGridWeek","weeks","AbstractTimeGridView","default","defineProperty","value"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACC,WAAUA,MAAV,EAAkBC,OAAlB,EAA2B;AACxB,SAAOC,OAAP,KAAmB,QAAnB,IAA+B,OAAOC,MAAP,KAAkB,WAAjD,GAA+DF,OAAO,CAACC,OAAD,EAAUE,OAAO,CAAC,oBAAD,CAAjB,EAAyCA,OAAO,CAAC,uBAAD,CAAhD,CAAtE,GACA,OAAOC,MAAP,KAAkB,UAAlB,IAAgCA,MAAM,CAACC,GAAvC,GAA6CD,MAAM,CAAC,CAAC,SAAD,EAAY,oBAAZ,EAAkC,uBAAlC,CAAD,EAA6DJ,OAA7D,CAAnD,IACCD,MAAM,GAAGA,MAAM,IAAIO,IAAnB,EAAyBN,OAAO,CAACD,MAAM,CAACQ,oBAAP,GAA8B,EAA/B,EAAmCR,MAAM,CAACS,YAA1C,EAAwDT,MAAM,CAACU,mBAA/D,CADjC,CADA;AAGH,CAJA,EAIC,IAJD,EAIO,UAAUR,OAAV,EAAmBS,IAAnB,EAAyBC,OAAzB,EAAkC;AAAE;AAExC;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGI;;AAEA,MAAIC,cAAa,GAAG,uBAASC,CAAT,EAAYC,CAAZ,EAAe;AAC/BF,IAAAA,cAAa,GAAGG,MAAM,CAACC,cAAP,IACX;AAAEC,MAAAA,SAAS,EAAE;AAAb,iBAA6BC,KAA7B,IAAsC,UAAUL,CAAV,EAAaC,CAAb,EAAgB;AAAED,MAAAA,CAAC,CAACI,SAAF,GAAcH,CAAd;AAAkB,KAD/D,IAEZ,UAAUD,CAAV,EAAaC,CAAb,EAAgB;AAAE,WAAK,IAAIK,CAAT,IAAcL,CAAd;AAAiB,YAAIA,CAAC,CAACM,cAAF,CAAiBD,CAAjB,CAAJ,EAAyBN,CAAC,CAACM,CAAD,CAAD,GAAOL,CAAC,CAACK,CAAD,CAAR;AAA1C;AAAwD,KAF9E;;AAGA,WAAOP,cAAa,CAACC,CAAD,EAAIC,CAAJ,CAApB;AACH,GALD;;AAOA,WAASO,SAAT,CAAmBR,CAAnB,EAAsBC,CAAtB,EAAyB;AACrBF,IAAAA,cAAa,CAACC,CAAD,EAAIC,CAAJ,CAAb;;AACA,aAASQ,EAAT,GAAc;AAAE,WAAKC,WAAL,GAAmBV,CAAnB;AAAuB;;AACvCA,IAAAA,CAAC,CAACW,SAAF,GAAcV,CAAC,KAAK,IAAN,GAAaC,MAAM,CAACU,MAAP,CAAcX,CAAd,CAAb,IAAiCQ,EAAE,CAACE,SAAH,GAAeV,CAAC,CAACU,SAAjB,EAA4B,IAAIF,EAAJ,EAA7D,CAAd;AACH;;AAED,MAAII,OAAQ,GAAG,oBAAW;AACtBA,IAAAA,OAAQ,GAAGX,MAAM,CAACY,MAAP,IAAiB,SAASD,QAAT,CAAkBE,CAAlB,EAAqB;AAC7C,WAAK,IAAIC,CAAJ,EAAOC,CAAC,GAAG,CAAX,EAAcC,CAAC,GAAGC,SAAS,CAACC,MAAjC,EAAyCH,CAAC,GAAGC,CAA7C,EAAgDD,CAAC,EAAjD,EAAqD;AACjDD,QAAAA,CAAC,GAAGG,SAAS,CAACF,CAAD,CAAb;;AACA,aAAK,IAAIX,CAAT,IAAcU,CAAd;AAAiB,cAAId,MAAM,CAACS,SAAP,CAAiBJ,cAAjB,CAAgCc,IAAhC,CAAqCL,CAArC,EAAwCV,CAAxC,CAAJ,EAAgDS,CAAC,CAACT,CAAD,CAAD,GAAOU,CAAC,CAACV,CAAD,CAAR;AAAjE;AACH;;AACD,aAAOS,CAAP;AACH,KAND;;AAOA,WAAOF,OAAQ,CAACS,KAAT,CAAe,IAAf,EAAqBH,SAArB,CAAP;AACH,GATD;AAWA;AACJ;AACA;AACA;;;AACI,MAAII,qBAAqB;AAAG;AAAe,YAAUC,MAAV,EAAkB;AACzDhB,IAAAA,SAAS,CAACe,qBAAD,EAAwBC,MAAxB,CAAT;;AACA,aAASD,qBAAT,CAA+BE,QAA/B,EAAyC;AACrC,UAAIC,KAAK,GAAGF,MAAM,CAACH,IAAP,CAAY,IAAZ,EAAkBI,QAAQ,CAACE,OAA3B,KAAuC,IAAnD;;AACAD,MAAAA,KAAK,CAACD,QAAN,GAAiBA,QAAjB;AACAC,MAAAA,KAAK,CAACE,cAAN,GAAuB/B,IAAI,CAACgC,eAAL,CAAqB;AACxCC,QAAAA,IAAI,EAAE,SADkC;AAExCC,QAAAA,MAAM,EAAE,SAFgC;AAGxCC,QAAAA,SAAS,EAAEN,KAAK,CAACC,OAAN,CAAcM,OAAd,CAAsBC;AAHO,OAArB,CAAvB;AAKA,aAAOR,KAAP;AACH,KAXwD,CAYzD;AACA;;;AACAH,IAAAA,qBAAqB,CAACZ,SAAtB,CAAgCwB,UAAhC,GAA6C,UAAUC,IAAV,EAAgBC,UAAhB,EAA4B;AACrE,UAAIC,SAAS,GAAG,KAAKb,QAAL,CAAcc,cAAd,CAA6BH,IAA7B,CAAhB,CADqE,CAErE;AACA;;AACA,WAAK,IAAII,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAGF,SAAS,CAAClB,MAAlC,EAA0CoB,GAAG,EAA7C,EAAiD;AAC7CF,QAAAA,SAAS,CAACE,GAAD,CAAT,GAAiB,KAAKC,aAAL,CAAmBH,SAAS,CAACE,GAAD,CAA5B,CAAjB;AACH;;AACD,WAAKF,SAAL,GAAiBA,SAAjB;AACA,WAAKb,QAAL,CAAciB,eAAd,CAA8BJ,SAA9B,EAAyC,KAAKb,QAAL,CAAckB,cAAvD;AACH,KATD;;AAUApB,IAAAA,qBAAqB,CAACZ,SAAtB,CAAgCiC,UAAhC,GAA6C,UAAUR,IAAV,EAAgB;AACzDA,MAAAA,IAAI,CAACS,OAAL,CAAa,UAAUC,GAAV,EAAe;AACxBjD,QAAAA,IAAI,CAACkD,aAAL,CAAmBD,GAAG,CAACE,EAAvB;AACH,OAFD;AAGA,WAAKV,SAAL,GAAiB,IAAjB;AACH,KALD;;AAMAf,IAAAA,qBAAqB,CAACZ,SAAtB,CAAgCsC,eAAhC,GAAkD,UAAUC,OAAV,EAAmB;AACjE,UAAIC,EAAE,GAAG,IAAT;AAAA,UAAe1B,QAAQ,GAAG0B,EAAE,CAAC1B,QAA7B;AAAA,UAAuCa,SAAS,GAAGa,EAAE,CAACb,SAAtD;;AACA,UAAIc,MAAM,GAAG3B,QAAQ,CAAC2B,MAAtB;AACA3B,MAAAA,QAAQ,CAAC4B,mBAAT,CAA6BH,OAA7B,EAHiE,CAG1B;;AACvC,UAAIZ,SAAJ,EAAe;AACX,aAAK,IAAIE,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAGY,MAAxB,EAAgCZ,GAAG,EAAnC,EAAuC;AACnC,eAAKc,qBAAL,CAA2BhB,SAAS,CAACE,GAAD,CAApC,EADmC,CACS;AAC/C;AACJ;AACJ,KATD;;AAUAjB,IAAAA,qBAAqB,CAACZ,SAAtB,CAAgC4C,cAAhC,GAAiD,UAAUL,OAAV,EAAmB;AAChE,UAAIC,EAAE,GAAG,IAAT;AAAA,UAAe1B,QAAQ,GAAG0B,EAAE,CAAC1B,QAA7B;AAAA,UAAuCa,SAAS,GAAGa,EAAE,CAACb,SAAtD;;AACA,UAAIc,MAAM,GAAG3B,QAAQ,CAAC2B,MAAtB;AACA3B,MAAAA,QAAQ,CAAC+B,kBAAT,CAA4BN,OAA5B,EAHgE,CAG1B;;AACtC,UAAIZ,SAAJ,EAAe;AACX,aAAK,IAAIE,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAGY,MAAxB,EAAgCZ,GAAG,EAAnC,EAAuC;AACnC,eAAKiB,YAAL,CAAkBnB,SAAS,CAACE,GAAD,CAA3B;AACH;AACJ;AACJ,KATD,CAxCyD,CAkDzD;;;AACAjB,IAAAA,qBAAqB,CAACZ,SAAtB,CAAgC+C,sBAAhC,GAAyD,YAAY;AACjE,aAAO;AACH5B,QAAAA,IAAI,EAAE,SADH;AAEHC,QAAAA,MAAM,EAAE,SAFL;AAGH4B,QAAAA,QAAQ,EAAE;AAHP,OAAP;AAKH,KAND,CAnDyD,CA0DzD;;;AACApC,IAAAA,qBAAqB,CAACZ,SAAtB,CAAgCiD,sBAAhC,GAAyD,YAAY;AACjE,aAAO,IAAP;AACH,KAFD,CA3DyD,CA8DzD;;;AACArC,IAAAA,qBAAqB,CAACZ,SAAtB,CAAgCkD,aAAhC,GAAgD,UAAUf,GAAV,EAAeT,UAAf,EAA2B;AACvE,UAAIyB,UAAU,GAAGhB,GAAG,CAACgB,UAArB;AACA,UAAIC,QAAQ,GAAGD,UAAU,CAACE,GAA1B;AACA,UAAIC,OAAO,GAAGH,UAAU,CAACI,EAAzB;AACA,UAAIC,MAAM,GAAGJ,QAAQ,CAACI,MAAtB;AACA,UAAIC,WAAW,GAAGH,OAAO,CAACI,aAA1B;AACA,UAAIC,oBAAoB,GAAGxB,GAAG,CAACyB,OAAJ,IAAeN,OAAO,CAACO,gBAAvB,IAA2C,KAAK7C,OAAL,CAAaM,OAAb,CAAqBwC,uBAA3F;AACA,UAAIC,kBAAkB,GAAG5B,GAAG,CAAC6B,KAAJ,IAAaV,OAAO,CAACO,gBAA9C;AACA,UAAII,OAAO,GAAG,KAAKC,aAAL,CAAmB/B,GAAnB,EAAwBsB,WAAxB,EAAqCE,oBAAoB,IAAII,kBAA7D,EAAiFrC,UAAjF,CAAd;AACA,UAAIyC,OAAO,GAAGjF,IAAI,CAACkF,QAAL,CAAc,KAAKC,UAAL,CAAgBf,OAAhB,CAAd,CAAd;AACA,UAAIgB,QAAJ;AACA,UAAIC,YAAJ,CAXuE,CAWrD;;AAClB,UAAIC,aAAJ,CAZuE,CAYpD;;AACnBP,MAAAA,OAAO,CAACQ,OAAR,CAAgB,oBAAhB,EAbuE,CAcvE;;AACA,UAAIvF,IAAI,CAACwF,eAAL,CAAqBvB,UAAU,CAACwB,KAAhC,CAAJ,EAA4C;AACxC;AACA;AACA;AACA,YAAIxC,GAAG,CAACyB,OAAJ,IAAezB,GAAG,CAAC6B,KAAvB,EAA8B;AAC1B,cAAIY,YAAY,GAAGzC,GAAG,CAAC0C,KAAvB;AACA,cAAIC,UAAU,GAAG3C,GAAG,CAAC4C,GAArB;AACAT,UAAAA,QAAQ,GAAG,KAAKU,YAAL,CAAkBJ,YAAlB,EAAgCE,UAAhC,EAA4CtB,MAA5C,CAAX,CAH0B,CAGsC;;AAChEe,UAAAA,YAAY,GAAG,KAAKS,YAAL,CAAkBJ,YAAlB,EAAgCE,UAAhC,EAA4CtB,MAA5C,EAAoD,KAAKvC,cAAzD,CAAf;AACAuD,UAAAA,aAAa,GAAG,KAAKQ,YAAL,CAAkBJ,YAAlB,EAAgCE,UAAhC,EAA4CtB,MAA5C,EAAoD,IAApD,EAA0D,KAA1D,CAAhB,CAL0B,CAKwD;AACrF;AACJ,OAXD,MAYK;AACD;AACAc,QAAAA,QAAQ,GAAG,KAAKW,WAAL,CAAiB9B,UAAjB,CAAX;AACAoB,QAAAA,YAAY,GAAG,KAAKU,WAAL,CAAiB9B,UAAjB,EAA6B,KAAKlC,cAAlC,CAAf;AACAuD,QAAAA,aAAa,GAAG,KAAKS,WAAL,CAAiB9B,UAAjB,EAA6B,IAA7B,EAAmC,KAAnC,CAAhB,CAJC,CAI0D;AAC9D;;AACD,aAAO,eAAec,OAAO,CAACiB,IAAR,CAAa,GAAb,CAAf,GAAmC,GAAnC,IACF9B,QAAQ,CAAC+B,GAAT,GACG,YAAYjG,IAAI,CAACkG,UAAL,CAAgBhC,QAAQ,CAAC+B,GAAzB,CAAZ,GAA4C,GAD/C,GAEG,EAHD,KAIFhB,OAAO,GACJ,aAAaA,OAAb,GAAuB,GADnB,GAEJ,EAND,IAOH,GAPG,GAQH,0BARG,IASFG,QAAQ,GACL,yBACI,eADJ,GACsBpF,IAAI,CAACkG,UAAL,CAAgBZ,aAAhB,CADtB,GACuD,GADvD,GAEI,cAFJ,GAEqBtF,IAAI,CAACkG,UAAL,CAAgBb,YAAhB,CAFrB,GAEqD,GAFrD,GAGI,GAHJ,GAII,QAJJ,GAIerF,IAAI,CAACkG,UAAL,CAAgBd,QAAhB,CAJf,GAI2C,SAJ3C,GAKI,QANC,GAOL,EAhBD,KAiBFlB,QAAQ,CAACiC,KAAT,GACG,2BACInG,IAAI,CAACkG,UAAL,CAAgBhC,QAAQ,CAACiC,KAAzB,CADJ,GAEI,QAHP,GAIG,EArBD,IAsBH,QAtBG;AAuBH;AAChB;AACA;AACA;AACA;AACA;AACiBtB,MAAAA,kBAAkB,GACf,+CADe,GAEf,EA/BD,IAgCH,MAhCJ;AAiCH,KAlED,CA/DyD,CAkIzD;AACA;AACA;;;AACAnD,IAAAA,qBAAqB,CAACZ,SAAtB,CAAgC2C,qBAAhC,GAAwD,UAAUlB,IAAV,EAAgB;AACpE,UAAI6D,MAAJ;AACA,UAAIC,MAAJ;AACA,UAAIjF,CAAJ;AACAgF,MAAAA,MAAM,GAAGE,kBAAkB,CAAC/D,IAAD,CAA3B;AACAgE,MAAAA,sBAAsB,CAACH,MAAD,CAAtB;;AACA,UAAKC,MAAM,GAAGD,MAAM,CAAC,CAAD,CAApB,EAA0B;AACtB,aAAKhF,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGiF,MAAM,CAAC9E,MAAvB,EAA+BH,CAAC,EAAhC,EAAoC;AAChCoF,UAAAA,uBAAuB,CAACH,MAAM,CAACjF,CAAD,CAAP,CAAvB;AACH;;AACD,aAAKA,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGiF,MAAM,CAAC9E,MAAvB,EAA+BH,CAAC,EAAhC,EAAoC;AAChC,eAAKqF,qBAAL,CAA2BJ,MAAM,CAACjF,CAAD,CAAjC,EAAsC,CAAtC,EAAyC,CAAzC;AACH;AACJ;AACJ,KAdD,CArIyD,CAoJzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAM,IAAAA,qBAAqB,CAACZ,SAAtB,CAAgC2F,qBAAhC,GAAwD,UAAUxD,GAAV,EAAeyD,sBAAf,EAAuCC,mBAAvC,EAA4D;AAChH,UAAIC,WAAW,GAAG3D,GAAG,CAAC2D,WAAtB;AACA,UAAIxF,CAAJ;;AACA,UAAI6B,GAAG,CAAC4D,YAAJ,KAAqBC,SAAzB,EAAoC;AAAE;AAClC,YAAI,CAACF,WAAW,CAACrF,MAAjB,EAAyB;AACrB;AACA0B,UAAAA,GAAG,CAAC4D,YAAJ,GAAmB,CAAnB;AACH,SAHD,MAIK;AACD;AACA,eAAKE,eAAL,CAAqBH,WAArB,EAFC,CAGD;AACA;;AACA,eAAKH,qBAAL,CAA2BG,WAAW,CAAC,CAAD,CAAtC,EAA2CF,sBAAsB,GAAG,CAApE,EAAuEC,mBAAvE;AACA1D,UAAAA,GAAG,CAAC4D,YAAJ,GAAmBD,WAAW,CAAC,CAAD,CAAX,CAAeI,aAAlC;AACH,SAZ+B,CAahC;;;AACA/D,QAAAA,GAAG,CAAC+D,aAAJ,GAAoB/D,GAAG,CAAC4D,YAAJ,GAChB,CAAC5D,GAAG,CAAC4D,YAAJ,GAAmBF,mBAApB,MAA2C;AACtCD,QAAAA,sBAAsB,GAAG,CAD9B,CADJ,CAdgC,CAgBM;AACtC;AACA;;AACA,aAAKtF,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGwF,WAAW,CAACrF,MAA5B,EAAoCH,CAAC,EAArC,EAAyC;AACrC,eAAKqF,qBAAL,CAA2BG,WAAW,CAACxF,CAAD,CAAtC,EAA2C,CAA3C,EAA8C6B,GAAG,CAAC4D,YAAlD;AACH;AACJ;AACJ,KA1BD;;AA2BAnF,IAAAA,qBAAqB,CAACZ,SAAtB,CAAgCiG,eAAhC,GAAkD,UAAUH,WAAV,EAAuB;AACrE,UAAIK,IAAI,GAAGL,WAAW,CAACM,GAAZ,CAAgBC,0BAAhB,CAAX;AACA,UAAIC,KAAK,GAAG,CACR;AACA;AAAEC,QAAAA,KAAK,EAAE,iBAAT;AAA4BC,QAAAA,KAAK,EAAE,CAAC;AAApC,OAFQ,EAGR;AACA;AAAED,QAAAA,KAAK,EAAE,eAAT;AAA0BC,QAAAA,KAAK,EAAE;AAAjC,OAJQ,EAKVC,MALU,CAKH,KAAKzF,OAAL,CAAa0F,IAAb,CAAkBC,eALf,CAAZ;AAMAR,MAAAA,IAAI,CAACS,IAAL,CAAU,UAAUC,IAAV,EAAgBC,IAAhB,EAAsB;AAC5B,eAAO5H,IAAI,CAAC6H,mBAAL,CAAyBF,IAAzB,EAA+BC,IAA/B,EAAqCR,KAArC,CAAP;AACH,OAFD;AAGA,aAAOH,IAAI,CAACC,GAAL,CAAS,UAAUY,CAAV,EAAa;AACzB,eAAOA,CAAC,CAACC,IAAT;AACH,OAFM,CAAP;AAGH,KAdD,CAvLyD,CAsMzD;AACA;;;AACArG,IAAAA,qBAAqB,CAACZ,SAAtB,CAAgC8C,YAAhC,GAA+C,UAAUrB,IAAV,EAAgB;AAC3D,WAAK,IAAIyF,EAAE,GAAG,CAAT,EAAYC,MAAM,GAAG1F,IAA1B,EAAgCyF,EAAE,GAAGC,MAAM,CAAC1G,MAA5C,EAAoDyG,EAAE,EAAtD,EAA0D;AACtD,YAAI/E,GAAG,GAAGgF,MAAM,CAACD,EAAD,CAAhB;AACAhI,QAAAA,IAAI,CAACkI,UAAL,CAAgBjF,GAAG,CAACE,EAApB,EAAwB,KAAKgF,cAAL,CAAoBlF,GAApB,CAAxB;;AACA,YAAIA,GAAG,CAACmF,KAAJ,GAAY,CAAhB,EAAmB;AACfnF,UAAAA,GAAG,CAACE,EAAJ,CAAOkF,SAAP,CAAiBC,GAAjB,CAAqB,0BAArB;AACH,SALqD,CAMtD;AACA;;;AACA,YAAIrF,GAAG,CAACgB,UAAJ,CAAeE,GAAf,CAAmBgC,KAAnB,IAA4BlD,GAAG,CAACsF,MAAJ,GAAatF,GAAG,CAACuF,GAAjB,GAAuB,EAAvD,EAA2D;AACvDvF,UAAAA,GAAG,CAACE,EAAJ,CAAOkF,SAAP,CAAiBC,GAAjB,CAAqB,UAArB,EADuD,CACrB;AACrC;AACJ;AACJ,KAbD,CAxMyD,CAsNzD;AACA;;;AACA5G,IAAAA,qBAAqB,CAACZ,SAAtB,CAAgCqH,cAAhC,GAAiD,UAAUlF,GAAV,EAAe;AAC5D,UAAIwF,aAAa,GAAG,KAAK3G,OAAL,CAAaM,OAAb,CAAqBsG,gBAAzC;AACA,UAAI1B,aAAa,GAAG/D,GAAG,CAAC+D,aAAxB,CAF4D,CAErB;;AACvC,UAAIH,YAAY,GAAG5D,GAAG,CAAC4D,YAAvB,CAH4D,CAGvB;;AACrC,UAAI8B,KAAK,GAAG,KAAK/G,QAAL,CAAcgH,sBAAd,CAAqC3F,GAArC,CAAZ,CAJ4D,CAIL;;AACvD,UAAI4F,KAAK,GAAG,KAAKjH,QAAL,CAAciH,KAA1B;AACA,UAAIC,IAAJ,CAN4D,CAMlD;;AACV,UAAIC,KAAJ,CAP4D,CAOjD;;AACX,UAAIN,aAAJ,EAAmB;AACf;AACA5B,QAAAA,YAAY,GAAGmC,IAAI,CAACC,GAAL,CAAS,CAAT,EAAYjC,aAAa,GAAG,CAACH,YAAY,GAAGG,aAAhB,IAAiC,CAA7D,CAAf;AACH;;AACD,UAAI6B,KAAJ,EAAW;AACPC,QAAAA,IAAI,GAAG,IAAIjC,YAAX;AACAkC,QAAAA,KAAK,GAAG/B,aAAR;AACH,OAHD,MAIK;AACD8B,QAAAA,IAAI,GAAG9B,aAAP;AACA+B,QAAAA,KAAK,GAAG,IAAIlC,YAAZ;AACH;;AACD8B,MAAAA,KAAK,CAACO,MAAN,GAAejG,GAAG,CAACmF,KAAJ,GAAY,CAA3B,CApB4D,CAoB9B;;AAC9BO,MAAAA,KAAK,CAACG,IAAN,GAAaA,IAAI,GAAG,GAAP,GAAa,GAA1B;AACAH,MAAAA,KAAK,CAACI,KAAN,GAAcA,KAAK,GAAG,GAAR,GAAc,GAA5B;;AACA,UAAIN,aAAa,IAAIxF,GAAG,CAACkG,eAAzB,EAA0C;AACtC;AACAR,QAAAA,KAAK,CAACE,KAAK,GAAG,YAAH,GAAkB,aAAxB,CAAL,GAA8C,KAAK,CAAnD,CAFsC,CAEgB;AACzD;;AACD,aAAOF,KAAP;AACH,KA5BD;;AA6BA,WAAOjH,qBAAP;AACH,GAtP0C,CAsPzC1B,IAAI,CAACoJ,eAtPoC,CAA3C,CA9CsC,CAqStC;AACA;;;AACA,WAAS9C,kBAAT,CAA4B/D,IAA5B,EAAkC;AAC9B,QAAI6D,MAAM,GAAG,EAAb;AACA,QAAIhF,CAAJ;AACA,QAAI6B,GAAJ;AACA,QAAIoG,CAAJ;;AACA,SAAKjI,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGmB,IAAI,CAAChB,MAArB,EAA6BH,CAAC,EAA9B,EAAkC;AAC9B6B,MAAAA,GAAG,GAAGV,IAAI,CAACnB,CAAD,CAAV,CAD8B,CAE9B;;AACA,WAAKiI,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGjD,MAAM,CAAC7E,MAAvB,EAA+B8H,CAAC,EAAhC,EAAoC;AAChC,YAAI,CAACC,wBAAwB,CAACrG,GAAD,EAAMmD,MAAM,CAACiD,CAAD,CAAZ,CAAxB,CAAyC9H,MAA9C,EAAsD;AAClD;AACH;AACJ;;AACD0B,MAAAA,GAAG,CAACmF,KAAJ,GAAYiB,CAAZ;AACA,OAACjD,MAAM,CAACiD,CAAD,CAAN,KAAcjD,MAAM,CAACiD,CAAD,CAAN,GAAY,EAA1B,CAAD,EAAgCE,IAAhC,CAAqCtG,GAArC;AACH;;AACD,WAAOmD,MAAP;AACH,GAxTqC,CAyTtC;AACA;;;AACA,WAASG,sBAAT,CAAgCH,MAAhC,EAAwC;AACpC,QAAIhF,CAAJ;AACA,QAAIgH,KAAJ;AACA,QAAIiB,CAAJ;AACA,QAAIpG,GAAJ;AACA,QAAIuG,CAAJ;;AACA,SAAKpI,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGgF,MAAM,CAAC7E,MAAvB,EAA+BH,CAAC,EAAhC,EAAoC;AAChCgH,MAAAA,KAAK,GAAGhC,MAAM,CAAChF,CAAD,CAAd;;AACA,WAAKiI,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGjB,KAAK,CAAC7G,MAAtB,EAA8B8H,CAAC,EAA/B,EAAmC;AAC/BpG,QAAAA,GAAG,GAAGmF,KAAK,CAACiB,CAAD,CAAX;AACApG,QAAAA,GAAG,CAAC2D,WAAJ,GAAkB,EAAlB;;AACA,aAAK4C,CAAC,GAAGpI,CAAC,GAAG,CAAb,EAAgBoI,CAAC,GAAGpD,MAAM,CAAC7E,MAA3B,EAAmCiI,CAAC,EAApC,EAAwC;AACpCF,UAAAA,wBAAwB,CAACrG,GAAD,EAAMmD,MAAM,CAACoD,CAAD,CAAZ,EAAiBvG,GAAG,CAAC2D,WAArB,CAAxB;AACH;AACJ;AACJ;AACJ,GA3UqC,CA4UtC;AACA;;;AACA,WAASJ,uBAAT,CAAiCvD,GAAjC,EAAsC;AAClC,QAAI2D,WAAW,GAAG3D,GAAG,CAAC2D,WAAtB;AACA,QAAIuC,eAAe,GAAG,CAAtB;AACA,QAAI/H,CAAJ;AACA,QAAIqI,UAAJ;;AACA,QAAIxG,GAAG,CAACkG,eAAJ,KAAwBrC,SAA5B,EAAuC;AAAE;AACrC,WAAK1F,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGwF,WAAW,CAACrF,MAA5B,EAAoCH,CAAC,EAArC,EAAyC;AACrCqI,QAAAA,UAAU,GAAG7C,WAAW,CAACxF,CAAD,CAAxB,CADqC,CAErC;;AACAoF,QAAAA,uBAAuB,CAACiD,UAAD,CAAvB,CAHqC,CAIrC;AACA;;AACAN,QAAAA,eAAe,GAAGH,IAAI,CAACU,GAAL,CAASP,eAAT,EAA0B,IAAIM,UAAU,CAACN,eAAzC,CAAlB;AACH;;AACDlG,MAAAA,GAAG,CAACkG,eAAJ,GAAsBA,eAAtB;AACH;AACJ,GA9VqC,CA+VtC;AACA;;;AACA,WAASG,wBAAT,CAAkCrG,GAAlC,EAAuC0G,SAAvC,EAAkDC,OAAlD,EAA2D;AACvD,QAAIA,OAAO,KAAK,KAAK,CAArB,EAAwB;AAAEA,MAAAA,OAAO,GAAG,EAAV;AAAe;;AACzC,SAAK,IAAIxI,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGuI,SAAS,CAACpI,MAA9B,EAAsCH,CAAC,EAAvC,EAA2C;AACvC,UAAIyI,kBAAkB,CAAC5G,GAAD,EAAM0G,SAAS,CAACvI,CAAD,CAAf,CAAtB,EAA2C;AACvCwI,QAAAA,OAAO,CAACL,IAAR,CAAaI,SAAS,CAACvI,CAAD,CAAtB;AACH;AACJ;;AACD,WAAOwI,OAAP;AACH,GAzWqC,CA0WtC;;;AACA,WAASC,kBAAT,CAA4BC,IAA5B,EAAkCC,IAAlC,EAAwC;AACpC,WAAOD,IAAI,CAACvB,MAAL,GAAcwB,IAAI,CAACvB,GAAnB,IAA0BsB,IAAI,CAACtB,GAAL,GAAWuB,IAAI,CAACxB,MAAjD;AACH;;AACD,WAASpB,0BAAT,CAAoClE,GAApC,EAAyC;AACrC,QAAI+G,GAAG,GAAGhK,IAAI,CAACiK,kBAAL,CAAwBhH,GAAxB,CAAV;AACA+G,IAAAA,GAAG,CAACb,eAAJ,GAAsBlG,GAAG,CAACkG,eAA1B;AACAa,IAAAA,GAAG,CAAChD,aAAJ,GAAoB/D,GAAG,CAAC+D,aAAxB;AACA,WAAOgD,GAAP;AACH;;AAED,MAAIE,sBAAsB;AAAG;AAAe,YAAUvI,MAAV,EAAkB;AAC1DhB,IAAAA,SAAS,CAACuJ,sBAAD,EAAyBvI,MAAzB,CAAT;;AACA,aAASuI,sBAAT,GAAkC;AAC9B,aAAOvI,MAAM,KAAK,IAAX,IAAmBA,MAAM,CAACF,KAAP,CAAa,IAAb,EAAmBH,SAAnB,CAAnB,IAAoD,IAA3D;AACH;;AACD4I,IAAAA,sBAAsB,CAACpJ,SAAvB,CAAiCwB,UAAjC,GAA8C,UAAUC,IAAV,EAAgBC,UAAhB,EAA4B;AACtE,WAAKC,SAAL,GAAiB,KAAKb,QAAL,CAAcc,cAAd,CAA6BH,IAA7B,CAAjB;AACA,WAAKX,QAAL,CAAciB,eAAd,CAA8B,KAAKJ,SAAnC,EAA8C,KAAKb,QAAL,CAAcuI,kBAA5D;AACA,WAAKC,SAAL,GAAiB5H,UAAU,CAAC4H,SAA5B;AACH,KAJD;;AAKAF,IAAAA,sBAAsB,CAACpJ,SAAvB,CAAiCqH,cAAjC,GAAkD,UAAUlF,GAAV,EAAe;AAC7D,UAAI0F,KAAK,GAAGhH,MAAM,CAACb,SAAP,CAAiBqH,cAAjB,CAAgC3G,IAAhC,CAAqC,IAArC,EAA2CyB,GAA3C,CAAZ;;AACA,UAAImH,SAAS,GAAG,KAAKA,SAArB;;AACA,UAAIA,SAAS,IAAIA,SAAS,CAACzH,GAAV,KAAkBM,GAAG,CAACN,GAAvC,EAA4C;AACxC,YAAI0H,cAAc,GAAG1I,MAAM,CAACb,SAAP,CAAiBqH,cAAjB,CAAgC3G,IAAhC,CAAqC,IAArC,EAA2C4I,SAA3C,CAArB;;AACAzB,QAAAA,KAAK,CAACG,IAAN,GAAauB,cAAc,CAACvB,IAA5B;AACAH,QAAAA,KAAK,CAACI,KAAN,GAAcsB,cAAc,CAACtB,KAA7B;AACAJ,QAAAA,KAAK,CAAC2B,UAAN,GAAmBD,cAAc,CAACC,UAAlC;AACA3B,QAAAA,KAAK,CAAC4B,WAAN,GAAoBF,cAAc,CAACE,WAAnC;AACH;;AACD,aAAO5B,KAAP;AACH,KAXD;;AAYA,WAAOuB,sBAAP;AACH,GAvB2C,CAuB1CxI,qBAvB0C,CAA5C;;AAyBA,MAAI8I,oBAAoB;AAAG;AAAe,YAAU7I,MAAV,EAAkB;AACxDhB,IAAAA,SAAS,CAAC6J,oBAAD,EAAuB7I,MAAvB,CAAT;;AACA,aAAS6I,oBAAT,CAA8B5I,QAA9B,EAAwC;AACpC,UAAIC,KAAK,GAAGF,MAAM,CAACH,IAAP,CAAY,IAAZ,EAAkBI,QAAQ,CAACE,OAA3B,KAAuC,IAAnD;;AACAD,MAAAA,KAAK,CAACD,QAAN,GAAiBA,QAAjB;AACA,aAAOC,KAAP;AACH;;AACD2I,IAAAA,oBAAoB,CAAC1J,SAArB,CAA+BwB,UAA/B,GAA4C,UAAUmI,IAAV,EAAgBlI,IAAhB,EAAsB;AAC9D,UAAIX,QAAQ,GAAG,KAAKA,QAApB;AACA,UAAI8I,YAAJ,CAF8D,CAG9D;;AACA,UAAID,IAAI,KAAK,SAAb,EAAwB;AACpBC,QAAAA,YAAY,GAAG9I,QAAQ,CAAC+I,cAAxB;AACH,OAFD,MAGK,IAAIF,IAAI,KAAK,eAAb,EAA8B;AAC/BC,QAAAA,YAAY,GAAG9I,QAAQ,CAACgJ,oBAAxB;AACH,OAFI,MAGA,IAAIH,IAAI,KAAK,WAAb,EAA0B;AAC3BC,QAAAA,YAAY,GAAG9I,QAAQ,CAACiJ,qBAAxB;AACH;;AACDjJ,MAAAA,QAAQ,CAACiB,eAAT,CAAyBjB,QAAQ,CAACc,cAAT,CAAwBH,IAAxB,CAAzB,EAAwDmI,YAAxD;AACA,aAAOnI,IAAI,CAAC2E,GAAL,CAAS,UAAUjE,GAAV,EAAe;AAC3B,eAAOA,GAAG,CAACE,EAAX;AACH,OAFM,CAAP;AAGH,KAjBD;;AAkBAqH,IAAAA,oBAAoB,CAAC1J,SAArB,CAA+BsC,eAA/B,GAAiD,UAAUb,IAAV,EAAgB;AAC7D,WAAKX,QAAL,CAAc4B,mBAAd,CAAkCjB,IAAlC;AACH,KAFD;;AAGAiI,IAAAA,oBAAoB,CAAC1J,SAArB,CAA+B4C,cAA/B,GAAgD,UAAUnB,IAAV,EAAgB;AAC5D,WAAKX,QAAL,CAAc+B,kBAAd,CAAiCpB,IAAjC;AACH,KAFD;;AAGA,WAAOiI,oBAAP;AACH,GAhCyC,CAgCxCxK,IAAI,CAAC8K,YAhCmC,CAA1C;AAkCA;AACJ;AACI;AACA;;;AACA,MAAIC,0BAA0B,GAAG,CAC7B;AAAEC,IAAAA,KAAK,EAAE;AAAT,GAD6B,EAE7B;AAAEC,IAAAA,OAAO,EAAE;AAAX,GAF6B,EAG7B;AAAEA,IAAAA,OAAO,EAAE;AAAX,GAH6B,EAI7B;AAAEC,IAAAA,OAAO,EAAE;AAAX,GAJ6B,EAK7B;AAAEA,IAAAA,OAAO,EAAE;AAAX,GAL6B,CAAjC;;AAOA,MAAIC,QAAQ;AAAG;AAAe,YAAUxJ,MAAV,EAAkB;AAC5ChB,IAAAA,SAAS,CAACwK,QAAD,EAAWxJ,MAAX,CAAT;;AACA,aAASwJ,QAAT,CAAkBrJ,OAAlB,EAA2BqB,EAA3B,EAA+BiI,WAA/B,EAA4C;AACxC,UAAIvJ,KAAK,GAAGF,MAAM,CAACH,IAAP,CAAY,IAAZ,EAAkBM,OAAlB,EAA2BqB,EAA3B,KAAkC,IAA9C;;AACAtB,MAAAA,KAAK,CAACwJ,gBAAN,GAAyB,KAAzB;AACAxJ,MAAAA,KAAK,CAACyJ,eAAN,GAAwB,KAAxB;AACAzJ,MAAAA,KAAK,CAAC0J,WAAN,GAAoBvL,IAAI,CAACwL,gBAAL,CAAsB3J,KAAK,CAAC4J,YAA5B,CAApB;AACA,UAAIC,aAAa,GAAG7J,KAAK,CAAC6J,aAAN,GAAsB,IAAIhK,qBAAJ,CAA0BG,KAA1B,CAA1C;AACA,UAAI8J,YAAY,GAAG9J,KAAK,CAAC8J,YAAN,GAAqB,IAAInB,oBAAJ,CAAyB3I,KAAzB,CAAxC;AACAA,MAAAA,KAAK,CAAC+J,cAAN,GAAuB,IAAI1B,sBAAJ,CAA2BrI,KAA3B,CAAvB;AACA,UAAIgK,aAAa,GAAGhK,KAAK,CAACgK,aAAN,GAAsB7L,IAAI,CAACwL,gBAAL,CAAsB3J,KAAK,CAACiK,cAA5B,EAA4CjK,KAAK,CAACkK,gBAAlD,CAA1C;AACAlK,MAAAA,KAAK,CAACmK,mBAAN,GAA4BhM,IAAI,CAACwL,gBAAL,CAAsBG,YAAY,CAACM,UAAb,CAAwBC,IAAxB,CAA6BP,YAA7B,EAA2C,eAA3C,CAAtB,EAAmFA,YAAY,CAACQ,QAAb,CAAsBD,IAAtB,CAA2BP,YAA3B,EAAyC,eAAzC,CAAnF,EAA8I,CAACE,aAAD,CAA9I,CAA5B;AACAhK,MAAAA,KAAK,CAACuK,mBAAN,GAA4BpM,IAAI,CAACwL,gBAAL,CAAsB3J,KAAK,CAACwK,oBAA5B,EAAkDxK,KAAK,CAACyK,sBAAxD,EAAgF,CAACT,aAAD,CAAhF,CAA5B;AACAhK,MAAAA,KAAK,CAAC0K,cAAN,GAAuBvM,IAAI,CAACwL,gBAAL,CAAsBE,aAAa,CAACO,UAAd,CAAyBC,IAAzB,CAA8BR,aAA9B,CAAtB,EAAoEA,aAAa,CAACS,QAAd,CAAuBD,IAAvB,CAA4BR,aAA5B,CAApE,EAAgH,CAACG,aAAD,CAAhH,CAAvB;AACAhK,MAAAA,KAAK,CAAC2K,cAAN,GAAuBxM,IAAI,CAACwL,gBAAL,CAAsBG,YAAY,CAACM,UAAb,CAAwBC,IAAxB,CAA6BP,YAA7B,EAA2C,SAA3C,CAAtB,EAA6EA,YAAY,CAACQ,QAAb,CAAsBD,IAAtB,CAA2BP,YAA3B,EAAyC,SAAzC,CAA7E,EAAkI,CAACE,aAAD,CAAlI,CAAvB;AACAhK,MAAAA,KAAK,CAAC4K,oBAAN,GAA6BzM,IAAI,CAACwL,gBAAL,CAAsBE,aAAa,CAACgB,kBAAd,CAAiCR,IAAjC,CAAsCR,aAAtC,CAAtB,EAA4EA,aAAa,CAACiB,oBAAd,CAAmCT,IAAnC,CAAwCR,aAAxC,CAA5E,EAAoI,CAAC7J,KAAK,CAAC0K,cAAP,CAApI,CAA7B;AACA1K,MAAAA,KAAK,CAAC+K,eAAN,GAAwB5M,IAAI,CAACwL,gBAAL,CAAsB3J,KAAK,CAACgL,gBAA5B,EAA8ChL,KAAK,CAACiL,kBAApD,EAAwE,CAACjB,aAAD,CAAxE,CAAxB;AACAhK,MAAAA,KAAK,CAACkL,iBAAN,GAA0B/M,IAAI,CAACwL,gBAAL,CAAsB3J,KAAK,CAACmL,kBAA5B,EAAgDnL,KAAK,CAACoL,oBAAtD,EAA4E,CAACpB,aAAD,CAA5E,CAA1B;;AACAhK,MAAAA,KAAK,CAACqL,cAAN;;AACA/J,MAAAA,EAAE,CAACgK,SAAH,GACI,8BACI,8BADJ,GAEI,wBAFJ,GAE+BtL,KAAK,CAACuL,KAAN,CAAYC,QAAZ,CAAqB,cAArB,CAF/B,GAEsE,2BAH1E;AAIAxL,MAAAA,KAAK,CAACyL,iBAAN,GAA0BnK,EAAE,CAACoK,aAAH,CAAiB,QAAjB,CAA1B;AACA1L,MAAAA,KAAK,CAAC2L,eAAN,GAAwBrK,EAAE,CAACoK,aAAH,CAAiB,WAAjB,CAAxB;AACA1L,MAAAA,KAAK,CAAC4L,YAAN,GAAqBtK,EAAE,CAACoK,aAAH,CAAiB,aAAjB,CAArB;AACA1L,MAAAA,KAAK,CAACuJ,WAAN,GAAoBA,WAApB;AACA,aAAOvJ,KAAP;AACH;AACD;AACR;AACQ;;;AACAsJ,IAAAA,QAAQ,CAACrK,SAAT,CAAmBoM,cAAnB,GAAoC,YAAY;AAC5C,UAAIQ,YAAY,GAAG,KAAKC,GAAL,CAAS,cAAT,CAAnB;AACA,UAAIC,YAAY,GAAG,KAAKD,GAAL,CAAS,cAAT,CAAnB;AACA,UAAIE,YAAJ;AACA,UAAIC,KAAJ;AACAJ,MAAAA,YAAY,GAAG1N,IAAI,CAAC+N,cAAL,CAAoBL,YAApB,CAAf;AACAE,MAAAA,YAAY,GAAGA,YAAY,GAAG5N,IAAI,CAAC+N,cAAL,CAAoBH,YAApB,CAAH,GAAuCF,YAAlE;AACAG,MAAAA,YAAY,GAAG7N,IAAI,CAACgO,oBAAL,CAA0BN,YAA1B,EAAwCE,YAAxC,CAAf;;AACA,UAAIC,YAAY,KAAK,IAArB,EAA2B;AACvBD,QAAAA,YAAY,GAAGF,YAAf;AACAG,QAAAA,YAAY,GAAG,CAAf,CAFuB,CAGvB;AACH;;AACD,WAAKH,YAAL,GAAoBA,YAApB;AACA,WAAKE,YAAL,GAAoBA,YAApB;AACA,WAAKC,YAAL,GAAoBA,YAApB,CAf4C,CAgB5C;AACA;;AACAC,MAAAA,KAAK,GAAG,KAAKH,GAAL,CAAS,iBAAT,CAAR;;AACA,UAAInN,KAAK,CAACyN,OAAN,CAAcH,KAAd,CAAJ,EAA0B;AACtBA,QAAAA,KAAK,GAAGA,KAAK,CAACA,KAAK,CAACvM,MAAN,GAAe,CAAhB,CAAb;AACH;;AACD,WAAK2M,WAAL,GAAmBlO,IAAI,CAACgC,eAAL,CAAqB8L,KAAK,IAAI;AAC7C7L,QAAAA,IAAI,EAAE,SADuC;AAE7CC,QAAAA,MAAM,EAAE,SAFqC;AAG7CiM,QAAAA,cAAc,EAAE,IAH6B;AAI7CrK,QAAAA,QAAQ,EAAE;AAJmC,OAA9B,CAAnB;AAMAgK,MAAAA,KAAK,GAAG,KAAKH,GAAL,CAAS,mBAAT,CAAR;AACA,WAAKS,aAAL,GAAqBN,KAAK,GACtB9N,IAAI,CAAC+N,cAAL,CAAoBD,KAApB,CADsB,GAEtB,KAAKO,oBAAL,CAA0BX,YAA1B,CAFJ;AAGH,KAhCD,CAhC4C,CAiE5C;;;AACAvC,IAAAA,QAAQ,CAACrK,SAAT,CAAmBuN,oBAAnB,GAA0C,UAAUX,YAAV,EAAwB;AAC9D,UAAItM,CAAJ;AACA,UAAIgN,aAAJ;AACA,UAAIE,aAAJ,CAH8D,CAI9D;;AACA,WAAKlN,CAAC,GAAG2J,0BAA0B,CAACxJ,MAA3B,GAAoC,CAA7C,EAAgDH,CAAC,IAAI,CAArD,EAAwDA,CAAC,EAAzD,EAA6D;AACzDgN,QAAAA,aAAa,GAAGpO,IAAI,CAAC+N,cAAL,CAAoBhD,0BAA0B,CAAC3J,CAAD,CAA9C,CAAhB;AACAkN,QAAAA,aAAa,GAAGtO,IAAI,CAACgO,oBAAL,CAA0BI,aAA1B,EAAyCV,YAAzC,CAAhB;;AACA,YAAIY,aAAa,KAAK,IAAlB,IAA0BA,aAAa,GAAG,CAA9C,EAAiD;AAC7C,iBAAOF,aAAP;AACH;AACJ;;AACD,aAAOV,YAAP,CAZ8D,CAYzC;AACxB,KAbD;AAcA;AACR;;;AACQvC,IAAAA,QAAQ,CAACrK,SAAT,CAAmByN,MAAnB,GAA4B,UAAU5F,KAAV,EAAiB;AACzC,UAAI6F,KAAK,GAAG7F,KAAK,CAAC6F,KAAlB;AACA,WAAKjL,MAAL,GAAciL,KAAK,CAACjN,MAApB;AACA,WAAKgK,WAAL,CAAiB5C,KAAK,CAAC8F,WAAvB;AACA,WAAK5C,aAAL,CAAmBlD,KAAK,CAAC6F,KAAzB,EAAgC7F,KAAK,CAAC8F,WAAtC;AACA,WAAKzC,mBAAL,CAAyBrD,KAAK,CAAC+F,gBAA/B;AACA,WAAKtC,mBAAL,CAAyBzD,KAAK,CAACgG,iBAA/B;AACA,WAAKpC,cAAL,CAAoB5D,KAAK,CAACiG,WAA1B;AACA,WAAKpC,cAAL,CAAoB7D,KAAK,CAACkG,WAA1B;AACA,WAAKpC,oBAAL,CAA0B9D,KAAK,CAACmG,cAAhC;AACA,WAAKlC,eAAL,CAAqBjE,KAAK,CAACoG,SAA3B;AACA,WAAKhC,iBAAL,CAAuBpE,KAAK,CAACqG,WAA7B;AACH,KAZD;;AAaA7D,IAAAA,QAAQ,CAACrK,SAAT,CAAmBmO,OAAnB,GAA6B,YAAY;AACrCtN,MAAAA,MAAM,CAACb,SAAP,CAAiBmO,OAAjB,CAAyBzN,IAAzB,CAA8B,IAA9B,EADqC,CAErC;;;AACA,WAAK+J,WAAL,CAAiBY,QAAjB;AACA,WAAKN,aAAL,CAAmBM,QAAnB;AACH,KALD;;AAMAhB,IAAAA,QAAQ,CAACrK,SAAT,CAAmBoO,UAAnB,GAAgC,UAAUC,QAAV,EAAoB;AAChD,UAAI7L,EAAE,GAAG,IAAT;AAAA,UAAeqI,YAAY,GAAGrI,EAAE,CAACqI,YAAjC;AAAA,UAA+CD,aAAa,GAAGpI,EAAE,CAACoI,aAAlE;AAAA,UAAiFE,cAAc,GAAGtI,EAAE,CAACsI,cAArG;;AACA,UAAIuD,QAAQ,IAAI,KAAK9D,gBAArB,EAAuC;AACnC,aAAK+D,kBAAL;AACA,aAAK/D,gBAAL,GAAwB,KAAxB;AACH;;AACD,UAAI8D,QAAQ,IAAI,KAAK7D,eAArB,EAAsC;AAClC,aAAK+D,iBAAL;AACA,aAAK/D,eAAL,GAAuB,KAAvB;AACH;;AACDK,MAAAA,YAAY,CAAC2D,YAAb,CAA0BH,QAA1B;AACAzD,MAAAA,aAAa,CAAC4D,YAAd,CAA2BH,QAA3B;AACAvD,MAAAA,cAAc,CAAC0D,YAAf,CAA4BH,QAA5B;AACAxD,MAAAA,YAAY,CAAC4D,WAAb,CAAyBJ,QAAzB;AACAzD,MAAAA,aAAa,CAAC6D,WAAd,CAA0BJ,QAA1B;AACAvD,MAAAA,cAAc,CAAC2D,WAAf,CAA2BJ,QAA3B;AACH,KAhBD;;AAiBAhE,IAAAA,QAAQ,CAACrK,SAAT,CAAmB2K,YAAnB,GAAkC,UAAUgD,WAAV,EAAuB;AACrD,UAAIrB,KAAK,GAAG,KAAKA,KAAjB;AACA,WAAKI,eAAL,CAAqBL,SAArB,GACI,mBAAmBC,KAAK,CAACC,QAAN,CAAe,WAAf,CAAnB,GAAiD,IAAjD,GACI,KAAKmC,iBAAL,CAAuBf,WAAvB,CADJ,GAEI,UAHR;AAIA,WAAKgB,OAAL,GAAezP,IAAI,CAAC0P,YAAL,CAAkB,KAAKlC,eAAvB,EAAwC,IAAxC,CAAf;AACA,WAAKmC,aAAL,GAAqB,IAAI3P,IAAI,CAAC4P,aAAT,CAAuB,KAAKzM,EAA5B,EAAgC,KAAKsM,OAArC,EAA8C,KAA9C,EAAqD,IAArD,CAA0D;AAA1D,OAArB;AAEA,WAAKpE,gBAAL,GAAwB,IAAxB;AACH,KAVD,CAtH4C,CAiI5C;;;AACAF,IAAAA,QAAQ,CAACrK,SAAT,CAAmB0O,iBAAnB,GAAuC,UAAUf,WAAV,EAAuB;AAC1D,UAAInL,EAAE,GAAG,IAAT;AAAA,UAAeuM,OAAO,GAAGvM,EAAE,CAACuM,OAA5B;AAAA,UAAqCzC,KAAK,GAAG9J,EAAE,CAAC8J,KAAhD;AAAA,UAAuDvE,KAAK,GAAGvF,EAAE,CAACuF,KAAlE;;AACA,UAAIiH,IAAI,GAAG,EAAX;AACA,UAAIC,QAAQ,GAAG/P,IAAI,CAACgQ,UAAL,CAAgBvB,WAAW,CAACwB,WAAZ,CAAwBtK,KAAxC,CAAf;AACA,UAAIuK,QAAQ,GAAGzB,WAAW,CAAC0B,OAA3B;AACA,UAAIC,YAAY,GAAGpQ,IAAI,CAAC+N,cAAL,CAAoB,CAApB,CAAnB;AACA,UAAIsC,QAAJ,CAN0D,CAM5C;;AACd,UAAIC,SAAJ;AACA,UAAIC,QAAJ,CAR0D,CAS1D;;AACA,aAAOvQ,IAAI,CAACwQ,SAAL,CAAeN,QAAf,IAA2BlQ,IAAI,CAACwQ,SAAL,CAAe/B,WAAW,CAACgC,OAA3B,CAAlC,EAAuE;AACnEJ,QAAAA,QAAQ,GAAGR,OAAO,CAACvH,GAAR,CAAYyH,QAAZ,EAAsBG,QAAtB,CAAX;AACAI,QAAAA,SAAS,GAAGtQ,IAAI,CAACgO,oBAAL,CAA0BoC,YAA1B,EAAwC,KAAKhC,aAA7C,MAAgE,IAA5E;AACAmC,QAAAA,QAAQ,GACJ,gCAAgCnD,KAAK,CAACC,QAAN,CAAe,eAAf,CAAhC,GAAkE,IAAlE,IACKiD,SAAS,GACN,WAAW;AACPtQ,QAAAA,IAAI,CAACkG,UAAL,CAAgB2J,OAAO,CAACa,MAAR,CAAeL,QAAf,EAAyB,KAAKnC,WAA9B,CAAhB,CADJ,GAEI,SAHE,GAIN,EALR,IAMI,OAPR;AAQA4B,QAAAA,IAAI,IACA,oBAAoB9P,IAAI,CAAC2Q,mBAAL,CAAyBN,QAAzB,CAApB,GAAyD,GAAzD,IACKC,SAAS,GAAG,EAAH,GAAQ,mBADtB,IAEI,GAFJ,IAGK,CAACzH,KAAD,GAAS0H,QAAT,GAAoB,EAHzB,IAII,aAJJ,GAIoBnD,KAAK,CAACC,QAAN,CAAe,eAAf,CAJpB,GAIsD,SAJtD,IAKKxE,KAAK,GAAG0H,QAAH,GAAc,EALxB,IAMI,OAPR;AAQAL,QAAAA,QAAQ,GAAGlQ,IAAI,CAAC4Q,YAAL,CAAkBV,QAAlB,EAA4B,KAAKxC,YAAjC,CAAX;AACA0C,QAAAA,YAAY,GAAGpQ,IAAI,CAAC4Q,YAAL,CAAkBR,YAAlB,EAAgC,KAAK1C,YAArC,CAAf;AACH;;AACD,aAAOoC,IAAP;AACH,KAjCD;;AAkCA3E,IAAAA,QAAQ,CAACrK,SAAT,CAAmBgL,cAAnB,GAAoC,UAAU0C,KAAV,EAAiBC,WAAjB,EAA8B;AAC9D,UAAIrB,KAAK,GAAG,KAAKA,KAAjB;AACA,UAAIyD,KAAK,GAAG,IAAI5Q,OAAO,CAAC6Q,QAAZ,CAAqB,KAAKhP,OAA1B,CAAZ;AACA,WAAKwL,iBAAL,CAAuBH,SAAvB,GACI,mBAAmBC,KAAK,CAACC,QAAN,CAAe,WAAf,CAAnB,GAAiD,IAAjD,GACIwD,KAAK,CAACE,UAAN,CAAiB;AACbvC,QAAAA,KAAK,EAAEA,KADM;AAEbC,QAAAA,WAAW,EAAEA,WAFA;AAGbuC,QAAAA,eAAe,EAAE,KAAK5F,WAAL,CAAiB6F;AAHrB,OAAjB,CADJ,GAMI,UAPR;AAQA,WAAKC,MAAL,GAAclR,IAAI,CAAC0P,YAAL,CAAkB,KAAKvM,EAAvB,EAA2B,2BAA3B,CAAd;;AACA,UAAI,KAAK0F,KAAT,EAAgB;AACZ,aAAKqI,MAAL,CAAYC,OAAZ;AACH;;AACD,WAAKC,YAAL,GAAoB,IAAIpR,IAAI,CAAC4P,aAAT,CAAuB,KAAKzM,EAA5B,EAAgC,KAAK+N,MAArC,EAA6C,IAA7C,EAAmD;AACvE,WADoB,CAApB;AAEA,WAAKG,qBAAL;AACA,WAAK/F,eAAL,GAAuB,IAAvB;AACH,KAnBD;;AAoBAH,IAAAA,QAAQ,CAACrK,SAAT,CAAmBiL,gBAAnB,GAAsC,YAAY;AAC9C,WAAKuF,uBAAL;AACH,KAFD;AAGA;AACR;AACQ;;;AACAnG,IAAAA,QAAQ,CAACrK,SAAT,CAAmBuQ,qBAAnB,GAA2C,YAAY;AACnD,UAAIE,KAAK,GAAG,EAAZ;AACA,UAAIC,UAAJ;AACAD,MAAAA,KAAK,CAAChI,IAAN,CAAW,KAAK6B,WAAL,CAAiB4F,eAAjB,EAAX;;AACA,WAAK,IAAI5P,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKmC,MAAzB,EAAiCnC,CAAC,EAAlC,EAAsC;AAClCmQ,QAAAA,KAAK,CAAChI,IAAN,CAAW,SACP,8BADO,GAEP,4DAFO,GAGP,wCAHO,GAIP,4CAJO,GAKP,0CALO,GAMP,2CANO,GAOP,QAPO,GAQP,OARJ;AASH;;AACD,UAAI,KAAKV,KAAT,EAAgB;AACZ0I,QAAAA,KAAK,CAACJ,OAAN;AACH;;AACDK,MAAAA,UAAU,GAAG,KAAKC,iBAAL,GAAyBzR,IAAI,CAAC0R,aAAL,CAAmB,sCACrD,SADqD,GAErD,MAFqD,GAE5CH,KAAK,CAACvL,IAAN,CAAW,EAAX,CAF4C,GAE3B,OAF2B,GAGrD,UAHqD,GAIrD,QAJkC,CAAtC;AAKA,WAAK2L,eAAL,GAAuB3R,IAAI,CAAC0P,YAAL,CAAkB8B,UAAlB,EAA8B,iBAA9B,CAAvB;AACA,WAAKrH,kBAAL,GAA0BnK,IAAI,CAAC0P,YAAL,CAAkB8B,UAAlB,EAA8B,sBAA9B,CAA1B;AACA,WAAK1O,cAAL,GAAsB9C,IAAI,CAAC0P,YAAL,CAAkB8B,UAAlB,EAA8B,+CAA9B,CAAtB;AACA,WAAK7G,cAAL,GAAsB3K,IAAI,CAAC0P,YAAL,CAAkB8B,UAAlB,EAA8B,uBAA9B,CAAtB;AACA,WAAK3G,qBAAL,GAA6B7K,IAAI,CAAC0P,YAAL,CAAkB8B,UAAlB,EAA8B,yBAA9B,CAA7B;AACA,WAAK5G,oBAAL,GAA4B5K,IAAI,CAAC0P,YAAL,CAAkB8B,UAAlB,EAA8B,wBAA9B,CAA5B;;AACA,UAAI,KAAK3I,KAAT,EAAgB;AACZ,aAAK8I,eAAL,CAAqBR,OAArB;AACA,aAAKhH,kBAAL,CAAwBgH,OAAxB;AACA,aAAKrO,cAAL,CAAoBqO,OAApB;AACA,aAAKxG,cAAL,CAAoBwG,OAApB;AACA,aAAKtG,qBAAL,CAA2BsG,OAA3B;AACA,aAAKvG,oBAAL,CAA0BuG,OAA1B;AACH;;AACD,WAAKhO,EAAL,CAAQyO,WAAR,CAAoBJ,UAApB;AACH,KAtCD;;AAuCArG,IAAAA,QAAQ,CAACrK,SAAT,CAAmBwQ,uBAAnB,GAA6C,YAAY;AACrDtR,MAAAA,IAAI,CAACkD,aAAL,CAAmB,KAAKuO,iBAAxB;AACH,KAFD,CArO4C,CAwO5C;;;AACAtG,IAAAA,QAAQ,CAACrK,SAAT,CAAmB4B,cAAnB,GAAoC,UAAUH,IAAV,EAAgB;AAChD,UAAIE,SAAS,GAAG,EAAhB;AACA,UAAIrB,CAAJ;;AACA,WAAKA,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAG,KAAKmC,MAArB,EAA6BnC,CAAC,EAA9B,EAAkC;AAC9BqB,QAAAA,SAAS,CAAC8G,IAAV,CAAe,EAAf;AACH;;AACD,WAAKnI,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGmB,IAAI,CAAChB,MAArB,EAA6BH,CAAC,EAA9B,EAAkC;AAC9BqB,QAAAA,SAAS,CAACF,IAAI,CAACnB,CAAD,CAAJ,CAAQuB,GAAT,CAAT,CAAuB4G,IAAvB,CAA4BhH,IAAI,CAACnB,CAAD,CAAhC;AACH;;AACD,aAAOqB,SAAP;AACH,KAVD,CAzO4C,CAoP5C;AACA;;;AACA0I,IAAAA,QAAQ,CAACrK,SAAT,CAAmB+B,eAAnB,GAAqC,UAAUJ,SAAV,EAAqBiI,YAArB,EAAmC;AACpE,UAAI/H,GAAJ;AACA,UAAIJ,IAAJ;AACA,UAAInB,CAAJ;;AACA,WAAKuB,GAAG,GAAG,CAAX,EAAcA,GAAG,GAAG,KAAKY,MAAzB,EAAiCZ,GAAG,EAApC,EAAwC;AAAE;AACtCJ,QAAAA,IAAI,GAAGE,SAAS,CAACE,GAAD,CAAhB;;AACA,aAAKvB,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGmB,IAAI,CAAChB,MAArB,EAA6BH,CAAC,EAA9B,EAAkC;AAC9BsJ,UAAAA,YAAY,CAAC/H,GAAD,CAAZ,CAAkBiP,WAAlB,CAA8BrP,IAAI,CAACnB,CAAD,CAAJ,CAAQ+B,EAAtC;AACH;AACJ;AACJ,KAVD;AAWA;AACR;;;AACQgI,IAAAA,QAAQ,CAACrK,SAAT,CAAmB+Q,mBAAnB,GAAyC,YAAY;AACjD,aAAO,QAAP,CADiD,CAChC;AACpB,KAFD;;AAGA1G,IAAAA,QAAQ,CAACrK,SAAT,CAAmBgR,kBAAnB,GAAwC,UAAUvP,IAAV,EAAgBwP,IAAhB,EAAsB;AAC1D;AACA,UAAI,CAAC,KAAKJ,eAAV,EAA2B;AACvB;AACH;;AACD,UAAInJ,GAAG,GAAG,KAAKwJ,cAAL,CAAoBD,IAApB,CAAV;AACA,UAAIE,KAAK,GAAG,EAAZ;AACA,UAAI7Q,CAAJ,CAP0D,CAQ1D;;AACA,WAAKA,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGmB,IAAI,CAAChB,MAArB,EAA6BH,CAAC,EAA9B,EAAkC;AAC9B,YAAI8Q,MAAM,GAAGlS,IAAI,CAACmS,aAAL,CAAmB,KAAnB,EAA0B;AAAEC,UAAAA,SAAS,EAAE;AAAb,SAA1B,CAAb;AACAF,QAAAA,MAAM,CAACG,KAAP,CAAa7J,GAAb,GAAmBA,GAAG,GAAG,IAAzB;AACA,aAAKmJ,eAAL,CAAqBpP,IAAI,CAACnB,CAAD,CAAJ,CAAQuB,GAA7B,EAAkCiP,WAAlC,CAA8CM,MAA9C;AACAD,QAAAA,KAAK,CAAC1I,IAAN,CAAW2I,MAAX;AACH,OAdyD,CAe1D;;;AACA,UAAI3P,IAAI,CAAChB,MAAL,GAAc,CAAlB,EAAqB;AAAE;AACnB,YAAI+Q,OAAO,GAAGtS,IAAI,CAACmS,aAAL,CAAmB,KAAnB,EAA0B;AAAEC,UAAAA,SAAS,EAAE;AAAb,SAA1B,CAAd;AACAE,QAAAA,OAAO,CAACD,KAAR,CAAc7J,GAAd,GAAoBA,GAAG,GAAG,IAA1B;AACA,aAAKiJ,iBAAL,CAAuBG,WAAvB,CAAmCU,OAAnC;AACAL,QAAAA,KAAK,CAAC1I,IAAN,CAAW+I,OAAX;AACH;;AACD,WAAKC,eAAL,GAAuBN,KAAvB;AACH,KAvBD;;AAwBA9G,IAAAA,QAAQ,CAACrK,SAAT,CAAmB0R,oBAAnB,GAA0C,YAAY;AAClD,UAAI,KAAKD,eAAT,EAA0B;AACtB,aAAKA,eAAL,CAAqBvP,OAArB,CAA6BhD,IAAI,CAACkD,aAAlC;AACA,aAAKqP,eAAL,GAAuB,IAAvB;AACH;AACJ,KALD;AAMA;AACR;;;AACQpH,IAAAA,QAAQ,CAACrK,SAAT,CAAmB2R,kBAAnB,GAAwC,YAAY;AAChD,aAAO,KAAKjF,eAAL,CAAqBkF,YAA5B;AACH,KAFD,CAtS4C,CAyS5C;AACA;;;AACAvH,IAAAA,QAAQ,CAACrK,SAAT,CAAmBkR,cAAnB,GAAoC,UAAUW,IAAV,EAAgBC,cAAhB,EAAgC;AAChE,UAAI,CAACA,cAAL,EAAqB;AACjBA,QAAAA,cAAc,GAAG5S,IAAI,CAACgQ,UAAL,CAAgB2C,IAAhB,CAAjB;AACH;;AACD,aAAO,KAAKE,cAAL,CAAoBF,IAAI,CAACG,OAAL,KAAiBF,cAAc,CAACE,OAAf,EAArC,CAAP;AACH,KALD,CA3S4C,CAiT5C;;;AACA3H,IAAAA,QAAQ,CAACrK,SAAT,CAAmB+R,cAAnB,GAAoC,UAAUE,MAAV,EAAkB;AAClD,UAAIC,GAAG,GAAG,KAAKvD,OAAL,CAAalO,MAAvB;AACA,UAAIkN,WAAW,GAAG,KAAK9F,KAAL,CAAW8F,WAA7B;AACA,UAAIwE,YAAY,GAAG,CAACF,MAAM,GAAG/S,IAAI,CAACwQ,SAAL,CAAe/B,WAAW,CAAC0B,OAA3B,CAAV,IAAiDnQ,IAAI,CAACwQ,SAAL,CAAe,KAAK9C,YAApB,CAApE,CAHkD,CAGqD;;AACvG,UAAIwF,SAAJ;AACA,UAAIC,aAAJ,CALkD,CAMlD;AACA;AACA;;AACAF,MAAAA,YAAY,GAAGjK,IAAI,CAACU,GAAL,CAAS,CAAT,EAAYuJ,YAAZ,CAAf;AACAA,MAAAA,YAAY,GAAGjK,IAAI,CAACC,GAAL,CAAS+J,GAAT,EAAcC,YAAd,CAAf,CAVkD,CAWlD;AACA;;AACAC,MAAAA,SAAS,GAAGlK,IAAI,CAACoK,KAAL,CAAWH,YAAX,CAAZ;AACAC,MAAAA,SAAS,GAAGlK,IAAI,CAACC,GAAL,CAASiK,SAAT,EAAoBF,GAAG,GAAG,CAA1B,CAAZ,CAdkD,CAelD;AACA;;AACAG,MAAAA,aAAa,GAAGF,YAAY,GAAGC,SAA/B;AACA,aAAO,KAAKvD,aAAL,CAAmB0D,IAAnB,CAAwBH,SAAxB,IACH,KAAKvD,aAAL,CAAmB2D,SAAnB,CAA6BJ,SAA7B,IAA0CC,aAD9C;AAEH,KApBD,CAlT4C,CAuU5C;;;AACAhI,IAAAA,QAAQ,CAACrK,SAAT,CAAmB0C,mBAAnB,GAAyC,UAAUjB,IAAV,EAAgB;AACrD,UAAIgR,cAAc,GAAG,KAAK5F,GAAL,CAAS,wBAAT,CAArB;AACA,UAAIvM,CAAJ;AACA,UAAI6B,GAAJ;AACA,UAAIuQ,OAAJ;;AACA,WAAKpS,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGmB,IAAI,CAAChB,MAArB,EAA6BH,CAAC,EAA9B,EAAkC;AAC9B6B,QAAAA,GAAG,GAAGV,IAAI,CAACnB,CAAD,CAAV;AACAoS,QAAAA,OAAO,GAAG,KAAK7K,KAAL,CAAW6F,KAAX,CAAiBvL,GAAG,CAACN,GAArB,EAA0BoP,IAApC;AACA9O,QAAAA,GAAG,CAACuF,GAAJ,GAAU,KAAKwJ,cAAL,CAAoB/O,GAAG,CAAC0C,KAAxB,EAA+B6N,OAA/B,CAAV;AACAvQ,QAAAA,GAAG,CAACsF,MAAJ,GAAaS,IAAI,CAACU,GAAL,CAASzG,GAAG,CAACuF,GAAJ,GAAU+K,cAAnB,EAAmC,KAAKvB,cAAL,CAAoB/O,GAAG,CAAC4C,GAAxB,EAA6B2N,OAA7B,CAAnC,CAAb;AACH;AACJ,KAXD,CAxU4C,CAoV5C;AACA;;;AACArI,IAAAA,QAAQ,CAACrK,SAAT,CAAmB6C,kBAAnB,GAAwC,UAAUpB,IAAV,EAAgB;AACpD,UAAInB,CAAJ;AACA,UAAI6B,GAAJ;;AACA,WAAK7B,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGmB,IAAI,CAAChB,MAArB,EAA6BH,CAAC,EAA9B,EAAkC;AAC9B6B,QAAAA,GAAG,GAAGV,IAAI,CAACnB,CAAD,CAAV;AACApB,QAAAA,IAAI,CAACkI,UAAL,CAAgBjF,GAAG,CAACE,EAApB,EAAwB,KAAKyF,sBAAL,CAA4B3F,GAA5B,CAAxB;AACH;AACJ,KAPD,CAtV4C,CA8V5C;;;AACAkI,IAAAA,QAAQ,CAACrK,SAAT,CAAmB8H,sBAAnB,GAA4C,UAAU3F,GAAV,EAAe;AACvD,aAAO;AACHuF,QAAAA,GAAG,EAAEvF,GAAG,CAACuF,GADN;AAEHD,QAAAA,MAAM,EAAE,CAACtF,GAAG,CAACsF,MAFV,CAEiB;;AAFjB,OAAP;AAIH,KALD;AAMA;AACR;;;AACQ4C,IAAAA,QAAQ,CAACrK,SAAT,CAAmBuO,iBAAnB,GAAuC,YAAY;AAC/C,WAAK+B,YAAL,CAAkBqC,KAAlB;AACH,KAFD;;AAGAtI,IAAAA,QAAQ,CAACrK,SAAT,CAAmBsO,kBAAnB,GAAwC,YAAY;AAChD,WAAKO,aAAL,CAAmB8D,KAAnB;AACH,KAFD;AAGA;AACR;;;AACQtI,IAAAA,QAAQ,CAACrK,SAAT,CAAmB4S,aAAnB,GAAmC,UAAUC,YAAV,EAAwBC,WAAxB,EAAqC;AACpE,UAAItQ,EAAE,GAAG,IAAT;AAAA,UAAeuM,OAAO,GAAGvM,EAAE,CAACuM,OAA5B;AAAA,UAAqChC,YAAY,GAAGvK,EAAE,CAACuK,YAAvD;AAAA,UAAqE8B,aAAa,GAAGrM,EAAE,CAACqM,aAAxF;AAAA,UAAuGyB,YAAY,GAAG9N,EAAE,CAAC8N,YAAzH;;AACA,UAAIyC,QAAQ,GAAGzC,YAAY,CAAC0C,WAAb,CAAyBH,YAAzB,CAAf;AACA,UAAIT,SAAS,GAAGvD,aAAa,CAACoE,UAAd,CAAyBH,WAAzB,CAAhB;;AACA,UAAIC,QAAQ,IAAI,IAAZ,IAAoBX,SAAS,IAAI,IAArC,EAA2C;AACvC,YAAIc,OAAO,GAAGrE,aAAa,CAAC0D,IAAd,CAAmBH,SAAnB,CAAd;AACA,YAAIe,UAAU,GAAGtE,aAAa,CAAC2D,SAAd,CAAwBJ,SAAxB,CAAjB;AACA,YAAIgB,OAAO,GAAG,CAACN,WAAW,GAAGI,OAAf,IAA0BC,UAAxC,CAHuC,CAGa;;AACpD,YAAIE,cAAc,GAAGnL,IAAI,CAACoK,KAAL,CAAWc,OAAO,GAAGrG,YAArB,CAArB,CAJuC,CAIkB;;AACzD,YAAIuG,SAAS,GAAGlB,SAAS,GAAGrF,YAAZ,GAA2BsG,cAA3C;AACA,YAAIX,OAAO,GAAG,KAAK7K,KAAL,CAAW6F,KAAX,CAAiBqF,QAAjB,EAA2B9B,IAAzC;AACA,YAAIsC,IAAI,GAAGrU,IAAI,CAAC4Q,YAAL,CAAkB,KAAKjI,KAAL,CAAW8F,WAAX,CAAuB0B,OAAzC,EAAkDnQ,IAAI,CAACsU,gBAAL,CAAsB,KAAK1G,YAA3B,EAAyCwG,SAAzC,CAAlD,CAAX;AACA,YAAIzO,KAAK,GAAGkK,OAAO,CAACvH,GAAR,CAAYkL,OAAZ,EAAqBa,IAArB,CAAZ;AACA,YAAIxO,GAAG,GAAGgK,OAAO,CAACvH,GAAR,CAAY3C,KAAZ,EAAmB,KAAKiI,YAAxB,CAAV;AACA,eAAO;AACHjL,UAAAA,GAAG,EAAEkR,QADF;AAEHU,UAAAA,QAAQ,EAAE;AACN9O,YAAAA,KAAK,EAAE;AAAEE,cAAAA,KAAK,EAAEA,KAAT;AAAgBE,cAAAA,GAAG,EAAEA;AAArB,aADD;AAENvB,YAAAA,MAAM,EAAE;AAFF,WAFP;AAMHkQ,UAAAA,KAAK,EAAE,KAAKtD,MAAL,CAAY2C,QAAZ,CANJ;AAOHY,UAAAA,YAAY,EAAE;AACV3L,YAAAA,IAAI,EAAEsI,YAAY,CAACsD,KAAb,CAAmBb,QAAnB,CADI;AAEV9K,YAAAA,KAAK,EAAEqI,YAAY,CAACuD,MAAb,CAAoBd,QAApB,CAFG;AAGVrL,YAAAA,GAAG,EAAEwL,OAHK;AAIVzL,YAAAA,MAAM,EAAEyL,OAAO,GAAGC;AAJR;AAPX,SAAP;AAcH;AACJ,KA7BD;AA8BA;AACR;;;AACQ9I,IAAAA,QAAQ,CAACrK,SAAT,CAAmB+L,gBAAnB,GAAsC,UAAU+H,KAAV,EAAiB;AACnD,UAAIA,KAAJ,EAAW;AACP,aAAKlJ,aAAL,CAAmBmJ,UAAnB,CAA8BD,KAAK,CAACE,iBAApC;;AACA,YAAIF,KAAK,CAACG,OAAV,EAAmB;AACf,eAAKnJ,cAAL,CAAoBK,UAApB,CAA+B2I,KAAK,CAACrS,IAArC,EAA2C;AAAEyS,YAAAA,UAAU,EAAE,IAAd;AAAoB5K,YAAAA,SAAS,EAAEwK,KAAK,CAACxK;AAArC,WAA3C;AACH,SAFD,MAGK;AACD,eAAKuB,YAAL,CAAkBM,UAAlB,CAA6B,WAA7B,EAA0C2I,KAAK,CAACrS,IAAhD;AACH;AACJ;AACJ,KAVD;;AAWA4I,IAAAA,QAAQ,CAACrK,SAAT,CAAmBgM,kBAAnB,GAAwC,UAAU8H,KAAV,EAAiB;AACrD,UAAIA,KAAJ,EAAW;AACP,aAAKlJ,aAAL,CAAmBuJ,UAAnB,CAA8BL,KAAK,CAACE,iBAApC;AACA,aAAKlJ,cAAL,CAAoBO,QAApB,CAA6ByI,KAAK,CAACrS,IAAnC,EAAyC;AAAEyS,UAAAA,UAAU,EAAE,IAAd;AAAoB5K,UAAAA,SAAS,EAAEwK,KAAK,CAACxK;AAArC,SAAzC;AACA,aAAKuB,YAAL,CAAkBQ,QAAlB,CAA2B,WAA3B;AACH;AACJ,KAND;AAOA;AACR;;;AACQhB,IAAAA,QAAQ,CAACrK,SAAT,CAAmBkM,kBAAnB,GAAwC,UAAU4H,KAAV,EAAiB;AACrD,UAAIA,KAAJ,EAAW;AACP,aAAKlJ,aAAL,CAAmBmJ,UAAnB,CAA8BD,KAAK,CAACE,iBAApC;AACA,aAAKlJ,cAAL,CAAoBK,UAApB,CAA+B2I,KAAK,CAACrS,IAArC,EAA2C;AAAE2S,UAAAA,UAAU,EAAE,IAAd;AAAoB9K,UAAAA,SAAS,EAAEwK,KAAK,CAACxK;AAArC,SAA3C;AACH;AACJ,KALD;;AAMAe,IAAAA,QAAQ,CAACrK,SAAT,CAAmBmM,oBAAnB,GAA0C,UAAU2H,KAAV,EAAiB;AACvD,UAAIA,KAAJ,EAAW;AACP,aAAKlJ,aAAL,CAAmBuJ,UAAnB,CAA8BL,KAAK,CAACE,iBAApC;AACA,aAAKlJ,cAAL,CAAoBO,QAApB,CAA6ByI,KAAK,CAACrS,IAAnC,EAAyC;AAAE2S,UAAAA,UAAU,EAAE,IAAd;AAAoB9K,UAAAA,SAAS,EAAEwK,KAAK,CAACxK;AAArC,SAAzC;AACH;AACJ,KALD;AAMA;AACR;AACQ;;;AACAe,IAAAA,QAAQ,CAACrK,SAAT,CAAmBuL,oBAAnB,GAA0C,UAAU9J,IAAV,EAAgB;AACtD,UAAIA,IAAJ,EAAU;AACN,YAAI,KAAKoL,GAAL,CAAS,cAAT,CAAJ,EAA8B;AAC1B,eAAK/B,cAAL,CAAoBK,UAApB,CAA+B1J,IAA/B,EAAqC;AAAE4S,YAAAA,WAAW,EAAE;AAAf,WAArC;AACH,SAFD,MAGK;AACD,eAAKxJ,YAAL,CAAkBM,UAAlB,CAA6B,WAA7B,EAA0C1J,IAA1C;AACH;AACJ;AACJ,KATD;;AAUA4I,IAAAA,QAAQ,CAACrK,SAAT,CAAmBwL,sBAAnB,GAA4C,UAAU/J,IAAV,EAAgB;AACxD,WAAKqJ,cAAL,CAAoBO,QAApB,CAA6B5J,IAA7B,EAAmC;AAAE4S,QAAAA,WAAW,EAAE;AAAf,OAAnC;AACA,WAAKxJ,YAAL,CAAkBQ,QAAlB,CAA2B,WAA3B;AACH,KAHD;;AAIA,WAAOhB,QAAP;AACH,GAjc6B,CAic5BnL,IAAI,CAACoV,aAjcuB,CAA9B;;AAmcA,MAAIC,cAAc;AAAG;AAAe,YAAU1T,MAAV,EAAkB;AAClDhB,IAAAA,SAAS,CAAC0U,cAAD,EAAiB1T,MAAjB,CAAT;;AACA,aAAS0T,cAAT,GAA0B;AACtB,aAAO1T,MAAM,KAAK,IAAX,IAAmBA,MAAM,CAACF,KAAP,CAAa,IAAb,EAAmBH,SAAnB,CAAnB,IAAoD,IAA3D;AACH;;AACD+T,IAAAA,cAAc,CAACvU,SAAf,CAAyBwU,UAAzB,GAAsC,YAAY;AAC9C,aAAO;AACHhR,QAAAA,MAAM,EAAE,EADL;AAEHiR,QAAAA,KAAK,EAAE;AAFJ,OAAP;AAIH,KALD;;AAMAF,IAAAA,cAAc,CAACvU,SAAf,CAAyB0U,kBAAzB,GAA8C,UAAUjB,QAAV,EAAoB;AAC9D,UAAIA,QAAQ,CAACjQ,MAAb,EAAqB;AACjB,eAAO,CAAC,QAAD,CAAP;AACH,OAFD,MAGK;AACD,eAAO,CAAC,OAAD,CAAP;AACH;AACJ,KAPD;;AAQA+Q,IAAAA,cAAc,CAACvU,SAAf,CAAyB2U,kBAAzB,GAA8C,UAAUvR,QAAV,EAAoB;AAC9D,UAAI,CAACA,QAAQ,CAACI,MAAd,EAAsB;AAClB,eAAO,CAAC,OAAD,CAAP;AACH,OAFD,MAGK,IAAItE,IAAI,CAAC0V,cAAL,CAAoBxR,QAApB,CAAJ,EAAmC;AACpC,eAAO,CAAC,OAAD,EAAU,QAAV,CAAP;AACH,OAFI,MAGA;AACD,eAAO,CAAC,QAAD,CAAP;AACH;AACJ,KAVD;;AAWA,WAAOmR,cAAP;AACH,GA/BmC,CA+BlCrV,IAAI,CAAC2V,QA/B6B,CAApC;;AAiCA,MAAIC,4BAA4B,GAAG,CAAnC;AACA,MAAIC,kBAAkB,GAAG7V,IAAI,CAACgC,eAAL,CAAqB;AAAE8T,IAAAA,IAAI,EAAE;AAAR,GAArB,CAAzB;AACA;AACJ;AACI;AACA;;AACA,MAAIC,YAAY;AAAG;AAAe,YAAUpU,MAAV,EAAkB;AAChDhB,IAAAA,SAAS,CAACoV,YAAD,EAAepU,MAAf,CAAT;;AACA,aAASoU,YAAT,CAAsBjU,OAAtB,EAA+BkU,QAA/B,EAAyCC,oBAAzC,EAA+DC,QAA/D,EAAyE;AACrE,UAAIrU,KAAK,GAAGF,MAAM,CAACH,IAAP,CAAY,IAAZ,EAAkBM,OAAlB,EAA2BkU,QAA3B,EAAqCC,oBAArC,EAA2DC,QAA3D,KAAwE,IAApF;;AACArU,MAAAA,KAAK,CAACsU,QAAN,GAAiB,IAAId,cAAJ,EAAjB;AACA;AACZ;AACY;;AACAxT,MAAAA,KAAK,CAACuU,mBAAN,GAA4B,YAAY;AACpC,YAAI9S,EAAE,GAAGzB,KAAT;AAAA,YAAgBuL,KAAK,GAAG9J,EAAE,CAAC8J,KAA3B;AAAA,YAAkCyC,OAAO,GAAGvM,EAAE,CAACuM,OAA/C;AACA,YAAIpK,KAAK,GAAG5D,KAAK,CAAC8G,KAAN,CAAY8F,WAAZ,CAAwBwB,WAApC;AACA,YAAIoG,MAAM,GAAGrW,IAAI,CAACsW,QAAL,CAAc7Q,KAAK,CAACE,KAApB,EAA2BF,KAAK,CAACI,GAAjC,CAAb;AACA,YAAI0Q,QAAJ;;AACA,YAAI1U,KAAK,CAAC8L,GAAN,CAAU,aAAV,CAAJ,EAA8B;AAC1B4I,UAAAA,QAAQ,GAAG1G,OAAO,CAACa,MAAR,CAAejL,KAAK,CAACE,KAArB,EAA4BkQ,kBAA5B,CAAX;AACA,iBAAO,KACH,oCADG,GACoCzI,KAAK,CAACC,QAAN,CAAe,cAAf,CADpC,GACqE,IADrE,GAC4ExL,KAAK,CAAC2U,aAAN,EAD5E,GACoG,GADpG,GAEHxW,IAAI,CAACyW,mBAAL,EAAyB;AACzB5U,UAAAA,KADA,EACO;AAAEkQ,YAAAA,IAAI,EAAEtM,KAAK,CAACE,KAAd;AAAqB8E,YAAAA,IAAI,EAAE,MAA3B;AAAmCiM,YAAAA,QAAQ,EAAEL,MAAM,GAAG;AAAtD,WADP,EACkErW,IAAI,CAACkG,UAAL,CAAgBqQ,QAAhB,CADlE,CAC4F;AAD5F,WAFG,GAKH,OALJ;AAMH,SARD,MASK;AACD,iBAAO,wBAAwBnJ,KAAK,CAACC,QAAN,CAAe,cAAf,CAAxB,GAAyD,IAAzD,GAAgExL,KAAK,CAAC2U,aAAN,EAAhE,GAAwF,QAA/F;AACH;AACJ,OAjBD;AAkBA;AACZ;AACY;;;AACA3U,MAAAA,KAAK,CAAC8U,yBAAN,GAAkC,YAAY;AAC1C,YAAIvJ,KAAK,GAAGvL,KAAK,CAACuL,KAAlB;AACA,eAAO,wBAAwBA,KAAK,CAACC,QAAN,CAAe,eAAf,CAAxB,GAA0D,IAA1D,GAAiExL,KAAK,CAAC2U,aAAN,EAAjE,GAAyF,QAAhG;AACH,OAHD,CA3BqE,CA+BrE;AACA;;;AACA3U,MAAAA,KAAK,CAAC+U,uBAAN,GAAgC,YAAY;AACxC,eAAO,yBAAyB/U,KAAK,CAAC2U,aAAN,EAAzB,GAAiD,QAAxD;AACH,OAFD;AAGA;AACZ;AACY;;;AACA3U,MAAAA,KAAK,CAACgV,wBAAN,GAAiC,YAAY;AACzC,YAAIzJ,KAAK,GAAGvL,KAAK,CAACuL,KAAlB;AACA,eAAO,KACH,qBADG,GACqBA,KAAK,CAACC,QAAN,CAAe,eAAf,CADrB,GACuD,IADvD,GAC8DxL,KAAK,CAAC2U,aAAN,EAD9D,GACsF,GADtF,GAEH,QAFG,GAEQ;AACXxW,QAAAA,IAAI,CAAC8W,aAAL,CAAmBjV,KAAnB,CAHG,GAIH,SAJG,GAKH,OALJ;AAMH,OARD,CAvCqE,CAgDrE;AACA;;;AACAA,MAAAA,KAAK,CAACkV,sBAAN,GAA+B,YAAY;AACvC,eAAO,yBAAyBlV,KAAK,CAAC2U,aAAN,EAAzB,GAAiD,QAAxD;AACH,OAFD;;AAGA3U,MAAAA,KAAK,CAACsB,EAAN,CAASkF,SAAT,CAAmBC,GAAnB,CAAuB,kBAAvB;;AACAzG,MAAAA,KAAK,CAACsB,EAAN,CAASgK,SAAT,GAAqBtL,KAAK,CAACmV,kBAAN,EAArB;AACAnV,MAAAA,KAAK,CAACoV,QAAN,GAAiB,IAAIjX,IAAI,CAACkX,eAAT,CAAyB,QAAzB,EAAmC;AACpD,YADiB,CACV;AADU,OAAjB;AAGA,UAAIC,cAAc,GAAGtV,KAAK,CAACoV,QAAN,CAAe9T,EAApC;;AACAtB,MAAAA,KAAK,CAACsB,EAAN,CAASoK,aAAT,CAAuB,oBAAvB,EAA6CqE,WAA7C,CAAyDuF,cAAzD;;AACAA,MAAAA,cAAc,CAAC9O,SAAf,CAAyBC,GAAzB,CAA6B,wBAA7B;AACA,UAAI8O,UAAU,GAAGpX,IAAI,CAACmS,aAAL,CAAmB,KAAnB,EAA0B;AAAEC,QAAAA,SAAS,EAAE;AAAb,OAA1B,CAAjB;AACA+E,MAAAA,cAAc,CAACvF,WAAf,CAA2BwF,UAA3B;AACAvV,MAAAA,KAAK,CAACD,QAAN,GAAiB,IAAIuJ,QAAJ,CAAatJ,KAAK,CAACC,OAAnB,EAA4BsV,UAA5B,EAAwC;AACrDnG,QAAAA,iBAAiB,EAAEpP,KAAK,CAAC8U,yBAD4B;AAErD3F,QAAAA,eAAe,EAAEnP,KAAK,CAAC+U;AAF8B,OAAxC,CAAjB;;AAIA,UAAI/U,KAAK,CAAC8L,GAAN,CAAU,YAAV,CAAJ,EAA6B;AAAE;AAC3B9L,QAAAA,KAAK,CAACwV,OAAN,GAAgB,IAAIpX,OAAO,CAACqX,OAAZ,EAAoB;AACpCzV,QAAAA,KAAK,CAACC,OADU,EACDD,KAAK,CAACsB,EAAN,CAASoK,aAAT,CAAuB,cAAvB,CADC,EACuC;AACnDgK,UAAAA,qBAAqB,EAAE1V,KAAK,CAACkV,sBADsB;AAEnD9F,UAAAA,iBAAiB,EAAEpP,KAAK,CAACgV,wBAF0B;AAGnD7F,UAAAA,eAAe,EAAEnP,KAAK,CAACkV,sBAH4B;AAInDS,UAAAA,qBAAqB,EAAE,KAJ4B;AAKnDC,UAAAA,sBAAsB,EAAE;AAL2B,SADvC,CAAhB,CADyB,CASzB;;AACA5V,QAAAA,KAAK,CAACwV,OAAN,CAAcK,kBAAd,GAAmC7V,KAAK,CAACsB,EAAN,CAASoK,aAAT,CAAuB,aAAvB,EAAsCmF,YAAzE;AACH;;AACD,aAAO7Q,KAAP;AACH;;AACDkU,IAAAA,YAAY,CAACjV,SAAb,CAAuBmO,OAAvB,GAAiC,YAAY;AACzCtN,MAAAA,MAAM,CAACb,SAAP,CAAiBmO,OAAjB,CAAyBzN,IAAzB,CAA8B,IAA9B;;AACA,WAAKI,QAAL,CAAcqN,OAAd;;AACA,UAAI,KAAKoI,OAAT,EAAkB;AACd,aAAKA,OAAL,CAAapI,OAAb;AACH;;AACD,WAAKgI,QAAL,CAAchI,OAAd;AACH,KAPD;AAQA;AACR;AACQ;AACA;;;AACA8G,IAAAA,YAAY,CAACjV,SAAb,CAAuBkW,kBAAvB,GAA4C,YAAY;AACpD,UAAI5J,KAAK,GAAG,KAAKA,KAAjB;AACA,aAAO,KACH,gBADG,GACgBA,KAAK,CAACC,QAAN,CAAe,WAAf,CADhB,GAC8C,IAD9C,IAEF,KAAKM,GAAL,CAAS,cAAT,IACG,4BACI,MADJ,GAEI,+BAFJ,GAEsCP,KAAK,CAACC,QAAN,CAAe,cAAf,CAFtC,GAEuE,eAFvE,GAGI,OAHJ,GAII,UALP,GAMG,EARD,IASH,yBATG,GAUH,MAVG,GAWH,aAXG,GAWaD,KAAK,CAACC,QAAN,CAAe,eAAf,CAXb,GAW+C,IAX/C,IAYF,KAAKM,GAAL,CAAS,YAAT,IACG,oCACI,wBADJ,GAC+BP,KAAK,CAACC,QAAN,CAAe,cAAf,CAD/B,GACgE,MAFnE,GAGG,EAfD,IAgBH,OAhBG,GAiBH,OAjBG,GAkBH,UAlBG,GAmBH,UAnBJ;AAoBH,KAtBD;AAuBA;AACR;;;AACQ0I,IAAAA,YAAY,CAACjV,SAAb,CAAuB+Q,mBAAvB,GAA6C,YAAY;AACrD,aAAO,KAAKjQ,QAAL,CAAciQ,mBAAd,EAAP;AACH,KAFD,CAxHgD,CA2HhD;AACA;AACA;;;AACAkE,IAAAA,YAAY,CAACjV,SAAb,CAAuB0R,oBAAvB,GAA8C,YAAY;AACtD,WAAK5Q,QAAL,CAAc4Q,oBAAd;AACH,KAFD;AAGA;AACR;;;AACQuD,IAAAA,YAAY,CAACjV,SAAb,CAAuBoO,UAAvB,GAAoC,UAAUC,QAAV,EAAoBwI,UAApB,EAAgCC,MAAhC,EAAwC;AACxEjW,MAAAA,MAAM,CAACb,SAAP,CAAiBoO,UAAjB,CAA4B1N,IAA5B,CAAiC,IAAjC,EAAuC2N,QAAvC,EAAiDwI,UAAjD,EAA6DC,MAA7D,EADwE,CACF;;;AACtE,WAAKhW,QAAL,CAAcsN,UAAd,CAAyBC,QAAzB;;AACA,UAAI,KAAKkI,OAAT,EAAkB;AACd,aAAKA,OAAL,CAAanI,UAAb,CAAwBC,QAAxB;AACH;AACJ,KAND,CAnIgD,CA0IhD;;;AACA4G,IAAAA,YAAY,CAACjV,SAAb,CAAuB+W,cAAvB,GAAwC,UAAU1I,QAAV,EAAoBwI,UAApB,EAAgCC,MAAhC,EAAwC;AAC5E,UAAI/V,KAAK,GAAG,IAAZ;;AACA,UAAIiW,UAAJ;AACA,UAAIC,cAAJ;AACA,UAAIC,eAAJ,CAJ4E,CAK5E;;AACA,WAAKC,SAAL,GAAiBjY,IAAI,CAACkY,eAAL,CAAqBlY,IAAI,CAAC0P,YAAL,CAAkB,KAAKvM,EAAvB,EAA2B,UAA3B,CAArB,CAAjB,CAN4E,CAO5E;AACA;;AACA,UAAI,CAAC,KAAKvB,QAAL,CAAcsP,MAAnB,EAA2B;AACvB,YAAI,CAAC0G,MAAL,EAAa;AACTG,UAAAA,cAAc,GAAG,KAAKI,qBAAL,CAA2BR,UAA3B,CAAjB;AACA,eAAKV,QAAL,CAAcmB,SAAd,CAAwBL,cAAxB;AACH;;AACD;AACH,OAf2E,CAgB5E;;;AACA,UAAIM,cAAc,GAAGrY,IAAI,CAAC0P,YAAL,CAAkB,KAAKvM,EAAvB,EAA2B,SAA3B,EAAsCmV,MAAtC,CAA6C,UAAUC,IAAV,EAAgB;AAC9E,eAAO,CAAC1W,KAAK,CAACoV,QAAN,CAAe9T,EAAf,CAAkBqV,QAAlB,CAA2BD,IAA3B,CAAR;AACH,OAFoB,CAArB,CAjB4E,CAoB5E;;AACA,WAAK3W,QAAL,CAAc6L,YAAd,CAA2B4E,KAA3B,CAAiCoG,OAAjC,GAA2C,MAA3C,CArB4E,CAqBzB;;AACnD,WAAKxB,QAAL,CAAcyB,KAAd,GAtB4E,CAsBrD;;AACvBL,MAAAA,cAAc,CAACrV,OAAf,CAAuBhD,IAAI,CAAC2Y,kBAA5B,EAvB4E,CAwB5E;;AACA,UAAI,KAAKtB,OAAT,EAAkB;AACd,aAAKA,OAAL,CAAauB,gBAAb,GADc,CACmB;;AACjCd,QAAAA,UAAU,GAAG,KAAKnK,GAAL,CAAS,YAAT,CAAb;;AACA,YAAImK,UAAU,IAAI,OAAOA,UAAP,KAAsB,QAAxC,EAAkD;AAC9CA,UAAAA,UAAU,GAAGlC,4BAAb,CAD8C,CACH;AAC9C;;AACD,YAAIkC,UAAJ,EAAgB;AACZ,eAAKT,OAAL,CAAawB,SAAb,CAAuBf,UAAvB;AACH;AACJ;;AACD,UAAI,CAACF,MAAL,EAAa;AAAE;AACXG,QAAAA,cAAc,GAAG,KAAKI,qBAAL,CAA2BR,UAA3B,CAAjB;AACA,aAAKV,QAAL,CAAcmB,SAAd,CAAwBL,cAAxB;AACAC,QAAAA,eAAe,GAAG,KAAKf,QAAL,CAAc6B,kBAAd,EAAlB;;AACA,YAAId,eAAe,CAAClP,IAAhB,IAAwBkP,eAAe,CAACjP,KAA5C,EAAmD;AAAE;AACjD;AACAsP,UAAAA,cAAc,CAACrV,OAAf,CAAuB,UAAU+V,KAAV,EAAiB;AACpC/Y,YAAAA,IAAI,CAACgZ,gBAAL,CAAsBD,KAAtB,EAA6Bf,eAA7B;AACH,WAFD,EAF+C,CAK/C;AACA;;AACAD,UAAAA,cAAc,GAAG,KAAKI,qBAAL,CAA2BR,UAA3B,CAAjB;AACA,eAAKV,QAAL,CAAcmB,SAAd,CAAwBL,cAAxB;AACH,SAbQ,CAcT;;;AACA,aAAKd,QAAL,CAAcgC,YAAd,CAA2BjB,eAA3B,EAfS,CAgBT;AACA;;AACA,YAAI,KAAKpW,QAAL,CAAc6Q,kBAAd,KAAqCsF,cAAzC,EAAyD;AACrD,eAAKnW,QAAL,CAAc6L,YAAd,CAA2B4E,KAA3B,CAAiCoG,OAAjC,GAA2C,EAA3C;AACH;AACJ;AACJ,KAzDD,CA3IgD,CAqMhD;;;AACA1C,IAAAA,YAAY,CAACjV,SAAb,CAAuBqX,qBAAvB,GAA+C,UAAUR,UAAV,EAAsB;AACjE,aAAOA,UAAU,GACb3X,IAAI,CAACkZ,qBAAL,CAA2B,KAAK/V,EAAhC,EAAoC,KAAK8T,QAAL,CAAc9T,EAAlD,CADJ,CADiE,CAEN;AAC9D,KAHD;AAIA;AACR;AACQ;;;AACA4S,IAAAA,YAAY,CAACjV,SAAb,CAAuBqY,wBAAvB,GAAkD,YAAY;AAC1D,UAAIC,UAAU,GAAGpZ,IAAI,CAAC+N,cAAL,CAAoB,KAAKJ,GAAL,CAAS,YAAT,CAApB,CAAjB;AACA,UAAInF,GAAG,GAAG,KAAK5G,QAAL,CAAciR,cAAd,CAA6BuG,UAAU,CAACC,YAAxC,CAAV,CAF0D,CAG1D;;AACA7Q,MAAAA,GAAG,GAAGQ,IAAI,CAACsQ,IAAL,CAAU9Q,GAAV,CAAN;;AACA,UAAIA,GAAJ,EAAS;AACLA,QAAAA,GAAG,GADE,CACE;AACV;;AACD,aAAO;AAAEA,QAAAA,GAAG,EAAEA;AAAP,OAAP;AACH,KATD;;AAUAuN,IAAAA,YAAY,CAACjV,SAAb,CAAuByY,eAAvB,GAAyC,YAAY;AACjD,aAAO;AAAE/Q,QAAAA,GAAG,EAAE,KAAKyO,QAAL,CAAcuC,YAAd;AAAP,OAAP;AACH,KAFD;;AAGAzD,IAAAA,YAAY,CAACjV,SAAb,CAAuB2Y,eAAvB,GAAyC,UAAUC,MAAV,EAAkB;AACvD,UAAIA,MAAM,CAAClR,GAAP,KAAe1B,SAAnB,EAA8B;AAC1B,aAAKmQ,QAAL,CAAc0C,YAAd,CAA2BD,MAAM,CAAClR,GAAlC;AACH;AACJ,KAJD,CA1NgD,CA+NhD;;;AACAuN,IAAAA,YAAY,CAACjV,SAAb,CAAuB0V,aAAvB,GAAuC,YAAY;AAC/C,UAAI,KAAKyB,SAAL,IAAkB,IAAtB,EAA4B;AACxB,eAAO,kBAAkB,KAAKA,SAAvB,GAAmC,KAA1C;AACH;;AACD,aAAO,EAAP;AACH,KALD;;AAMA,WAAOlC,YAAP;AACH,GAvOiC,CAuOhC/V,IAAI,CAAC4Z,IAvO2B,CAAlC;;AAwOA7D,EAAAA,YAAY,CAACjV,SAAb,CAAuB+Y,cAAvB,GAAwC,IAAxC,CA7oCsC,CA6oCQ;;AAE9C,MAAIC,cAAc;AAAG;AAAe,YAAUnY,MAAV,EAAkB;AAClDhB,IAAAA,SAAS,CAACmZ,cAAD,EAAiBnY,MAAjB,CAAT;;AACA,aAASmY,cAAT,CAAwBhY,OAAxB,EAAiCF,QAAjC,EAA2C;AACvC,UAAIC,KAAK,GAAGF,MAAM,CAACH,IAAP,CAAY,IAAZ,EAAkBM,OAAlB,EAA2BF,QAAQ,CAACuB,EAApC,KAA2C,IAAvD;;AACAtB,MAAAA,KAAK,CAACkY,cAAN,GAAuB/Z,IAAI,CAACga,OAAL,CAAaD,cAAb,CAAvB;AACAlY,MAAAA,KAAK,CAACoY,MAAN,GAAe,IAAIC,cAAJ,EAAf;AACArY,MAAAA,KAAK,CAACD,QAAN,GAAiBA,QAAjB;AACAE,MAAAA,OAAO,CAACqY,QAAR,CAAiBC,4BAAjB,CAA8CvY,KAA9C,EAAqD;AACjDsB,QAAAA,EAAE,EAAEtB,KAAK,CAACD,QAAN,CAAeuB;AAD8B,OAArD;AAGA,aAAOtB,KAAP;AACH;;AACDiY,IAAAA,cAAc,CAAChZ,SAAf,CAAyBmO,OAAzB,GAAmC,YAAY;AAC3CtN,MAAAA,MAAM,CAACb,SAAP,CAAiBmO,OAAjB,CAAyBzN,IAAzB,CAA8B,IAA9B;;AACA,WAAK2Y,QAAL,CAAcE,8BAAd,CAA6C,IAA7C;AACH,KAHD;;AAIAP,IAAAA,cAAc,CAAChZ,SAAf,CAAyByN,MAAzB,GAAkC,UAAU5F,KAAV,EAAiB;AAC/C,UAAI8F,WAAW,GAAG9F,KAAK,CAAC8F,WAAxB;AAAA,UAAqC6L,QAAQ,GAAG3R,KAAK,CAAC2R,QAAtD;AACA,UAAIC,SAAS,GAAG,KAAKA,SAAL,GAAiB,KAAKR,cAAL,CAAoBO,QAApB,EAA8B7L,WAA9B,EAA2C,KAAKoB,OAAhD,CAAjC;AACA,WAAKjO,QAAL,CAAc4Y,YAAd,CAA2BxZ,OAAQ,CAAC,EAAD,EAAK,KAAKiZ,MAAL,CAAYQ,UAAZ,CAAuB9R,KAAvB,EAA8B8F,WAA9B,EAA2C,IAA3C,EAAiD,KAAK7M,QAAtD,EAAgE2Y,SAAhE,CAAL,EAAiF;AAAE9L,QAAAA,WAAW,EAAEA,WAAf;AAA4BD,QAAAA,KAAK,EAAE8L,QAAQ,CAAC9L,KAAT,CAAe,CAAf;AAAnC,OAAjF,CAAnC;AACH,KAJD;;AAKAsL,IAAAA,cAAc,CAAChZ,SAAf,CAAyBgR,kBAAzB,GAA8C,UAAUC,IAAV,EAAgB;AAC1D,WAAKnQ,QAAL,CAAckQ,kBAAd,CAAiC,KAAKmI,MAAL,CAAYS,YAAZ,CAAyB3I,IAAzB,EAA+B,KAAKnQ,QAApC,EAA8C,KAAK2Y,SAAnD,CAAjC,EAAgGxI,IAAhG;AACH,KAFD;;AAGA+H,IAAAA,cAAc,CAAChZ,SAAf,CAAyB6Z,QAAzB,GAAoC,UAAUhH,YAAV,EAAwBC,WAAxB,EAAqC;AACrE,UAAIgH,MAAM,GAAG,KAAKhZ,QAAL,CAAc8R,aAAd,CAA4BC,YAA5B,EAA0CC,WAA1C,CAAb;;AACA,UAAIgH,MAAJ,EAAY;AACR,eAAO;AACHC,UAAAA,SAAS,EAAE,KAAKjZ,QADb;AAEH2S,UAAAA,QAAQ,EAAEqG,MAAM,CAACrG,QAFd;AAGHC,UAAAA,KAAK,EAAEoG,MAAM,CAACpG,KAHX;AAIHsG,UAAAA,IAAI,EAAE;AACFhS,YAAAA,IAAI,EAAE8R,MAAM,CAACnG,YAAP,CAAoB3L,IADxB;AAEFC,YAAAA,KAAK,EAAE6R,MAAM,CAACnG,YAAP,CAAoB1L,KAFzB;AAGFP,YAAAA,GAAG,EAAEoS,MAAM,CAACnG,YAAP,CAAoBjM,GAHvB;AAIFD,YAAAA,MAAM,EAAEqS,MAAM,CAACnG,YAAP,CAAoBlM;AAJ1B,WAJH;AAUHwS,UAAAA,KAAK,EAAE;AAVJ,SAAP;AAYH;AACJ,KAhBD;;AAiBA,WAAOjB,cAAP;AACH,GA1CmC,CA0ClC9Z,IAAI,CAACoV,aA1C6B,CAApC;;AA2CA,WAAS2E,cAAT,CAAwBO,QAAxB,EAAkC7L,WAAlC,EAA+CoB,OAA/C,EAAwD;AACpD,QAAImL,MAAM,GAAG,EAAb;;AACA,SAAK,IAAIhT,EAAE,GAAG,CAAT,EAAY1E,EAAE,GAAGgX,QAAQ,CAACW,WAA/B,EAA4CjT,EAAE,GAAG1E,EAAE,CAAC/B,MAApD,EAA4DyG,EAAE,EAA9D,EAAkE;AAC9D,UAAI+J,IAAI,GAAGzO,EAAE,CAAC0E,EAAD,CAAb;AACAgT,MAAAA,MAAM,CAACzR,IAAP,CAAY;AACR5D,QAAAA,KAAK,EAAEkK,OAAO,CAACvH,GAAR,CAAYyJ,IAAZ,EAAkBtD,WAAW,CAAC0B,OAA9B,CADC;AAERtK,QAAAA,GAAG,EAAEgK,OAAO,CAACvH,GAAR,CAAYyJ,IAAZ,EAAkBtD,WAAW,CAACgC,OAA9B;AAFG,OAAZ;AAIH;;AACD,WAAOuK,MAAP;AACH;;AACD,MAAId,cAAc;AAAG;AAAe,YAAUvY,MAAV,EAAkB;AAClDhB,IAAAA,SAAS,CAACuZ,cAAD,EAAiBvY,MAAjB,CAAT;;AACA,aAASuY,cAAT,GAA0B;AACtB,aAAOvY,MAAM,KAAK,IAAX,IAAmBA,MAAM,CAACF,KAAP,CAAa,IAAb,EAAmBH,SAAnB,CAAnB,IAAoD,IAA3D;AACH;;AACD4Y,IAAAA,cAAc,CAACpZ,SAAf,CAAyBoa,UAAzB,GAAsC,UAAUzV,KAAV,EAAiB8U,SAAjB,EAA4B;AAC9D,UAAIhY,IAAI,GAAG,EAAX;;AACA,WAAK,IAAII,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAG4X,SAAS,CAAChZ,MAAlC,EAA0CoB,GAAG,EAA7C,EAAiD;AAC7C,YAAIwY,QAAQ,GAAGnb,IAAI,CAACob,eAAL,CAAqB3V,KAArB,EAA4B8U,SAAS,CAAC5X,GAAD,CAArC,CAAf;;AACA,YAAIwY,QAAJ,EAAc;AACV5Y,UAAAA,IAAI,CAACgH,IAAL,CAAU;AACN5D,YAAAA,KAAK,EAAEwV,QAAQ,CAACxV,KADV;AAENE,YAAAA,GAAG,EAAEsV,QAAQ,CAACtV,GAFR;AAGNnB,YAAAA,OAAO,EAAEyW,QAAQ,CAACxV,KAAT,CAAemN,OAAf,OAA6BrN,KAAK,CAACE,KAAN,CAAYmN,OAAZ,EAHhC;AAINhO,YAAAA,KAAK,EAAEqW,QAAQ,CAACtV,GAAT,CAAaiN,OAAb,OAA2BrN,KAAK,CAACI,GAAN,CAAUiN,OAAV,EAJ5B;AAKNnQ,YAAAA,GAAG,EAAEA;AALC,WAAV;AAOH;AACJ;;AACD,aAAOJ,IAAP;AACH,KAfD;;AAgBA,WAAO2X,cAAP;AACH,GAtBmC,CAsBlCla,IAAI,CAACqb,MAtB6B,CAApC;;AAwBA,MAAIC,cAAc;AAAG;AAAe,YAAU3Z,MAAV,EAAkB;AAClDhB,IAAAA,SAAS,CAACoV,YAAD,EAAepU,MAAf,CAAT;;AACA,aAASoU,YAAT,CAAsBwF,QAAtB,EAAgCvF,QAAhC,EAA0CC,oBAA1C,EAAgEC,QAAhE,EAA0E;AACtE,UAAIrU,KAAK,GAAGF,MAAM,CAACH,IAAP,CAAY,IAAZ,EAAkB+Z,QAAlB,EAA4BvF,QAA5B,EAAsCC,oBAAtC,EAA4DC,QAA5D,KAAyE,IAArF;;AACArU,MAAAA,KAAK,CAAC2Z,aAAN,GAAsBxb,IAAI,CAACga,OAAL,CAAawB,aAAb,CAAtB;;AACA,UAAI3Z,KAAK,CAAC8L,GAAN,CAAU,cAAV,CAAJ,EAA+B;AAC3B9L,QAAAA,KAAK,CAAC4Z,MAAN,GAAe,IAAIzb,IAAI,CAAC0b,SAAT,CAAmB7Z,KAAK,CAACC,OAAzB,EAAkCD,KAAK,CAACsB,EAAN,CAASoK,aAAT,CAAuB,oBAAvB,CAAlC,CAAf;AACH;;AACD1L,MAAAA,KAAK,CAAC8Z,cAAN,GAAuB,IAAI7B,cAAJ,CAAmBjY,KAAK,CAACC,OAAzB,EAAkCD,KAAK,CAACD,QAAxC,CAAvB;;AACA,UAAIC,KAAK,CAACwV,OAAV,EAAmB;AACfxV,QAAAA,KAAK,CAAC+Z,aAAN,GAAsB,IAAI3b,OAAO,CAAC4b,aAAZ,CAA0Bha,KAAK,CAACC,OAAhC,EAAyCD,KAAK,CAACwV,OAA/C,CAAtB;AACH;;AACD,aAAOxV,KAAP;AACH;;AACDkU,IAAAA,YAAY,CAACjV,SAAb,CAAuBmO,OAAvB,GAAiC,YAAY;AACzCtN,MAAAA,MAAM,CAACb,SAAP,CAAiBmO,OAAjB,CAAyBzN,IAAzB,CAA8B,IAA9B;;AACA,UAAI,KAAKia,MAAT,EAAiB;AACb,aAAKA,MAAL,CAAYxM,OAAZ;AACH;;AACD,WAAK0M,cAAL,CAAoB1M,OAApB;;AACA,UAAI,KAAK2M,aAAT,EAAwB;AACpB,aAAKA,aAAL,CAAmB3M,OAAnB;AACH;AACJ,KATD;;AAUA8G,IAAAA,YAAY,CAACjV,SAAb,CAAuByN,MAAvB,GAAgC,UAAU5F,KAAV,EAAiB;AAC7ChH,MAAAA,MAAM,CAACb,SAAP,CAAiByN,MAAjB,CAAwB/M,IAAxB,CAA6B,IAA7B,EAAmCmH,KAAnC,EAD6C,CACF;;;AAC3C,UAAI8F,WAAW,GAAG,KAAK9F,KAAL,CAAW8F,WAA7B;AACA,UAAI6L,QAAQ,GAAG,KAAKkB,aAAL,CAAmB/M,WAAnB,EAAgC,KAAKwH,oBAArC,CAAf;AACA,UAAI6F,UAAU,GAAG,KAAK3F,QAAL,CAAc2F,UAAd,CAAyBnT,KAAzB,CAAjB;;AACA,UAAI,KAAK8S,MAAT,EAAiB;AACb,aAAKA,MAAL,CAAYjB,YAAZ,CAAyB;AACrB/L,UAAAA,WAAW,EAAEA,WADQ;AAErBsN,UAAAA,KAAK,EAAEzB,QAAQ,CAACW,WAFK;AAGrBe,UAAAA,oBAAoB,EAAE,IAHD;AAIrBhL,UAAAA,eAAe,EAAE,KAAKoF;AAJD,SAAzB;AAMH;;AACD,WAAKuF,cAAL,CAAoBnB,YAApB,CAAiCxZ,OAAQ,CAAC,EAAD,EAAK8a,UAAU,CAAC,OAAD,CAAf,EAA0B;AAAErN,QAAAA,WAAW,EAAEA,WAAf;AAC/D6L,QAAAA,QAAQ,EAAEA;AADqD,OAA1B,CAAzC;;AAEA,UAAI,KAAKsB,aAAT,EAAwB;AACpB,aAAKA,aAAL,CAAmBpB,YAAnB,CAAgCxZ,OAAQ,CAAC,EAAD,EAAK8a,UAAU,CAAC,QAAD,CAAf,EAA2B;AAAErN,UAAAA,WAAW,EAAEA,WAAf;AAC/D6L,UAAAA,QAAQ,EAAEA,QADqD;AAC3C2B,UAAAA,gBAAgB,EAAE,KAAKA,gBADoB;AACFC,UAAAA,OAAO,EAAE;AADP,SAA3B,CAAxC;AAEH;AACJ,KAnBD;;AAoBAnG,IAAAA,YAAY,CAACjV,SAAb,CAAuBgR,kBAAvB,GAA4C,UAAUC,IAAV,EAAgB;AACxD,WAAK4J,cAAL,CAAoB7J,kBAApB,CAAuCC,IAAvC;AACH,KAFD;;AAGA,WAAOgE,YAAP;AACH,GAhDmC,CAgDlCA,YAhDkC,CAApC;;AAiDA,WAASyF,aAAT,CAAuB/M,WAAvB,EAAoCwH,oBAApC,EAA0D;AACtD,QAAIkG,SAAS,GAAG,IAAInc,IAAI,CAACoc,SAAT,CAAmB3N,WAAW,CAACwB,WAA/B,EAA4CgG,oBAA5C,CAAhB;AACA,WAAO,IAAIjW,IAAI,CAACqc,QAAT,CAAkBF,SAAlB,EAA6B,KAA7B,CAAP;AACH;;AAED,MAAIG,IAAI,GAAGtc,IAAI,CAACuc,YAAL,CAAkB;AACzBC,IAAAA,WAAW,EAAE,cADY;AAEzBC,IAAAA,KAAK,EAAE;AACH7a,MAAAA,QAAQ,EAAE;AACN8a,QAAAA,KAAK,EAAEpB,cADD;AAENqB,QAAAA,UAAU,EAAE,IAFN;AAGNjP,QAAAA,YAAY,EAAE,UAHR;AAINhF,QAAAA,gBAAgB,EAAE,IAJZ,CAIiB;;AAJjB,OADP;AAOHkU,MAAAA,WAAW,EAAE;AACTnS,QAAAA,IAAI,EAAE,UADG;AAEToS,QAAAA,QAAQ,EAAE;AAAEC,UAAAA,IAAI,EAAE;AAAR;AAFD,OAPV;AAWHC,MAAAA,YAAY,EAAE;AACVtS,QAAAA,IAAI,EAAE,UADI;AAEVoS,QAAAA,QAAQ,EAAE;AAAEG,UAAAA,KAAK,EAAE;AAAT;AAFA;AAXX;AAFkB,GAAlB,CAAX;AAoBAzd,EAAAA,OAAO,CAACwW,YAAR,GAAuBuF,cAAvB;AACA/b,EAAAA,OAAO,CAAC0d,oBAAR,GAA+BlH,YAA/B;AACAxW,EAAAA,OAAO,CAACic,aAAR,GAAwBA,aAAxB;AACAjc,EAAAA,OAAO,CAACwa,cAAR,GAAyBA,cAAzB;AACAxa,EAAAA,OAAO,CAAC2a,cAAR,GAAyBA,cAAzB;AACA3a,EAAAA,OAAO,CAAC2d,OAAR,GAAkBZ,IAAlB;AACA/c,EAAAA,OAAO,CAAC4L,QAAR,GAAmBA,QAAnB;AAEA9K,EAAAA,MAAM,CAAC8c,cAAP,CAAsB5d,OAAtB,EAA+B,YAA/B,EAA6C;AAAE6d,IAAAA,KAAK,EAAE;AAAT,GAA7C;AAEH,CArzCA,CAAD","sourcesContent":["/*!\n@fullcalendar/timegrid v4.0.1\nDocs & License: https://fullcalendar.io/\n(c) 2019 Adam Shaw\n*/\n(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@fullcalendar/core'), require('@fullcalendar/daygrid')) :\n    typeof define === 'function' && define.amd ? define(['exports', '@fullcalendar/core', '@fullcalendar/daygrid'], factory) :\n    (global = global || self, factory(global.FullCalendarTimeGrid = {}, global.FullCalendar, global.FullCalendarDayGrid));\n}(this, function (exports, core, daygrid) { 'use strict';\n\n    /*! *****************************************************************************\r\n    Copyright (c) Microsoft Corporation. All rights reserved.\r\n    Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\n    this file except in compliance with the License. You may obtain a copy of the\r\n    License at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\n    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\n    MERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\n    See the Apache Version 2.0 License for specific language governing permissions\r\n    and limitations under the License.\r\n    ***************************************************************************** */\r\n    /* global Reflect, Promise */\r\n\r\n    var extendStatics = function(d, b) {\r\n        extendStatics = Object.setPrototypeOf ||\r\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n        return extendStatics(d, b);\r\n    };\r\n\r\n    function __extends(d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    }\r\n\r\n    var __assign = function() {\r\n        __assign = Object.assign || function __assign(t) {\r\n            for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n                s = arguments[i];\r\n                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n            }\r\n            return t;\r\n        };\r\n        return __assign.apply(this, arguments);\r\n    };\n\n    /*\n    Only handles foreground segs.\n    Does not own rendering. Use for low-level util methods by TimeGrid.\n    */\n    var TimeGridEventRenderer = /** @class */ (function (_super) {\n        __extends(TimeGridEventRenderer, _super);\n        function TimeGridEventRenderer(timeGrid) {\n            var _this = _super.call(this, timeGrid.context) || this;\n            _this.timeGrid = timeGrid;\n            _this.fullTimeFormat = core.createFormatter({\n                hour: 'numeric',\n                minute: '2-digit',\n                separator: _this.context.options.defaultRangeSeparator\n            });\n            return _this;\n        }\n        // Given an array of foreground segments, render a DOM element for each, computes position,\n        // and attaches to the column inner-container elements.\n        TimeGridEventRenderer.prototype.attachSegs = function (segs, mirrorInfo) {\n            var segsByCol = this.timeGrid.groupSegsByCol(segs);\n            // order the segs within each column\n            // TODO: have groupSegsByCol do this?\n            for (var col = 0; col < segsByCol.length; col++) {\n                segsByCol[col] = this.sortEventSegs(segsByCol[col]);\n            }\n            this.segsByCol = segsByCol;\n            this.timeGrid.attachSegsByCol(segsByCol, this.timeGrid.fgContainerEls);\n        };\n        TimeGridEventRenderer.prototype.detachSegs = function (segs) {\n            segs.forEach(function (seg) {\n                core.removeElement(seg.el);\n            });\n            this.segsByCol = null;\n        };\n        TimeGridEventRenderer.prototype.computeSegSizes = function (allSegs) {\n            var _a = this, timeGrid = _a.timeGrid, segsByCol = _a.segsByCol;\n            var colCnt = timeGrid.colCnt;\n            timeGrid.computeSegVerticals(allSegs); // horizontals relies on this\n            if (segsByCol) {\n                for (var col = 0; col < colCnt; col++) {\n                    this.computeSegHorizontals(segsByCol[col]); // compute horizontal coordinates, z-index's, and reorder the array\n                }\n            }\n        };\n        TimeGridEventRenderer.prototype.assignSegSizes = function (allSegs) {\n            var _a = this, timeGrid = _a.timeGrid, segsByCol = _a.segsByCol;\n            var colCnt = timeGrid.colCnt;\n            timeGrid.assignSegVerticals(allSegs); // horizontals relies on this\n            if (segsByCol) {\n                for (var col = 0; col < colCnt; col++) {\n                    this.assignSegCss(segsByCol[col]);\n                }\n            }\n        };\n        // Computes a default event time formatting string if `eventTimeFormat` is not explicitly defined\n        TimeGridEventRenderer.prototype.computeEventTimeFormat = function () {\n            return {\n                hour: 'numeric',\n                minute: '2-digit',\n                meridiem: false\n            };\n        };\n        // Computes a default `displayEventEnd` value if one is not expliclty defined\n        TimeGridEventRenderer.prototype.computeDisplayEventEnd = function () {\n            return true;\n        };\n        // Renders the HTML for a single event segment's default rendering\n        TimeGridEventRenderer.prototype.renderSegHtml = function (seg, mirrorInfo) {\n            var eventRange = seg.eventRange;\n            var eventDef = eventRange.def;\n            var eventUi = eventRange.ui;\n            var allDay = eventDef.allDay;\n            var isDraggable = eventUi.startEditable;\n            var isResizableFromStart = seg.isStart && eventUi.durationEditable && this.context.options.eventResizableFromStart;\n            var isResizableFromEnd = seg.isEnd && eventUi.durationEditable;\n            var classes = this.getSegClasses(seg, isDraggable, isResizableFromStart || isResizableFromEnd, mirrorInfo);\n            var skinCss = core.cssToStr(this.getSkinCss(eventUi));\n            var timeText;\n            var fullTimeText; // more verbose time text. for the print stylesheet\n            var startTimeText; // just the start time text\n            classes.unshift('fc-time-grid-event');\n            // if the event appears to span more than one day...\n            if (core.isMultiDayRange(eventRange.range)) {\n                // Don't display time text on segments that run entirely through a day.\n                // That would appear as midnight-midnight and would look dumb.\n                // Otherwise, display the time text for the *segment's* times (like 6pm-midnight or midnight-10am)\n                if (seg.isStart || seg.isEnd) {\n                    var unzonedStart = seg.start;\n                    var unzonedEnd = seg.end;\n                    timeText = this._getTimeText(unzonedStart, unzonedEnd, allDay); // TODO: give the timezones\n                    fullTimeText = this._getTimeText(unzonedStart, unzonedEnd, allDay, this.fullTimeFormat);\n                    startTimeText = this._getTimeText(unzonedStart, unzonedEnd, allDay, null, false); // displayEnd=false\n                }\n            }\n            else {\n                // Display the normal time text for the *event's* times\n                timeText = this.getTimeText(eventRange);\n                fullTimeText = this.getTimeText(eventRange, this.fullTimeFormat);\n                startTimeText = this.getTimeText(eventRange, null, false); // displayEnd=false\n            }\n            return '<a class=\"' + classes.join(' ') + '\"' +\n                (eventDef.url ?\n                    ' href=\"' + core.htmlEscape(eventDef.url) + '\"' :\n                    '') +\n                (skinCss ?\n                    ' style=\"' + skinCss + '\"' :\n                    '') +\n                '>' +\n                '<div class=\"fc-content\">' +\n                (timeText ?\n                    '<div class=\"fc-time\"' +\n                        ' data-start=\"' + core.htmlEscape(startTimeText) + '\"' +\n                        ' data-full=\"' + core.htmlEscape(fullTimeText) + '\"' +\n                        '>' +\n                        '<span>' + core.htmlEscape(timeText) + '</span>' +\n                        '</div>' :\n                    '') +\n                (eventDef.title ?\n                    '<div class=\"fc-title\">' +\n                        core.htmlEscape(eventDef.title) +\n                        '</div>' :\n                    '') +\n                '</div>' +\n                /* TODO: write CSS for this\n                (isResizableFromStart ?\n                  '<div class=\"fc-resizer fc-start-resizer\"></div>' :\n                  ''\n                  ) +\n                */\n                (isResizableFromEnd ?\n                    '<div class=\"fc-resizer fc-end-resizer\"></div>' :\n                    '') +\n                '</a>';\n        };\n        // Given an array of segments that are all in the same column, sets the backwardCoord and forwardCoord on each.\n        // Assumed the segs are already ordered.\n        // NOTE: Also reorders the given array by date!\n        TimeGridEventRenderer.prototype.computeSegHorizontals = function (segs) {\n            var levels;\n            var level0;\n            var i;\n            levels = buildSlotSegLevels(segs);\n            computeForwardSlotSegs(levels);\n            if ((level0 = levels[0])) {\n                for (i = 0; i < level0.length; i++) {\n                    computeSlotSegPressures(level0[i]);\n                }\n                for (i = 0; i < level0.length; i++) {\n                    this.computeSegForwardBack(level0[i], 0, 0);\n                }\n            }\n        };\n        // Calculate seg.forwardCoord and seg.backwardCoord for the segment, where both values range\n        // from 0 to 1. If the calendar is left-to-right, the seg.backwardCoord maps to \"left\" and\n        // seg.forwardCoord maps to \"right\" (via percentage). Vice-versa if the calendar is right-to-left.\n        //\n        // The segment might be part of a \"series\", which means consecutive segments with the same pressure\n        // who's width is unknown until an edge has been hit. `seriesBackwardPressure` is the number of\n        // segments behind this one in the current series, and `seriesBackwardCoord` is the starting\n        // coordinate of the first segment in the series.\n        TimeGridEventRenderer.prototype.computeSegForwardBack = function (seg, seriesBackwardPressure, seriesBackwardCoord) {\n            var forwardSegs = seg.forwardSegs;\n            var i;\n            if (seg.forwardCoord === undefined) { // not already computed\n                if (!forwardSegs.length) {\n                    // if there are no forward segments, this segment should butt up against the edge\n                    seg.forwardCoord = 1;\n                }\n                else {\n                    // sort highest pressure first\n                    this.sortForwardSegs(forwardSegs);\n                    // this segment's forwardCoord will be calculated from the backwardCoord of the\n                    // highest-pressure forward segment.\n                    this.computeSegForwardBack(forwardSegs[0], seriesBackwardPressure + 1, seriesBackwardCoord);\n                    seg.forwardCoord = forwardSegs[0].backwardCoord;\n                }\n                // calculate the backwardCoord from the forwardCoord. consider the series\n                seg.backwardCoord = seg.forwardCoord -\n                    (seg.forwardCoord - seriesBackwardCoord) / // available width for series\n                        (seriesBackwardPressure + 1); // # of segments in the series\n                // use this segment's coordinates to computed the coordinates of the less-pressurized\n                // forward segments\n                for (i = 0; i < forwardSegs.length; i++) {\n                    this.computeSegForwardBack(forwardSegs[i], 0, seg.forwardCoord);\n                }\n            }\n        };\n        TimeGridEventRenderer.prototype.sortForwardSegs = function (forwardSegs) {\n            var objs = forwardSegs.map(buildTimeGridSegCompareObj);\n            var specs = [\n                // put higher-pressure first\n                { field: 'forwardPressure', order: -1 },\n                // put segments that are closer to initial edge first (and favor ones with no coords yet)\n                { field: 'backwardCoord', order: 1 }\n            ].concat(this.context.view.eventOrderSpecs);\n            objs.sort(function (obj0, obj1) {\n                return core.compareByFieldSpecs(obj0, obj1, specs);\n            });\n            return objs.map(function (c) {\n                return c._seg;\n            });\n        };\n        // Given foreground event segments that have already had their position coordinates computed,\n        // assigns position-related CSS values to their elements.\n        TimeGridEventRenderer.prototype.assignSegCss = function (segs) {\n            for (var _i = 0, segs_1 = segs; _i < segs_1.length; _i++) {\n                var seg = segs_1[_i];\n                core.applyStyle(seg.el, this.generateSegCss(seg));\n                if (seg.level > 0) {\n                    seg.el.classList.add('fc-time-grid-event-inset');\n                }\n                // if the event is short that the title will be cut off,\n                // attach a className that condenses the title into the time area.\n                if (seg.eventRange.def.title && seg.bottom - seg.top < 30) {\n                    seg.el.classList.add('fc-short'); // TODO: \"condensed\" is a better name\n                }\n            }\n        };\n        // Generates an object with CSS properties/values that should be applied to an event segment element.\n        // Contains important positioning-related properties that should be applied to any event element, customized or not.\n        TimeGridEventRenderer.prototype.generateSegCss = function (seg) {\n            var shouldOverlap = this.context.options.slotEventOverlap;\n            var backwardCoord = seg.backwardCoord; // the left side if LTR. the right side if RTL. floating-point\n            var forwardCoord = seg.forwardCoord; // the right side if LTR. the left side if RTL. floating-point\n            var props = this.timeGrid.generateSegVerticalCss(seg); // get top/bottom first\n            var isRtl = this.timeGrid.isRtl;\n            var left; // amount of space from left edge, a fraction of the total width\n            var right; // amount of space from right edge, a fraction of the total width\n            if (shouldOverlap) {\n                // double the width, but don't go beyond the maximum forward coordinate (1.0)\n                forwardCoord = Math.min(1, backwardCoord + (forwardCoord - backwardCoord) * 2);\n            }\n            if (isRtl) {\n                left = 1 - forwardCoord;\n                right = backwardCoord;\n            }\n            else {\n                left = backwardCoord;\n                right = 1 - forwardCoord;\n            }\n            props.zIndex = seg.level + 1; // convert from 0-base to 1-based\n            props.left = left * 100 + '%';\n            props.right = right * 100 + '%';\n            if (shouldOverlap && seg.forwardPressure) {\n                // add padding to the edge so that forward stacked events don't cover the resizer's icon\n                props[isRtl ? 'marginLeft' : 'marginRight'] = 10 * 2; // 10 is a guesstimate of the icon's width\n            }\n            return props;\n        };\n        return TimeGridEventRenderer;\n    }(core.FgEventRenderer));\n    // Builds an array of segments \"levels\". The first level will be the leftmost tier of segments if the calendar is\n    // left-to-right, or the rightmost if the calendar is right-to-left. Assumes the segments are already ordered by date.\n    function buildSlotSegLevels(segs) {\n        var levels = [];\n        var i;\n        var seg;\n        var j;\n        for (i = 0; i < segs.length; i++) {\n            seg = segs[i];\n            // go through all the levels and stop on the first level where there are no collisions\n            for (j = 0; j < levels.length; j++) {\n                if (!computeSlotSegCollisions(seg, levels[j]).length) {\n                    break;\n                }\n            }\n            seg.level = j;\n            (levels[j] || (levels[j] = [])).push(seg);\n        }\n        return levels;\n    }\n    // For every segment, figure out the other segments that are in subsequent\n    // levels that also occupy the same vertical space. Accumulate in seg.forwardSegs\n    function computeForwardSlotSegs(levels) {\n        var i;\n        var level;\n        var j;\n        var seg;\n        var k;\n        for (i = 0; i < levels.length; i++) {\n            level = levels[i];\n            for (j = 0; j < level.length; j++) {\n                seg = level[j];\n                seg.forwardSegs = [];\n                for (k = i + 1; k < levels.length; k++) {\n                    computeSlotSegCollisions(seg, levels[k], seg.forwardSegs);\n                }\n            }\n        }\n    }\n    // Figure out which path forward (via seg.forwardSegs) results in the longest path until\n    // the furthest edge is reached. The number of segments in this path will be seg.forwardPressure\n    function computeSlotSegPressures(seg) {\n        var forwardSegs = seg.forwardSegs;\n        var forwardPressure = 0;\n        var i;\n        var forwardSeg;\n        if (seg.forwardPressure === undefined) { // not already computed\n            for (i = 0; i < forwardSegs.length; i++) {\n                forwardSeg = forwardSegs[i];\n                // figure out the child's maximum forward path\n                computeSlotSegPressures(forwardSeg);\n                // either use the existing maximum, or use the child's forward pressure\n                // plus one (for the forwardSeg itself)\n                forwardPressure = Math.max(forwardPressure, 1 + forwardSeg.forwardPressure);\n            }\n            seg.forwardPressure = forwardPressure;\n        }\n    }\n    // Find all the segments in `otherSegs` that vertically collide with `seg`.\n    // Append into an optionally-supplied `results` array and return.\n    function computeSlotSegCollisions(seg, otherSegs, results) {\n        if (results === void 0) { results = []; }\n        for (var i = 0; i < otherSegs.length; i++) {\n            if (isSlotSegCollision(seg, otherSegs[i])) {\n                results.push(otherSegs[i]);\n            }\n        }\n        return results;\n    }\n    // Do these segments occupy the same vertical space?\n    function isSlotSegCollision(seg1, seg2) {\n        return seg1.bottom > seg2.top && seg1.top < seg2.bottom;\n    }\n    function buildTimeGridSegCompareObj(seg) {\n        var obj = core.buildSegCompareObj(seg);\n        obj.forwardPressure = seg.forwardPressure;\n        obj.backwardCoord = seg.backwardCoord;\n        return obj;\n    }\n\n    var TimeGridMirrorRenderer = /** @class */ (function (_super) {\n        __extends(TimeGridMirrorRenderer, _super);\n        function TimeGridMirrorRenderer() {\n            return _super !== null && _super.apply(this, arguments) || this;\n        }\n        TimeGridMirrorRenderer.prototype.attachSegs = function (segs, mirrorInfo) {\n            this.segsByCol = this.timeGrid.groupSegsByCol(segs);\n            this.timeGrid.attachSegsByCol(this.segsByCol, this.timeGrid.mirrorContainerEls);\n            this.sourceSeg = mirrorInfo.sourceSeg;\n        };\n        TimeGridMirrorRenderer.prototype.generateSegCss = function (seg) {\n            var props = _super.prototype.generateSegCss.call(this, seg);\n            var sourceSeg = this.sourceSeg;\n            if (sourceSeg && sourceSeg.col === seg.col) {\n                var sourceSegProps = _super.prototype.generateSegCss.call(this, sourceSeg);\n                props.left = sourceSegProps.left;\n                props.right = sourceSegProps.right;\n                props.marginLeft = sourceSegProps.marginLeft;\n                props.marginRight = sourceSegProps.marginRight;\n            }\n            return props;\n        };\n        return TimeGridMirrorRenderer;\n    }(TimeGridEventRenderer));\n\n    var TimeGridFillRenderer = /** @class */ (function (_super) {\n        __extends(TimeGridFillRenderer, _super);\n        function TimeGridFillRenderer(timeGrid) {\n            var _this = _super.call(this, timeGrid.context) || this;\n            _this.timeGrid = timeGrid;\n            return _this;\n        }\n        TimeGridFillRenderer.prototype.attachSegs = function (type, segs) {\n            var timeGrid = this.timeGrid;\n            var containerEls;\n            // TODO: more efficient lookup\n            if (type === 'bgEvent') {\n                containerEls = timeGrid.bgContainerEls;\n            }\n            else if (type === 'businessHours') {\n                containerEls = timeGrid.businessContainerEls;\n            }\n            else if (type === 'highlight') {\n                containerEls = timeGrid.highlightContainerEls;\n            }\n            timeGrid.attachSegsByCol(timeGrid.groupSegsByCol(segs), containerEls);\n            return segs.map(function (seg) {\n                return seg.el;\n            });\n        };\n        TimeGridFillRenderer.prototype.computeSegSizes = function (segs) {\n            this.timeGrid.computeSegVerticals(segs);\n        };\n        TimeGridFillRenderer.prototype.assignSegSizes = function (segs) {\n            this.timeGrid.assignSegVerticals(segs);\n        };\n        return TimeGridFillRenderer;\n    }(core.FillRenderer));\n\n    /* A component that renders one or more columns of vertical time slots\n    ----------------------------------------------------------------------------------------------------------------------*/\n    // potential nice values for the slot-duration and interval-duration\n    // from largest to smallest\n    var AGENDA_STOCK_SUB_DURATIONS = [\n        { hours: 1 },\n        { minutes: 30 },\n        { minutes: 15 },\n        { seconds: 30 },\n        { seconds: 15 }\n    ];\n    var TimeGrid = /** @class */ (function (_super) {\n        __extends(TimeGrid, _super);\n        function TimeGrid(context, el, renderProps) {\n            var _this = _super.call(this, context, el) || this;\n            _this.isSlatSizesDirty = false;\n            _this.isColSizesDirty = false;\n            _this.renderSlats = core.memoizeRendering(_this._renderSlats);\n            var eventRenderer = _this.eventRenderer = new TimeGridEventRenderer(_this);\n            var fillRenderer = _this.fillRenderer = new TimeGridFillRenderer(_this);\n            _this.mirrorRenderer = new TimeGridMirrorRenderer(_this);\n            var renderColumns = _this.renderColumns = core.memoizeRendering(_this._renderColumns, _this._unrenderColumns);\n            _this.renderBusinessHours = core.memoizeRendering(fillRenderer.renderSegs.bind(fillRenderer, 'businessHours'), fillRenderer.unrender.bind(fillRenderer, 'businessHours'), [renderColumns]);\n            _this.renderDateSelection = core.memoizeRendering(_this._renderDateSelection, _this._unrenderDateSelection, [renderColumns]);\n            _this.renderFgEvents = core.memoizeRendering(eventRenderer.renderSegs.bind(eventRenderer), eventRenderer.unrender.bind(eventRenderer), [renderColumns]);\n            _this.renderBgEvents = core.memoizeRendering(fillRenderer.renderSegs.bind(fillRenderer, 'bgEvent'), fillRenderer.unrender.bind(fillRenderer, 'bgEvent'), [renderColumns]);\n            _this.renderEventSelection = core.memoizeRendering(eventRenderer.selectByInstanceId.bind(eventRenderer), eventRenderer.unselectByInstanceId.bind(eventRenderer), [_this.renderFgEvents]);\n            _this.renderEventDrag = core.memoizeRendering(_this._renderEventDrag, _this._unrenderEventDrag, [renderColumns]);\n            _this.renderEventResize = core.memoizeRendering(_this._renderEventResize, _this._unrenderEventResize, [renderColumns]);\n            _this.processOptions();\n            el.innerHTML =\n                '<div class=\"fc-bg\"></div>' +\n                    '<div class=\"fc-slats\"></div>' +\n                    '<hr class=\"fc-divider ' + _this.theme.getClass('widgetHeader') + '\" style=\"display:none\" />';\n            _this.rootBgContainerEl = el.querySelector('.fc-bg');\n            _this.slatContainerEl = el.querySelector('.fc-slats');\n            _this.bottomRuleEl = el.querySelector('.fc-divider');\n            _this.renderProps = renderProps;\n            return _this;\n        }\n        /* Options\n        ------------------------------------------------------------------------------------------------------------------*/\n        // Parses various options into properties of this object\n        TimeGrid.prototype.processOptions = function () {\n            var slotDuration = this.opt('slotDuration');\n            var snapDuration = this.opt('snapDuration');\n            var snapsPerSlot;\n            var input;\n            slotDuration = core.createDuration(slotDuration);\n            snapDuration = snapDuration ? core.createDuration(snapDuration) : slotDuration;\n            snapsPerSlot = core.wholeDivideDurations(slotDuration, snapDuration);\n            if (snapsPerSlot === null) {\n                snapDuration = slotDuration;\n                snapsPerSlot = 1;\n                // TODO: say warning?\n            }\n            this.slotDuration = slotDuration;\n            this.snapDuration = snapDuration;\n            this.snapsPerSlot = snapsPerSlot;\n            // might be an array value (for TimelineView).\n            // if so, getting the most granular entry (the last one probably).\n            input = this.opt('slotLabelFormat');\n            if (Array.isArray(input)) {\n                input = input[input.length - 1];\n            }\n            this.labelFormat = core.createFormatter(input || {\n                hour: 'numeric',\n                minute: '2-digit',\n                omitZeroMinute: true,\n                meridiem: 'short'\n            });\n            input = this.opt('slotLabelInterval');\n            this.labelInterval = input ?\n                core.createDuration(input) :\n                this.computeLabelInterval(slotDuration);\n        };\n        // Computes an automatic value for slotLabelInterval\n        TimeGrid.prototype.computeLabelInterval = function (slotDuration) {\n            var i;\n            var labelInterval;\n            var slotsPerLabel;\n            // find the smallest stock label interval that results in more than one slots-per-label\n            for (i = AGENDA_STOCK_SUB_DURATIONS.length - 1; i >= 0; i--) {\n                labelInterval = core.createDuration(AGENDA_STOCK_SUB_DURATIONS[i]);\n                slotsPerLabel = core.wholeDivideDurations(labelInterval, slotDuration);\n                if (slotsPerLabel !== null && slotsPerLabel > 1) {\n                    return labelInterval;\n                }\n            }\n            return slotDuration; // fall back\n        };\n        /* Rendering\n        ------------------------------------------------------------------------------------------------------------------*/\n        TimeGrid.prototype.render = function (props) {\n            var cells = props.cells;\n            this.colCnt = cells.length;\n            this.renderSlats(props.dateProfile);\n            this.renderColumns(props.cells, props.dateProfile);\n            this.renderBusinessHours(props.businessHourSegs);\n            this.renderDateSelection(props.dateSelectionSegs);\n            this.renderFgEvents(props.fgEventSegs);\n            this.renderBgEvents(props.bgEventSegs);\n            this.renderEventSelection(props.eventSelection);\n            this.renderEventDrag(props.eventDrag);\n            this.renderEventResize(props.eventResize);\n        };\n        TimeGrid.prototype.destroy = function () {\n            _super.prototype.destroy.call(this);\n            // should unrender everything else too\n            this.renderSlats.unrender();\n            this.renderColumns.unrender();\n        };\n        TimeGrid.prototype.updateSize = function (isResize) {\n            var _a = this, fillRenderer = _a.fillRenderer, eventRenderer = _a.eventRenderer, mirrorRenderer = _a.mirrorRenderer;\n            if (isResize || this.isSlatSizesDirty) {\n                this.buildSlatPositions();\n                this.isSlatSizesDirty = false;\n            }\n            if (isResize || this.isColSizesDirty) {\n                this.buildColPositions();\n                this.isColSizesDirty = false;\n            }\n            fillRenderer.computeSizes(isResize);\n            eventRenderer.computeSizes(isResize);\n            mirrorRenderer.computeSizes(isResize);\n            fillRenderer.assignSizes(isResize);\n            eventRenderer.assignSizes(isResize);\n            mirrorRenderer.assignSizes(isResize);\n        };\n        TimeGrid.prototype._renderSlats = function (dateProfile) {\n            var theme = this.theme;\n            this.slatContainerEl.innerHTML =\n                '<table class=\"' + theme.getClass('tableGrid') + '\">' +\n                    this.renderSlatRowHtml(dateProfile) +\n                    '</table>';\n            this.slatEls = core.findElements(this.slatContainerEl, 'tr');\n            this.slatPositions = new core.PositionCache(this.el, this.slatEls, false, true // vertical\n            );\n            this.isSlatSizesDirty = true;\n        };\n        // Generates the HTML for the horizontal \"slats\" that run width-wise. Has a time axis on a side. Depends on RTL.\n        TimeGrid.prototype.renderSlatRowHtml = function (dateProfile) {\n            var _a = this, dateEnv = _a.dateEnv, theme = _a.theme, isRtl = _a.isRtl;\n            var html = '';\n            var dayStart = core.startOfDay(dateProfile.renderRange.start);\n            var slotTime = dateProfile.minTime;\n            var slotIterator = core.createDuration(0);\n            var slotDate; // will be on the view's first day, but we only care about its time\n            var isLabeled;\n            var axisHtml;\n            // Calculate the time for each slot\n            while (core.asRoughMs(slotTime) < core.asRoughMs(dateProfile.maxTime)) {\n                slotDate = dateEnv.add(dayStart, slotTime);\n                isLabeled = core.wholeDivideDurations(slotIterator, this.labelInterval) !== null;\n                axisHtml =\n                    '<td class=\"fc-axis fc-time ' + theme.getClass('widgetContent') + '\">' +\n                        (isLabeled ?\n                            '<span>' + // for matchCellWidths\n                                core.htmlEscape(dateEnv.format(slotDate, this.labelFormat)) +\n                                '</span>' :\n                            '') +\n                        '</td>';\n                html +=\n                    '<tr data-time=\"' + core.formatIsoTimeString(slotDate) + '\"' +\n                        (isLabeled ? '' : ' class=\"fc-minor\"') +\n                        '>' +\n                        (!isRtl ? axisHtml : '') +\n                        '<td class=\"' + theme.getClass('widgetContent') + '\"></td>' +\n                        (isRtl ? axisHtml : '') +\n                        '</tr>';\n                slotTime = core.addDurations(slotTime, this.slotDuration);\n                slotIterator = core.addDurations(slotIterator, this.slotDuration);\n            }\n            return html;\n        };\n        TimeGrid.prototype._renderColumns = function (cells, dateProfile) {\n            var theme = this.theme;\n            var bgRow = new daygrid.DayBgRow(this.context);\n            this.rootBgContainerEl.innerHTML =\n                '<table class=\"' + theme.getClass('tableGrid') + '\">' +\n                    bgRow.renderHtml({\n                        cells: cells,\n                        dateProfile: dateProfile,\n                        renderIntroHtml: this.renderProps.renderBgIntroHtml\n                    }) +\n                    '</table>';\n            this.colEls = core.findElements(this.el, '.fc-day, .fc-disabled-day');\n            if (this.isRtl) {\n                this.colEls.reverse();\n            }\n            this.colPositions = new core.PositionCache(this.el, this.colEls, true, // horizontal\n            false);\n            this.renderContentSkeleton();\n            this.isColSizesDirty = true;\n        };\n        TimeGrid.prototype._unrenderColumns = function () {\n            this.unrenderContentSkeleton();\n        };\n        /* Content Skeleton\n        ------------------------------------------------------------------------------------------------------------------*/\n        // Renders the DOM that the view's content will live in\n        TimeGrid.prototype.renderContentSkeleton = function () {\n            var parts = [];\n            var skeletonEl;\n            parts.push(this.renderProps.renderIntroHtml());\n            for (var i = 0; i < this.colCnt; i++) {\n                parts.push('<td>' +\n                    '<div class=\"fc-content-col\">' +\n                    '<div class=\"fc-event-container fc-mirror-container\"></div>' +\n                    '<div class=\"fc-event-container\"></div>' +\n                    '<div class=\"fc-highlight-container\"></div>' +\n                    '<div class=\"fc-bgevent-container\"></div>' +\n                    '<div class=\"fc-business-container\"></div>' +\n                    '</div>' +\n                    '</td>');\n            }\n            if (this.isRtl) {\n                parts.reverse();\n            }\n            skeletonEl = this.contentSkeletonEl = core.htmlToElement('<div class=\"fc-content-skeleton\">' +\n                '<table>' +\n                '<tr>' + parts.join('') + '</tr>' +\n                '</table>' +\n                '</div>');\n            this.colContainerEls = core.findElements(skeletonEl, '.fc-content-col');\n            this.mirrorContainerEls = core.findElements(skeletonEl, '.fc-mirror-container');\n            this.fgContainerEls = core.findElements(skeletonEl, '.fc-event-container:not(.fc-mirror-container)');\n            this.bgContainerEls = core.findElements(skeletonEl, '.fc-bgevent-container');\n            this.highlightContainerEls = core.findElements(skeletonEl, '.fc-highlight-container');\n            this.businessContainerEls = core.findElements(skeletonEl, '.fc-business-container');\n            if (this.isRtl) {\n                this.colContainerEls.reverse();\n                this.mirrorContainerEls.reverse();\n                this.fgContainerEls.reverse();\n                this.bgContainerEls.reverse();\n                this.highlightContainerEls.reverse();\n                this.businessContainerEls.reverse();\n            }\n            this.el.appendChild(skeletonEl);\n        };\n        TimeGrid.prototype.unrenderContentSkeleton = function () {\n            core.removeElement(this.contentSkeletonEl);\n        };\n        // Given a flat array of segments, return an array of sub-arrays, grouped by each segment's col\n        TimeGrid.prototype.groupSegsByCol = function (segs) {\n            var segsByCol = [];\n            var i;\n            for (i = 0; i < this.colCnt; i++) {\n                segsByCol.push([]);\n            }\n            for (i = 0; i < segs.length; i++) {\n                segsByCol[segs[i].col].push(segs[i]);\n            }\n            return segsByCol;\n        };\n        // Given segments grouped by column, insert the segments' elements into a parallel array of container\n        // elements, each living within a column.\n        TimeGrid.prototype.attachSegsByCol = function (segsByCol, containerEls) {\n            var col;\n            var segs;\n            var i;\n            for (col = 0; col < this.colCnt; col++) { // iterate each column grouping\n                segs = segsByCol[col];\n                for (i = 0; i < segs.length; i++) {\n                    containerEls[col].appendChild(segs[i].el);\n                }\n            }\n        };\n        /* Now Indicator\n        ------------------------------------------------------------------------------------------------------------------*/\n        TimeGrid.prototype.getNowIndicatorUnit = function () {\n            return 'minute'; // will refresh on the minute\n        };\n        TimeGrid.prototype.renderNowIndicator = function (segs, date) {\n            // HACK: if date columns not ready for some reason (scheduler)\n            if (!this.colContainerEls) {\n                return;\n            }\n            var top = this.computeDateTop(date);\n            var nodes = [];\n            var i;\n            // render lines within the columns\n            for (i = 0; i < segs.length; i++) {\n                var lineEl = core.createElement('div', { className: 'fc-now-indicator fc-now-indicator-line' });\n                lineEl.style.top = top + 'px';\n                this.colContainerEls[segs[i].col].appendChild(lineEl);\n                nodes.push(lineEl);\n            }\n            // render an arrow over the axis\n            if (segs.length > 0) { // is the current time in view?\n                var arrowEl = core.createElement('div', { className: 'fc-now-indicator fc-now-indicator-arrow' });\n                arrowEl.style.top = top + 'px';\n                this.contentSkeletonEl.appendChild(arrowEl);\n                nodes.push(arrowEl);\n            }\n            this.nowIndicatorEls = nodes;\n        };\n        TimeGrid.prototype.unrenderNowIndicator = function () {\n            if (this.nowIndicatorEls) {\n                this.nowIndicatorEls.forEach(core.removeElement);\n                this.nowIndicatorEls = null;\n            }\n        };\n        /* Coordinates\n        ------------------------------------------------------------------------------------------------------------------*/\n        TimeGrid.prototype.getTotalSlatHeight = function () {\n            return this.slatContainerEl.offsetHeight;\n        };\n        // Computes the top coordinate, relative to the bounds of the grid, of the given date.\n        // A `startOfDayDate` must be given for avoiding ambiguity over how to treat midnight.\n        TimeGrid.prototype.computeDateTop = function (when, startOfDayDate) {\n            if (!startOfDayDate) {\n                startOfDayDate = core.startOfDay(when);\n            }\n            return this.computeTimeTop(when.valueOf() - startOfDayDate.valueOf());\n        };\n        // Computes the top coordinate, relative to the bounds of the grid, of the given time (a Duration).\n        TimeGrid.prototype.computeTimeTop = function (timeMs) {\n            var len = this.slatEls.length;\n            var dateProfile = this.props.dateProfile;\n            var slatCoverage = (timeMs - core.asRoughMs(dateProfile.minTime)) / core.asRoughMs(this.slotDuration); // floating-point value of # of slots covered\n            var slatIndex;\n            var slatRemainder;\n            // compute a floating-point number for how many slats should be progressed through.\n            // from 0 to number of slats (inclusive)\n            // constrained because minTime/maxTime might be customized.\n            slatCoverage = Math.max(0, slatCoverage);\n            slatCoverage = Math.min(len, slatCoverage);\n            // an integer index of the furthest whole slat\n            // from 0 to number slats (*exclusive*, so len-1)\n            slatIndex = Math.floor(slatCoverage);\n            slatIndex = Math.min(slatIndex, len - 1);\n            // how much further through the slatIndex slat (from 0.0-1.0) must be covered in addition.\n            // could be 1.0 if slatCoverage is covering *all* the slots\n            slatRemainder = slatCoverage - slatIndex;\n            return this.slatPositions.tops[slatIndex] +\n                this.slatPositions.getHeight(slatIndex) * slatRemainder;\n        };\n        // For each segment in an array, computes and assigns its top and bottom properties\n        TimeGrid.prototype.computeSegVerticals = function (segs) {\n            var eventMinHeight = this.opt('timeGridEventMinHeight');\n            var i;\n            var seg;\n            var dayDate;\n            for (i = 0; i < segs.length; i++) {\n                seg = segs[i];\n                dayDate = this.props.cells[seg.col].date;\n                seg.top = this.computeDateTop(seg.start, dayDate);\n                seg.bottom = Math.max(seg.top + eventMinHeight, this.computeDateTop(seg.end, dayDate));\n            }\n        };\n        // Given segments that already have their top/bottom properties computed, applies those values to\n        // the segments' elements.\n        TimeGrid.prototype.assignSegVerticals = function (segs) {\n            var i;\n            var seg;\n            for (i = 0; i < segs.length; i++) {\n                seg = segs[i];\n                core.applyStyle(seg.el, this.generateSegVerticalCss(seg));\n            }\n        };\n        // Generates an object with CSS properties for the top/bottom coordinates of a segment element\n        TimeGrid.prototype.generateSegVerticalCss = function (seg) {\n            return {\n                top: seg.top,\n                bottom: -seg.bottom // flipped because needs to be space beyond bottom edge of event container\n            };\n        };\n        /* Sizing\n        ------------------------------------------------------------------------------------------------------------------*/\n        TimeGrid.prototype.buildColPositions = function () {\n            this.colPositions.build();\n        };\n        TimeGrid.prototype.buildSlatPositions = function () {\n            this.slatPositions.build();\n        };\n        /* Hit System\n        ------------------------------------------------------------------------------------------------------------------*/\n        TimeGrid.prototype.positionToHit = function (positionLeft, positionTop) {\n            var _a = this, dateEnv = _a.dateEnv, snapsPerSlot = _a.snapsPerSlot, slatPositions = _a.slatPositions, colPositions = _a.colPositions;\n            var colIndex = colPositions.leftToIndex(positionLeft);\n            var slatIndex = slatPositions.topToIndex(positionTop);\n            if (colIndex != null && slatIndex != null) {\n                var slatTop = slatPositions.tops[slatIndex];\n                var slatHeight = slatPositions.getHeight(slatIndex);\n                var partial = (positionTop - slatTop) / slatHeight; // floating point number between 0 and 1\n                var localSnapIndex = Math.floor(partial * snapsPerSlot); // the snap # relative to start of slat\n                var snapIndex = slatIndex * snapsPerSlot + localSnapIndex;\n                var dayDate = this.props.cells[colIndex].date;\n                var time = core.addDurations(this.props.dateProfile.minTime, core.multiplyDuration(this.snapDuration, snapIndex));\n                var start = dateEnv.add(dayDate, time);\n                var end = dateEnv.add(start, this.snapDuration);\n                return {\n                    col: colIndex,\n                    dateSpan: {\n                        range: { start: start, end: end },\n                        allDay: false\n                    },\n                    dayEl: this.colEls[colIndex],\n                    relativeRect: {\n                        left: colPositions.lefts[colIndex],\n                        right: colPositions.rights[colIndex],\n                        top: slatTop,\n                        bottom: slatTop + slatHeight\n                    }\n                };\n            }\n        };\n        /* Event Drag Visualization\n        ------------------------------------------------------------------------------------------------------------------*/\n        TimeGrid.prototype._renderEventDrag = function (state) {\n            if (state) {\n                this.eventRenderer.hideByHash(state.affectedInstances);\n                if (state.isEvent) {\n                    this.mirrorRenderer.renderSegs(state.segs, { isDragging: true, sourceSeg: state.sourceSeg });\n                }\n                else {\n                    this.fillRenderer.renderSegs('highlight', state.segs);\n                }\n            }\n        };\n        TimeGrid.prototype._unrenderEventDrag = function (state) {\n            if (state) {\n                this.eventRenderer.showByHash(state.affectedInstances);\n                this.mirrorRenderer.unrender(state.segs, { isDragging: true, sourceSeg: state.sourceSeg });\n                this.fillRenderer.unrender('highlight');\n            }\n        };\n        /* Event Resize Visualization\n        ------------------------------------------------------------------------------------------------------------------*/\n        TimeGrid.prototype._renderEventResize = function (state) {\n            if (state) {\n                this.eventRenderer.hideByHash(state.affectedInstances);\n                this.mirrorRenderer.renderSegs(state.segs, { isResizing: true, sourceSeg: state.sourceSeg });\n            }\n        };\n        TimeGrid.prototype._unrenderEventResize = function (state) {\n            if (state) {\n                this.eventRenderer.showByHash(state.affectedInstances);\n                this.mirrorRenderer.unrender(state.segs, { isResizing: true, sourceSeg: state.sourceSeg });\n            }\n        };\n        /* Selection\n        ------------------------------------------------------------------------------------------------------------------*/\n        // Renders a visual indication of a selection. Overrides the default, which was to simply render a highlight.\n        TimeGrid.prototype._renderDateSelection = function (segs) {\n            if (segs) {\n                if (this.opt('selectMirror')) {\n                    this.mirrorRenderer.renderSegs(segs, { isSelecting: true });\n                }\n                else {\n                    this.fillRenderer.renderSegs('highlight', segs);\n                }\n            }\n        };\n        TimeGrid.prototype._unrenderDateSelection = function (segs) {\n            this.mirrorRenderer.unrender(segs, { isSelecting: true });\n            this.fillRenderer.unrender('highlight');\n        };\n        return TimeGrid;\n    }(core.DateComponent));\n\n    var AllDaySplitter = /** @class */ (function (_super) {\n        __extends(AllDaySplitter, _super);\n        function AllDaySplitter() {\n            return _super !== null && _super.apply(this, arguments) || this;\n        }\n        AllDaySplitter.prototype.getKeyInfo = function () {\n            return {\n                allDay: {},\n                timed: {}\n            };\n        };\n        AllDaySplitter.prototype.getKeysForDateSpan = function (dateSpan) {\n            if (dateSpan.allDay) {\n                return ['allDay'];\n            }\n            else {\n                return ['timed'];\n            }\n        };\n        AllDaySplitter.prototype.getKeysForEventDef = function (eventDef) {\n            if (!eventDef.allDay) {\n                return ['timed'];\n            }\n            else if (core.hasBgRendering(eventDef)) {\n                return ['timed', 'allDay'];\n            }\n            else {\n                return ['allDay'];\n            }\n        };\n        return AllDaySplitter;\n    }(core.Splitter));\n\n    var TIMEGRID_ALL_DAY_EVENT_LIMIT = 5;\n    var WEEK_HEADER_FORMAT = core.createFormatter({ week: 'short' });\n    /* An abstract class for all timegrid-related views. Displays one more columns with time slots running vertically.\n    ----------------------------------------------------------------------------------------------------------------------*/\n    // Is a manager for the TimeGrid subcomponent and possibly the DayGrid subcomponent (if allDaySlot is on).\n    // Responsible for managing width/height.\n    var TimeGridView = /** @class */ (function (_super) {\n        __extends(TimeGridView, _super);\n        function TimeGridView(context, viewSpec, dateProfileGenerator, parentEl) {\n            var _this = _super.call(this, context, viewSpec, dateProfileGenerator, parentEl) || this;\n            _this.splitter = new AllDaySplitter();\n            /* Header Render Methods\n            ------------------------------------------------------------------------------------------------------------------*/\n            // Generates the HTML that will go before the day-of week header cells\n            _this.renderHeadIntroHtml = function () {\n                var _a = _this, theme = _a.theme, dateEnv = _a.dateEnv;\n                var range = _this.props.dateProfile.renderRange;\n                var dayCnt = core.diffDays(range.start, range.end);\n                var weekText;\n                if (_this.opt('weekNumbers')) {\n                    weekText = dateEnv.format(range.start, WEEK_HEADER_FORMAT);\n                    return '' +\n                        '<th class=\"fc-axis fc-week-number ' + theme.getClass('widgetHeader') + '\" ' + _this.axisStyleAttr() + '>' +\n                        core.buildGotoAnchorHtml(// aside from link, important for matchCellWidths\n                        _this, { date: range.start, type: 'week', forceOff: dayCnt > 1 }, core.htmlEscape(weekText) // inner HTML\n                        ) +\n                        '</th>';\n                }\n                else {\n                    return '<th class=\"fc-axis ' + theme.getClass('widgetHeader') + '\" ' + _this.axisStyleAttr() + '></th>';\n                }\n            };\n            /* Time Grid Render Methods\n            ------------------------------------------------------------------------------------------------------------------*/\n            // Generates the HTML that goes before the bg of the TimeGrid slot area. Long vertical column.\n            _this.renderTimeGridBgIntroHtml = function () {\n                var theme = _this.theme;\n                return '<td class=\"fc-axis ' + theme.getClass('widgetContent') + '\" ' + _this.axisStyleAttr() + '></td>';\n            };\n            // Generates the HTML that goes before all other types of cells.\n            // Affects content-skeleton, mirror-skeleton, highlight-skeleton for both the time-grid and day-grid.\n            _this.renderTimeGridIntroHtml = function () {\n                return '<td class=\"fc-axis\" ' + _this.axisStyleAttr() + '></td>';\n            };\n            /* Day Grid Render Methods\n            ------------------------------------------------------------------------------------------------------------------*/\n            // Generates the HTML that goes before the all-day cells\n            _this.renderDayGridBgIntroHtml = function () {\n                var theme = _this.theme;\n                return '' +\n                    '<td class=\"fc-axis ' + theme.getClass('widgetContent') + '\" ' + _this.axisStyleAttr() + '>' +\n                    '<span>' + // needed for matchCellWidths\n                    core.getAllDayHtml(_this) +\n                    '</span>' +\n                    '</td>';\n            };\n            // Generates the HTML that goes before all other types of cells.\n            // Affects content-skeleton, mirror-skeleton, highlight-skeleton for both the time-grid and day-grid.\n            _this.renderDayGridIntroHtml = function () {\n                return '<td class=\"fc-axis\" ' + _this.axisStyleAttr() + '></td>';\n            };\n            _this.el.classList.add('fc-timeGrid-view');\n            _this.el.innerHTML = _this.renderSkeletonHtml();\n            _this.scroller = new core.ScrollComponent('hidden', // overflow x\n            'auto' // overflow y\n            );\n            var timeGridWrapEl = _this.scroller.el;\n            _this.el.querySelector('.fc-body > tr > td').appendChild(timeGridWrapEl);\n            timeGridWrapEl.classList.add('fc-time-grid-container');\n            var timeGridEl = core.createElement('div', { className: 'fc-time-grid' });\n            timeGridWrapEl.appendChild(timeGridEl);\n            _this.timeGrid = new TimeGrid(_this.context, timeGridEl, {\n                renderBgIntroHtml: _this.renderTimeGridBgIntroHtml,\n                renderIntroHtml: _this.renderTimeGridIntroHtml\n            });\n            if (_this.opt('allDaySlot')) { // should we display the \"all-day\" area?\n                _this.dayGrid = new daygrid.DayGrid(// the all-day subcomponent of this view\n                _this.context, _this.el.querySelector('.fc-day-grid'), {\n                    renderNumberIntroHtml: _this.renderDayGridIntroHtml,\n                    renderBgIntroHtml: _this.renderDayGridBgIntroHtml,\n                    renderIntroHtml: _this.renderDayGridIntroHtml,\n                    colWeekNumbersVisible: false,\n                    cellWeekNumbersVisible: false\n                });\n                // have the day-grid extend it's coordinate area over the <hr> dividing the two grids\n                _this.dayGrid.bottomCoordPadding = _this.el.querySelector('.fc-divider').offsetHeight;\n            }\n            return _this;\n        }\n        TimeGridView.prototype.destroy = function () {\n            _super.prototype.destroy.call(this);\n            this.timeGrid.destroy();\n            if (this.dayGrid) {\n                this.dayGrid.destroy();\n            }\n            this.scroller.destroy();\n        };\n        /* Rendering\n        ------------------------------------------------------------------------------------------------------------------*/\n        // Builds the HTML skeleton for the view.\n        // The day-grid and time-grid components will render inside containers defined by this HTML.\n        TimeGridView.prototype.renderSkeletonHtml = function () {\n            var theme = this.theme;\n            return '' +\n                '<table class=\"' + theme.getClass('tableGrid') + '\">' +\n                (this.opt('columnHeader') ?\n                    '<thead class=\"fc-head\">' +\n                        '<tr>' +\n                        '<td class=\"fc-head-container ' + theme.getClass('widgetHeader') + '\">&nbsp;</td>' +\n                        '</tr>' +\n                        '</thead>' :\n                    '') +\n                '<tbody class=\"fc-body\">' +\n                '<tr>' +\n                '<td class=\"' + theme.getClass('widgetContent') + '\">' +\n                (this.opt('allDaySlot') ?\n                    '<div class=\"fc-day-grid\"></div>' +\n                        '<hr class=\"fc-divider ' + theme.getClass('widgetHeader') + '\" />' :\n                    '') +\n                '</td>' +\n                '</tr>' +\n                '</tbody>' +\n                '</table>';\n        };\n        /* Now Indicator\n        ------------------------------------------------------------------------------------------------------------------*/\n        TimeGridView.prototype.getNowIndicatorUnit = function () {\n            return this.timeGrid.getNowIndicatorUnit();\n        };\n        // subclasses should implement\n        // renderNowIndicator(date: DateMarker) {\n        // }\n        TimeGridView.prototype.unrenderNowIndicator = function () {\n            this.timeGrid.unrenderNowIndicator();\n        };\n        /* Dimensions\n        ------------------------------------------------------------------------------------------------------------------*/\n        TimeGridView.prototype.updateSize = function (isResize, viewHeight, isAuto) {\n            _super.prototype.updateSize.call(this, isResize, viewHeight, isAuto); // will call updateBaseSize. important that executes first\n            this.timeGrid.updateSize(isResize);\n            if (this.dayGrid) {\n                this.dayGrid.updateSize(isResize);\n            }\n        };\n        // Adjusts the vertical dimensions of the view to the specified values\n        TimeGridView.prototype.updateBaseSize = function (isResize, viewHeight, isAuto) {\n            var _this = this;\n            var eventLimit;\n            var scrollerHeight;\n            var scrollbarWidths;\n            // make all axis cells line up\n            this.axisWidth = core.matchCellWidths(core.findElements(this.el, '.fc-axis'));\n            // hack to give the view some height prior to timeGrid's columns being rendered\n            // TODO: separate setting height from scroller VS timeGrid.\n            if (!this.timeGrid.colEls) {\n                if (!isAuto) {\n                    scrollerHeight = this.computeScrollerHeight(viewHeight);\n                    this.scroller.setHeight(scrollerHeight);\n                }\n                return;\n            }\n            // set of fake row elements that must compensate when scroller has scrollbars\n            var noScrollRowEls = core.findElements(this.el, '.fc-row').filter(function (node) {\n                return !_this.scroller.el.contains(node);\n            });\n            // reset all dimensions back to the original state\n            this.timeGrid.bottomRuleEl.style.display = 'none'; // will be shown later if this <hr> is necessary\n            this.scroller.clear(); // sets height to 'auto' and clears overflow\n            noScrollRowEls.forEach(core.uncompensateScroll);\n            // limit number of events in the all-day area\n            if (this.dayGrid) {\n                this.dayGrid.removeSegPopover(); // kill the \"more\" popover if displayed\n                eventLimit = this.opt('eventLimit');\n                if (eventLimit && typeof eventLimit !== 'number') {\n                    eventLimit = TIMEGRID_ALL_DAY_EVENT_LIMIT; // make sure \"auto\" goes to a real number\n                }\n                if (eventLimit) {\n                    this.dayGrid.limitRows(eventLimit);\n                }\n            }\n            if (!isAuto) { // should we force dimensions of the scroll container?\n                scrollerHeight = this.computeScrollerHeight(viewHeight);\n                this.scroller.setHeight(scrollerHeight);\n                scrollbarWidths = this.scroller.getScrollbarWidths();\n                if (scrollbarWidths.left || scrollbarWidths.right) { // using scrollbars?\n                    // make the all-day and header rows lines up\n                    noScrollRowEls.forEach(function (rowEl) {\n                        core.compensateScroll(rowEl, scrollbarWidths);\n                    });\n                    // the scrollbar compensation might have changed text flow, which might affect height, so recalculate\n                    // and reapply the desired height to the scroller.\n                    scrollerHeight = this.computeScrollerHeight(viewHeight);\n                    this.scroller.setHeight(scrollerHeight);\n                }\n                // guarantees the same scrollbar widths\n                this.scroller.lockOverflow(scrollbarWidths);\n                // if there's any space below the slats, show the horizontal rule.\n                // this won't cause any new overflow, because lockOverflow already called.\n                if (this.timeGrid.getTotalSlatHeight() < scrollerHeight) {\n                    this.timeGrid.bottomRuleEl.style.display = '';\n                }\n            }\n        };\n        // given a desired total height of the view, returns what the height of the scroller should be\n        TimeGridView.prototype.computeScrollerHeight = function (viewHeight) {\n            return viewHeight -\n                core.subtractInnerElHeight(this.el, this.scroller.el); // everything that's NOT the scroller\n        };\n        /* Scroll\n        ------------------------------------------------------------------------------------------------------------------*/\n        // Computes the initial pre-configured scroll state prior to allowing the user to change it\n        TimeGridView.prototype.computeInitialDateScroll = function () {\n            var scrollTime = core.createDuration(this.opt('scrollTime'));\n            var top = this.timeGrid.computeTimeTop(scrollTime.milliseconds);\n            // zoom can give weird floating-point values. rather scroll a little bit further\n            top = Math.ceil(top);\n            if (top) {\n                top++; // to overcome top border that slots beyond the first have. looks better\n            }\n            return { top: top };\n        };\n        TimeGridView.prototype.queryDateScroll = function () {\n            return { top: this.scroller.getScrollTop() };\n        };\n        TimeGridView.prototype.applyDateScroll = function (scroll) {\n            if (scroll.top !== undefined) {\n                this.scroller.setScrollTop(scroll.top);\n            }\n        };\n        // Generates an HTML attribute string for setting the width of the axis, if it is known\n        TimeGridView.prototype.axisStyleAttr = function () {\n            if (this.axisWidth != null) {\n                return 'style=\"width:' + this.axisWidth + 'px\"';\n            }\n            return '';\n        };\n        return TimeGridView;\n    }(core.View));\n    TimeGridView.prototype.usesMinMaxTime = true; // indicates that minTime/maxTime affects rendering\n\n    var SimpleTimeGrid = /** @class */ (function (_super) {\n        __extends(SimpleTimeGrid, _super);\n        function SimpleTimeGrid(context, timeGrid) {\n            var _this = _super.call(this, context, timeGrid.el) || this;\n            _this.buildDayRanges = core.memoize(buildDayRanges);\n            _this.slicer = new TimeGridSlicer();\n            _this.timeGrid = timeGrid;\n            context.calendar.registerInteractiveComponent(_this, {\n                el: _this.timeGrid.el\n            });\n            return _this;\n        }\n        SimpleTimeGrid.prototype.destroy = function () {\n            _super.prototype.destroy.call(this);\n            this.calendar.unregisterInteractiveComponent(this);\n        };\n        SimpleTimeGrid.prototype.render = function (props) {\n            var dateProfile = props.dateProfile, dayTable = props.dayTable;\n            var dayRanges = this.dayRanges = this.buildDayRanges(dayTable, dateProfile, this.dateEnv);\n            this.timeGrid.receiveProps(__assign({}, this.slicer.sliceProps(props, dateProfile, null, this.timeGrid, dayRanges), { dateProfile: dateProfile, cells: dayTable.cells[0] }));\n        };\n        SimpleTimeGrid.prototype.renderNowIndicator = function (date) {\n            this.timeGrid.renderNowIndicator(this.slicer.sliceNowDate(date, this.timeGrid, this.dayRanges), date);\n        };\n        SimpleTimeGrid.prototype.queryHit = function (positionLeft, positionTop) {\n            var rawHit = this.timeGrid.positionToHit(positionLeft, positionTop);\n            if (rawHit) {\n                return {\n                    component: this.timeGrid,\n                    dateSpan: rawHit.dateSpan,\n                    dayEl: rawHit.dayEl,\n                    rect: {\n                        left: rawHit.relativeRect.left,\n                        right: rawHit.relativeRect.right,\n                        top: rawHit.relativeRect.top,\n                        bottom: rawHit.relativeRect.bottom\n                    },\n                    layer: 0\n                };\n            }\n        };\n        return SimpleTimeGrid;\n    }(core.DateComponent));\n    function buildDayRanges(dayTable, dateProfile, dateEnv) {\n        var ranges = [];\n        for (var _i = 0, _a = dayTable.headerDates; _i < _a.length; _i++) {\n            var date = _a[_i];\n            ranges.push({\n                start: dateEnv.add(date, dateProfile.minTime),\n                end: dateEnv.add(date, dateProfile.maxTime)\n            });\n        }\n        return ranges;\n    }\n    var TimeGridSlicer = /** @class */ (function (_super) {\n        __extends(TimeGridSlicer, _super);\n        function TimeGridSlicer() {\n            return _super !== null && _super.apply(this, arguments) || this;\n        }\n        TimeGridSlicer.prototype.sliceRange = function (range, dayRanges) {\n            var segs = [];\n            for (var col = 0; col < dayRanges.length; col++) {\n                var segRange = core.intersectRanges(range, dayRanges[col]);\n                if (segRange) {\n                    segs.push({\n                        start: segRange.start,\n                        end: segRange.end,\n                        isStart: segRange.start.valueOf() === range.start.valueOf(),\n                        isEnd: segRange.end.valueOf() === range.end.valueOf(),\n                        col: col\n                    });\n                }\n            }\n            return segs;\n        };\n        return TimeGridSlicer;\n    }(core.Slicer));\n\n    var TimeGridView$1 = /** @class */ (function (_super) {\n        __extends(TimeGridView, _super);\n        function TimeGridView(_context, viewSpec, dateProfileGenerator, parentEl) {\n            var _this = _super.call(this, _context, viewSpec, dateProfileGenerator, parentEl) || this;\n            _this.buildDayTable = core.memoize(buildDayTable);\n            if (_this.opt('columnHeader')) {\n                _this.header = new core.DayHeader(_this.context, _this.el.querySelector('.fc-head-container'));\n            }\n            _this.simpleTimeGrid = new SimpleTimeGrid(_this.context, _this.timeGrid);\n            if (_this.dayGrid) {\n                _this.simpleDayGrid = new daygrid.SimpleDayGrid(_this.context, _this.dayGrid);\n            }\n            return _this;\n        }\n        TimeGridView.prototype.destroy = function () {\n            _super.prototype.destroy.call(this);\n            if (this.header) {\n                this.header.destroy();\n            }\n            this.simpleTimeGrid.destroy();\n            if (this.simpleDayGrid) {\n                this.simpleDayGrid.destroy();\n            }\n        };\n        TimeGridView.prototype.render = function (props) {\n            _super.prototype.render.call(this, props); // for flags for updateSize\n            var dateProfile = this.props.dateProfile;\n            var dayTable = this.buildDayTable(dateProfile, this.dateProfileGenerator);\n            var splitProps = this.splitter.splitProps(props);\n            if (this.header) {\n                this.header.receiveProps({\n                    dateProfile: dateProfile,\n                    dates: dayTable.headerDates,\n                    datesRepDistinctDays: true,\n                    renderIntroHtml: this.renderHeadIntroHtml\n                });\n            }\n            this.simpleTimeGrid.receiveProps(__assign({}, splitProps['timed'], { dateProfile: dateProfile,\n                dayTable: dayTable }));\n            if (this.simpleDayGrid) {\n                this.simpleDayGrid.receiveProps(__assign({}, splitProps['allDay'], { dateProfile: dateProfile,\n                    dayTable: dayTable, nextDayThreshold: this.nextDayThreshold, isRigid: false }));\n            }\n        };\n        TimeGridView.prototype.renderNowIndicator = function (date) {\n            this.simpleTimeGrid.renderNowIndicator(date);\n        };\n        return TimeGridView;\n    }(TimeGridView));\n    function buildDayTable(dateProfile, dateProfileGenerator) {\n        var daySeries = new core.DaySeries(dateProfile.renderRange, dateProfileGenerator);\n        return new core.DayTable(daySeries, false);\n    }\n\n    var main = core.createPlugin({\n        defaultView: 'timeGridWeek',\n        views: {\n            timeGrid: {\n                class: TimeGridView$1,\n                allDaySlot: true,\n                slotDuration: '00:30:00',\n                slotEventOverlap: true // a bad name. confused with overlap/constraint system\n            },\n            timeGridDay: {\n                type: 'timeGrid',\n                duration: { days: 1 }\n            },\n            timeGridWeek: {\n                type: 'timeGrid',\n                duration: { weeks: 1 }\n            }\n        }\n    });\n\n    exports.TimeGridView = TimeGridView$1;\n    exports.AbstractTimeGridView = TimeGridView;\n    exports.buildDayTable = buildDayTable;\n    exports.buildDayRanges = buildDayRanges;\n    exports.TimeGridSlicer = TimeGridSlicer;\n    exports.default = main;\n    exports.TimeGrid = TimeGrid;\n\n    Object.defineProperty(exports, '__esModule', { value: true });\n\n}));\n"]},"metadata":{},"sourceType":"script"}