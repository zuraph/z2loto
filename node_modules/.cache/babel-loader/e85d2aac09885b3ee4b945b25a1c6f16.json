{"ast":null,"code":"import _classCallCheck from\"C:\\\\Users\\\\zura.ph\\\\WebstormProjects\\\\zz-regul\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";import _createClass from\"C:\\\\Users\\\\zura.ph\\\\WebstormProjects\\\\zz-regul\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";import _inherits from\"C:\\\\Users\\\\zura.ph\\\\WebstormProjects\\\\zz-regul\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";import _createSuper from\"C:\\\\Users\\\\zura.ph\\\\WebstormProjects\\\\zz-regul\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createSuper\";import React,{Component}from'react';import{Link}from'react-router-dom';import{TabView,TabPanel}from'../../components/tabview/TabView';import{CodeHighlight}from'../codehighlight/CodeHighlight';import{useLiveEditorTabs}from'../liveeditor/LiveEditor';export var OverlayPanelDoc=/*#__PURE__*/function(_Component){_inherits(OverlayPanelDoc,_Component);var _super=_createSuper(OverlayPanelDoc);function OverlayPanelDoc(props){var _this;_classCallCheck(this,OverlayPanelDoc);_this=_super.call(this,props);_this.sources={'class':{tabName:'Class Source',content:\"\\nimport React, { Component } from 'react';\\nimport { OverlayPanel } from 'primereact/overlaypanel';\\nimport { Button } from 'primereact/button';\\nimport { Toast } from 'primereact/toast';\\nimport { Column } from 'primereact/column';\\nimport { DataTable } from 'primereact/datatable';\\nimport ProductService from '../service/ProductService';\\nimport './OverlayPanelDemo.css';\\n\\nexport class OverlayPanelDemo extends Component {\\n\\n    constructor(props) {\\n        super(props);\\n\\n        this.state = {\\n            products: null,\\n            selectedProduct: null\\n        };\\n\\n        this.productService = new ProductService();\\n        this.onProductSelect = this.onProductSelect.bind(this);\\n        this.imageBody = this.imageBody.bind(this);\\n        this.priceBody = this.priceBody.bind(this);\\n    }\\n\\n    componentDidMount() {\\n        this.productService.getProductsSmall().then(data => this.setState({ products: data }));\\n    }\\n\\n    formatCurrency(value) {\\n        return value.toLocaleString('en-US', {style: 'currency', currency: 'USD'});\\n    }\\n\\n    onProductSelect(e) {\\n        this.setState({ selectedProduct: e.value }, () => {\\n            this.op.hide();\\n            this.toast.show({severity:'info', summary: 'Product Selected', detail: this.state.selectedProduct.name, life: 3000});\\n        });\\n    }\\n\\n    imageBody(rowData) {\\n        return <img src={`showcase/demo/images/product/${rowData.image}`} onError={(e) => e.target.src='https://www.primefaces.org/wp-content/uploads/2020/05/placeholder.png'} alt={rowData.image} className=\\\"product-image\\\" />\\n    }\\n\\n    priceBody(rowData) {\\n        return this.formatCurrency(rowData.price);\\n    }\\n\\n    render() {\\n        return (\\n            <div className=\\\"overlaypanel-demo\\\">\\n                <Toast ref={(el) => this.toast = el} />\\n\\n                <div className=\\\"card\\\">\\n                    <Button type=\\\"button\\\" icon=\\\"pi pi-search\\\" label={this.state.selectedProduct ? this.state.selectedProduct.name : 'Select a Product'} onClick={(e) => this.op.toggle(e)} aria-haspopup aria-controls=\\\"overlay_panel\\\" className=\\\"select-product-button\\\" />\\n\\n                    <OverlayPanel ref={(el) => this.op = el} showCloseIcon id=\\\"overlay_panel\\\" style={{width: '450px'}}>\\n                        <DataTable value={this.state.products} selectionMode=\\\"single\\\" paginator rows={5}\\n                            selection={this.state.selectedProduct} onSelectionChange={this.onProductSelect}>\\n                            <Column field=\\\"name\\\" header=\\\"Name\\\" sortable />\\n                            <Column header=\\\"Image\\\" body={this.imageBody} />\\n                            <Column field=\\\"price\\\" header=\\\"Price\\\" sortable body={this.priceBody} />\\n                        </DataTable>\\n                    </OverlayPanel>\\n                </div>\\n            </div>\\n        )\\n    }\\n}\\n                \"},'hooks':{tabName:'Hooks Source',content:\"\\nimport React, { useState, useEffect, useRef } from 'react';\\nimport { OverlayPanel } from 'primereact/overlaypanel';\\nimport { Button } from 'primereact/button';\\nimport { Toast } from 'primereact/toast';\\nimport { Column } from 'primereact/column';\\nimport { DataTable } from 'primereact/datatable';\\nimport ProductService from '../service/ProductService';\\nimport './OverlayPanelDemo.css';\\n\\nconst OverlayPanelDemo = () => {\\n    const [products, setProducts] = useState(null);\\n    const [selectedProduct, setSelectedProduct] = useState(null);\\n    const productService = new ProductService();\\n    const op = useRef(null);\\n    const toast = useRef(null);\\n    const isMounted = useRef(false);\\n\\n    useEffect(() => {\\n        if (isMounted.current) {\\n            op.current.hide();\\n            toast.current.show({severity:'info', summary: 'Product Selected', detail: selectedProduct.name, life: 3000});\\n        }\\n    }, [selectedProduct]); // eslint-disable-line react-hooks/exhaustive-deps\\n\\n    useEffect(() => {\\n        isMounted.current = true;\\n        productService.getProductsSmall().then(data => setProducts(data));\\n    }, []); // eslint-disable-line react-hooks/exhaustive-deps\\n\\n    const formatCurrency = (value) => {\\n        return value.toLocaleString('en-US', {style: 'currency', currency: 'USD'});\\n    }\\n\\n    const onProductSelect = (e) => {\\n        setSelectedProduct(e.value);\\n    }\\n\\n    const imageBody = (rowData) => {\\n        return <img src={`showcase/demo/images/product/${rowData.image}`} onError={(e) => e.target.src='https://www.primefaces.org/wp-content/uploads/2020/05/placeholder.png'} alt={rowData.image} className=\\\"product-image\\\" />\\n    }\\n\\n    const priceBody = (rowData) => {\\n        return formatCurrency(rowData.price);\\n    }\\n\\n    return (\\n        <div className=\\\"overlaypanel-demo\\\">\\n            <Toast ref={toast} />\\n\\n            <div className=\\\"card\\\">\\n                <Button type=\\\"button\\\" icon=\\\"pi pi-search\\\" label={selectedProduct ? selectedProduct.name : 'Select a Product'} onClick={(e) => op.current.toggle(e)} aria-haspopup aria-controls=\\\"overlay_panel\\\" className=\\\"select-product-button\\\" />\\n\\n                <OverlayPanel ref={op} showCloseIcon id=\\\"overlay_panel\\\" style={{width: '450px'}}>\\n                    <DataTable value={products} selectionMode=\\\"single\\\" paginator rows={5}\\n                        selection={selectedProduct} onSelectionChange={onProductSelect}>\\n                        <Column field=\\\"name\\\" header=\\\"Name\\\" sortable />\\n                        <Column header=\\\"Image\\\" body={imageBody} />\\n                        <Column field=\\\"price\\\" header=\\\"Price\\\" sortable body={priceBody} />\\n                    </DataTable>\\n                </OverlayPanel>\\n            </div>\\n        </div>\\n    )\\n}\\n                \"},'ts':{tabName:'TS Source',content:\"\\nimport React, { useState, useEffect, useRef } from 'react';\\nimport { OverlayPanel } from 'primereact/overlaypanel';\\nimport { Button } from 'primereact/button';\\nimport { Toast } from 'primereact/toast';\\nimport { Column } from 'primereact/column';\\nimport { DataTable } from 'primereact/datatable';\\nimport ProductService from '../service/ProductService';\\nimport './OverlayPanelDemo.css';\\n\\nconst OverlayPanelDemo = () => {\\n    const [products, setProducts] = useState(null);\\n    const [selectedProduct, setSelectedProduct] = useState(null);\\n    const productService = new ProductService();\\n    const op = useRef(null);\\n    const toast = useRef(null);\\n    const isMounted = useRef(false);\\n\\n    useEffect(() => {\\n        if (isMounted.current) {\\n            op.current.hide();\\n            toast.current.show({severity:'info', summary: 'Product Selected', detail: selectedProduct.name, life: 3000});\\n        }\\n    }, [selectedProduct]); // eslint-disable-line react-hooks/exhaustive-deps\\n\\n    useEffect(() => {\\n        isMounted.current = true;\\n        productService.getProductsSmall().then(data => setProducts(data));\\n    }, []); // eslint-disable-line react-hooks/exhaustive-deps\\n\\n    const formatCurrency = (value) => {\\n        return value.toLocaleString('en-US', {style: 'currency', currency: 'USD'});\\n    }\\n\\n    const onProductSelect = (e) => {\\n        setSelectedProduct(e.value);\\n    }\\n\\n    const imageBody = (rowData) => {\\n        return <img src={`showcase/demo/images/product/${rowData.image}`} onError={(e) => e.target.src='https://www.primefaces.org/wp-content/uploads/2020/05/placeholder.png'} alt={rowData.image} className=\\\"product-image\\\" />\\n    }\\n\\n    const priceBody = (rowData) => {\\n        return formatCurrency(rowData.price);\\n    }\\n\\n    return (\\n        <div className=\\\"overlaypanel-demo\\\">\\n            <Toast ref={toast} />\\n\\n            <div className=\\\"card\\\">\\n                <Button type=\\\"button\\\" icon=\\\"pi pi-search\\\" label={selectedProduct ? selectedProduct.name : 'Select a Product'} onClick={(e) => op.current.toggle(e)} aria-haspopup aria-controls=\\\"overlay_panel\\\" className=\\\"select-product-button\\\" />\\n\\n                <OverlayPanel ref={op} showCloseIcon id=\\\"overlay_panel\\\" style={{width: '450px'}}>\\n                    <DataTable value={products} selectionMode=\\\"single\\\" paginator rows={5}\\n                        selection={selectedProduct} onSelectionChange={onProductSelect}>\\n                        <Column field=\\\"name\\\" header=\\\"Name\\\" sortable />\\n                        <Column header=\\\"Image\\\" body={imageBody} />\\n                        <Column field=\\\"price\\\" header=\\\"Price\\\" sortable body={priceBody} />\\n                    </DataTable>\\n                </OverlayPanel>\\n            </div>\\n        </div>\\n    )\\n}\\n                \"}};_this.extFiles={'src/demo/OverlayPanelDemo.css':{content:\"\\n.overlaypanel-demo .select-product-button {\\n    min-width: 15rem;\\n}\\n\\n.overlaypanel-demo .product-image {\\n    width: 50px;\\n    box-shadow: 0 3px 6px rgba(0, 0, 0, 0.16), 0 3px 6px rgba(0, 0, 0, 0.23);\\n}\\n                \"}};return _this;}_createClass(OverlayPanelDoc,[{key:\"shouldComponentUpdate\",value:function shouldComponentUpdate(){return false;}},{key:\"render\",value:function render(){return/*#__PURE__*/React.createElement(\"div\",{className:\"content-section documentation\"},/*#__PURE__*/React.createElement(TabView,null,/*#__PURE__*/React.createElement(TabPanel,{header:\"Documentation\"},/*#__PURE__*/React.createElement(\"h5\",null,\"Import\"),/*#__PURE__*/React.createElement(CodeHighlight,{lang:\"js\"},\"\\nimport { OverlayPanel } from 'primereact/overlaypanel';\\n\"),/*#__PURE__*/React.createElement(\"h5\",null,\"Getting Started\"),/*#__PURE__*/React.createElement(\"p\",null,\"OverlayPanel is accessed via its reference where visibility is controlled using toggle, show and hide methods.\"),/*#__PURE__*/React.createElement(CodeHighlight,null,\"\\n<Button type=\\\"button\\\" label=\\\"Basic\\\" onClick={(e) => op.current.toggle(e)} />\\n\\n<OverlayPanel ref={op}>\\n    // Content\\n</OverlayPanel>\\n\"),/*#__PURE__*/React.createElement(\"h5\",null,\"Dismissable and CloseIcon\"),/*#__PURE__*/React.createElement(\"p\",null,\"Clicking outside the overlay hides the panel, setting dismissable to false disables this behavior. Additionally enablign showCloseIcon property displays a close icon at the top right corner to close the panel.\"),/*#__PURE__*/React.createElement(CodeHighlight,null,\"\\n<OverlayPanel ref={op} showCloseIcon dismissable>\\n    // Content\\n</OverlayPanel>\\n\"),/*#__PURE__*/React.createElement(\"h5\",null,\"Properties\"),/*#__PURE__*/React.createElement(\"div\",{className:\"doc-tablewrapper\"},/*#__PURE__*/React.createElement(\"table\",{className:\"doc-table\"},/*#__PURE__*/React.createElement(\"thead\",null,/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"th\",null,\"Name\"),/*#__PURE__*/React.createElement(\"th\",null,\"Type\"),/*#__PURE__*/React.createElement(\"th\",null,\"Default\"),/*#__PURE__*/React.createElement(\"th\",null,\"Description\"))),/*#__PURE__*/React.createElement(\"tbody\",null,/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"td\",null,\"id\"),/*#__PURE__*/React.createElement(\"td\",null,\"string\"),/*#__PURE__*/React.createElement(\"td\",null,\"null\"),/*#__PURE__*/React.createElement(\"td\",null,\"Unique identifier of the element.\")),/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"td\",null,\"dismissable\"),/*#__PURE__*/React.createElement(\"td\",null,\"boolean\"),/*#__PURE__*/React.createElement(\"td\",null,\"true\"),/*#__PURE__*/React.createElement(\"td\",null,\"Enables to hide the overlay when outside is clicked.\")),/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"td\",null,\"showCloseIcon\"),/*#__PURE__*/React.createElement(\"td\",null,\"boolean\"),/*#__PURE__*/React.createElement(\"td\",null,\"false\"),/*#__PURE__*/React.createElement(\"td\",null,\"When enabled, displays a close icon at top right corner.\")),/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"td\",null,\"style\"),/*#__PURE__*/React.createElement(\"td\",null,\"string\"),/*#__PURE__*/React.createElement(\"td\",null,\"null\"),/*#__PURE__*/React.createElement(\"td\",null,\"Inline style of the element.\")),/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"td\",null,\"className\"),/*#__PURE__*/React.createElement(\"td\",null,\"string\"),/*#__PURE__*/React.createElement(\"td\",null,\"null\"),/*#__PURE__*/React.createElement(\"td\",null,\"Style class of the element.\")),/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"td\",null,\"appendTo\"),/*#__PURE__*/React.createElement(\"td\",null,\"DOM element\"),/*#__PURE__*/React.createElement(\"td\",null,\"null\"),/*#__PURE__*/React.createElement(\"td\",null,\"DOM element instance where the dialog should be mounted.\")),/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"td\",null,\"ariaCloseLabel\"),/*#__PURE__*/React.createElement(\"td\",null,\"string\"),/*#__PURE__*/React.createElement(\"td\",null,\"close\"),/*#__PURE__*/React.createElement(\"td\",null,\"Aria label of the close icon.\"))))),/*#__PURE__*/React.createElement(\"h5\",null,\"Events\"),/*#__PURE__*/React.createElement(\"div\",{className:\"doc-tablewrapper\"},/*#__PURE__*/React.createElement(\"table\",{className:\"doc-table\"},/*#__PURE__*/React.createElement(\"thead\",null,/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"th\",null,\"Name\"),/*#__PURE__*/React.createElement(\"th\",null,\"Parameters\"),/*#__PURE__*/React.createElement(\"th\",null,\"Description\"))),/*#__PURE__*/React.createElement(\"tbody\",null,/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"td\",null,\"onHide\"),/*#__PURE__*/React.createElement(\"td\",null,\"-\"),/*#__PURE__*/React.createElement(\"td\",null,\"Callback to invoke when overlay gets hidden.\"))))),/*#__PURE__*/React.createElement(\"h5\",null,\"Methods\"),/*#__PURE__*/React.createElement(\"div\",{className:\"doc-tablewrapper\"},/*#__PURE__*/React.createElement(\"table\",{className:\"doc-table\"},/*#__PURE__*/React.createElement(\"thead\",null,/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"th\",null,\"Name\"),/*#__PURE__*/React.createElement(\"th\",null,\"Parameters\"),/*#__PURE__*/React.createElement(\"th\",null,\"Description\"))),/*#__PURE__*/React.createElement(\"tbody\",null,/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"td\",null,\"toggle\"),/*#__PURE__*/React.createElement(\"td\",null,\"event: Browser event\"),/*#__PURE__*/React.createElement(\"td\",null,\"Toggles the visiblity of the overlay.\")),/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"td\",null,\"show\"),/*#__PURE__*/React.createElement(\"td\",null,\"event: Browser event \",/*#__PURE__*/React.createElement(\"br\",null),\"target: Optional target if event.target should not be used\"),/*#__PURE__*/React.createElement(\"td\",null,\"Shows the overlay.\")),/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"td\",null,\"hide\"),/*#__PURE__*/React.createElement(\"td\",null,\"-\"),/*#__PURE__*/React.createElement(\"td\",null,\"Hides the overlay.\"))))),/*#__PURE__*/React.createElement(\"h5\",null,\"Styling\"),/*#__PURE__*/React.createElement(\"p\",null,\"Following is the list of structural style classes, for theming classes visit \",/*#__PURE__*/React.createElement(Link,{to:\"/theming\"},\" theming\"),\" page.\"),/*#__PURE__*/React.createElement(\"div\",{className:\"doc-tablewrapper\"},/*#__PURE__*/React.createElement(\"table\",{className:\"doc-table\"},/*#__PURE__*/React.createElement(\"thead\",null,/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"th\",null,\"Name\"),/*#__PURE__*/React.createElement(\"th\",null,\"Element\"))),/*#__PURE__*/React.createElement(\"tbody\",null,/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"td\",null,\"p-overlaypanel\"),/*#__PURE__*/React.createElement(\"td\",null,\"Container element.\")),/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"td\",null,\"p-overlaypanel-content\"),/*#__PURE__*/React.createElement(\"td\",null,\"Content of the panel.\")),/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"td\",null,\"p-overlaypanel-close\"),/*#__PURE__*/React.createElement(\"td\",null,\"Close icon.\")))),/*#__PURE__*/React.createElement(\"h5\",null,\"Dependencies\"),/*#__PURE__*/React.createElement(\"p\",null,\"None.\"))),useLiveEditorTabs({name:'OverlayPanelDemo',sources:this.sources,service:'ProductService',data:'products-small',extFiles:this.extFiles})));}}]);return OverlayPanelDoc;}(Component);","map":{"version":3,"sources":["C:/Users/zura.ph/WebstormProjects/zz-regul/src/showcase/overlaypanel/OverlayPanelDoc.js"],"names":["React","Component","Link","TabView","TabPanel","CodeHighlight","useLiveEditorTabs","OverlayPanelDoc","props","sources","tabName","content","extFiles","name","service","data"],"mappings":"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","sourcesContent":["import React, { Component}  from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { TabView, TabPanel } from '../../components/tabview/TabView';\r\nimport { CodeHighlight } from '../codehighlight/CodeHighlight';\r\nimport { useLiveEditorTabs }from '../liveeditor/LiveEditor';\r\n\r\nexport class OverlayPanelDoc extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.sources = {\r\n            'class': {\r\n                tabName: 'Class Source',\r\n                content: `\r\nimport React, { Component } from 'react';\r\nimport { OverlayPanel } from 'primereact/overlaypanel';\r\nimport { Button } from 'primereact/button';\r\nimport { Toast } from 'primereact/toast';\r\nimport { Column } from 'primereact/column';\r\nimport { DataTable } from 'primereact/datatable';\r\nimport ProductService from '../service/ProductService';\r\nimport './OverlayPanelDemo.css';\r\n\r\nexport class OverlayPanelDemo extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            products: null,\r\n            selectedProduct: null\r\n        };\r\n\r\n        this.productService = new ProductService();\r\n        this.onProductSelect = this.onProductSelect.bind(this);\r\n        this.imageBody = this.imageBody.bind(this);\r\n        this.priceBody = this.priceBody.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.productService.getProductsSmall().then(data => this.setState({ products: data }));\r\n    }\r\n\r\n    formatCurrency(value) {\r\n        return value.toLocaleString('en-US', {style: 'currency', currency: 'USD'});\r\n    }\r\n\r\n    onProductSelect(e) {\r\n        this.setState({ selectedProduct: e.value }, () => {\r\n            this.op.hide();\r\n            this.toast.show({severity:'info', summary: 'Product Selected', detail: this.state.selectedProduct.name, life: 3000});\r\n        });\r\n    }\r\n\r\n    imageBody(rowData) {\r\n        return <img src={\\`showcase/demo/images/product/\\${rowData.image}\\`} onError={(e) => e.target.src='https://www.primefaces.org/wp-content/uploads/2020/05/placeholder.png'} alt={rowData.image} className=\"product-image\" />\r\n    }\r\n\r\n    priceBody(rowData) {\r\n        return this.formatCurrency(rowData.price);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"overlaypanel-demo\">\r\n                <Toast ref={(el) => this.toast = el} />\r\n\r\n                <div className=\"card\">\r\n                    <Button type=\"button\" icon=\"pi pi-search\" label={this.state.selectedProduct ? this.state.selectedProduct.name : 'Select a Product'} onClick={(e) => this.op.toggle(e)} aria-haspopup aria-controls=\"overlay_panel\" className=\"select-product-button\" />\r\n\r\n                    <OverlayPanel ref={(el) => this.op = el} showCloseIcon id=\"overlay_panel\" style={{width: '450px'}}>\r\n                        <DataTable value={this.state.products} selectionMode=\"single\" paginator rows={5}\r\n                            selection={this.state.selectedProduct} onSelectionChange={this.onProductSelect}>\r\n                            <Column field=\"name\" header=\"Name\" sortable />\r\n                            <Column header=\"Image\" body={this.imageBody} />\r\n                            <Column field=\"price\" header=\"Price\" sortable body={this.priceBody} />\r\n                        </DataTable>\r\n                    </OverlayPanel>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n                `\r\n            },\r\n            'hooks': {\r\n                tabName: 'Hooks Source',\r\n                content: `\r\nimport React, { useState, useEffect, useRef } from 'react';\r\nimport { OverlayPanel } from 'primereact/overlaypanel';\r\nimport { Button } from 'primereact/button';\r\nimport { Toast } from 'primereact/toast';\r\nimport { Column } from 'primereact/column';\r\nimport { DataTable } from 'primereact/datatable';\r\nimport ProductService from '../service/ProductService';\r\nimport './OverlayPanelDemo.css';\r\n\r\nconst OverlayPanelDemo = () => {\r\n    const [products, setProducts] = useState(null);\r\n    const [selectedProduct, setSelectedProduct] = useState(null);\r\n    const productService = new ProductService();\r\n    const op = useRef(null);\r\n    const toast = useRef(null);\r\n    const isMounted = useRef(false);\r\n\r\n    useEffect(() => {\r\n        if (isMounted.current) {\r\n            op.current.hide();\r\n            toast.current.show({severity:'info', summary: 'Product Selected', detail: selectedProduct.name, life: 3000});\r\n        }\r\n    }, [selectedProduct]); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n    useEffect(() => {\r\n        isMounted.current = true;\r\n        productService.getProductsSmall().then(data => setProducts(data));\r\n    }, []); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n    const formatCurrency = (value) => {\r\n        return value.toLocaleString('en-US', {style: 'currency', currency: 'USD'});\r\n    }\r\n\r\n    const onProductSelect = (e) => {\r\n        setSelectedProduct(e.value);\r\n    }\r\n\r\n    const imageBody = (rowData) => {\r\n        return <img src={\\`showcase/demo/images/product/\\${rowData.image}\\`} onError={(e) => e.target.src='https://www.primefaces.org/wp-content/uploads/2020/05/placeholder.png'} alt={rowData.image} className=\"product-image\" />\r\n    }\r\n\r\n    const priceBody = (rowData) => {\r\n        return formatCurrency(rowData.price);\r\n    }\r\n\r\n    return (\r\n        <div className=\"overlaypanel-demo\">\r\n            <Toast ref={toast} />\r\n\r\n            <div className=\"card\">\r\n                <Button type=\"button\" icon=\"pi pi-search\" label={selectedProduct ? selectedProduct.name : 'Select a Product'} onClick={(e) => op.current.toggle(e)} aria-haspopup aria-controls=\"overlay_panel\" className=\"select-product-button\" />\r\n\r\n                <OverlayPanel ref={op} showCloseIcon id=\"overlay_panel\" style={{width: '450px'}}>\r\n                    <DataTable value={products} selectionMode=\"single\" paginator rows={5}\r\n                        selection={selectedProduct} onSelectionChange={onProductSelect}>\r\n                        <Column field=\"name\" header=\"Name\" sortable />\r\n                        <Column header=\"Image\" body={imageBody} />\r\n                        <Column field=\"price\" header=\"Price\" sortable body={priceBody} />\r\n                    </DataTable>\r\n                </OverlayPanel>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n                `\r\n            },\r\n            'ts': {\r\n                tabName: 'TS Source',\r\n                content: `\r\nimport React, { useState, useEffect, useRef } from 'react';\r\nimport { OverlayPanel } from 'primereact/overlaypanel';\r\nimport { Button } from 'primereact/button';\r\nimport { Toast } from 'primereact/toast';\r\nimport { Column } from 'primereact/column';\r\nimport { DataTable } from 'primereact/datatable';\r\nimport ProductService from '../service/ProductService';\r\nimport './OverlayPanelDemo.css';\r\n\r\nconst OverlayPanelDemo = () => {\r\n    const [products, setProducts] = useState(null);\r\n    const [selectedProduct, setSelectedProduct] = useState(null);\r\n    const productService = new ProductService();\r\n    const op = useRef(null);\r\n    const toast = useRef(null);\r\n    const isMounted = useRef(false);\r\n\r\n    useEffect(() => {\r\n        if (isMounted.current) {\r\n            op.current.hide();\r\n            toast.current.show({severity:'info', summary: 'Product Selected', detail: selectedProduct.name, life: 3000});\r\n        }\r\n    }, [selectedProduct]); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n    useEffect(() => {\r\n        isMounted.current = true;\r\n        productService.getProductsSmall().then(data => setProducts(data));\r\n    }, []); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n    const formatCurrency = (value) => {\r\n        return value.toLocaleString('en-US', {style: 'currency', currency: 'USD'});\r\n    }\r\n\r\n    const onProductSelect = (e) => {\r\n        setSelectedProduct(e.value);\r\n    }\r\n\r\n    const imageBody = (rowData) => {\r\n        return <img src={\\`showcase/demo/images/product/\\${rowData.image}\\`} onError={(e) => e.target.src='https://www.primefaces.org/wp-content/uploads/2020/05/placeholder.png'} alt={rowData.image} className=\"product-image\" />\r\n    }\r\n\r\n    const priceBody = (rowData) => {\r\n        return formatCurrency(rowData.price);\r\n    }\r\n\r\n    return (\r\n        <div className=\"overlaypanel-demo\">\r\n            <Toast ref={toast} />\r\n\r\n            <div className=\"card\">\r\n                <Button type=\"button\" icon=\"pi pi-search\" label={selectedProduct ? selectedProduct.name : 'Select a Product'} onClick={(e) => op.current.toggle(e)} aria-haspopup aria-controls=\"overlay_panel\" className=\"select-product-button\" />\r\n\r\n                <OverlayPanel ref={op} showCloseIcon id=\"overlay_panel\" style={{width: '450px'}}>\r\n                    <DataTable value={products} selectionMode=\"single\" paginator rows={5}\r\n                        selection={selectedProduct} onSelectionChange={onProductSelect}>\r\n                        <Column field=\"name\" header=\"Name\" sortable />\r\n                        <Column header=\"Image\" body={imageBody} />\r\n                        <Column field=\"price\" header=\"Price\" sortable body={priceBody} />\r\n                    </DataTable>\r\n                </OverlayPanel>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n                `\r\n            }\r\n        };\r\n\r\n        this.extFiles = {\r\n            'src/demo/OverlayPanelDemo.css': {\r\n                content: `\r\n.overlaypanel-demo .select-product-button {\r\n    min-width: 15rem;\r\n}\r\n\r\n.overlaypanel-demo .product-image {\r\n    width: 50px;\r\n    box-shadow: 0 3px 6px rgba(0, 0, 0, 0.16), 0 3px 6px rgba(0, 0, 0, 0.23);\r\n}\r\n                `\r\n            }\r\n        }\r\n    }\r\n\r\n    shouldComponentUpdate() {\r\n        return false;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"content-section documentation\">\r\n                <TabView>\r\n                    <TabPanel header=\"Documentation\">\r\n                        <h5>Import</h5>\r\n<CodeHighlight lang=\"js\">\r\n{`\r\nimport { OverlayPanel } from 'primereact/overlaypanel';\r\n`}\r\n</CodeHighlight>\r\n\r\n            <h5>Getting Started</h5>\r\n            <p>OverlayPanel is accessed via its reference where visibility is controlled using toggle, show and hide methods.</p>\r\n<CodeHighlight>\r\n{`\r\n<Button type=\"button\" label=\"Basic\" onClick={(e) => op.current.toggle(e)} />\r\n\r\n<OverlayPanel ref={op}>\r\n    // Content\r\n</OverlayPanel>\r\n`}\r\n</CodeHighlight>\r\n\r\n            <h5>Dismissable and CloseIcon</h5>\r\n            <p>Clicking outside the overlay hides the panel, setting dismissable to false disables this behavior.\r\n               Additionally enablign showCloseIcon property displays a close icon at the top right corner to close the panel.</p>\r\n\r\n<CodeHighlight>\r\n{`\r\n<OverlayPanel ref={op} showCloseIcon dismissable>\r\n    // Content\r\n</OverlayPanel>\r\n`}\r\n</CodeHighlight>\r\n\r\n            <h5>Properties</h5>\r\n            <div className=\"doc-tablewrapper\">\r\n                <table className=\"doc-table\">\r\n                    <thead>\r\n                    <tr>\r\n                        <th>Name</th>\r\n                        <th>Type</th>\r\n                        <th>Default</th>\r\n                        <th>Description</th>\r\n                    </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        <tr>\r\n                            <td>id</td>\r\n                            <td>string</td>\r\n                            <td>null</td>\r\n                            <td>Unique identifier of the element.</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>dismissable</td>\r\n                            <td>boolean</td>\r\n                            <td>true</td>\r\n                            <td>Enables to hide the overlay when outside is clicked.</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>showCloseIcon</td>\r\n                            <td>boolean</td>\r\n                            <td>false</td>\r\n                            <td>When enabled, displays a close icon at top right corner.</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>style</td>\r\n                            <td>string</td>\r\n                            <td>null</td>\r\n                            <td>Inline style of the element.</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>className</td>\r\n                            <td>string</td>\r\n                            <td>null</td>\r\n                            <td>Style class of the element.</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>appendTo</td>\r\n                            <td>DOM element</td>\r\n                            <td>null</td>\r\n                            <td>DOM element instance where the dialog should be mounted.</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>ariaCloseLabel</td>\r\n                            <td>string</td>\r\n                            <td>close</td>\r\n                            <td>Aria label of the close icon.</td>\r\n                        </tr>\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n\r\n            <h5>Events</h5>\r\n            <div className=\"doc-tablewrapper\">\r\n                <table className=\"doc-table\">\r\n                    <thead>\r\n                    <tr>\r\n                        <th>Name</th>\r\n                        <th>Parameters</th>\r\n                        <th>Description</th>\r\n                    </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        <tr>\r\n                            <td>onHide</td>\r\n                            <td>-</td>\r\n                            <td>Callback to invoke when overlay gets hidden.</td>\r\n                        </tr>\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n\r\n            <h5>Methods</h5>\r\n            <div className=\"doc-tablewrapper\">\r\n                <table className=\"doc-table\">\r\n                    <thead>\r\n                        <tr>\r\n                            <th>Name</th>\r\n                            <th>Parameters</th>\r\n                            <th>Description</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        <tr>\r\n                            <td>toggle</td>\r\n                            <td>event: Browser event</td>\r\n                            <td>Toggles the visiblity of the overlay.</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>show</td>\r\n                            <td>event: Browser event <br />\r\n                                target: Optional target if event.target should not be used</td>\r\n                            <td>Shows the overlay.</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>hide</td>\r\n                            <td>-</td>\r\n                            <td>Hides the overlay.</td>\r\n                        </tr>\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n\r\n            <h5>Styling</h5>\r\n            <p>Following is the list of structural style classes, for theming classes visit <Link to=\"/theming\"> theming</Link> page.</p>\r\n            <div className=\"doc-tablewrapper\">\r\n                <table className=\"doc-table\">\r\n                    <thead>\r\n                        <tr>\r\n                            <th>Name</th>\r\n                            <th>Element</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        <tr>\r\n                            <td>p-overlaypanel</td>\r\n                            <td>Container element.</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>p-overlaypanel-content</td>\r\n                            <td>Content of the panel.</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>p-overlaypanel-close</td>\r\n                            <td>Close icon.</td>\r\n                        </tr>\r\n                    </tbody>\r\n                </table>\r\n\r\n                <h5>Dependencies</h5>\r\n                <p>None.</p>\r\n            </div>\r\n\r\n            </TabPanel>\r\n\r\n            {\r\n                useLiveEditorTabs({ name: 'OverlayPanelDemo', sources: this.sources, service: 'ProductService', data: 'products-small', extFiles: this.extFiles })\r\n            }\r\n        </TabView>\r\n    </div>\r\n        );\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}