{"ast":null,"code":"import _toConsumableArray from \"C:\\\\Users\\\\zura.ph\\\\WebstormProjects\\\\zz-regul\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";\nimport _objectSpread from \"C:\\\\Users\\\\zura.ph\\\\WebstormProjects\\\\zz-regul\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\nimport _classCallCheck from \"C:\\\\Users\\\\zura.ph\\\\WebstormProjects\\\\zz-regul\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\zura.ph\\\\WebstormProjects\\\\zz-regul\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"C:\\\\Users\\\\zura.ph\\\\WebstormProjects\\\\zz-regul\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"C:\\\\Users\\\\zura.ph\\\\WebstormProjects\\\\zz-regul\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _createSuper from \"C:\\\\Users\\\\zura.ph\\\\WebstormProjects\\\\zz-regul\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"C:\\\\Users\\\\zura.ph\\\\WebstormProjects\\\\zz-regul\\\\src\\\\showcase\\\\tree\\\\TreeLazyDemo.js\";\nimport React, { Component } from 'react';\nimport { Tree } from '../../components/tree/Tree';\nimport { TabView } from '../../components/tabview/TabView';\nimport { useLiveEditorTabs } from '../liveeditor/LiveEditor';\nimport { AppInlineHeader } from '../../AppInlineHeader';\nexport var TreeLazyDemo = /*#__PURE__*/function (_Component) {\n  _inherits(TreeLazyDemo, _Component);\n\n  var _super = _createSuper(TreeLazyDemo);\n\n  function TreeLazyDemo(props) {\n    var _this;\n\n    _classCallCheck(this, TreeLazyDemo);\n\n    _this = _super.call(this, props);\n    _this.state = {\n      nodes: null,\n      loading: true\n    };\n    _this.loadOnExpand = _this.loadOnExpand.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(TreeLazyDemo, [{\n    key: \"createLazyNodes\",\n    value: function createLazyNodes() {\n      return [{\n        key: '0',\n        label: 'Node 0',\n        leaf: false\n      }, {\n        key: '1',\n        label: 'Node 1',\n        leaf: false\n      }, {\n        key: '2',\n        label: 'Node 2',\n        leaf: false\n      }];\n    }\n  }, {\n    key: \"loadOnExpand\",\n    value: function loadOnExpand(event) {\n      var _this2 = this;\n\n      if (!event.node.children) {\n        this.setState({\n          loading: true\n        });\n        setTimeout(function () {\n          var node = _objectSpread({}, event.node);\n\n          node.children = [];\n\n          for (var i = 0; i < 3; i++) {\n            node.children.push({\n              key: node.key + '-' + i,\n              label: 'Lazy ' + node.label + '-' + i\n            });\n          }\n\n          var value = _toConsumableArray(_this2.state.nodes);\n\n          value[parseInt(event.node.key, 10)] = node;\n\n          _this2.setState({\n            nodes: value,\n            loading: false\n          });\n        }, 500);\n      }\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this3 = this;\n\n      setTimeout(function () {\n        _this3.setState({\n          nodes: _this3.createLazyNodes(),\n          loading: false\n        });\n      }, 2000);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"content-section introduction\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(AppInlineHeader, {\n        changelogText: \"tree\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(\"h1\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 25\n        }\n      }, \"Tree \", /*#__PURE__*/React.createElement(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 34\n        }\n      }, \"Lazy\")), /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 25\n        }\n      }, \"Lazy loading is useful when dealing with huge datasets.\"))), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"content-section implementation\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"card\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(Tree, {\n        value: this.state.nodes,\n        onExpand: this.loadOnExpand,\n        loading: this.state.loading,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 25\n        }\n      }))), /*#__PURE__*/React.createElement(TreeLazyDemoDoc, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 17\n        }\n      }));\n    }\n  }]);\n\n  return TreeLazyDemo;\n}(Component);\nexport var TreeLazyDemoDoc = /*#__PURE__*/function (_Component2) {\n  _inherits(TreeLazyDemoDoc, _Component2);\n\n  var _super2 = _createSuper(TreeLazyDemoDoc);\n\n  function TreeLazyDemoDoc(props) {\n    var _this4;\n\n    _classCallCheck(this, TreeLazyDemoDoc);\n\n    _this4 = _super2.call(this, props);\n    _this4.sources = {\n      'class': {\n        tabName: 'Class Source',\n        content: \"\\nimport React, { Component } from 'react';\\nimport { Tree } from 'primereact/tree';\\n\\nexport class TreeLazyDemo extends Component {\\n\\n    constructor(props) {\\n        super(props);\\n        this.state = {\\n            nodes: null,\\n            loading: true,\\n        };\\n\\n        this.loadOnExpand = this.loadOnExpand.bind(this);\\n    }\\n\\n    createLazyNodes() {\\n        return [\\n            {\\n                key: '0',\\n                label: 'Node 0',\\n                leaf: false\\n            },\\n            {\\n                key: '1',\\n                label: 'Node 1',\\n                leaf: false\\n            },\\n            {\\n                key: '2',\\n                label: 'Node 2',\\n                leaf: false\\n            }\\n        ];\\n    }\\n\\n    loadOnExpand(event) {\\n        if (!event.node.children) {\\n            this.setState({\\n                loading: true\\n            });\\n\\n            setTimeout(() => {\\n                let node = { ...event.node };\\n                node.children = [];\\n\\n                for (let i = 0; i < 3; i++) {\\n                    node.children.push({\\n                        key: node.key + '-' + i,\\n                        label: 'Lazy ' + node.label + '-' + i\\n                    });\\n                }\\n\\n                let value = [...this.state.nodes];\\n                value[parseInt(event.node.key, 10)] = node;\\n                this.setState({\\n                    nodes: value,\\n                    loading: false\\n                });\\n            }, 500);\\n        }\\n    }\\n\\n    componentDidMount() {\\n        setTimeout(() => {\\n            this.setState({\\n                nodes: this.createLazyNodes(),\\n                loading: false\\n            });\\n        }, 2000);\\n    }\\n\\n    render() {\\n        return (\\n            <div>\\n                <div className=\\\"card\\\">\\n                    <Tree value={this.state.nodes} onExpand={this.loadOnExpand} loading={this.state.loading} />\\n                </div>\\n            </div>\\n        )\\n    }\\n}\\n                \"\n      },\n      'hooks': {\n        tabName: 'Hooks Source',\n        content: \"\\nimport React, { useState, useEffect } from 'react';\\nimport { Tree } from 'primereact/tree';\\n\\nconst TreeLazyDemo = () => {\\n    const [nodes, setNodes] = useState(null);\\n    const [loading, setLoading] = useState(true);\\n\\n    const createLazyNodes = () => {\\n        return [\\n            {\\n                key: '0',\\n                label: 'Node 0',\\n                leaf: false\\n            },\\n            {\\n                key: '1',\\n                label: 'Node 1',\\n                leaf: false\\n            },\\n            {\\n                key: '2',\\n                label: 'Node 2',\\n                leaf: false\\n            }\\n        ];\\n    }\\n\\n    const loadOnExpand = (event) => {\\n        if (!event.node.children) {\\n            setLoading(true);\\n\\n            setTimeout(() => {\\n                let node = { ...event.node };\\n                node.children = [];\\n\\n                for (let i = 0; i < 3; i++) {\\n                    node.children.push({\\n                        key: node.key + '-' + i,\\n                        label: 'Lazy ' + node.label + '-' + i\\n                    });\\n                }\\n\\n                let value = [...nodes];\\n                value[parseInt(event.node.key, 10)] = node;\\n                setNodes(value);\\n                setLoading(false);\\n            }, 500);\\n        }\\n    }\\n\\n    useEffect(() => {\\n        setTimeout(() => {\\n            setNodes(createLazyNodes());\\n            setLoading(false);\\n        }, 2000);\\n    }, []); // eslint-disable-line react-hooks/exhaustive-deps\\n\\n    return (\\n        <div>\\n            <div className=\\\"card\\\">\\n                <Tree value={nodes} onExpand={loadOnExpand} loading={loading} />\\n            </div>\\n        </div>\\n    )\\n}\\n                \"\n      },\n      'ts': {\n        tabName: 'TS Source',\n        content: \"\\nimport React, { useState, useEffect } from 'react';\\nimport { Tree } from 'primereact/tree';\\n\\nconst TreeLazyDemo = () => {\\n    const [nodes, setNodes] = useState(null);\\n    const [loading, setLoading] = useState(true);\\n\\n    const createLazyNodes = () => {\\n        return [\\n            {\\n                key: '0',\\n                label: 'Node 0',\\n                leaf: false\\n            },\\n            {\\n                key: '1',\\n                label: 'Node 1',\\n                leaf: false\\n            },\\n            {\\n                key: '2',\\n                label: 'Node 2',\\n                leaf: false\\n            }\\n        ];\\n    }\\n\\n    const loadOnExpand = (event) => {\\n        if (!event.node.children) {\\n            setLoading(true);\\n\\n            setTimeout(() => {\\n                let node = { ...event.node };\\n                node.children = [];\\n\\n                for (let i = 0; i < 3; i++) {\\n                    node.children.push({\\n                        key: node.key + '-' + i,\\n                        label: 'Lazy ' + node.label + '-' + i\\n                    });\\n                }\\n\\n                let value = [...nodes];\\n                value[parseInt(event.node.key, 10)] = node;\\n                setNodes(value);\\n                setLoading(false);\\n            }, 500);\\n        }\\n    }\\n\\n    useEffect(() => {\\n        setTimeout(() => {\\n            setNodes(createLazyNodes());\\n            setLoading(false);\\n        }, 2000);\\n    }, []); // eslint-disable-line react-hooks/exhaustive-deps\\n\\n    return (\\n        <div>\\n            <div className=\\\"card\\\">\\n                <Tree value={nodes} onExpand={loadOnExpand} loading={loading} />\\n            </div>\\n        </div>\\n    )\\n}\\n                \"\n      }\n    };\n    return _this4;\n  }\n\n  _createClass(TreeLazyDemoDoc, [{\n    key: \"shouldComponentUpdate\",\n    value: function shouldComponentUpdate() {\n      return false;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"content-section documentation\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 338,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(TabView, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 339,\n          columnNumber: 17\n        }\n      }, useLiveEditorTabs({\n        name: 'TreeLazyDemo',\n        sources: this.sources\n      })));\n    }\n  }]);\n\n  return TreeLazyDemoDoc;\n}(Component);","map":{"version":3,"sources":["C:/Users/zura.ph/WebstormProjects/zz-regul/src/showcase/tree/TreeLazyDemo.js"],"names":["React","Component","Tree","TabView","useLiveEditorTabs","AppInlineHeader","TreeLazyDemo","props","state","nodes","loading","loadOnExpand","bind","key","label","leaf","event","node","children","setState","setTimeout","i","push","value","parseInt","createLazyNodes","TreeLazyDemoDoc","sources","tabName","content","name"],"mappings":";;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,IAAT,QAAqB,4BAArB;AACA,SAASC,OAAT,QAAwB,kCAAxB;AACA,SAASC,iBAAT,QAAiC,0BAAjC;AACA,SAASC,eAAT,QAAgC,uBAAhC;AAEA,WAAaC,YAAb;AAAA;;AAAA;;AAEI,wBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACf,8BAAMA,KAAN;AACA,UAAKC,KAAL,GAAa;AACTC,MAAAA,KAAK,EAAE,IADE;AAETC,MAAAA,OAAO,EAAE;AAFA,KAAb;AAKA,UAAKC,YAAL,GAAoB,MAAKA,YAAL,CAAkBC,IAAlB,+BAApB;AAPe;AAQlB;;AAVL;AAAA;AAAA,WAYI,2BAAkB;AACd,aAAO,CACH;AACIC,QAAAA,GAAG,EAAE,GADT;AAEIC,QAAAA,KAAK,EAAE,QAFX;AAGIC,QAAAA,IAAI,EAAE;AAHV,OADG,EAMH;AACIF,QAAAA,GAAG,EAAE,GADT;AAEIC,QAAAA,KAAK,EAAE,QAFX;AAGIC,QAAAA,IAAI,EAAE;AAHV,OANG,EAWH;AACIF,QAAAA,GAAG,EAAE,GADT;AAEIC,QAAAA,KAAK,EAAE,QAFX;AAGIC,QAAAA,IAAI,EAAE;AAHV,OAXG,CAAP;AAiBH;AA9BL;AAAA;AAAA,WAgCI,sBAAaC,KAAb,EAAoB;AAAA;;AAChB,UAAI,CAACA,KAAK,CAACC,IAAN,CAAWC,QAAhB,EAA0B;AACtB,aAAKC,QAAL,CAAc;AACVT,UAAAA,OAAO,EAAE;AADC,SAAd;AAIAU,QAAAA,UAAU,CAAC,YAAM;AACb,cAAIH,IAAI,qBAAQD,KAAK,CAACC,IAAd,CAAR;;AACAA,UAAAA,IAAI,CAACC,QAAL,GAAgB,EAAhB;;AAEA,eAAK,IAAIG,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuBA,CAAC,EAAxB,EAA4B;AACxBJ,YAAAA,IAAI,CAACC,QAAL,CAAcI,IAAd,CAAmB;AACfT,cAAAA,GAAG,EAAEI,IAAI,CAACJ,GAAL,GAAW,GAAX,GAAiBQ,CADP;AAEfP,cAAAA,KAAK,EAAE,UAAUG,IAAI,CAACH,KAAf,GAAuB,GAAvB,GAA6BO;AAFrB,aAAnB;AAIH;;AAED,cAAIE,KAAK,sBAAO,MAAI,CAACf,KAAL,CAAWC,KAAlB,CAAT;;AACAc,UAAAA,KAAK,CAACC,QAAQ,CAACR,KAAK,CAACC,IAAN,CAAWJ,GAAZ,EAAiB,EAAjB,CAAT,CAAL,GAAsCI,IAAtC;;AACA,UAAA,MAAI,CAACE,QAAL,CAAc;AACVV,YAAAA,KAAK,EAAEc,KADG;AAEVb,YAAAA,OAAO,EAAE;AAFC,WAAd;AAIH,SAjBS,EAiBP,GAjBO,CAAV;AAkBH;AACJ;AAzDL;AAAA;AAAA,WA2DI,6BAAoB;AAAA;;AAChBU,MAAAA,UAAU,CAAC,YAAM;AACb,QAAA,MAAI,CAACD,QAAL,CAAc;AACVV,UAAAA,KAAK,EAAE,MAAI,CAACgB,eAAL,EADG;AAEVf,UAAAA,OAAO,EAAE;AAFC,SAAd;AAIH,OALS,EAKP,IALO,CAAV;AAMH;AAlEL;AAAA;AAAA,WAoEI,kBAAS;AACL,0BACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI;AAAK,QAAA,SAAS,EAAC,8BAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI,oBAAC,eAAD;AAAiB,QAAA,aAAa,EAAC,MAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BAAS;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAAT,CADJ,eAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mEAFJ,CADJ,CADJ,eAQI;AAAK,QAAA,SAAS,EAAC,gCAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI;AAAK,QAAA,SAAS,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAE,KAAKF,KAAL,CAAWC,KAAxB;AAA+B,QAAA,QAAQ,EAAE,KAAKE,YAA9C;AAA4D,QAAA,OAAO,EAAE,KAAKH,KAAL,CAAWE,OAAhF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,CADJ,CARJ,eAcI,oBAAC,eAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAdJ,CADJ;AAkBH;AAvFL;;AAAA;AAAA,EAAkCT,SAAlC;AA0FA,WAAayB,eAAb;AAAA;;AAAA;;AAEI,2BAAYnB,KAAZ,EAAmB;AAAA;;AAAA;;AACf,gCAAMA,KAAN;AAEA,WAAKoB,OAAL,GAAe;AACX,eAAS;AACLC,QAAAA,OAAO,EAAE,cADJ;AAELC,QAAAA,OAAO;AAFF,OADE;AAuFX,eAAS;AACLD,QAAAA,OAAO,EAAE,cADJ;AAELC,QAAAA,OAAO;AAFF,OAvFE;AA6JX,YAAM;AACFD,QAAAA,OAAO,EAAE,WADP;AAEFC,QAAAA,OAAO;AAFL;AA7JK,KAAf;AAHe;AAuOlB;;AAzOL;AAAA;AAAA,WA2OI,iCAAwB;AACpB,aAAO,KAAP;AACH;AA7OL;AAAA;AAAA,WA+OI,kBAAS;AACL,0BACI;AAAK,QAAA,SAAS,EAAC,+BAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAEQzB,iBAAiB,CAAC;AAAE0B,QAAAA,IAAI,EAAE,cAAR;AAAwBH,QAAAA,OAAO,EAAE,KAAKA;AAAtC,OAAD,CAFzB,CADJ,CADJ;AASH;AAzPL;;AAAA;AAAA,EAAqC1B,SAArC","sourcesContent":["import React, { Component } from 'react';\r\nimport { Tree } from '../../components/tree/Tree';\r\nimport { TabView } from '../../components/tabview/TabView';\r\nimport { useLiveEditorTabs }from '../liveeditor/LiveEditor';\r\nimport { AppInlineHeader } from '../../AppInlineHeader';\r\n\r\nexport class TreeLazyDemo extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            nodes: null,\r\n            loading: true,\r\n        };\r\n\r\n        this.loadOnExpand = this.loadOnExpand.bind(this);\r\n    }\r\n\r\n    createLazyNodes() {\r\n        return [\r\n            {\r\n                key: '0',\r\n                label: 'Node 0',\r\n                leaf: false\r\n            },\r\n            {\r\n                key: '1',\r\n                label: 'Node 1',\r\n                leaf: false\r\n            },\r\n            {\r\n                key: '2',\r\n                label: 'Node 2',\r\n                leaf: false\r\n            }\r\n        ];\r\n    }\r\n\r\n    loadOnExpand(event) {\r\n        if (!event.node.children) {\r\n            this.setState({\r\n                loading: true\r\n            });\r\n\r\n            setTimeout(() => {\r\n                let node = { ...event.node };\r\n                node.children = [];\r\n\r\n                for (let i = 0; i < 3; i++) {\r\n                    node.children.push({\r\n                        key: node.key + '-' + i,\r\n                        label: 'Lazy ' + node.label + '-' + i\r\n                    });\r\n                }\r\n\r\n                let value = [...this.state.nodes];\r\n                value[parseInt(event.node.key, 10)] = node;\r\n                this.setState({\r\n                    nodes: value,\r\n                    loading: false\r\n                });\r\n            }, 500);\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        setTimeout(() => {\r\n            this.setState({\r\n                nodes: this.createLazyNodes(),\r\n                loading: false\r\n            });\r\n        }, 2000);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div className=\"content-section introduction\">\r\n                    <AppInlineHeader changelogText=\"tree\">\r\n                        <h1>Tree <span>Lazy</span></h1>\r\n                        <p>Lazy loading is useful when dealing with huge datasets.</p>\r\n                    </AppInlineHeader>\r\n                </div>\r\n\r\n                <div className=\"content-section implementation\">\r\n                    <div className=\"card\">\r\n                        <Tree value={this.state.nodes} onExpand={this.loadOnExpand} loading={this.state.loading} />\r\n                    </div>\r\n                </div>\r\n\r\n                <TreeLazyDemoDoc />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport class TreeLazyDemoDoc extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.sources = {\r\n            'class': {\r\n                tabName: 'Class Source',\r\n                content: `\r\nimport React, { Component } from 'react';\r\nimport { Tree } from 'primereact/tree';\r\n\r\nexport class TreeLazyDemo extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            nodes: null,\r\n            loading: true,\r\n        };\r\n\r\n        this.loadOnExpand = this.loadOnExpand.bind(this);\r\n    }\r\n\r\n    createLazyNodes() {\r\n        return [\r\n            {\r\n                key: '0',\r\n                label: 'Node 0',\r\n                leaf: false\r\n            },\r\n            {\r\n                key: '1',\r\n                label: 'Node 1',\r\n                leaf: false\r\n            },\r\n            {\r\n                key: '2',\r\n                label: 'Node 2',\r\n                leaf: false\r\n            }\r\n        ];\r\n    }\r\n\r\n    loadOnExpand(event) {\r\n        if (!event.node.children) {\r\n            this.setState({\r\n                loading: true\r\n            });\r\n\r\n            setTimeout(() => {\r\n                let node = { ...event.node };\r\n                node.children = [];\r\n\r\n                for (let i = 0; i < 3; i++) {\r\n                    node.children.push({\r\n                        key: node.key + '-' + i,\r\n                        label: 'Lazy ' + node.label + '-' + i\r\n                    });\r\n                }\r\n\r\n                let value = [...this.state.nodes];\r\n                value[parseInt(event.node.key, 10)] = node;\r\n                this.setState({\r\n                    nodes: value,\r\n                    loading: false\r\n                });\r\n            }, 500);\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        setTimeout(() => {\r\n            this.setState({\r\n                nodes: this.createLazyNodes(),\r\n                loading: false\r\n            });\r\n        }, 2000);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div className=\"card\">\r\n                    <Tree value={this.state.nodes} onExpand={this.loadOnExpand} loading={this.state.loading} />\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n                `\r\n            },\r\n            'hooks': {\r\n                tabName: 'Hooks Source',\r\n                content: `\r\nimport React, { useState, useEffect } from 'react';\r\nimport { Tree } from 'primereact/tree';\r\n\r\nconst TreeLazyDemo = () => {\r\n    const [nodes, setNodes] = useState(null);\r\n    const [loading, setLoading] = useState(true);\r\n\r\n    const createLazyNodes = () => {\r\n        return [\r\n            {\r\n                key: '0',\r\n                label: 'Node 0',\r\n                leaf: false\r\n            },\r\n            {\r\n                key: '1',\r\n                label: 'Node 1',\r\n                leaf: false\r\n            },\r\n            {\r\n                key: '2',\r\n                label: 'Node 2',\r\n                leaf: false\r\n            }\r\n        ];\r\n    }\r\n\r\n    const loadOnExpand = (event) => {\r\n        if (!event.node.children) {\r\n            setLoading(true);\r\n\r\n            setTimeout(() => {\r\n                let node = { ...event.node };\r\n                node.children = [];\r\n\r\n                for (let i = 0; i < 3; i++) {\r\n                    node.children.push({\r\n                        key: node.key + '-' + i,\r\n                        label: 'Lazy ' + node.label + '-' + i\r\n                    });\r\n                }\r\n\r\n                let value = [...nodes];\r\n                value[parseInt(event.node.key, 10)] = node;\r\n                setNodes(value);\r\n                setLoading(false);\r\n            }, 500);\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        setTimeout(() => {\r\n            setNodes(createLazyNodes());\r\n            setLoading(false);\r\n        }, 2000);\r\n    }, []); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"card\">\r\n                <Tree value={nodes} onExpand={loadOnExpand} loading={loading} />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n                `\r\n            },\r\n            'ts': {\r\n                tabName: 'TS Source',\r\n                content: `\r\nimport React, { useState, useEffect } from 'react';\r\nimport { Tree } from 'primereact/tree';\r\n\r\nconst TreeLazyDemo = () => {\r\n    const [nodes, setNodes] = useState(null);\r\n    const [loading, setLoading] = useState(true);\r\n\r\n    const createLazyNodes = () => {\r\n        return [\r\n            {\r\n                key: '0',\r\n                label: 'Node 0',\r\n                leaf: false\r\n            },\r\n            {\r\n                key: '1',\r\n                label: 'Node 1',\r\n                leaf: false\r\n            },\r\n            {\r\n                key: '2',\r\n                label: 'Node 2',\r\n                leaf: false\r\n            }\r\n        ];\r\n    }\r\n\r\n    const loadOnExpand = (event) => {\r\n        if (!event.node.children) {\r\n            setLoading(true);\r\n\r\n            setTimeout(() => {\r\n                let node = { ...event.node };\r\n                node.children = [];\r\n\r\n                for (let i = 0; i < 3; i++) {\r\n                    node.children.push({\r\n                        key: node.key + '-' + i,\r\n                        label: 'Lazy ' + node.label + '-' + i\r\n                    });\r\n                }\r\n\r\n                let value = [...nodes];\r\n                value[parseInt(event.node.key, 10)] = node;\r\n                setNodes(value);\r\n                setLoading(false);\r\n            }, 500);\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        setTimeout(() => {\r\n            setNodes(createLazyNodes());\r\n            setLoading(false);\r\n        }, 2000);\r\n    }, []); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"card\">\r\n                <Tree value={nodes} onExpand={loadOnExpand} loading={loading} />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n                `\r\n            }\r\n        }\r\n    }\r\n\r\n    shouldComponentUpdate() {\r\n        return false;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"content-section documentation\">\r\n                <TabView>\r\n                    {\r\n                        useLiveEditorTabs({ name: 'TreeLazyDemo', sources: this.sources })\r\n                    }\r\n                </TabView>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}