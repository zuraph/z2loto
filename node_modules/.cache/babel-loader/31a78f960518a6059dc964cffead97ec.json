{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\zura.ph\\\\WebstormProjects\\\\zloto\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\zura.ph\\\\WebstormProjects\\\\zloto\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _inherits from \"C:\\\\Users\\\\zura.ph\\\\WebstormProjects\\\\zloto\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _createSuper from \"C:\\\\Users\\\\zura.ph\\\\WebstormProjects\\\\zloto\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"C:\\\\Users\\\\zura.ph\\\\WebstormProjects\\\\zloto\\\\src\\\\showcase\\\\invalid\\\\InvalidDoc.js\";\nimport React, { Component } from 'react';\nimport { TabView } from '../../components/tabview/TabView';\nimport { useLiveEditorTabs } from '../liveeditor/LiveEditor';\nexport var InvalidDoc = /*#__PURE__*/function (_Component) {\n  _inherits(InvalidDoc, _Component);\n\n  var _super = _createSuper(InvalidDoc);\n\n  function InvalidDoc(props) {\n    var _this;\n\n    _classCallCheck(this, InvalidDoc);\n\n    _this = _super.call(this, props);\n    _this.sources = {\n      'class': {\n        tabName: 'Class Source',\n        content: \"\\nimport React, { Component } from 'react';\\nimport { InputText } from 'primereact/inputtext';\\nimport { AutoComplete } from 'primereact/autocomplete';\\nimport { Calendar } from 'primereact/calendar';\\nimport { Chips } from 'primereact/chips';\\nimport { Dropdown } from 'primereact/dropdown';\\nimport { InputMask } from 'primereact/inputmask';\\nimport { InputNumber } from 'primereact/inputnumber';\\nimport { InputTextarea } from 'primereact/inputtextarea';\\nimport { MultiSelect } from 'primereact/multiselect';\\nimport { CascadeSelect } from 'primereact/cascadeselect';\\nimport { CountryService } from '../service/CountryService';\\n\\nexport class InvalidDemo extends Component {\\n\\n    constructor(props) {\\n        super(props);\\n        this.state = {\\n            countries: null,\\n            filteredCountries: null,\\n            cities: [\\n                { name: 'New York', code: 'NY' },\\n                { name: 'Rome', code: 'RM' },\\n                { name: 'London', code: 'LDN' },\\n                { name: 'Istanbul', code: 'IST' },\\n                { name: 'Paris', code: 'PRS' }\\n            ],\\n            value1: '',\\n            value2: null,\\n            value3: null,\\n            value4: null,\\n            value5: null,\\n            value6: null,\\n            value7: null,\\n            value8: null,\\n            value9: '',\\n            value10: null\\n        };\\n\\n        this.cascadeSelectCountries = [\\n            {\\n                name: 'Australia',\\n                code: 'AU',\\n                states: [\\n                    {\\n                        name: 'New South Wales',\\n                        cities: [\\n                            { cname: 'Sydney', code: 'A-SY' },\\n                            { cname: 'Newcastle', code: 'A-NE' },\\n                            { cname: 'Wollongong', code: 'A-WO' }\\n                        ]\\n                    },\\n                    {\\n                        name: 'Queensland',\\n                        cities: [\\n                            { cname: 'Brisbane', code: 'A-BR' },\\n                            { cname: 'Townsville', code: 'A-TO' }\\n                        ]\\n                    },\\n\\n                ]\\n            },\\n            {\\n                name: 'Canada',\\n                code: 'CA',\\n                states: [\\n                    {\\n                        name: 'Quebec',\\n                        cities: [\\n                            { cname: 'Montreal', code: 'C-MO' },\\n                            { cname: 'Quebec City', code: 'C-QU' }\\n                        ]\\n                    },\\n                    {\\n                        name: 'Ontario',\\n                        cities: [\\n                            { cname: 'Ottawa', code: 'C-OT' },\\n                            { cname: 'Toronto', code: 'C-TO' }\\n                        ]\\n                    },\\n\\n                ]\\n            },\\n            {\\n                name: 'United States',\\n                code: 'US',\\n                states: [\\n                    {\\n                        name: 'California',\\n                        cities: [\\n                            { cname: 'Los Angeles', code: 'US-LA' },\\n                            { cname: 'San Diego', code: 'US-SD' },\\n                            { cname: 'San Francisco', code: 'US-SF' }\\n                        ]\\n                    },\\n                    {\\n                        name: 'Florida',\\n                        cities: [\\n                            { cname: 'Jacksonville', code: 'US-JA' },\\n                            { cname: 'Miami', code: 'US-MI' },\\n                            { cname: 'Tampa', code: 'US-TA' },\\n                            { cname: 'Orlando', code: 'US-OR' }\\n                        ]\\n                    },\\n                    {\\n                        name: 'Texas',\\n                        cities: [\\n                            { cname: 'Austin', code: 'US-AU' },\\n                            { cname: 'Dallas', code: 'US-DA' },\\n                            { cname: 'Houston', code: 'US-HO' }\\n                        ]\\n                    }\\n                ]\\n            }\\n        ];\\n\\n        this.countryservice = new CountryService();\\n        this.searchCountry = this.searchCountry.bind(this);\\n    }\\n\\n    componentDidMount() {\\n        this.countryservice.getCountries().then(data => this.setState({ countries: data }));\\n    }\\n\\n    searchCountry(event) {\\n        setTimeout(() => {\\n            let results = this.state.countries.filter((country) => {\\n                return country.name.toLowerCase().startsWith(event.query.toLowerCase());\\n            });\\n            this.setState({ filteredCountries: results });\\n        }, 250);\\n    }\\n\\n    render() {\\n        return (\\n            <div>\\n                <div className=\\\"card\\\">\\n                    <div className=\\\"p-fluid p-grid\\\">\\n                        <div className=\\\"p-field p-col-12 p-md-4\\\">\\n                            <label htmlFor=\\\"inputtext\\\">InputText</label>\\n                            <InputText id=\\\"inputtext\\\" value={this.state.value1} onChange={(e) => this.setState({ value1: e.target.value })} className=\\\"p-invalid\\\" />\\n                        </div>\\n                        <div className=\\\"p-field p-col-12 p-md-4\\\">\\n                            <label htmlFor=\\\"autocomplete\\\">AutoComplete</label>\\n                            <AutoComplete value={this.state.value2} suggestions={this.state.filteredCountries} completeMethod={this.searchCountry} field=\\\"name\\\" onChange={(e) => this.setState({ value2: e.value })} className=\\\"p-invalid\\\" />\\n                        </div>\\n                        <div className=\\\"p-field p-col-12 p-md-4\\\">\\n                            <label htmlFor=\\\"calendar\\\">Calendar</label>\\n                            <Calendar id=\\\"calendar\\\" value={this.state.value3} onChange={(e) => this.setState({ value3: e.value })} className=\\\"p-invalid\\\" />\\n                        </div>\\n                        <div className=\\\"p-field p-col-12 p-md-4\\\">\\n                            <label htmlFor=\\\"chips\\\">Chips</label>\\n                            <Chips id=\\\"chips\\\" value={this.state.value4} onChange={(e) => this.setState({ value4: e.value })} className=\\\"p-invalid\\\" />\\n                        </div>\\n                        <div className=\\\"p-field p-col-12 p-md-4\\\">\\n                            <label htmlFor=\\\"inputmask\\\">InputMask</label>\\n                            <InputMask id=\\\"inputmask\\\" value={this.state.value5} onChange={(e) => this.setState({ value5: e.value })} mask=\\\"99/99/9999\\\" slotChar=\\\"mm/dd/yyyy\\\" className=\\\"p-invalid\\\" />\\n                        </div>\\n                        <div className=\\\"p-field p-col-12 p-md-4\\\">\\n                            <label htmlFor=\\\"inputnumber\\\">InputNumber</label>\\n                            <InputNumber id=\\\"inputnumber\\\" value={this.state.value6} onChange={(e) => this.setState({ value6: e.value })} className=\\\"p-invalid\\\" />\\n                        </div>\\n                        <div className=\\\"p-field p-col-12 p-md-4\\\">\\n                            <label htmlFor=\\\"cascadeselect\\\">CascadeSelect</label>\\n                            <CascadeSelect id=\\\"cascadeselect\\\" value={this.state.value10} options={this.cascadeSelectCountries} optionLabel=\\\"cname\\\" optionGroupLabel=\\\"name\\\" optionGroupChildren={['states', 'cities']} onChange={event => this.setState({ value10: event.value })} className=\\\"p-invalid\\\"/>\\n                        </div>\\n                        <div className=\\\"p-field p-col-12 p-md-4\\\">\\n                            <label htmlFor=\\\"dropdown\\\">Dropdown</label>\\n                            <Dropdown id=\\\"dropdown\\\" value={this.state.value7} options={this.state.cities} onChange={(e) => this.setState({ value7: e.value })} optionLabel=\\\"name\\\" className=\\\"p-invalid\\\" />\\n                        </div>\\n                        <div className=\\\"p-field p-col-12 p-md-4\\\">\\n                            <label htmlFor=\\\"multiselect\\\">MultiSelect</label>\\n                            <MultiSelect id=\\\"multiselect\\\" value={this.state.value8} options={this.state.cities} onChange={(e) => this.setState({ value8: e.value })} optionLabel=\\\"name\\\" className=\\\"p-invalid\\\" />\\n                        </div>\\n                        <div className=\\\"p-field p-col-12 p-md-4\\\">\\n                            <label htmlFor=\\\"textarea\\\">Textarea</label>\\n                            <InputTextarea id=\\\"textarea\\\" value={this.state.value9} onChange={(e) => this.setState({ value9: e.target.value })} rows={3} className=\\\"p-invalid\\\" />\\n                        </div>\\n                    </div>\\n                </div>\\n            </div>\\n        );\\n    }\\n}\\n                \"\n      },\n      'hooks': {\n        tabName: 'Hooks Source',\n        content: \"\\nimport React, { useState, useEffect } from 'react';\\nimport { InputText } from 'primereact/inputtext';\\nimport { AutoComplete } from 'primereact/autocomplete';\\nimport { Calendar } from 'primereact/calendar';\\nimport { Chips } from 'primereact/chips';\\nimport { Dropdown } from 'primereact/dropdown';\\nimport { InputMask } from 'primereact/inputmask';\\nimport { InputNumber } from 'primereact/inputnumber';\\nimport { InputTextarea } from 'primereact/inputtextarea';\\nimport { MultiSelect } from 'primereact/multiselect';\\nimport { CascadeSelect } from 'primereact/cascadeselect';\\nimport { CountryService } from '../service/CountryService';\\n\\nconst InvalidDemo = () => {\\n    const [countries, setCountries] = useState(null);\\n    const [filteredCountries, setFilteredCountries] = useState(null);\\n    const [value1, setValue1] = useState('');\\n    const [value2, setValue2] = useState(null);\\n    const [value3, setValue3] = useState(null);\\n    const [value4, setValue4] = useState(null);\\n    const [value5, setValue5] = useState(null);\\n    const [value6, setValue6] = useState(null);\\n    const [value7, setValue7] = useState(null);\\n    const [value8, setValue8] = useState(null);\\n    const [value9, setValue9] = useState('');\\n    const [value10, setValue10] = useState(null);\\n\\n    const countryservice = new CountryService();\\n    const cities = [\\n        { name: 'New York', code: 'NY' },\\n        { name: 'Rome', code: 'RM' },\\n        { name: 'London', code: 'LDN' },\\n        { name: 'Istanbul', code: 'IST' },\\n        { name: 'Paris', code: 'PRS' }\\n    ];\\n\\n    const cascadeSelectCountries = [\\n        {\\n            name: 'Australia',\\n            code: 'AU',\\n            states: [\\n                {\\n                    name: 'New South Wales',\\n                    cities: [\\n                        { cname: 'Sydney', code: 'A-SY' },\\n                        { cname: 'Newcastle', code: 'A-NE' },\\n                        { cname: 'Wollongong', code: 'A-WO' }\\n                    ]\\n                },\\n                {\\n                    name: 'Queensland',\\n                    cities: [\\n                        { cname: 'Brisbane', code: 'A-BR' },\\n                        { cname: 'Townsville', code: 'A-TO' }\\n                    ]\\n                },\\n\\n            ]\\n        },\\n        {\\n            name: 'Canada',\\n            code: 'CA',\\n            states: [\\n                {\\n                    name: 'Quebec',\\n                    cities: [\\n                        { cname: 'Montreal', code: 'C-MO' },\\n                        { cname: 'Quebec City', code: 'C-QU' }\\n                    ]\\n                },\\n                {\\n                    name: 'Ontario',\\n                    cities: [\\n                        { cname: 'Ottawa', code: 'C-OT' },\\n                        { cname: 'Toronto', code: 'C-TO' }\\n                    ]\\n                },\\n\\n            ]\\n        },\\n        {\\n            name: 'United States',\\n            code: 'US',\\n            states: [\\n                {\\n                    name: 'California',\\n                    cities: [\\n                        { cname: 'Los Angeles', code: 'US-LA' },\\n                        { cname: 'San Diego', code: 'US-SD' },\\n                        { cname: 'San Francisco', code: 'US-SF' }\\n                    ]\\n                },\\n                {\\n                    name: 'Florida',\\n                    cities: [\\n                        { cname: 'Jacksonville', code: 'US-JA' },\\n                        { cname: 'Miami', code: 'US-MI' },\\n                        { cname: 'Tampa', code: 'US-TA' },\\n                        { cname: 'Orlando', code: 'US-OR' }\\n                    ]\\n                },\\n                {\\n                    name: 'Texas',\\n                    cities: [\\n                        { cname: 'Austin', code: 'US-AU' },\\n                        { cname: 'Dallas', code: 'US-DA' },\\n                        { cname: 'Houston', code: 'US-HO' }\\n                    ]\\n                }\\n            ]\\n        }\\n    ];\\n\\n    useEffect(() => {\\n        countryservice.getCountries().then(data => setCountries(data));\\n    }, []); // eslint-disable-line react-hooks/exhaustive-deps\\n\\n    const searchCountry = (event) => {\\n        setTimeout(() => {\\n            let results = countries.filter((country) => {\\n                return country.name.toLowerCase().startsWith(event.query.toLowerCase());\\n            });\\n            setFilteredCountries(results);\\n        }, 250);\\n    }\\n\\n    return (\\n        <div>\\n            <div className=\\\"card\\\">\\n                <div className=\\\"p-fluid p-grid\\\">\\n                    <div className=\\\"p-field p-col-12 p-md-4\\\">\\n                        <label htmlFor=\\\"inputtext\\\">InputText</label>\\n                        <InputText id=\\\"inputtext\\\" value={value1} onChange={(e) => setValue1(e.target.value)} className=\\\"p-invalid\\\" />\\n                    </div>\\n                    <div className=\\\"p-field p-col-12 p-md-4\\\">\\n                        <label htmlFor=\\\"autocomplete\\\">AutoComplete</label>\\n                        <AutoComplete value={value2} suggestions={filteredCountries} completeMethod={searchCountry} field=\\\"name\\\" onChange={(e) => setValue2(e.value)} className=\\\"p-invalid\\\" />\\n                    </div>\\n                    <div className=\\\"p-field p-col-12 p-md-4\\\">\\n                        <label htmlFor=\\\"calendar\\\">Calendar</label>\\n                        <Calendar id=\\\"calendar\\\" value={value3} onChange={(e) => setValue3(e.value)} className=\\\"p-invalid\\\" />\\n                    </div>\\n                    <div className=\\\"p-field p-col-12 p-md-4\\\">\\n                        <label htmlFor=\\\"chips\\\">Chips</label>\\n                        <Chips id=\\\"chips\\\" value={value4} onChange={(e) => setValue4(e.value)} className=\\\"p-invalid\\\" />\\n                    </div>\\n                    <div className=\\\"p-field p-col-12 p-md-4\\\">\\n                        <label htmlFor=\\\"inputmask\\\">InputMask</label>\\n                        <InputMask id=\\\"inputmask\\\" value={value5} onChange={(e) => setValue5(e.value)} mask=\\\"99/99/9999\\\" slotChar=\\\"mm/dd/yyyy\\\" className=\\\"p-invalid\\\" />\\n                    </div>\\n                    <div className=\\\"p-field p-col-12 p-md-4\\\">\\n                        <label htmlFor=\\\"inputnumber\\\">InputNumber</label>\\n                        <InputNumber id=\\\"inputnumber\\\" value={value6} onChange={(e) => setValue6(e.value)} className=\\\"p-invalid\\\" />\\n                    </div>\\n                    <div className=\\\"p-field p-col-12 p-md-4\\\">\\n                        <label htmlFor=\\\"cascadeselect\\\">CascadeSelect</label>\\n                        <CascadeSelect id=\\\"cascadeselect\\\" value={value10} options={cascadeSelectCountries} optionLabel=\\\"cname\\\" optionGroupLabel=\\\"name\\\" optionGroupChildren={['states', 'cities']} onChange={(e) => setValue10(e.value)} className=\\\"p-invalid\\\"/>\\n                    </div>\\n                    <div className=\\\"p-field p-col-12 p-md-4\\\">\\n                        <label htmlFor=\\\"dropdown\\\">Dropdown</label>\\n                        <Dropdown id=\\\"dropdown\\\" value={value7} options={cities} onChange={(e) => setValue7(e.value)} optionLabel=\\\"name\\\" className=\\\"p-invalid\\\" />\\n                    </div>\\n                    <div className=\\\"p-field p-col-12 p-md-4\\\">\\n                        <label htmlFor=\\\"multiselect\\\">MultiSelect</label>\\n                        <MultiSelect id=\\\"multiselect\\\" value={value8} options={cities} onChange={(e) => setValue8(e.value)} optionLabel=\\\"name\\\" className=\\\"p-invalid\\\" />\\n                    </div>\\n                    <div className=\\\"p-field p-col-12 p-md-4\\\">\\n                        <label htmlFor=\\\"textarea\\\">Textarea</label>\\n                        <InputTextarea id=\\\"textarea\\\" value={value9} onChange={(e) => setValue9(e.value)} rows={3} className=\\\"p-invalid\\\" />\\n                    </div>\\n                </div>\\n            </div>\\n        </div>\\n    );\\n}\\n                \"\n      },\n      'ts': {\n        tabName: 'TS Source',\n        content: \"\\nimport React, { useState, useEffect } from 'react';\\nimport { InputText } from 'primereact/inputtext';\\nimport { AutoComplete } from 'primereact/autocomplete';\\nimport { Calendar } from 'primereact/calendar';\\nimport { Chips } from 'primereact/chips';\\nimport { Dropdown } from 'primereact/dropdown';\\nimport { InputMask } from 'primereact/inputmask';\\nimport { InputNumber } from 'primereact/inputnumber';\\nimport { InputTextarea } from 'primereact/inputtextarea';\\nimport { MultiSelect } from 'primereact/multiselect';\\nimport { CascadeSelect } from 'primereact/cascadeselect';\\nimport { CountryService } from '../service/CountryService';\\n\\nconst InvalidDemo = () => {\\n    const [countries, setCountries] = useState(null);\\n    const [filteredCountries, setFilteredCountries] = useState(null);\\n    const [value1, setValue1] = useState('');\\n    const [value2, setValue2] = useState(null);\\n    const [value3, setValue3] = useState(null);\\n    const [value4, setValue4] = useState(null);\\n    const [value5, setValue5] = useState(null);\\n    const [value6, setValue6] = useState(null);\\n    const [value7, setValue7] = useState(null);\\n    const [value8, setValue8] = useState(null);\\n    const [value9, setValue9] = useState('');\\n    const [value10, setValue10] = useState(null);\\n\\n    const cascadeSelectCountries = [\\n        {\\n            name: 'Australia',\\n            code: 'AU',\\n            states: [\\n                {\\n                    name: 'New South Wales',\\n                    cities: [\\n                        { cname: 'Sydney', code: 'A-SY' },\\n                        { cname: 'Newcastle', code: 'A-NE' },\\n                        { cname: 'Wollongong', code: 'A-WO' }\\n                    ]\\n                },\\n                {\\n                    name: 'Queensland',\\n                    cities: [\\n                        { cname: 'Brisbane', code: 'A-BR' },\\n                        { cname: 'Townsville', code: 'A-TO' }\\n                    ]\\n                },\\n\\n            ]\\n        },\\n        {\\n            name: 'Canada',\\n            code: 'CA',\\n            states: [\\n                {\\n                    name: 'Quebec',\\n                    cities: [\\n                        { cname: 'Montreal', code: 'C-MO' },\\n                        { cname: 'Quebec City', code: 'C-QU' }\\n                    ]\\n                },\\n                {\\n                    name: 'Ontario',\\n                    cities: [\\n                        { cname: 'Ottawa', code: 'C-OT' },\\n                        { cname: 'Toronto', code: 'C-TO' }\\n                    ]\\n                },\\n\\n            ]\\n        },\\n        {\\n            name: 'United States',\\n            code: 'US',\\n            states: [\\n                {\\n                    name: 'California',\\n                    cities: [\\n                        { cname: 'Los Angeles', code: 'US-LA' },\\n                        { cname: 'San Diego', code: 'US-SD' },\\n                        { cname: 'San Francisco', code: 'US-SF' }\\n                    ]\\n                },\\n                {\\n                    name: 'Florida',\\n                    cities: [\\n                        { cname: 'Jacksonville', code: 'US-JA' },\\n                        { cname: 'Miami', code: 'US-MI' },\\n                        { cname: 'Tampa', code: 'US-TA' },\\n                        { cname: 'Orlando', code: 'US-OR' }\\n                    ]\\n                },\\n                {\\n                    name: 'Texas',\\n                    cities: [\\n                        { cname: 'Austin', code: 'US-AU' },\\n                        { cname: 'Dallas', code: 'US-DA' },\\n                        { cname: 'Houston', code: 'US-HO' }\\n                    ]\\n                }\\n            ]\\n        }\\n    ];\\n\\n    const countryservice = new CountryService();\\n    const cities = [\\n        { name: 'New York', code: 'NY' },\\n        { name: 'Rome', code: 'RM' },\\n        { name: 'London', code: 'LDN' },\\n        { name: 'Istanbul', code: 'IST' },\\n        { name: 'Paris', code: 'PRS' }\\n    ];\\n\\n    useEffect(() => {\\n        countryservice.getCountries().then(data => setCountries(data));\\n    }, []); // eslint-disable-line react-hooks/exhaustive-deps\\n\\n    const searchCountry = (event) => {\\n        setTimeout(() => {\\n            let results = countries.filter((country) => {\\n                return country.name.toLowerCase().startsWith(event.query.toLowerCase());\\n            });\\n            setFilteredCountries(results);\\n        }, 250);\\n    }\\n\\n    return (\\n        <div>\\n            <div className=\\\"card\\\">\\n                <div className=\\\"p-fluid p-grid\\\">\\n                    <div className=\\\"p-field p-col-12 p-md-4\\\">\\n                        <label htmlFor=\\\"inputtext\\\">InputText</label>\\n                        <InputText id=\\\"inputtext\\\" value={value1} onChange={(e) => setValue1(e.target.value)} className=\\\"p-invalid\\\" />\\n                    </div>\\n                    <div className=\\\"p-field p-col-12 p-md-4\\\">\\n                        <label htmlFor=\\\"autocomplete\\\">AutoComplete</label>\\n                        <AutoComplete value={value2} suggestions={filteredCountries} completeMethod={searchCountry} field=\\\"name\\\" onChange={(e) => setValue2(e.value)} className=\\\"p-invalid\\\" />\\n                    </div>\\n                    <div className=\\\"p-field p-col-12 p-md-4\\\">\\n                        <label htmlFor=\\\"calendar\\\">Calendar</label>\\n                        <Calendar id=\\\"calendar\\\" value={value3} onChange={(e) => setValue3(e.value)} className=\\\"p-invalid\\\" />\\n                    </div>\\n                    <div className=\\\"p-field p-col-12 p-md-4\\\">\\n                        <label htmlFor=\\\"chips\\\">Chips</label>\\n                        <Chips id=\\\"chips\\\" value={value4} onChange={(e) => setValue4(e.value)} className=\\\"p-invalid\\\" />\\n                    </div>\\n                    <div className=\\\"p-field p-col-12 p-md-4\\\">\\n                        <label htmlFor=\\\"inputmask\\\">InputMask</label>\\n                        <InputMask id=\\\"inputmask\\\" value={value5} onChange={(e) => setValue5(e.value)} mask=\\\"99/99/9999\\\" slotChar=\\\"mm/dd/yyyy\\\" className=\\\"p-invalid\\\" />\\n                    </div>\\n                    <div className=\\\"p-field p-col-12 p-md-4\\\">\\n                        <label htmlFor=\\\"inputnumber\\\">InputNumber</label>\\n                        <InputNumber id=\\\"inputnumber\\\" value={value6} onChange={(e) => setValue6(e.value)} className=\\\"p-invalid\\\" />\\n                    </div>\\n                    <div className=\\\"p-field p-col-12 p-md-4\\\">\\n                        <label htmlFor=\\\"cascadeselect\\\">CascadeSelect</label>\\n                        <CascadeSelect id=\\\"cascadeselect\\\" value={value10} options={cascadeSelectCountries} optionLabel=\\\"cname\\\" optionGroupLabel=\\\"name\\\" optionGroupChildren={['states', 'cities']} onChange={(e) => setValue10(e.value)} className=\\\"p-invalid\\\"/>\\n                    </div>\\n                    <div className=\\\"p-field p-col-12 p-md-4\\\">\\n                        <label htmlFor=\\\"dropdown\\\">Dropdown</label>\\n                        <Dropdown id=\\\"dropdown\\\" value={value7} options={cities} onChange={(e) => setValue7(e.value)} optionLabel=\\\"name\\\" className=\\\"p-invalid\\\" />\\n                    </div>\\n                    <div className=\\\"p-field p-col-12 p-md-4\\\">\\n                        <label htmlFor=\\\"multiselect\\\">MultiSelect</label>\\n                        <MultiSelect id=\\\"multiselect\\\" value={value8} options={cities} onChange={(e) => setValue8(e.value)} optionLabel=\\\"name\\\" className=\\\"p-invalid\\\" />\\n                    </div>\\n                    <div className=\\\"p-field p-col-12 p-md-4\\\">\\n                        <label htmlFor=\\\"textarea\\\">Textarea</label>\\n                        <InputTextarea id=\\\"textarea\\\" value={value9} onChange={(e) => setValue9(e.value)} rows={3} className=\\\"p-invalid\\\" />\\n                    </div>\\n                </div>\\n            </div>\\n        </div>\\n    );\\n}\\n                \"\n      }\n    };\n    return _this;\n  }\n\n  _createClass(InvalidDoc, [{\n    key: \"shouldComponentUpdate\",\n    value: function shouldComponentUpdate() {\n      return false;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"content-section documentation\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 569,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(TabView, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 570,\n          columnNumber: 17\n        }\n      }, useLiveEditorTabs({\n        name: 'InvalidDemo',\n        sources: this.sources,\n        service: 'CountryService',\n        data: 'countries'\n      })));\n    }\n  }]);\n\n  return InvalidDoc;\n}(Component);","map":{"version":3,"sources":["C:/Users/zura.ph/WebstormProjects/zloto/src/showcase/invalid/InvalidDoc.js"],"names":["React","Component","TabView","useLiveEditorTabs","InvalidDoc","props","sources","tabName","content","name","service","data"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,OAAT,QAAwB,kCAAxB;AACA,SAASC,iBAAT,QAAkC,0BAAlC;AAEA,WAAaC,UAAb;AAAA;;AAAA;;AAEI,sBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACf,8BAAMA,KAAN;AAEA,UAAKC,OAAL,GAAe;AACX,eAAS;AACLC,QAAAA,OAAO,EAAE,cADJ;AAELC,QAAAA,OAAO;AAFF,OADE;AA8LX,eAAS;AACLD,QAAAA,OAAO,EAAE,cADJ;AAELC,QAAAA,OAAO;AAFF,OA9LE;AAkXX,YAAM;AACFD,QAAAA,OAAO,EAAE,WADP;AAEFC,QAAAA,OAAO;AAFL;AAlXK,KAAf;AAHe;AA0iBlB;;AA5iBL;AAAA;AAAA,WA8iBI,iCAAwB;AACpB,aAAO,KAAP;AACH;AAhjBL;AAAA;AAAA,WAkjBI,kBAAS;AACL,0BACI;AAAK,QAAA,SAAS,EAAC,+BAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAEQL,iBAAiB,CAAC;AAAEM,QAAAA,IAAI,EAAE,aAAR;AAAuBH,QAAAA,OAAO,EAAE,KAAKA,OAArC;AAA8CI,QAAAA,OAAO,EAAE,gBAAvD;AAAyEC,QAAAA,IAAI,EAAE;AAA/E,OAAD,CAFzB,CADJ,CADJ;AASH;AA5jBL;;AAAA;AAAA,EAAgCV,SAAhC","sourcesContent":["import React, { Component } from 'react';\r\nimport { TabView } from '../../components/tabview/TabView';\r\nimport { useLiveEditorTabs } from '../liveeditor/LiveEditor';\r\n\r\nexport class InvalidDoc extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.sources = {\r\n            'class': {\r\n                tabName: 'Class Source',\r\n                content: `\r\nimport React, { Component } from 'react';\r\nimport { InputText } from 'primereact/inputtext';\r\nimport { AutoComplete } from 'primereact/autocomplete';\r\nimport { Calendar } from 'primereact/calendar';\r\nimport { Chips } from 'primereact/chips';\r\nimport { Dropdown } from 'primereact/dropdown';\r\nimport { InputMask } from 'primereact/inputmask';\r\nimport { InputNumber } from 'primereact/inputnumber';\r\nimport { InputTextarea } from 'primereact/inputtextarea';\r\nimport { MultiSelect } from 'primereact/multiselect';\r\nimport { CascadeSelect } from 'primereact/cascadeselect';\r\nimport { CountryService } from '../service/CountryService';\r\n\r\nexport class InvalidDemo extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            countries: null,\r\n            filteredCountries: null,\r\n            cities: [\r\n                { name: 'New York', code: 'NY' },\r\n                { name: 'Rome', code: 'RM' },\r\n                { name: 'London', code: 'LDN' },\r\n                { name: 'Istanbul', code: 'IST' },\r\n                { name: 'Paris', code: 'PRS' }\r\n            ],\r\n            value1: '',\r\n            value2: null,\r\n            value3: null,\r\n            value4: null,\r\n            value5: null,\r\n            value6: null,\r\n            value7: null,\r\n            value8: null,\r\n            value9: '',\r\n            value10: null\r\n        };\r\n\r\n        this.cascadeSelectCountries = [\r\n            {\r\n                name: 'Australia',\r\n                code: 'AU',\r\n                states: [\r\n                    {\r\n                        name: 'New South Wales',\r\n                        cities: [\r\n                            { cname: 'Sydney', code: 'A-SY' },\r\n                            { cname: 'Newcastle', code: 'A-NE' },\r\n                            { cname: 'Wollongong', code: 'A-WO' }\r\n                        ]\r\n                    },\r\n                    {\r\n                        name: 'Queensland',\r\n                        cities: [\r\n                            { cname: 'Brisbane', code: 'A-BR' },\r\n                            { cname: 'Townsville', code: 'A-TO' }\r\n                        ]\r\n                    },\r\n\r\n                ]\r\n            },\r\n            {\r\n                name: 'Canada',\r\n                code: 'CA',\r\n                states: [\r\n                    {\r\n                        name: 'Quebec',\r\n                        cities: [\r\n                            { cname: 'Montreal', code: 'C-MO' },\r\n                            { cname: 'Quebec City', code: 'C-QU' }\r\n                        ]\r\n                    },\r\n                    {\r\n                        name: 'Ontario',\r\n                        cities: [\r\n                            { cname: 'Ottawa', code: 'C-OT' },\r\n                            { cname: 'Toronto', code: 'C-TO' }\r\n                        ]\r\n                    },\r\n\r\n                ]\r\n            },\r\n            {\r\n                name: 'United States',\r\n                code: 'US',\r\n                states: [\r\n                    {\r\n                        name: 'California',\r\n                        cities: [\r\n                            { cname: 'Los Angeles', code: 'US-LA' },\r\n                            { cname: 'San Diego', code: 'US-SD' },\r\n                            { cname: 'San Francisco', code: 'US-SF' }\r\n                        ]\r\n                    },\r\n                    {\r\n                        name: 'Florida',\r\n                        cities: [\r\n                            { cname: 'Jacksonville', code: 'US-JA' },\r\n                            { cname: 'Miami', code: 'US-MI' },\r\n                            { cname: 'Tampa', code: 'US-TA' },\r\n                            { cname: 'Orlando', code: 'US-OR' }\r\n                        ]\r\n                    },\r\n                    {\r\n                        name: 'Texas',\r\n                        cities: [\r\n                            { cname: 'Austin', code: 'US-AU' },\r\n                            { cname: 'Dallas', code: 'US-DA' },\r\n                            { cname: 'Houston', code: 'US-HO' }\r\n                        ]\r\n                    }\r\n                ]\r\n            }\r\n        ];\r\n\r\n        this.countryservice = new CountryService();\r\n        this.searchCountry = this.searchCountry.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.countryservice.getCountries().then(data => this.setState({ countries: data }));\r\n    }\r\n\r\n    searchCountry(event) {\r\n        setTimeout(() => {\r\n            let results = this.state.countries.filter((country) => {\r\n                return country.name.toLowerCase().startsWith(event.query.toLowerCase());\r\n            });\r\n            this.setState({ filteredCountries: results });\r\n        }, 250);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div className=\"card\">\r\n                    <div className=\"p-fluid p-grid\">\r\n                        <div className=\"p-field p-col-12 p-md-4\">\r\n                            <label htmlFor=\"inputtext\">InputText</label>\r\n                            <InputText id=\"inputtext\" value={this.state.value1} onChange={(e) => this.setState({ value1: e.target.value })} className=\"p-invalid\" />\r\n                        </div>\r\n                        <div className=\"p-field p-col-12 p-md-4\">\r\n                            <label htmlFor=\"autocomplete\">AutoComplete</label>\r\n                            <AutoComplete value={this.state.value2} suggestions={this.state.filteredCountries} completeMethod={this.searchCountry} field=\"name\" onChange={(e) => this.setState({ value2: e.value })} className=\"p-invalid\" />\r\n                        </div>\r\n                        <div className=\"p-field p-col-12 p-md-4\">\r\n                            <label htmlFor=\"calendar\">Calendar</label>\r\n                            <Calendar id=\"calendar\" value={this.state.value3} onChange={(e) => this.setState({ value3: e.value })} className=\"p-invalid\" />\r\n                        </div>\r\n                        <div className=\"p-field p-col-12 p-md-4\">\r\n                            <label htmlFor=\"chips\">Chips</label>\r\n                            <Chips id=\"chips\" value={this.state.value4} onChange={(e) => this.setState({ value4: e.value })} className=\"p-invalid\" />\r\n                        </div>\r\n                        <div className=\"p-field p-col-12 p-md-4\">\r\n                            <label htmlFor=\"inputmask\">InputMask</label>\r\n                            <InputMask id=\"inputmask\" value={this.state.value5} onChange={(e) => this.setState({ value5: e.value })} mask=\"99/99/9999\" slotChar=\"mm/dd/yyyy\" className=\"p-invalid\" />\r\n                        </div>\r\n                        <div className=\"p-field p-col-12 p-md-4\">\r\n                            <label htmlFor=\"inputnumber\">InputNumber</label>\r\n                            <InputNumber id=\"inputnumber\" value={this.state.value6} onChange={(e) => this.setState({ value6: e.value })} className=\"p-invalid\" />\r\n                        </div>\r\n                        <div className=\"p-field p-col-12 p-md-4\">\r\n                            <label htmlFor=\"cascadeselect\">CascadeSelect</label>\r\n                            <CascadeSelect id=\"cascadeselect\" value={this.state.value10} options={this.cascadeSelectCountries} optionLabel=\"cname\" optionGroupLabel=\"name\" optionGroupChildren={['states', 'cities']} onChange={event => this.setState({ value10: event.value })} className=\"p-invalid\"/>\r\n                        </div>\r\n                        <div className=\"p-field p-col-12 p-md-4\">\r\n                            <label htmlFor=\"dropdown\">Dropdown</label>\r\n                            <Dropdown id=\"dropdown\" value={this.state.value7} options={this.state.cities} onChange={(e) => this.setState({ value7: e.value })} optionLabel=\"name\" className=\"p-invalid\" />\r\n                        </div>\r\n                        <div className=\"p-field p-col-12 p-md-4\">\r\n                            <label htmlFor=\"multiselect\">MultiSelect</label>\r\n                            <MultiSelect id=\"multiselect\" value={this.state.value8} options={this.state.cities} onChange={(e) => this.setState({ value8: e.value })} optionLabel=\"name\" className=\"p-invalid\" />\r\n                        </div>\r\n                        <div className=\"p-field p-col-12 p-md-4\">\r\n                            <label htmlFor=\"textarea\">Textarea</label>\r\n                            <InputTextarea id=\"textarea\" value={this.state.value9} onChange={(e) => this.setState({ value9: e.target.value })} rows={3} className=\"p-invalid\" />\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n                `\r\n            },\r\n            'hooks': {\r\n                tabName: 'Hooks Source',\r\n                content: `\r\nimport React, { useState, useEffect } from 'react';\r\nimport { InputText } from 'primereact/inputtext';\r\nimport { AutoComplete } from 'primereact/autocomplete';\r\nimport { Calendar } from 'primereact/calendar';\r\nimport { Chips } from 'primereact/chips';\r\nimport { Dropdown } from 'primereact/dropdown';\r\nimport { InputMask } from 'primereact/inputmask';\r\nimport { InputNumber } from 'primereact/inputnumber';\r\nimport { InputTextarea } from 'primereact/inputtextarea';\r\nimport { MultiSelect } from 'primereact/multiselect';\r\nimport { CascadeSelect } from 'primereact/cascadeselect';\r\nimport { CountryService } from '../service/CountryService';\r\n\r\nconst InvalidDemo = () => {\r\n    const [countries, setCountries] = useState(null);\r\n    const [filteredCountries, setFilteredCountries] = useState(null);\r\n    const [value1, setValue1] = useState('');\r\n    const [value2, setValue2] = useState(null);\r\n    const [value3, setValue3] = useState(null);\r\n    const [value4, setValue4] = useState(null);\r\n    const [value5, setValue5] = useState(null);\r\n    const [value6, setValue6] = useState(null);\r\n    const [value7, setValue7] = useState(null);\r\n    const [value8, setValue8] = useState(null);\r\n    const [value9, setValue9] = useState('');\r\n    const [value10, setValue10] = useState(null);\r\n\r\n    const countryservice = new CountryService();\r\n    const cities = [\r\n        { name: 'New York', code: 'NY' },\r\n        { name: 'Rome', code: 'RM' },\r\n        { name: 'London', code: 'LDN' },\r\n        { name: 'Istanbul', code: 'IST' },\r\n        { name: 'Paris', code: 'PRS' }\r\n    ];\r\n\r\n    const cascadeSelectCountries = [\r\n        {\r\n            name: 'Australia',\r\n            code: 'AU',\r\n            states: [\r\n                {\r\n                    name: 'New South Wales',\r\n                    cities: [\r\n                        { cname: 'Sydney', code: 'A-SY' },\r\n                        { cname: 'Newcastle', code: 'A-NE' },\r\n                        { cname: 'Wollongong', code: 'A-WO' }\r\n                    ]\r\n                },\r\n                {\r\n                    name: 'Queensland',\r\n                    cities: [\r\n                        { cname: 'Brisbane', code: 'A-BR' },\r\n                        { cname: 'Townsville', code: 'A-TO' }\r\n                    ]\r\n                },\r\n\r\n            ]\r\n        },\r\n        {\r\n            name: 'Canada',\r\n            code: 'CA',\r\n            states: [\r\n                {\r\n                    name: 'Quebec',\r\n                    cities: [\r\n                        { cname: 'Montreal', code: 'C-MO' },\r\n                        { cname: 'Quebec City', code: 'C-QU' }\r\n                    ]\r\n                },\r\n                {\r\n                    name: 'Ontario',\r\n                    cities: [\r\n                        { cname: 'Ottawa', code: 'C-OT' },\r\n                        { cname: 'Toronto', code: 'C-TO' }\r\n                    ]\r\n                },\r\n\r\n            ]\r\n        },\r\n        {\r\n            name: 'United States',\r\n            code: 'US',\r\n            states: [\r\n                {\r\n                    name: 'California',\r\n                    cities: [\r\n                        { cname: 'Los Angeles', code: 'US-LA' },\r\n                        { cname: 'San Diego', code: 'US-SD' },\r\n                        { cname: 'San Francisco', code: 'US-SF' }\r\n                    ]\r\n                },\r\n                {\r\n                    name: 'Florida',\r\n                    cities: [\r\n                        { cname: 'Jacksonville', code: 'US-JA' },\r\n                        { cname: 'Miami', code: 'US-MI' },\r\n                        { cname: 'Tampa', code: 'US-TA' },\r\n                        { cname: 'Orlando', code: 'US-OR' }\r\n                    ]\r\n                },\r\n                {\r\n                    name: 'Texas',\r\n                    cities: [\r\n                        { cname: 'Austin', code: 'US-AU' },\r\n                        { cname: 'Dallas', code: 'US-DA' },\r\n                        { cname: 'Houston', code: 'US-HO' }\r\n                    ]\r\n                }\r\n            ]\r\n        }\r\n    ];\r\n\r\n    useEffect(() => {\r\n        countryservice.getCountries().then(data => setCountries(data));\r\n    }, []); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n    const searchCountry = (event) => {\r\n        setTimeout(() => {\r\n            let results = countries.filter((country) => {\r\n                return country.name.toLowerCase().startsWith(event.query.toLowerCase());\r\n            });\r\n            setFilteredCountries(results);\r\n        }, 250);\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"card\">\r\n                <div className=\"p-fluid p-grid\">\r\n                    <div className=\"p-field p-col-12 p-md-4\">\r\n                        <label htmlFor=\"inputtext\">InputText</label>\r\n                        <InputText id=\"inputtext\" value={value1} onChange={(e) => setValue1(e.target.value)} className=\"p-invalid\" />\r\n                    </div>\r\n                    <div className=\"p-field p-col-12 p-md-4\">\r\n                        <label htmlFor=\"autocomplete\">AutoComplete</label>\r\n                        <AutoComplete value={value2} suggestions={filteredCountries} completeMethod={searchCountry} field=\"name\" onChange={(e) => setValue2(e.value)} className=\"p-invalid\" />\r\n                    </div>\r\n                    <div className=\"p-field p-col-12 p-md-4\">\r\n                        <label htmlFor=\"calendar\">Calendar</label>\r\n                        <Calendar id=\"calendar\" value={value3} onChange={(e) => setValue3(e.value)} className=\"p-invalid\" />\r\n                    </div>\r\n                    <div className=\"p-field p-col-12 p-md-4\">\r\n                        <label htmlFor=\"chips\">Chips</label>\r\n                        <Chips id=\"chips\" value={value4} onChange={(e) => setValue4(e.value)} className=\"p-invalid\" />\r\n                    </div>\r\n                    <div className=\"p-field p-col-12 p-md-4\">\r\n                        <label htmlFor=\"inputmask\">InputMask</label>\r\n                        <InputMask id=\"inputmask\" value={value5} onChange={(e) => setValue5(e.value)} mask=\"99/99/9999\" slotChar=\"mm/dd/yyyy\" className=\"p-invalid\" />\r\n                    </div>\r\n                    <div className=\"p-field p-col-12 p-md-4\">\r\n                        <label htmlFor=\"inputnumber\">InputNumber</label>\r\n                        <InputNumber id=\"inputnumber\" value={value6} onChange={(e) => setValue6(e.value)} className=\"p-invalid\" />\r\n                    </div>\r\n                    <div className=\"p-field p-col-12 p-md-4\">\r\n                        <label htmlFor=\"cascadeselect\">CascadeSelect</label>\r\n                        <CascadeSelect id=\"cascadeselect\" value={value10} options={cascadeSelectCountries} optionLabel=\"cname\" optionGroupLabel=\"name\" optionGroupChildren={['states', 'cities']} onChange={(e) => setValue10(e.value)} className=\"p-invalid\"/>\r\n                    </div>\r\n                    <div className=\"p-field p-col-12 p-md-4\">\r\n                        <label htmlFor=\"dropdown\">Dropdown</label>\r\n                        <Dropdown id=\"dropdown\" value={value7} options={cities} onChange={(e) => setValue7(e.value)} optionLabel=\"name\" className=\"p-invalid\" />\r\n                    </div>\r\n                    <div className=\"p-field p-col-12 p-md-4\">\r\n                        <label htmlFor=\"multiselect\">MultiSelect</label>\r\n                        <MultiSelect id=\"multiselect\" value={value8} options={cities} onChange={(e) => setValue8(e.value)} optionLabel=\"name\" className=\"p-invalid\" />\r\n                    </div>\r\n                    <div className=\"p-field p-col-12 p-md-4\">\r\n                        <label htmlFor=\"textarea\">Textarea</label>\r\n                        <InputTextarea id=\"textarea\" value={value9} onChange={(e) => setValue9(e.value)} rows={3} className=\"p-invalid\" />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n                `\r\n            },\r\n            'ts': {\r\n                tabName: 'TS Source',\r\n                content: `\r\nimport React, { useState, useEffect } from 'react';\r\nimport { InputText } from 'primereact/inputtext';\r\nimport { AutoComplete } from 'primereact/autocomplete';\r\nimport { Calendar } from 'primereact/calendar';\r\nimport { Chips } from 'primereact/chips';\r\nimport { Dropdown } from 'primereact/dropdown';\r\nimport { InputMask } from 'primereact/inputmask';\r\nimport { InputNumber } from 'primereact/inputnumber';\r\nimport { InputTextarea } from 'primereact/inputtextarea';\r\nimport { MultiSelect } from 'primereact/multiselect';\r\nimport { CascadeSelect } from 'primereact/cascadeselect';\r\nimport { CountryService } from '../service/CountryService';\r\n\r\nconst InvalidDemo = () => {\r\n    const [countries, setCountries] = useState(null);\r\n    const [filteredCountries, setFilteredCountries] = useState(null);\r\n    const [value1, setValue1] = useState('');\r\n    const [value2, setValue2] = useState(null);\r\n    const [value3, setValue3] = useState(null);\r\n    const [value4, setValue4] = useState(null);\r\n    const [value5, setValue5] = useState(null);\r\n    const [value6, setValue6] = useState(null);\r\n    const [value7, setValue7] = useState(null);\r\n    const [value8, setValue8] = useState(null);\r\n    const [value9, setValue9] = useState('');\r\n    const [value10, setValue10] = useState(null);\r\n\r\n    const cascadeSelectCountries = [\r\n        {\r\n            name: 'Australia',\r\n            code: 'AU',\r\n            states: [\r\n                {\r\n                    name: 'New South Wales',\r\n                    cities: [\r\n                        { cname: 'Sydney', code: 'A-SY' },\r\n                        { cname: 'Newcastle', code: 'A-NE' },\r\n                        { cname: 'Wollongong', code: 'A-WO' }\r\n                    ]\r\n                },\r\n                {\r\n                    name: 'Queensland',\r\n                    cities: [\r\n                        { cname: 'Brisbane', code: 'A-BR' },\r\n                        { cname: 'Townsville', code: 'A-TO' }\r\n                    ]\r\n                },\r\n\r\n            ]\r\n        },\r\n        {\r\n            name: 'Canada',\r\n            code: 'CA',\r\n            states: [\r\n                {\r\n                    name: 'Quebec',\r\n                    cities: [\r\n                        { cname: 'Montreal', code: 'C-MO' },\r\n                        { cname: 'Quebec City', code: 'C-QU' }\r\n                    ]\r\n                },\r\n                {\r\n                    name: 'Ontario',\r\n                    cities: [\r\n                        { cname: 'Ottawa', code: 'C-OT' },\r\n                        { cname: 'Toronto', code: 'C-TO' }\r\n                    ]\r\n                },\r\n\r\n            ]\r\n        },\r\n        {\r\n            name: 'United States',\r\n            code: 'US',\r\n            states: [\r\n                {\r\n                    name: 'California',\r\n                    cities: [\r\n                        { cname: 'Los Angeles', code: 'US-LA' },\r\n                        { cname: 'San Diego', code: 'US-SD' },\r\n                        { cname: 'San Francisco', code: 'US-SF' }\r\n                    ]\r\n                },\r\n                {\r\n                    name: 'Florida',\r\n                    cities: [\r\n                        { cname: 'Jacksonville', code: 'US-JA' },\r\n                        { cname: 'Miami', code: 'US-MI' },\r\n                        { cname: 'Tampa', code: 'US-TA' },\r\n                        { cname: 'Orlando', code: 'US-OR' }\r\n                    ]\r\n                },\r\n                {\r\n                    name: 'Texas',\r\n                    cities: [\r\n                        { cname: 'Austin', code: 'US-AU' },\r\n                        { cname: 'Dallas', code: 'US-DA' },\r\n                        { cname: 'Houston', code: 'US-HO' }\r\n                    ]\r\n                }\r\n            ]\r\n        }\r\n    ];\r\n\r\n    const countryservice = new CountryService();\r\n    const cities = [\r\n        { name: 'New York', code: 'NY' },\r\n        { name: 'Rome', code: 'RM' },\r\n        { name: 'London', code: 'LDN' },\r\n        { name: 'Istanbul', code: 'IST' },\r\n        { name: 'Paris', code: 'PRS' }\r\n    ];\r\n\r\n    useEffect(() => {\r\n        countryservice.getCountries().then(data => setCountries(data));\r\n    }, []); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n    const searchCountry = (event) => {\r\n        setTimeout(() => {\r\n            let results = countries.filter((country) => {\r\n                return country.name.toLowerCase().startsWith(event.query.toLowerCase());\r\n            });\r\n            setFilteredCountries(results);\r\n        }, 250);\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"card\">\r\n                <div className=\"p-fluid p-grid\">\r\n                    <div className=\"p-field p-col-12 p-md-4\">\r\n                        <label htmlFor=\"inputtext\">InputText</label>\r\n                        <InputText id=\"inputtext\" value={value1} onChange={(e) => setValue1(e.target.value)} className=\"p-invalid\" />\r\n                    </div>\r\n                    <div className=\"p-field p-col-12 p-md-4\">\r\n                        <label htmlFor=\"autocomplete\">AutoComplete</label>\r\n                        <AutoComplete value={value2} suggestions={filteredCountries} completeMethod={searchCountry} field=\"name\" onChange={(e) => setValue2(e.value)} className=\"p-invalid\" />\r\n                    </div>\r\n                    <div className=\"p-field p-col-12 p-md-4\">\r\n                        <label htmlFor=\"calendar\">Calendar</label>\r\n                        <Calendar id=\"calendar\" value={value3} onChange={(e) => setValue3(e.value)} className=\"p-invalid\" />\r\n                    </div>\r\n                    <div className=\"p-field p-col-12 p-md-4\">\r\n                        <label htmlFor=\"chips\">Chips</label>\r\n                        <Chips id=\"chips\" value={value4} onChange={(e) => setValue4(e.value)} className=\"p-invalid\" />\r\n                    </div>\r\n                    <div className=\"p-field p-col-12 p-md-4\">\r\n                        <label htmlFor=\"inputmask\">InputMask</label>\r\n                        <InputMask id=\"inputmask\" value={value5} onChange={(e) => setValue5(e.value)} mask=\"99/99/9999\" slotChar=\"mm/dd/yyyy\" className=\"p-invalid\" />\r\n                    </div>\r\n                    <div className=\"p-field p-col-12 p-md-4\">\r\n                        <label htmlFor=\"inputnumber\">InputNumber</label>\r\n                        <InputNumber id=\"inputnumber\" value={value6} onChange={(e) => setValue6(e.value)} className=\"p-invalid\" />\r\n                    </div>\r\n                    <div className=\"p-field p-col-12 p-md-4\">\r\n                        <label htmlFor=\"cascadeselect\">CascadeSelect</label>\r\n                        <CascadeSelect id=\"cascadeselect\" value={value10} options={cascadeSelectCountries} optionLabel=\"cname\" optionGroupLabel=\"name\" optionGroupChildren={['states', 'cities']} onChange={(e) => setValue10(e.value)} className=\"p-invalid\"/>\r\n                    </div>\r\n                    <div className=\"p-field p-col-12 p-md-4\">\r\n                        <label htmlFor=\"dropdown\">Dropdown</label>\r\n                        <Dropdown id=\"dropdown\" value={value7} options={cities} onChange={(e) => setValue7(e.value)} optionLabel=\"name\" className=\"p-invalid\" />\r\n                    </div>\r\n                    <div className=\"p-field p-col-12 p-md-4\">\r\n                        <label htmlFor=\"multiselect\">MultiSelect</label>\r\n                        <MultiSelect id=\"multiselect\" value={value8} options={cities} onChange={(e) => setValue8(e.value)} optionLabel=\"name\" className=\"p-invalid\" />\r\n                    </div>\r\n                    <div className=\"p-field p-col-12 p-md-4\">\r\n                        <label htmlFor=\"textarea\">Textarea</label>\r\n                        <InputTextarea id=\"textarea\" value={value9} onChange={(e) => setValue9(e.value)} rows={3} className=\"p-invalid\" />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n                `\r\n            },\r\n        }\r\n    }\r\n\r\n    shouldComponentUpdate() {\r\n        return false;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"content-section documentation\">\r\n                <TabView>\r\n                    {\r\n                        useLiveEditorTabs({ name: 'InvalidDemo', sources: this.sources, service: 'CountryService', data: 'countries' })\r\n                    }\r\n                </TabView>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}