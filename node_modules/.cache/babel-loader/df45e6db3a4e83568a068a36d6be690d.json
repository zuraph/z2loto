{"ast":null,"code":"import _classCallCheck from\"C:\\\\Users\\\\zura.ph\\\\WebstormProjects\\\\zz-regul\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";import _createClass from\"C:\\\\Users\\\\zura.ph\\\\WebstormProjects\\\\zz-regul\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";import _inherits from\"C:\\\\Users\\\\zura.ph\\\\WebstormProjects\\\\zz-regul\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";import _createSuper from\"C:\\\\Users\\\\zura.ph\\\\WebstormProjects\\\\zz-regul\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createSuper\";import React,{Component}from'react';import{TabView,TabPanel}from'../../components/tabview/TabView';import{CodeHighlight}from'../codehighlight/CodeHighlight';import{useLiveEditorTabs}from'../liveeditor/LiveEditor';export var AutoCompleteDoc=/*#__PURE__*/function(_Component){_inherits(AutoCompleteDoc,_Component);var _super=_createSuper(AutoCompleteDoc);function AutoCompleteDoc(props){var _this;_classCallCheck(this,AutoCompleteDoc);_this=_super.call(this,props);_this.sources={'class':{tabName:'Class Source',content:\"\\nimport React, { Component } from 'react';\\nimport { AutoComplete } from 'primereact/autocomplete';\\nimport { CountryService } from '../service/CountryService';\\n\\nexport class AutoCompleteDemo extends Component {\\n\\n    constructor(props) {\\n        super(props);\\n        this.state = {\\n            countries: [],\\n            selectedCountry1: null,\\n            selectedCountry2: null,\\n            selectedCountries: null,\\n            filteredCountries: null\\n        };\\n\\n        this.searchCountry = this.searchCountry.bind(this);\\n        this.itemTemplate = this.itemTemplate.bind(this);\\n        this.countryservice = new CountryService();\\n    }\\n\\n    componentDidMount() {\\n        this.countryservice.getCountries().then(data => this.setState({ countries: data }));\\n    }\\n\\n    searchCountry(event) {\\n        setTimeout(() => {\\n            let filteredCountries;\\n            if (!event.query.trim().length) {\\n                filteredCountries = [...this.state.countries];\\n            }\\n            else {\\n                filteredCountries = this.state.countries.filter((country) => {\\n                    return country.name.toLowerCase().startsWith(event.query.toLowerCase());\\n                });\\n            }\\n\\n            this.setState({ filteredCountries });\\n        }, 250);\\n    }\\n\\n    itemTemplate(item) {\\n        return (\\n            <div className=\\\"country-item\\\">\\n                <img alt={item.name} src={`showcase/demo/images/flag_placeholder.png`} onError={(e) => e.target.src='https://www.primefaces.org/wp-content/uploads/2020/05/placeholder.png'} className={`flag flag-${item.code.toLowerCase()}`} />\\n                <div>{item.name}</div>\\n            </div>\\n        );\\n    }\\n\\n    render() {\\n        return (\\n            <div className=\\\"card\\\">\\n                <h5>Basic</h5>\\n                <AutoComplete value={this.state.selectedCountry1} suggestions={this.state.filteredCountries} completeMethod={this.searchCountry} field=\\\"name\\\" onChange={(e) => this.setState({ selectedCountry1: e.value })} />\\n\\n                <h5>Dropdown, Templating and Force Selection</h5>\\n                <AutoComplete value={this.state.selectedCountry2} suggestions={this.state.filteredCountries} completeMethod={this.searchCountry} field=\\\"name\\\" dropdown forceSelection itemTemplate={this.itemTemplate} onChange={(e) => this.setState({ selectedCountry2: e.value })} />\\n\\n                <h5>Multiple</h5>\\n                <span className=\\\"p-fluid\\\">\\n                    <AutoComplete value={this.state.selectedCountries} suggestions={this.state.filteredCountries} completeMethod={this.searchCountry} field=\\\"name\\\" multiple onChange={(e) => this.setState({ selectedCountries: e.value })} />\\n                </span>\\n            </div>\\n        )\\n    }\\n}\\n                \"},'hooks':{tabName:'Hooks Source',content:\"\\nimport React, { useState, useEffect } from 'react';\\nimport { AutoComplete } from 'primereact/autocomplete';\\nimport { CountryService } from '../service/CountryService';\\n\\nconst AutoCompleteDemo = () => {\\n    const [countries, setCountries] = useState([]);\\n    const [selectedCountry1, setSelectedCountry1] = useState(null);\\n    const [selectedCountry2, setSelectedCountry2] = useState(null);\\n    const [selectedCountries, setSelectedCountries] = useState(null);\\n    const [filteredCountries, setFilteredCountries] = useState(null);\\n    const countryservice = new CountryService();\\n\\n    useEffect(() => {\\n        countryservice.getCountries().then(data => setCountries(data));\\n    }, []); // eslint-disable-line react-hooks/exhaustive-deps\\n\\n    const searchCountry = (event) => {\\n        setTimeout(() => {\\n            let filteredCountries;\\n            if (!event.query.trim().length) {\\n                filteredCountries = [...countries];\\n            }\\n            else {\\n                filteredCountries = countries.filter((country) => {\\n                    return country.name.toLowerCase().startsWith(event.query.toLowerCase());\\n                });\\n            }\\n\\n            setFilteredCountries(filteredCountries);\\n        }, 250);\\n    }\\n\\n    const itemTemplate = (item) => {\\n        return (\\n            <div className=\\\"country-item\\\">\\n                <img alt={item.name} src={`showcase/demo/images/flag_placeholder.png`} onError={(e) => e.target.src='https://www.primefaces.org/wp-content/uploads/2020/05/placeholder.png'} className={`flag flag-${item.code.toLowerCase()}`} />\\n                <div>{item.name}</div>\\n            </div>\\n        );\\n    }\\n\\n    return (\\n        <div className=\\\"card\\\">\\n            <h5>Basic</h5>\\n            <AutoComplete value={selectedCountry1} suggestions={filteredCountries} completeMethod={searchCountry} field=\\\"name\\\" onChange={(e) => setSelectedCountry1(e.value)} />\\n\\n            <h5>Dropdown, Templating and Force Selection</h5>\\n            <AutoComplete value={selectedCountry2} suggestions={filteredCountries} completeMethod={searchCountry} field=\\\"name\\\" dropdown forceSelection itemTemplate={itemTemplate} onChange={(e) => setSelectedCountry2(e.value)} />\\n\\n            <h5>Multiple</h5>\\n            <span className=\\\"p-fluid\\\">\\n                <AutoComplete value={selectedCountries} suggestions={filteredCountries} completeMethod={searchCountry} field=\\\"name\\\" multiple onChange={(e) => setSelectedCountries(e.value)} />\\n            </span>\\n        </div>\\n    )\\n}\\n                \"},'ts':{tabName:'TS Source',content:\"\\nimport React, { useState, useEffect } from 'react';\\nimport { AutoComplete } from 'primereact/autocomplete';\\nimport { CountryService } from '../service/CountryService';\\n\\nconst AutoCompleteDemo = () => {\\n    const [countries, setCountries] = useState<any[]>([]);\\n    const [selectedCountry1, setSelectedCountry1] = useState<any>(null);\\n    const [selectedCountry2, setSelectedCountry2] = useState<any>(null);\\n    const [selectedCountries, setSelectedCountries] = useState<any>(null);\\n    const [filteredCountries, setFilteredCountries] = useState<any>(null);\\n    const countryservice = new CountryService();\\n\\n    useEffect(() => {\\n        countryservice.getCountries().then(data => setCountries(data));\\n    }, []); // eslint-disable-line react-hooks/exhaustive-deps\\n\\n    const searchCountry = (event: { query: string }) => {\\n        setTimeout(() => {\\n            let filteredCountries;\\n            if (!event.query.trim().length) {\\n                filteredCountries = [...countries];\\n            }\\n            else {\\n                filteredCountries = countries.filter((country) => {\\n                    return country.name.toLowerCase().startsWith(event.query.toLowerCase());\\n                });\\n            }\\n\\n            setFilteredCountries(filteredCountries);\\n        }, 250);\\n    }\\n\\n    const itemTemplate = (item: any) => {\\n        return (\\n            <div className=\\\"country-item\\\">\\n                <img alt={item.name} src={`showcase/demo/images/flag_placeholder.png`} onError={(e) => e.target.src='https://www.primefaces.org/wp-content/uploads/2020/05/placeholder.png'} className={`flag flag-${item.code.toLowerCase()}`} />\\n                <div>{item.name}</div>\\n            </div>\\n        );\\n    }\\n\\n    return (\\n        <div className=\\\"card\\\">\\n            <h5>Basic</h5>\\n            <AutoComplete value={selectedCountry1} suggestions={filteredCountries} completeMethod={searchCountry} field=\\\"name\\\" onChange={(e) => setSelectedCountry1(e.value)} />\\n\\n            <h5>Dropdown, Templating and Force Selection</h5>\\n            <AutoComplete value={selectedCountry2} suggestions={filteredCountries} completeMethod={searchCountry} field=\\\"name\\\" dropdown forceSelection itemTemplate={itemTemplate} onChange={(e) => setSelectedCountry2(e.value)} />\\n\\n            <h5>Multiple</h5>\\n            <span className=\\\"p-fluid\\\">\\n                <AutoComplete value={selectedCountries} suggestions={filteredCountries} completeMethod={searchCountry} field=\\\"name\\\" multiple onChange={(e) => setSelectedCountries(e.value)} />\\n            </span>\\n        </div>\\n    )\\n}\\n                \"}};return _this;}_createClass(AutoCompleteDoc,[{key:\"shouldComponentUpdate\",value:function shouldComponentUpdate(){return false;}},{key:\"render\",value:function render(){return/*#__PURE__*/React.createElement(\"div\",{className:\"content-section documentation\"},/*#__PURE__*/React.createElement(TabView,null,/*#__PURE__*/React.createElement(TabPanel,{header:\"Documentation\"},/*#__PURE__*/React.createElement(\"h5\",null,\"Import\"),/*#__PURE__*/React.createElement(CodeHighlight,{lang:\"js\"},\"\\nimport { AutoComplete } from 'primereact/autocomplete';\\n\"),/*#__PURE__*/React.createElement(\"h5\",null,\"Getting Started\"),/*#__PURE__*/React.createElement(\"p\",null,\"AutoComplete is used as a controlled component with \",/*#__PURE__*/React.createElement(\"i\",null,\"value\"),\" and \",/*#__PURE__*/React.createElement(\"i\",null,\"onChange\"),\" properties. In addition, the component requires a list of \",/*#__PURE__*/React.createElement(\"i\",null,\"suggestions\"),\" and a \",/*#__PURE__*/React.createElement(\"i\",null,\"completeMethod\"),\" to query the results.\"),/*#__PURE__*/React.createElement(CodeHighlight,null,\"\\n<AutoComplete value={selectedCountry} suggestions={filteredCountries} completeMethod={searchCountry} field=\\\"name\\\" onChange={(e) => setSelectedCountry(e.value)} />\\n\"),/*#__PURE__*/React.createElement(CodeHighlight,{lang:\"js\"},\"\\nconst countries = // datasource\\n\\nconst searchCountry = (event) => {\\n    let filteredCountries = //suggestions\\n    setFilteredCountries(filteredCountries);\\n}\\n\\nrender() {\\n    return (\\n        <AutoComplete value={selectedCountry} suggestions={filteredCountries} completeMethod={searchCountry} onChange={(e) => setSelectedCountry(e.value)} />\\n    );\\n}\\n\"),/*#__PURE__*/React.createElement(\"h5\",null,\"Dropdown\"),/*#__PURE__*/React.createElement(\"p\",null,\"Enabling \",/*#__PURE__*/React.createElement(\"i\",null,\"dropdown\"),\" property displays a button next to the input field where click behavior of the button is defined using dropdownMode property that takes \\\"blank\\\" or \\\"current\\\" as possible values. \\\"blank\\\" is the default mode to send a query with an empty string whereas \\\"current\\\" setting sends a query with the current value of the input.\"),/*#__PURE__*/React.createElement(CodeHighlight,null,\"\\n<AutoComplete dropdown value={selectedCountry} suggestions={filteredCountries} completeMethod={searchCountry} onChange={(e) => setSelectedCountry(e.value)} />\\n\"),/*#__PURE__*/React.createElement(\"h5\",null,\"Multiple Mode\"),/*#__PURE__*/React.createElement(\"p\",null,\"Multiple mode is enabled using \",/*#__PURE__*/React.createElement(\"i\",null,\"multiple\"),\" property used to select more than one value from the autocomplete. In this case, value reference should be an array.\"),/*#__PURE__*/React.createElement(CodeHighlight,null,\"\\n<AutoComplete multiple value={selectedCountry} suggestions={filteredCountries} completeMethod={searchCountry} onChange={(e) => setSelectedCountry(e.value)} />\\n\"),/*#__PURE__*/React.createElement(\"h5\",null,\"Objects\"),/*#__PURE__*/React.createElement(\"p\",null,\"AutoComplete can also work with objects using the  \",/*#__PURE__*/React.createElement(\"i\",null,\"field\"),\" property that defines the label to display as a suggestion. The value passed to the model would still be the object instance of a suggestion. Here is an example with a Country object that has name and code fields such as {name:\\\"United States\\\",code:\\\"USA\\\"}.\"),/*#__PURE__*/React.createElement(CodeHighlight,null,\"\\n<AutoComplete field=\\\"name\\\" value={selectedCountry} suggestions={filteredCountries} completeMethod={searchCountry} onChange={(e) => setSelectedCountry(e.value)} />\\n\"),/*#__PURE__*/React.createElement(\"h5\",null,\"Force Selection\"),/*#__PURE__*/React.createElement(\"p\",null,\"ForceSelection mode validates the manual input to check whether it also exists in the suggestions list, if not the input value is cleared to make sure the value passed to the model is always one of the suggestions. Simply enable \",/*#__PURE__*/React.createElement(\"i\",null,\"forceSelection\"),\" to enforce that input is always from the suggestion list.\"),/*#__PURE__*/React.createElement(CodeHighlight,null,\"\\n<AutoComplete forceSelection value={selectedCountry} suggestions={filteredCountries} completeMethod={searchCountry} onChange={(e) => setSelectedCountry(e.value)} />\\n\"),/*#__PURE__*/React.createElement(\"h5\",null,\"Templating\"),/*#__PURE__*/React.createElement(\"p\",null,\"Custom content can be displayed using \",/*#__PURE__*/React.createElement(\"i\",null,\"itemTemplate\"),\" property that references a function or JSXElement or string which gets the suggestion option and returns an element. Similarly \",/*#__PURE__*/React.createElement(\"i\",null,\"selectedItemTemplate\"),\" property is available to customize the chips in multiple mode using the same approach.\"),/*#__PURE__*/React.createElement(CodeHighlight,null,\"\\n<AutoComplete value={selectedCountry} suggestions={filteredCountries} completeMethod={searchCountry} onChange={(e) => setSelectedCountry(e.value)} itemTemplate={itemTemplate} />\\n\"),/*#__PURE__*/React.createElement(CodeHighlight,{lang:\"js\"},\"\\nitemTemplate(item) {\\n    //return custom element\\n}\\n\"),/*#__PURE__*/React.createElement(\"h5\",null,\"Properties\"),/*#__PURE__*/React.createElement(\"div\",{className:\"doc-tablewrapper\"},/*#__PURE__*/React.createElement(\"table\",{className:\"doc-table\"},/*#__PURE__*/React.createElement(\"thead\",null,/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"th\",null,\"Name\"),/*#__PURE__*/React.createElement(\"th\",null,\"Type\"),/*#__PURE__*/React.createElement(\"th\",null,\"Default\"),/*#__PURE__*/React.createElement(\"th\",null,\"Description\"))),/*#__PURE__*/React.createElement(\"tbody\",null,/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"td\",null,\"id\"),/*#__PURE__*/React.createElement(\"td\",null,\"string\"),/*#__PURE__*/React.createElement(\"td\",null,\"null\"),/*#__PURE__*/React.createElement(\"td\",null,\"Unique identifier of the element.\")),/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"td\",null,\"value\"),/*#__PURE__*/React.createElement(\"td\",null,\"any\"),/*#__PURE__*/React.createElement(\"td\",null,\"null\"),/*#__PURE__*/React.createElement(\"td\",null,\"Value of the component.\")),/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"td\",null,\"name\"),/*#__PURE__*/React.createElement(\"td\",null,\"string\"),/*#__PURE__*/React.createElement(\"td\",null,\"null\"),/*#__PURE__*/React.createElement(\"td\",null,\"Name of the input element.\")),/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"td\",null,\"type\"),/*#__PURE__*/React.createElement(\"td\",null,\"string\"),/*#__PURE__*/React.createElement(\"td\",null,\"text\"),/*#__PURE__*/React.createElement(\"td\",null,\"Type of the input element.\")),/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"td\",null,\"suggestions\"),/*#__PURE__*/React.createElement(\"td\",null,\"array\"),/*#__PURE__*/React.createElement(\"td\",null,\"null\"),/*#__PURE__*/React.createElement(\"td\",null,\"An array of suggestions to display.\")),/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"td\",null,\"field\"),/*#__PURE__*/React.createElement(\"td\",null,\"any\"),/*#__PURE__*/React.createElement(\"td\",null,\"null\"),/*#__PURE__*/React.createElement(\"td\",null,\"Field of a suggested object to resolve and display.\")),/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"td\",null,\"forceSelection\"),/*#__PURE__*/React.createElement(\"td\",null,\"boolean\"),/*#__PURE__*/React.createElement(\"td\",null,\"false\"),/*#__PURE__*/React.createElement(\"td\",null,\"When present, autocomplete clears the manual input if it does not match of the suggestions to force only accepting values from the suggestions.\")),/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"td\",null,\"autoHighlight\"),/*#__PURE__*/React.createElement(\"td\",null,\"boolean\"),/*#__PURE__*/React.createElement(\"td\",null,\"false\"),/*#__PURE__*/React.createElement(\"td\",null,\"When enabled, highlights the first item in the list by default.\")),/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"td\",null,\"scrollHeight\"),/*#__PURE__*/React.createElement(\"td\",null,\"string\"),/*#__PURE__*/React.createElement(\"td\",null,\"200px\"),/*#__PURE__*/React.createElement(\"td\",null,\"Maximum height of the suggestions panel.\")),/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"td\",null,\"dropdown\"),/*#__PURE__*/React.createElement(\"td\",null,\"boolean\"),/*#__PURE__*/React.createElement(\"td\",null,\"false\"),/*#__PURE__*/React.createElement(\"td\",null,\"Displays a button next to the input field when enabled.\")),/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"td\",null,\"dropdownMode\"),/*#__PURE__*/React.createElement(\"td\",null,\"string\"),/*#__PURE__*/React.createElement(\"td\",null,\"blank\"),/*#__PURE__*/React.createElement(\"td\",null,\"Specifies the behavior dropdown button. Default \\\"blank\\\" mode sends an empty string and \\\"current\\\" mode sends the input value.\")),/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"td\",null,\"multiple\"),/*#__PURE__*/React.createElement(\"td\",null,\"boolean\"),/*#__PURE__*/React.createElement(\"td\",null,\"false\"),/*#__PURE__*/React.createElement(\"td\",null,\"Specifies if multiple values can be selected.\")),/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"td\",null,\"minLength\"),/*#__PURE__*/React.createElement(\"td\",null,\"number\"),/*#__PURE__*/React.createElement(\"td\",null,\"1\"),/*#__PURE__*/React.createElement(\"td\",null,\"Minimum number of characters to initiate a search.\")),/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"td\",null,\"delay\"),/*#__PURE__*/React.createElement(\"td\",null,\"number\"),/*#__PURE__*/React.createElement(\"td\",null,\"300\"),/*#__PURE__*/React.createElement(\"td\",null,\"Delay between keystrokes to wait before sending a query.\")),/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"td\",null,\"style\"),/*#__PURE__*/React.createElement(\"td\",null,\"string\"),/*#__PURE__*/React.createElement(\"td\",null,\"null\"),/*#__PURE__*/React.createElement(\"td\",null,\"Inline style of the component.\")),/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"td\",null,\"className\"),/*#__PURE__*/React.createElement(\"td\",null,\"string\"),/*#__PURE__*/React.createElement(\"td\",null,\"null\"),/*#__PURE__*/React.createElement(\"td\",null,\"Style class of the component.\")),/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"td\",null,\"inputId\"),/*#__PURE__*/React.createElement(\"td\",null,\"string\"),/*#__PURE__*/React.createElement(\"td\",null,\"null\"),/*#__PURE__*/React.createElement(\"td\",null,\"Identifier of the input element.\")),/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"td\",null,\"inputStyle\"),/*#__PURE__*/React.createElement(\"td\",null,\"string\"),/*#__PURE__*/React.createElement(\"td\",null,\"null\"),/*#__PURE__*/React.createElement(\"td\",null,\"Inline style of the input field.\")),/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"td\",null,\"inputClassName\"),/*#__PURE__*/React.createElement(\"td\",null,\"string\"),/*#__PURE__*/React.createElement(\"td\",null,\"null\"),/*#__PURE__*/React.createElement(\"td\",null,\"Inline style of the input field.\")),/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"td\",null,\"panelClassName\"),/*#__PURE__*/React.createElement(\"td\",null,\"string\"),/*#__PURE__*/React.createElement(\"td\",null,\"null\"),/*#__PURE__*/React.createElement(\"td\",null,\"Style class of the overlay panel element.\")),/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"td\",null,\"panelStyle\"),/*#__PURE__*/React.createElement(\"td\",null,\"string\"),/*#__PURE__*/React.createElement(\"td\",null,\"null\"),/*#__PURE__*/React.createElement(\"td\",null,\"Inline style of the overlay panel element.\")),/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"td\",null,\"placeholder\"),/*#__PURE__*/React.createElement(\"td\",null,\"string\"),/*#__PURE__*/React.createElement(\"td\",null,\"null\"),/*#__PURE__*/React.createElement(\"td\",null,\"Hint text for the input field.\")),/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"td\",null,\"readOnly\"),/*#__PURE__*/React.createElement(\"td\",null,\"boolean\"),/*#__PURE__*/React.createElement(\"td\",null,\"false\"),/*#__PURE__*/React.createElement(\"td\",null,\"When present, it specifies that the input cannot be typed.\")),/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"td\",null,\"disabled\"),/*#__PURE__*/React.createElement(\"td\",null,\"boolean\"),/*#__PURE__*/React.createElement(\"td\",null,\"false\"),/*#__PURE__*/React.createElement(\"td\",null,\"When present, it specifies that the component should be disabled.\")),/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"td\",null,\"maxlength\"),/*#__PURE__*/React.createElement(\"td\",null,\"number\"),/*#__PURE__*/React.createElement(\"td\",null,\"null\"),/*#__PURE__*/React.createElement(\"td\",null,\"Maximum number of character allows in the input field.\")),/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"td\",null,\"size\"),/*#__PURE__*/React.createElement(\"td\",null,\"number\"),/*#__PURE__*/React.createElement(\"td\",null,\"null\"),/*#__PURE__*/React.createElement(\"td\",null,\"Size of the input field.\")),/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"td\",null,\"appendTo\"),/*#__PURE__*/React.createElement(\"td\",null,\"DOM element\"),/*#__PURE__*/React.createElement(\"td\",null,\"null\"),/*#__PURE__*/React.createElement(\"td\",null,\"DOM element instance where the overlay panel should be mounted.\")),/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"td\",null,\"tabIndex\"),/*#__PURE__*/React.createElement(\"td\",null,\"number\"),/*#__PURE__*/React.createElement(\"td\",null,\"null\"),/*#__PURE__*/React.createElement(\"td\",null,\"Index of the element in tabbing order.\")),/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"td\",null,\"autoFocus\"),/*#__PURE__*/React.createElement(\"td\",null,\"boolean\"),/*#__PURE__*/React.createElement(\"td\",null,\"false\"),/*#__PURE__*/React.createElement(\"td\",null,\"When present, it specifies that the component should automatically get focus on load.\")),/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"td\",null,\"tooltip\"),/*#__PURE__*/React.createElement(\"td\",null,\"any\"),/*#__PURE__*/React.createElement(\"td\",null,\"null\"),/*#__PURE__*/React.createElement(\"td\",null,\"Content of the tooltip.\")),/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"td\",null,\"tooltipOptions\"),/*#__PURE__*/React.createElement(\"td\",null,\"object\"),/*#__PURE__*/React.createElement(\"td\",null,\"null\"),/*#__PURE__*/React.createElement(\"td\",null,\"Configuration of the tooltip, refer to the tooltip documentation for more information.\")),/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"td\",null,\"ariaLabelledBy\"),/*#__PURE__*/React.createElement(\"td\",null,\"string\"),/*#__PURE__*/React.createElement(\"td\",null,\"null\"),/*#__PURE__*/React.createElement(\"td\",null,\"Establishes relationships between the component and label(s) where its value should be one or more element IDs.\")),/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"td\",null,\"itemTemplate\"),/*#__PURE__*/React.createElement(\"td\",null,\"any\"),/*#__PURE__*/React.createElement(\"td\",null,\"null\"),/*#__PURE__*/React.createElement(\"td\",null,\"Template of a list item.\")),/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"td\",null,\"selectedItemTemplate\"),/*#__PURE__*/React.createElement(\"td\",null,\"any\"),/*#__PURE__*/React.createElement(\"td\",null,\"null\"),/*#__PURE__*/React.createElement(\"td\",null,\"Template of a selected item.\"))))),/*#__PURE__*/React.createElement(\"h5\",null,\"Events\"),/*#__PURE__*/React.createElement(\"div\",{className:\"doc-tablewrapper\"},/*#__PURE__*/React.createElement(\"table\",{className:\"doc-table\"},/*#__PURE__*/React.createElement(\"thead\",null,/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"th\",null,\"Name\"),/*#__PURE__*/React.createElement(\"th\",null,\"Parameters\"),/*#__PURE__*/React.createElement(\"th\",null,\"Description\"))),/*#__PURE__*/React.createElement(\"tbody\",null,/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"td\",null,\"completeMethod\"),/*#__PURE__*/React.createElement(\"td\",null,\"event.originalEvent: browser event \",/*#__PURE__*/React.createElement(\"br\",null),\"event.query: Value to search with\"),/*#__PURE__*/React.createElement(\"td\",null,\"Callback to invoke to search for suggestions.\")),/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"td\",null,\"onChange\"),/*#__PURE__*/React.createElement(\"td\",null,\"event.originalEvent: Browser event \",/*#__PURE__*/React.createElement(\"br\",null),\"event.value: Value of the component\"),/*#__PURE__*/React.createElement(\"td\",null,\"Callback to invoke when autocomplete value changes.\")),/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"td\",null,\"onFocus\"),/*#__PURE__*/React.createElement(\"td\",null,\"event: Browser event\"),/*#__PURE__*/React.createElement(\"td\",null,\"Callback to invoke when autocomplete gets focus.\")),/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"td\",null,\"onBlur\"),/*#__PURE__*/React.createElement(\"td\",null,\"event: Browser event\"),/*#__PURE__*/React.createElement(\"td\",null,\"Callback to invoke when autocomplete loses focus.\")),/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"td\",null,\"onSelect\"),/*#__PURE__*/React.createElement(\"td\",null,\"event.originalEvent: Browser event \",/*#__PURE__*/React.createElement(\"br\",null),\"event.value: Value of the component\"),/*#__PURE__*/React.createElement(\"td\",null,\"Callback to invoke when a suggestion is selected.\")),/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"td\",null,\"onUnselect\"),/*#__PURE__*/React.createElement(\"td\",null,\"event.originalEvent: Browser event \",/*#__PURE__*/React.createElement(\"br\",null),\"event.value: Value of the component\"),/*#__PURE__*/React.createElement(\"td\",null,\"Callback to invoke when a selected value is removed.\")),/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"td\",null,\"onDropdownClick\"),/*#__PURE__*/React.createElement(\"td\",null,\"event.originalEvent: browser event \",/*#__PURE__*/React.createElement(\"br\",null),\"event.query: Current value of the input field\"),/*#__PURE__*/React.createElement(\"td\",null,\"Callback to invoke to when dropdown button is clicked.\")),/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"td\",null,\"onClick\"),/*#__PURE__*/React.createElement(\"td\",null,\"event: Browser event \"),/*#__PURE__*/React.createElement(\"td\",null,\"Callback to invoke on click.\")),/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"td\",null,\"onDblClick\"),/*#__PURE__*/React.createElement(\"td\",null,\"event: Browser event\"),/*#__PURE__*/React.createElement(\"td\",null,\"Callback to invoke on double click.\")),/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"td\",null,\"onMouseDown\"),/*#__PURE__*/React.createElement(\"td\",null,\"event: Browser event\"),/*#__PURE__*/React.createElement(\"td\",null,\"Callback to invoke to when a mouse button is pressed.\")),/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"td\",null,\"onKeyUp\"),/*#__PURE__*/React.createElement(\"td\",null,\"event: Browser event\"),/*#__PURE__*/React.createElement(\"td\",null,\"Callback to invoke to when a key is released.\")),/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"td\",null,\"onKeyPress\"),/*#__PURE__*/React.createElement(\"td\",null,\"event: Browser event\"),/*#__PURE__*/React.createElement(\"td\",null,\"Callback to invoke to when a key is pressed.\")),/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"td\",null,\"onContextMenu\"),/*#__PURE__*/React.createElement(\"td\",null,\"event: Browser event\"),/*#__PURE__*/React.createElement(\"td\",null,\"Callback to invoke on right-click.\")),/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"td\",null,\"onClear\"),/*#__PURE__*/React.createElement(\"td\",null,\"event: Browser event\"),/*#__PURE__*/React.createElement(\"td\",null,\"Callback to invoke when input is cleared by the user.\"))))),/*#__PURE__*/React.createElement(\"h5\",null,\"Styling\"),/*#__PURE__*/React.createElement(\"p\",null,\"Following is the list of structural style classes\"),/*#__PURE__*/React.createElement(\"div\",{className:\"doc-tablewrapper\"},/*#__PURE__*/React.createElement(\"table\",{className:\"doc-table\"},/*#__PURE__*/React.createElement(\"thead\",null,/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"th\",null,\"Name\"),/*#__PURE__*/React.createElement(\"th\",null,\"Element\"))),/*#__PURE__*/React.createElement(\"tbody\",null,/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"td\",null,\"p-autocomplete\"),/*#__PURE__*/React.createElement(\"td\",null,\"Container element\")),/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"td\",null,\"p-autocomplete-panel\"),/*#__PURE__*/React.createElement(\"td\",null,\"Overlay panel of suggestions.\")),/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"td\",null,\"p-autocomplete-items\"),/*#__PURE__*/React.createElement(\"td\",null,\"List container of suggestions.\")),/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"td\",null,\"p-autocomplete-item\"),/*#__PURE__*/React.createElement(\"td\",null,\"List item of a suggestion.\")),/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"td\",null,\"p-autocomplete-token\"),/*#__PURE__*/React.createElement(\"td\",null,\"Element of a selected item in multiple mode.\")),/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"td\",null,\"p-autocomplete-token-icon\"),/*#__PURE__*/React.createElement(\"td\",null,\"Close icon element of a selected item in multiple mode.\")),/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"td\",null,\"p-autocomplete-token-label\"),/*#__PURE__*/React.createElement(\"td\",null,\"Label of a selected item in multiple mode.\"))))),/*#__PURE__*/React.createElement(\"h5\",null,\"Dependencies\"),/*#__PURE__*/React.createElement(\"p\",null,\"None.\")),useLiveEditorTabs({name:'AutoCompleteDemo',sources:this.sources,service:'CountryService',data:'countries'})));}}]);return AutoCompleteDoc;}(Component);","map":{"version":3,"sources":["C:/Users/zura.ph/WebstormProjects/zz-regul/src/showcase/autocomplete/AutoCompleteDoc.js"],"names":["React","Component","TabView","TabPanel","CodeHighlight","useLiveEditorTabs","AutoCompleteDoc","props","sources","tabName","content","name","service","data"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { TabView, TabPanel } from '../../components/tabview/TabView';\r\nimport { CodeHighlight } from '../codehighlight/CodeHighlight';\r\nimport { useLiveEditorTabs }from '../liveeditor/LiveEditor';\r\n\r\nexport class AutoCompleteDoc extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.sources = {\r\n            'class': {\r\n                tabName: 'Class Source',\r\n                content: `\r\nimport React, { Component } from 'react';\r\nimport { AutoComplete } from 'primereact/autocomplete';\r\nimport { CountryService } from '../service/CountryService';\r\n\r\nexport class AutoCompleteDemo extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            countries: [],\r\n            selectedCountry1: null,\r\n            selectedCountry2: null,\r\n            selectedCountries: null,\r\n            filteredCountries: null\r\n        };\r\n\r\n        this.searchCountry = this.searchCountry.bind(this);\r\n        this.itemTemplate = this.itemTemplate.bind(this);\r\n        this.countryservice = new CountryService();\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.countryservice.getCountries().then(data => this.setState({ countries: data }));\r\n    }\r\n\r\n    searchCountry(event) {\r\n        setTimeout(() => {\r\n            let filteredCountries;\r\n            if (!event.query.trim().length) {\r\n                filteredCountries = [...this.state.countries];\r\n            }\r\n            else {\r\n                filteredCountries = this.state.countries.filter((country) => {\r\n                    return country.name.toLowerCase().startsWith(event.query.toLowerCase());\r\n                });\r\n            }\r\n\r\n            this.setState({ filteredCountries });\r\n        }, 250);\r\n    }\r\n\r\n    itemTemplate(item) {\r\n        return (\r\n            <div className=\"country-item\">\r\n                <img alt={item.name} src={\\`showcase/demo/images/flag_placeholder.png\\`} onError={(e) => e.target.src='https://www.primefaces.org/wp-content/uploads/2020/05/placeholder.png'} className={\\`flag flag-\\${item.code.toLowerCase()}\\`} />\r\n                <div>{item.name}</div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"card\">\r\n                <h5>Basic</h5>\r\n                <AutoComplete value={this.state.selectedCountry1} suggestions={this.state.filteredCountries} completeMethod={this.searchCountry} field=\"name\" onChange={(e) => this.setState({ selectedCountry1: e.value })} />\r\n\r\n                <h5>Dropdown, Templating and Force Selection</h5>\r\n                <AutoComplete value={this.state.selectedCountry2} suggestions={this.state.filteredCountries} completeMethod={this.searchCountry} field=\"name\" dropdown forceSelection itemTemplate={this.itemTemplate} onChange={(e) => this.setState({ selectedCountry2: e.value })} />\r\n\r\n                <h5>Multiple</h5>\r\n                <span className=\"p-fluid\">\r\n                    <AutoComplete value={this.state.selectedCountries} suggestions={this.state.filteredCountries} completeMethod={this.searchCountry} field=\"name\" multiple onChange={(e) => this.setState({ selectedCountries: e.value })} />\r\n                </span>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n                `\r\n            },\r\n            'hooks': {\r\n                tabName: 'Hooks Source',\r\n                content: `\r\nimport React, { useState, useEffect } from 'react';\r\nimport { AutoComplete } from 'primereact/autocomplete';\r\nimport { CountryService } from '../service/CountryService';\r\n\r\nconst AutoCompleteDemo = () => {\r\n    const [countries, setCountries] = useState([]);\r\n    const [selectedCountry1, setSelectedCountry1] = useState(null);\r\n    const [selectedCountry2, setSelectedCountry2] = useState(null);\r\n    const [selectedCountries, setSelectedCountries] = useState(null);\r\n    const [filteredCountries, setFilteredCountries] = useState(null);\r\n    const countryservice = new CountryService();\r\n\r\n    useEffect(() => {\r\n        countryservice.getCountries().then(data => setCountries(data));\r\n    }, []); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n    const searchCountry = (event) => {\r\n        setTimeout(() => {\r\n            let filteredCountries;\r\n            if (!event.query.trim().length) {\r\n                filteredCountries = [...countries];\r\n            }\r\n            else {\r\n                filteredCountries = countries.filter((country) => {\r\n                    return country.name.toLowerCase().startsWith(event.query.toLowerCase());\r\n                });\r\n            }\r\n\r\n            setFilteredCountries(filteredCountries);\r\n        }, 250);\r\n    }\r\n\r\n    const itemTemplate = (item) => {\r\n        return (\r\n            <div className=\"country-item\">\r\n                <img alt={item.name} src={\\`showcase/demo/images/flag_placeholder.png\\`} onError={(e) => e.target.src='https://www.primefaces.org/wp-content/uploads/2020/05/placeholder.png'} className={\\`flag flag-\\${item.code.toLowerCase()}\\`} />\r\n                <div>{item.name}</div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <div className=\"card\">\r\n            <h5>Basic</h5>\r\n            <AutoComplete value={selectedCountry1} suggestions={filteredCountries} completeMethod={searchCountry} field=\"name\" onChange={(e) => setSelectedCountry1(e.value)} />\r\n\r\n            <h5>Dropdown, Templating and Force Selection</h5>\r\n            <AutoComplete value={selectedCountry2} suggestions={filteredCountries} completeMethod={searchCountry} field=\"name\" dropdown forceSelection itemTemplate={itemTemplate} onChange={(e) => setSelectedCountry2(e.value)} />\r\n\r\n            <h5>Multiple</h5>\r\n            <span className=\"p-fluid\">\r\n                <AutoComplete value={selectedCountries} suggestions={filteredCountries} completeMethod={searchCountry} field=\"name\" multiple onChange={(e) => setSelectedCountries(e.value)} />\r\n            </span>\r\n        </div>\r\n    )\r\n}\r\n                `\r\n            },\r\n            'ts': {\r\n                tabName: 'TS Source',\r\n                content: `\r\nimport React, { useState, useEffect } from 'react';\r\nimport { AutoComplete } from 'primereact/autocomplete';\r\nimport { CountryService } from '../service/CountryService';\r\n\r\nconst AutoCompleteDemo = () => {\r\n    const [countries, setCountries] = useState<any[]>([]);\r\n    const [selectedCountry1, setSelectedCountry1] = useState<any>(null);\r\n    const [selectedCountry2, setSelectedCountry2] = useState<any>(null);\r\n    const [selectedCountries, setSelectedCountries] = useState<any>(null);\r\n    const [filteredCountries, setFilteredCountries] = useState<any>(null);\r\n    const countryservice = new CountryService();\r\n\r\n    useEffect(() => {\r\n        countryservice.getCountries().then(data => setCountries(data));\r\n    }, []); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n    const searchCountry = (event: { query: string }) => {\r\n        setTimeout(() => {\r\n            let filteredCountries;\r\n            if (!event.query.trim().length) {\r\n                filteredCountries = [...countries];\r\n            }\r\n            else {\r\n                filteredCountries = countries.filter((country) => {\r\n                    return country.name.toLowerCase().startsWith(event.query.toLowerCase());\r\n                });\r\n            }\r\n\r\n            setFilteredCountries(filteredCountries);\r\n        }, 250);\r\n    }\r\n\r\n    const itemTemplate = (item: any) => {\r\n        return (\r\n            <div className=\"country-item\">\r\n                <img alt={item.name} src={\\`showcase/demo/images/flag_placeholder.png\\`} onError={(e) => e.target.src='https://www.primefaces.org/wp-content/uploads/2020/05/placeholder.png'} className={\\`flag flag-\\${item.code.toLowerCase()}\\`} />\r\n                <div>{item.name}</div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <div className=\"card\">\r\n            <h5>Basic</h5>\r\n            <AutoComplete value={selectedCountry1} suggestions={filteredCountries} completeMethod={searchCountry} field=\"name\" onChange={(e) => setSelectedCountry1(e.value)} />\r\n\r\n            <h5>Dropdown, Templating and Force Selection</h5>\r\n            <AutoComplete value={selectedCountry2} suggestions={filteredCountries} completeMethod={searchCountry} field=\"name\" dropdown forceSelection itemTemplate={itemTemplate} onChange={(e) => setSelectedCountry2(e.value)} />\r\n\r\n            <h5>Multiple</h5>\r\n            <span className=\"p-fluid\">\r\n                <AutoComplete value={selectedCountries} suggestions={filteredCountries} completeMethod={searchCountry} field=\"name\" multiple onChange={(e) => setSelectedCountries(e.value)} />\r\n            </span>\r\n        </div>\r\n    )\r\n}\r\n                `\r\n            }\r\n        }\r\n    }\r\n\r\n    shouldComponentUpdate() {\r\n        return false;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"content-section documentation\">\r\n                <TabView>\r\n                    <TabPanel header=\"Documentation\">\r\n                        <h5>Import</h5>\r\n<CodeHighlight lang=\"js\">\r\n{`\r\nimport { AutoComplete } from 'primereact/autocomplete';\r\n`}\r\n</CodeHighlight>\r\n\r\n                        <h5>Getting Started</h5>\r\n                        <p>AutoComplete is used as a controlled component with <i>value</i> and <i>onChange</i> properties. In addition, the component\r\n                            requires a list of <i>suggestions</i> and a <i>completeMethod</i> to query the results.</p>\r\n\r\n<CodeHighlight>\r\n{`\r\n<AutoComplete value={selectedCountry} suggestions={filteredCountries} completeMethod={searchCountry} field=\"name\" onChange={(e) => setSelectedCountry(e.value)} />\r\n`}\r\n</CodeHighlight>\r\n\r\n<CodeHighlight lang=\"js\">\r\n{`\r\nconst countries = // datasource\r\n\r\nconst searchCountry = (event) => {\r\n    let filteredCountries = //suggestions\r\n    setFilteredCountries(filteredCountries);\r\n}\r\n\r\nrender() {\r\n    return (\r\n        <AutoComplete value={selectedCountry} suggestions={filteredCountries} completeMethod={searchCountry} onChange={(e) => setSelectedCountry(e.value)} />\r\n    );\r\n}\r\n`}\r\n</CodeHighlight>\r\n\r\n                        <h5>Dropdown</h5>\r\n                        <p>Enabling <i>dropdown</i> property displays a button next to the input field where click behavior of the button is defined using\r\n                            dropdownMode property that takes \"blank\" or \"current\" as possible values.\r\n                            \"blank\" is the default mode to send a query with an empty string whereas\r\n                            \"current\" setting sends a query with the current value of the input.</p>\r\n\r\n<CodeHighlight>\r\n{`\r\n<AutoComplete dropdown value={selectedCountry} suggestions={filteredCountries} completeMethod={searchCountry} onChange={(e) => setSelectedCountry(e.value)} />\r\n`}\r\n</CodeHighlight>\r\n\r\n                        <h5>Multiple Mode</h5>\r\n                        <p>Multiple mode is enabled using <i>multiple</i> property used to select more than one value from the autocomplete. In this case, value reference should be an array.</p>\r\n<CodeHighlight>\r\n{`\r\n<AutoComplete multiple value={selectedCountry} suggestions={filteredCountries} completeMethod={searchCountry} onChange={(e) => setSelectedCountry(e.value)} />\r\n`}\r\n</CodeHighlight>\r\n\r\n                        <h5>Objects</h5>\r\n                        <p>AutoComplete can also work with objects using the  <i>field</i> property that defines the label to display\r\n                        as a suggestion. The value passed to the model would still be the object instance of a suggestion.\r\n                        Here is an example with a Country object that has name and code fields such as &#123;name:\"United States\",code:\"USA\"&#125;.</p>\r\n\r\n<CodeHighlight>\r\n{`\r\n<AutoComplete field=\"name\" value={selectedCountry} suggestions={filteredCountries} completeMethod={searchCountry} onChange={(e) => setSelectedCountry(e.value)} />\r\n`}\r\n</CodeHighlight>\r\n\r\n                        <h5>Force Selection</h5>\r\n                        <p>ForceSelection mode validates the manual input to check whether it also exists in the suggestions list, if not the input value is cleared\r\n                        to make sure the value passed to the model is always one of the suggestions. Simply enable <i>forceSelection</i> to enforce that input is always from the suggestion list.</p>\r\n<CodeHighlight>\r\n{`\r\n<AutoComplete forceSelection value={selectedCountry} suggestions={filteredCountries} completeMethod={searchCountry} onChange={(e) => setSelectedCountry(e.value)} />\r\n`}\r\n</CodeHighlight>\r\n\r\n                        <h5>Templating</h5>\r\n                        <p>Custom content can be displayed using <i>itemTemplate</i> property that references a function or JSXElement or string which gets\r\n                        the suggestion option and returns an element. Similarly <i>selectedItemTemplate</i> property is available\r\n                        to customize the chips in multiple mode using the same approach.</p>\r\n\r\n<CodeHighlight>\r\n{`\r\n<AutoComplete value={selectedCountry} suggestions={filteredCountries} completeMethod={searchCountry} onChange={(e) => setSelectedCountry(e.value)} itemTemplate={itemTemplate} />\r\n`}\r\n</CodeHighlight>\r\n\r\n<CodeHighlight lang=\"js\">\r\n{`\r\nitemTemplate(item) {\r\n    //return custom element\r\n}\r\n`}\r\n</CodeHighlight>\r\n\r\n                        <h5>Properties</h5>\r\n                        <div className=\"doc-tablewrapper\">\r\n                            <table className=\"doc-table\">\r\n                                <thead>\r\n                                    <tr>\r\n                                        <th>Name</th>\r\n                                        <th>Type</th>\r\n                                        <th>Default</th>\r\n                                        <th>Description</th>\r\n                                    </tr>\r\n                                </thead>\r\n                                <tbody>\r\n                                    <tr>\r\n                                        <td>id</td>\r\n                                        <td>string</td>\r\n                                        <td>null</td>\r\n                                        <td>Unique identifier of the element.</td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>value</td>\r\n                                        <td>any</td>\r\n                                        <td>null</td>\r\n                                        <td>Value of the component.</td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>name</td>\r\n                                        <td>string</td>\r\n                                        <td>null</td>\r\n                                        <td>Name of the input element.</td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>type</td>\r\n                                        <td>string</td>\r\n                                        <td>text</td>\r\n                                        <td>Type of the input element.</td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>suggestions</td>\r\n                                        <td>array</td>\r\n                                        <td>null</td>\r\n                                        <td>An array of suggestions to display.</td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>field</td>\r\n                                        <td>any</td>\r\n                                        <td>null</td>\r\n                                        <td>Field of a suggested object to resolve and display.</td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>forceSelection</td>\r\n                                        <td>boolean</td>\r\n                                        <td>false</td>\r\n                                        <td>When present, autocomplete clears the manual input if it does not match of the suggestions to force only\r\n                                        accepting values from the suggestions.</td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>autoHighlight</td>\r\n                                        <td>boolean</td>\r\n                                        <td>false</td>\r\n                                        <td>When enabled, highlights the first item in the list by default.</td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>scrollHeight</td>\r\n                                        <td>string</td>\r\n                                        <td>200px</td>\r\n                                        <td>Maximum height of the suggestions panel.</td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>dropdown</td>\r\n                                        <td>boolean</td>\r\n                                        <td>false</td>\r\n                                        <td>Displays a button next to the input field when enabled.</td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>dropdownMode</td>\r\n                                        <td>string</td>\r\n                                        <td>blank</td>\r\n                                        <td>Specifies the behavior dropdown button. Default \"blank\" mode sends an empty string and \"current\" mode sends the input value.</td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>multiple</td>\r\n                                        <td>boolean</td>\r\n                                        <td>false</td>\r\n                                        <td>Specifies if multiple values can be selected.</td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>minLength</td>\r\n                                        <td>number</td>\r\n                                        <td>1</td>\r\n                                        <td>Minimum number of characters to initiate a search.</td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>delay</td>\r\n                                        <td>number</td>\r\n                                        <td>300</td>\r\n                                        <td>Delay between keystrokes to wait before sending a query.</td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>style</td>\r\n                                        <td>string</td>\r\n                                        <td>null</td>\r\n                                        <td>Inline style of the component.</td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>className</td>\r\n                                        <td>string</td>\r\n                                        <td>null</td>\r\n                                        <td>Style class of the component.</td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>inputId</td>\r\n                                        <td>string</td>\r\n                                        <td>null</td>\r\n                                        <td>Identifier of the input element.</td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>inputStyle</td>\r\n                                        <td>string</td>\r\n                                        <td>null</td>\r\n                                        <td>Inline style of the input field.</td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>inputClassName</td>\r\n                                        <td>string</td>\r\n                                        <td>null</td>\r\n                                        <td>Inline style of the input field.</td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>panelClassName</td>\r\n                                        <td>string</td>\r\n                                        <td>null</td>\r\n                                        <td>Style class of the overlay panel element.</td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>panelStyle</td>\r\n                                        <td>string</td>\r\n                                        <td>null</td>\r\n                                        <td>Inline style of the overlay panel element.</td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>placeholder</td>\r\n                                        <td>string</td>\r\n                                        <td>null</td>\r\n                                        <td>Hint text for the input field.</td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>readOnly</td>\r\n                                        <td>boolean</td>\r\n                                        <td>false</td>\r\n                                        <td>When present, it specifies that the input cannot be typed.</td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>disabled</td>\r\n                                        <td>boolean</td>\r\n                                        <td>false</td>\r\n                                        <td>When present, it specifies that the component should be disabled.</td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>maxlength</td>\r\n                                        <td>number</td>\r\n                                        <td>null</td>\r\n                                        <td>Maximum number of character allows in the input field.</td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>size</td>\r\n                                        <td>number</td>\r\n                                        <td>null</td>\r\n                                        <td>Size of the input field.</td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>appendTo</td>\r\n                                        <td>DOM element</td>\r\n                                        <td>null</td>\r\n                                        <td>DOM element instance where the overlay panel should be mounted.</td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>tabIndex</td>\r\n                                        <td>number</td>\r\n                                        <td>null</td>\r\n                                        <td>Index of the element in tabbing order.</td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>autoFocus</td>\r\n                                        <td>boolean</td>\r\n                                        <td>false</td>\r\n                                        <td>When present, it specifies that the component should automatically get focus on load.</td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>tooltip</td>\r\n                                        <td>any</td>\r\n                                        <td>null</td>\r\n                                        <td>Content of the tooltip.</td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>tooltipOptions</td>\r\n                                        <td>object</td>\r\n                                        <td>null</td>\r\n                                        <td>Configuration of the tooltip, refer to the tooltip documentation for more information.</td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>ariaLabelledBy</td>\r\n                                        <td>string</td>\r\n                                        <td>null</td>\r\n                                        <td>Establishes relationships between the component and label(s) where its value should be one or more element IDs.</td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>itemTemplate</td>\r\n                                        <td>any</td>\r\n                                        <td>null</td>\r\n                                        <td>Template of a list item.</td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>selectedItemTemplate</td>\r\n                                        <td>any</td>\r\n                                        <td>null</td>\r\n                                        <td>Template of a selected item.</td>\r\n                                    </tr>\r\n                                </tbody>\r\n                            </table>\r\n                        </div>\r\n\r\n                        <h5>Events</h5>\r\n                        <div className=\"doc-tablewrapper\">\r\n                            <table className=\"doc-table\">\r\n                                <thead>\r\n                                    <tr>\r\n                                        <th>Name</th>\r\n                                        <th>Parameters</th>\r\n                                        <th>Description</th>\r\n                                    </tr>\r\n                                </thead>\r\n                                <tbody>\r\n                                    <tr>\r\n                                        <td>completeMethod</td>\r\n                                        <td>\r\n                                            event.originalEvent: browser event <br />\r\n                                            event.query: Value to search with\r\n                                        </td>\r\n                                        <td>Callback to invoke to search for suggestions.</td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>onChange</td>\r\n                                        <td>event.originalEvent: Browser event <br />\r\n                                            event.value: Value of the component</td>\r\n                                        <td>Callback to invoke when autocomplete value changes.</td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>onFocus</td>\r\n                                        <td>event: Browser event</td>\r\n                                        <td>Callback to invoke when autocomplete gets focus.</td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>onBlur</td>\r\n                                        <td>event: Browser event</td>\r\n                                        <td>Callback to invoke when autocomplete loses focus.</td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>onSelect</td>\r\n                                        <td>event.originalEvent: Browser event <br />\r\n                                            event.value: Value of the component</td>\r\n                                        <td>Callback to invoke when a suggestion is selected.</td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>onUnselect</td>\r\n                                        <td>event.originalEvent: Browser event <br />\r\n                                            event.value: Value of the component</td>\r\n                                        <td>Callback to invoke when a selected value is removed.</td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>onDropdownClick</td>\r\n                                        <td>\r\n                                            event.originalEvent: browser event <br />\r\n                                            event.query: Current value of the input field\r\n                                        </td>\r\n                                        <td>Callback to invoke to when dropdown button is clicked.</td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>onClick</td>\r\n                                        <td>event: Browser event </td>\r\n                                        <td>Callback to invoke on click.</td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>onDblClick</td>\r\n                                        <td>event: Browser event</td>\r\n                                        <td>Callback to invoke on double click.</td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>onMouseDown</td>\r\n                                        <td>event: Browser event</td>\r\n                                        <td>Callback to invoke to when a mouse button is pressed.</td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>onKeyUp</td>\r\n                                        <td>event: Browser event</td>\r\n                                        <td>Callback to invoke to when a key is released.</td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>onKeyPress</td>\r\n                                        <td>event: Browser event</td>\r\n                                        <td>Callback to invoke to when a key is pressed.</td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>onContextMenu</td>\r\n                                        <td>event: Browser event</td>\r\n                                        <td>Callback to invoke on right-click.</td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>onClear</td>\r\n                                        <td>event: Browser event</td>\r\n                                        <td>Callback to invoke when input is cleared by the user.</td>\r\n                                    </tr>\r\n                                </tbody>\r\n                            </table>\r\n                        </div>\r\n\r\n                        <h5>Styling</h5>\r\n                        <p>Following is the list of structural style classes</p>\r\n                        <div className=\"doc-tablewrapper\">\r\n                            <table className=\"doc-table\">\r\n                                <thead>\r\n                                    <tr>\r\n                                        <th>Name</th>\r\n                                        <th>Element</th>\r\n                                    </tr>\r\n                                </thead>\r\n                                <tbody>\r\n                                    <tr>\r\n                                        <td>p-autocomplete</td>\r\n                                        <td>Container element</td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>p-autocomplete-panel</td>\r\n                                        <td>Overlay panel of suggestions.</td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>p-autocomplete-items</td>\r\n                                        <td>List container of suggestions.</td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>p-autocomplete-item</td>\r\n                                        <td>List item of a suggestion.</td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>p-autocomplete-token</td>\r\n                                        <td>Element of a selected item in multiple mode.</td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>p-autocomplete-token-icon</td>\r\n                                        <td>Close icon element of a selected item in multiple mode.</td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>p-autocomplete-token-label</td>\r\n                                        <td>Label of a selected item in multiple mode.</td>\r\n                                    </tr>\r\n                                </tbody>\r\n                            </table>\r\n                        </div>\r\n\r\n                        <h5>Dependencies</h5>\r\n                        <p>None.</p>\r\n                    </TabPanel>\r\n\r\n                    {\r\n                        useLiveEditorTabs({ name: 'AutoCompleteDemo', sources: this.sources, service: 'CountryService', data: 'countries' })\r\n                    }\r\n                </TabView>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}