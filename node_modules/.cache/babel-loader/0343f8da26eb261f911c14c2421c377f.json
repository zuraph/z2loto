{"ast":null,"code":"import _objectSpread from \"C:\\\\Users\\\\zura.ph\\\\WebstormProjects\\\\zz-regul\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\nimport _classCallCheck from \"C:\\\\Users\\\\zura.ph\\\\WebstormProjects\\\\zz-regul\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\zura.ph\\\\WebstormProjects\\\\zz-regul\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"C:\\\\Users\\\\zura.ph\\\\WebstormProjects\\\\zz-regul\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"C:\\\\Users\\\\zura.ph\\\\WebstormProjects\\\\zz-regul\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _createSuper from \"C:\\\\Users\\\\zura.ph\\\\WebstormProjects\\\\zz-regul\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"C:\\\\Users\\\\zura.ph\\\\WebstormProjects\\\\zz-regul\\\\src\\\\showcase\\\\treetable\\\\TreeTableLazyDemo.js\";\nimport React, { Component } from 'react';\nimport { TreeTable } from '../../components/treetable/TreeTable';\nimport { Column } from '../../components/column/Column';\nimport { TabView } from '../../components/tabview/TabView';\nimport { useLiveEditorTabs } from '../liveeditor/LiveEditor';\nimport { AppInlineHeader } from '../../AppInlineHeader';\nexport var TreeTableLazyDemo = /*#__PURE__*/function (_Component) {\n  _inherits(TreeTableLazyDemo, _Component);\n\n  var _super = _createSuper(TreeTableLazyDemo);\n\n  function TreeTableLazyDemo(props) {\n    var _this;\n\n    _classCallCheck(this, TreeTableLazyDemo);\n\n    _this = _super.call(this, props);\n    _this.state = {\n      nodes: [],\n      first: 0,\n      rows: 10,\n      totalRecords: 0,\n      loading: true\n    };\n    _this.onPage = _this.onPage.bind(_assertThisInitialized(_this));\n    _this.onExpand = _this.onExpand.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(TreeTableLazyDemo, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      setTimeout(function () {\n        _this2.setState({\n          loading: false,\n          nodes: _this2.loadNodes(_this2.state.first, _this2.state.rows),\n          totalRecords: 1000\n        });\n      }, 500);\n    }\n  }, {\n    key: \"loadNodes\",\n    value: function loadNodes(first, rows) {\n      var nodes = [];\n\n      for (var i = 0; i < rows; i++) {\n        var node = {\n          key: first + i,\n          data: {\n            name: 'Item ' + (first + i),\n            size: Math.floor(Math.random() * 1000) + 1 + 'kb',\n            type: 'Type ' + (first + i)\n          },\n          leaf: false\n        };\n        nodes.push(node);\n      }\n\n      return nodes;\n    }\n  }, {\n    key: \"onExpand\",\n    value: function onExpand(event) {\n      var _this3 = this;\n\n      if (!event.node.children) {\n        this.setState({\n          loading: true\n        });\n        setTimeout(function () {\n          _this3.loading = false;\n\n          var lazyNode = _objectSpread({}, event.node);\n\n          lazyNode.children = [{\n            data: {\n              name: lazyNode.data.name + ' - 0',\n              size: Math.floor(Math.random() * 1000) + 1 + 'kb',\n              type: 'File'\n            }\n          }, {\n            data: {\n              name: lazyNode.data.name + ' - 1',\n              size: Math.floor(Math.random() * 1000) + 1 + 'kb',\n              type: 'File'\n            }\n          }];\n\n          var nodes = _this3.state.nodes.map(function (node) {\n            if (node.key === event.node.key) {\n              node = lazyNode;\n            }\n\n            return node;\n          });\n\n          _this3.setState({\n            loading: false,\n            nodes: nodes\n          });\n        }, 250);\n      }\n    }\n  }, {\n    key: \"onPage\",\n    value: function onPage(event) {\n      var _this4 = this;\n\n      this.setState({\n        loading: true\n      }); //imitate delay of a backend call\n\n      setTimeout(function () {\n        _this4.setState({\n          first: event.first,\n          rows: event.rows,\n          nodes: _this4.loadNodes(event.first, event.rows),\n          loading: false\n        });\n      }, 500);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"content-section introduction\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(AppInlineHeader, {\n        changelogText: \"treeTable\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(\"h1\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 25\n        }\n      }, \"TreeTable \", /*#__PURE__*/React.createElement(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 39\n        }\n      }, \"Lazy\")), /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 25\n        }\n      }, \"Lazy mode is handy to deal with large datasets, instead of loading the entire data, small chunks of data is loaded by invoking corresponding callbacks everytime paging or sorting. In addition, children of a node can be loaded on demand at onNodeExpand event as well. Sample belows imitates lazy paging by using an in memory list.\"))), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"content-section implementation\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"card\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(TreeTable, {\n        value: this.state.nodes,\n        lazy: true,\n        paginator: true,\n        totalRecords: this.state.totalRecords,\n        first: this.state.first,\n        rows: this.state.rows,\n        onPage: this.onPage,\n        onExpand: this.onExpand,\n        loading: this.state.loading,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(Column, {\n        field: \"name\",\n        header: \"Name\",\n        expander: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 29\n        }\n      }), /*#__PURE__*/React.createElement(Column, {\n        field: \"size\",\n        header: \"Size\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 29\n        }\n      }), /*#__PURE__*/React.createElement(Column, {\n        field: \"type\",\n        header: \"Type\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 29\n        }\n      })))), /*#__PURE__*/React.createElement(TreeTableLazyDemoDoc, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 17\n        }\n      }));\n    }\n  }]);\n\n  return TreeTableLazyDemo;\n}(Component);\n\nvar TreeTableLazyDemoDoc = /*#__PURE__*/function (_Component2) {\n  _inherits(TreeTableLazyDemoDoc, _Component2);\n\n  var _super2 = _createSuper(TreeTableLazyDemoDoc);\n\n  function TreeTableLazyDemoDoc(props) {\n    var _this5;\n\n    _classCallCheck(this, TreeTableLazyDemoDoc);\n\n    _this5 = _super2.call(this, props);\n    _this5.sources = {\n      'class': {\n        tabName: 'Class Source',\n        content: \"\\nimport React, { Component } from 'react';\\nimport { TreeTable } from 'primereact/treetable';\\nimport { Column } from 'primereact/column';\\n\\nexport class TreeTableLazyDemo extends Component {\\n\\n    constructor(props) {\\n        super(props);\\n        this.state = {\\n            nodes: [],\\n            first: 0,\\n            rows: 10,\\n            totalRecords: 0,\\n            loading: true\\n        };\\n\\n        this.onPage = this.onPage.bind(this);\\n        this.onExpand = this.onExpand.bind(this);\\n    }\\n\\n    componentDidMount() {\\n        setTimeout(() => {\\n            this.setState({\\n                loading: false,\\n                nodes: this.loadNodes(this.state.first, this.state.rows),\\n                totalRecords: 1000\\n            });\\n        }, 500);\\n    }\\n\\n    loadNodes(first, rows) {\\n        let nodes = [];\\n\\n        for (let i = 0; i < rows; i++) {\\n            let node = {\\n                key: (first + i),\\n                data: {\\n                    name: 'Item ' + (first + i),\\n                    size: Math.floor(Math.random() * 1000) + 1 + 'kb',\\n                    type: 'Type ' + (first + i)\\n                },\\n                leaf: false\\n            };\\n\\n            nodes.push(node);\\n        }\\n\\n        return nodes;\\n    }\\n\\n    onExpand(event) {\\n        if (!event.node.children) {\\n            this.setState({\\n                loading: true\\n            });\\n\\n            setTimeout(() => {\\n                this.loading = false;\\n                let lazyNode = { ...event.node };\\n\\n                lazyNode.children = [\\n                    {\\n                        data: {\\n                            name: lazyNode.data.name + ' - 0',\\n                            size: Math.floor(Math.random() * 1000) + 1 + 'kb',\\n                            type: 'File'\\n                        },\\n                    },\\n                    {\\n                        data: {\\n                            name: lazyNode.data.name + ' - 1',\\n                            size: Math.floor(Math.random() * 1000) + 1 + 'kb',\\n                            type: 'File'\\n                        }\\n                    }\\n                ];\\n\\n                let nodes = this.state.nodes.map(node => {\\n                    if (node.key === event.node.key) {\\n                        node = lazyNode;\\n                    }\\n\\n                    return node;\\n                });\\n\\n                this.setState({\\n                    loading: false,\\n                    nodes: nodes\\n                });\\n            }, 250);\\n        }\\n    }\\n\\n    onPage(event) {\\n        this.setState({\\n            loading: true\\n        });\\n\\n        //imitate delay of a backend call\\n        setTimeout(() => {\\n            this.setState({\\n                first: event.first,\\n                rows: event.rows,\\n                nodes: this.loadNodes(event.first, event.rows),\\n                loading: false\\n            });\\n        }, 500);\\n    }\\n\\n    render() {\\n        return (\\n            <div>\\n                <div className=\\\"card\\\">\\n                    <TreeTable value={this.state.nodes} lazy paginator totalRecords={this.state.totalRecords}\\n                        first={this.state.first} rows={this.state.rows} onPage={this.onPage} onExpand={this.onExpand} loading={this.state.loading}>\\n                        <Column field=\\\"name\\\" header=\\\"Name\\\" expander></Column>\\n                        <Column field=\\\"size\\\" header=\\\"Size\\\"></Column>\\n                        <Column field=\\\"type\\\" header=\\\"Type\\\"></Column>\\n                    </TreeTable>\\n                </div>\\n            </div>\\n        )\\n    }\\n}\\n                \"\n      },\n      'hooks': {\n        tabName: 'Hooks Source',\n        content: \"\\nimport React, { useState, useEffect } from 'react';\\nimport { TreeTable } from 'primereact/treetable';\\nimport { Column } from 'primereact/column';\\n\\nconst TreeTableLazyDemo = () => {\\n    const [nodes, setNodes] = useState([]);\\n    const [first, setFirst] = useState(0);\\n    const [rows, setRows] = useState(10);\\n    const [totalRecords, setTotalRecords] = useState(0);\\n    const [loading, setLoading] = useState(true);\\n\\n    useEffect(() => {\\n        setTimeout(() => {\\n            setLoading(false);\\n            setNodes(loadNodes(first, rows));\\n            setTotalRecords(1000);\\n        }, 500);\\n    }, []); // eslint-disable-line react-hooks/exhaustive-deps\\n\\n    const loadNodes = (first, rows) => {\\n        let nodes = [];\\n\\n        for (let i = 0; i < rows; i++) {\\n            let node = {\\n                key: (first + i),\\n                data: {\\n                    name: 'Item ' + (first + i),\\n                    size: Math.floor(Math.random() * 1000) + 1 + 'kb',\\n                    type: 'Type ' + (first + i)\\n                },\\n                leaf: false\\n            };\\n\\n            nodes.push(node);\\n        }\\n\\n        return nodes;\\n    }\\n\\n    const onExpand = (event) => {\\n        if (!event.node.children) {\\n            setLoading(true);\\n\\n            setTimeout(() => {\\n                this.loading = false;\\n                let lazyNode = { ...event.node };\\n\\n                lazyNode.children = [\\n                    {\\n                        data: {\\n                            name: lazyNode.data.name + ' - 0',\\n                            size: Math.floor(Math.random() * 1000) + 1 + 'kb',\\n                            type: 'File'\\n                        },\\n                    },\\n                    {\\n                        data: {\\n                            name: lazyNode.data.name + ' - 1',\\n                            size: Math.floor(Math.random() * 1000) + 1 + 'kb',\\n                            type: 'File'\\n                        }\\n                    }\\n                ];\\n\\n                let _nodes = nodes.map(node => {\\n                    if (node.key === event.node.key) {\\n                        node = lazyNode;\\n                    }\\n\\n                    return node;\\n                });\\n\\n                setLoading(false);\\n                setNodes(_nodes);\\n            }, 250);\\n        }\\n    }\\n\\n    const onPage = (event) => {\\n        setLoading(true);\\n\\n        //imitate delay of a backend call\\n        setTimeout(() => {\\n            setFirst(event.first);\\n            setRows(event.rows);\\n            setNodes(loadNodes(event.first, event.rows));\\n            setLoading(false);\\n        }, 500);\\n    }\\n\\n    return (\\n        <div>\\n            <div className=\\\"card\\\">\\n                <TreeTable value={nodes} lazy paginator totalRecords={totalRecords}\\n                    first={first} rows={rows} onPage={onPage} onExpand={onExpand} loading={loading}>\\n                    <Column field=\\\"name\\\" header=\\\"Name\\\" expander></Column>\\n                    <Column field=\\\"size\\\" header=\\\"Size\\\"></Column>\\n                    <Column field=\\\"type\\\" header=\\\"Type\\\"></Column>\\n                </TreeTable>\\n            </div>\\n        </div>\\n    );\\n}\\n                \"\n      },\n      'ts': {\n        tabName: 'TS Source',\n        content: \"\\nimport React, { useState, useEffect } from 'react';\\nimport { TreeTable } from 'primereact/treetable';\\nimport { Column } from 'primereact/column';\\n\\nconst TreeTableLazyDemo = () => {\\n    const [nodes, setNodes] = useState([]);\\n    const [first, setFirst] = useState(0);\\n    const [rows, setRows] = useState(10);\\n    const [totalRecords, setTotalRecords] = useState(0);\\n    const [loading, setLoading] = useState(true);\\n\\n    useEffect(() => {\\n        setTimeout(() => {\\n            setLoading(false);\\n            setNodes(loadNodes(first, rows));\\n            setTotalRecords(1000);\\n        }, 500);\\n    }, []); // eslint-disable-line react-hooks/exhaustive-deps\\n\\n    const loadNodes = (first, rows) => {\\n        let nodes = [];\\n\\n        for (let i = 0; i < rows; i++) {\\n            let node = {\\n                key: (first + i),\\n                data: {\\n                    name: 'Item ' + (first + i),\\n                    size: Math.floor(Math.random() * 1000) + 1 + 'kb',\\n                    type: 'Type ' + (first + i)\\n                },\\n                leaf: false\\n            };\\n\\n            nodes.push(node);\\n        }\\n\\n        return nodes;\\n    }\\n\\n    const onExpand = (event) => {\\n        if (!event.node.children) {\\n            setLoading(true);\\n\\n            setTimeout(() => {\\n                this.loading = false;\\n                let lazyNode = { ...event.node };\\n\\n                lazyNode.children = [\\n                    {\\n                        data: {\\n                            name: lazyNode.data.name + ' - 0',\\n                            size: Math.floor(Math.random() * 1000) + 1 + 'kb',\\n                            type: 'File'\\n                        },\\n                    },\\n                    {\\n                        data: {\\n                            name: lazyNode.data.name + ' - 1',\\n                            size: Math.floor(Math.random() * 1000) + 1 + 'kb',\\n                            type: 'File'\\n                        }\\n                    }\\n                ];\\n\\n                let _nodes = nodes.map(node => {\\n                    if (node.key === event.node.key) {\\n                        node = lazyNode;\\n                    }\\n\\n                    return node;\\n                });\\n\\n                setLoading(false);\\n                setNodes(_nodes);\\n            }, 250);\\n        }\\n    }\\n\\n    const onPage = (event) => {\\n        setLoading(true);\\n\\n        //imitate delay of a backend call\\n        setTimeout(() => {\\n            setFirst(event.first);\\n            setRows(event.rows);\\n            setNodes(loadNodes(event.first, event.rows));\\n            setLoading(false);\\n        }, 500);\\n    }\\n\\n    return (\\n        <div>\\n            <div className=\\\"card\\\">\\n                <TreeTable value={nodes} lazy paginator totalRecords={totalRecords}\\n                    first={first} rows={rows} onPage={onPage} onExpand={onExpand} loading={loading}>\\n                    <Column field=\\\"name\\\" header=\\\"Name\\\" expander></Column>\\n                    <Column field=\\\"size\\\" header=\\\"Size\\\"></Column>\\n                    <Column field=\\\"type\\\" header=\\\"Type\\\"></Column>\\n                </TreeTable>\\n            </div>\\n        </div>\\n    );\\n}\\n                \"\n      }\n    };\n    return _this5;\n  }\n\n  _createClass(TreeTableLazyDemoDoc, [{\n    key: \"shouldComponentUpdate\",\n    value: function shouldComponentUpdate() {\n      return false;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"content-section documentation\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 502,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(TabView, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 503,\n          columnNumber: 17\n        }\n      }, useLiveEditorTabs({\n        name: 'TreeTableLazyDemo',\n        sources: this.sources,\n        service: 'NodeService',\n        data: 'treetablenodes'\n      })));\n    }\n  }]);\n\n  return TreeTableLazyDemoDoc;\n}(Component);","map":{"version":3,"sources":["C:/Users/zura.ph/WebstormProjects/zz-regul/src/showcase/treetable/TreeTableLazyDemo.js"],"names":["React","Component","TreeTable","Column","TabView","useLiveEditorTabs","AppInlineHeader","TreeTableLazyDemo","props","state","nodes","first","rows","totalRecords","loading","onPage","bind","onExpand","setTimeout","setState","loadNodes","i","node","key","data","name","size","Math","floor","random","type","leaf","push","event","children","lazyNode","map","TreeTableLazyDemoDoc","sources","tabName","content","service"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { TreeTable } from '../../components/treetable/TreeTable';\r\nimport { Column } from '../../components/column/Column';\r\nimport { TabView } from '../../components/tabview/TabView';\r\nimport { useLiveEditorTabs }from '../liveeditor/LiveEditor';\r\nimport { AppInlineHeader } from '../../AppInlineHeader';\r\n\r\nexport class TreeTableLazyDemo extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            nodes: [],\r\n            first: 0,\r\n            rows: 10,\r\n            totalRecords: 0,\r\n            loading: true\r\n        };\r\n\r\n        this.onPage = this.onPage.bind(this);\r\n        this.onExpand = this.onExpand.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        setTimeout(() => {\r\n            this.setState({\r\n                loading: false,\r\n                nodes: this.loadNodes(this.state.first, this.state.rows),\r\n                totalRecords: 1000\r\n            });\r\n        }, 500);\r\n    }\r\n\r\n    loadNodes(first, rows) {\r\n        let nodes = [];\r\n\r\n        for (let i = 0; i < rows; i++) {\r\n            let node = {\r\n                key: (first + i),\r\n                data: {\r\n                    name: 'Item ' + (first + i),\r\n                    size: Math.floor(Math.random() * 1000) + 1 + 'kb',\r\n                    type: 'Type ' + (first + i)\r\n                },\r\n                leaf: false\r\n            };\r\n\r\n            nodes.push(node);\r\n        }\r\n\r\n        return nodes;\r\n    }\r\n\r\n    onExpand(event) {\r\n        if (!event.node.children) {\r\n            this.setState({\r\n                loading: true\r\n            });\r\n\r\n            setTimeout(() => {\r\n                this.loading = false;\r\n                let lazyNode = { ...event.node };\r\n\r\n                lazyNode.children = [\r\n                    {\r\n                        data: {\r\n                            name: lazyNode.data.name + ' - 0',\r\n                            size: Math.floor(Math.random() * 1000) + 1 + 'kb',\r\n                            type: 'File'\r\n                        },\r\n                    },\r\n                    {\r\n                        data: {\r\n                            name: lazyNode.data.name + ' - 1',\r\n                            size: Math.floor(Math.random() * 1000) + 1 + 'kb',\r\n                            type: 'File'\r\n                        }\r\n                    }\r\n                ];\r\n\r\n                let nodes = this.state.nodes.map(node => {\r\n                    if (node.key === event.node.key) {\r\n                        node = lazyNode;\r\n                    }\r\n\r\n                    return node;\r\n                });\r\n\r\n                this.setState({\r\n                    loading: false,\r\n                    nodes: nodes\r\n                });\r\n            }, 250);\r\n        }\r\n    }\r\n\r\n    onPage(event) {\r\n        this.setState({\r\n            loading: true\r\n        });\r\n\r\n        //imitate delay of a backend call\r\n        setTimeout(() => {\r\n            this.setState({\r\n                first: event.first,\r\n                rows: event.rows,\r\n                nodes: this.loadNodes(event.first, event.rows),\r\n                loading: false\r\n            });\r\n        }, 500);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div className=\"content-section introduction\">\r\n                    <AppInlineHeader changelogText=\"treeTable\">\r\n                        <h1>TreeTable <span>Lazy</span></h1>\r\n                        <p>Lazy mode is handy to deal with large datasets, instead of loading the entire data, small chunks of data is loaded by invoking corresponding callbacks everytime paging or sorting.\r\n                            In addition, children of a node can be loaded on demand at onNodeExpand event as well. Sample belows imitates lazy paging by using an in memory list.</p>\r\n\r\n                    </AppInlineHeader>\r\n                </div>\r\n\r\n                <div className=\"content-section implementation\">\r\n                    <div className=\"card\">\r\n                        <TreeTable value={this.state.nodes} lazy paginator totalRecords={this.state.totalRecords}\r\n                            first={this.state.first} rows={this.state.rows} onPage={this.onPage} onExpand={this.onExpand} loading={this.state.loading}>\r\n                            <Column field=\"name\" header=\"Name\" expander></Column>\r\n                            <Column field=\"size\" header=\"Size\"></Column>\r\n                            <Column field=\"type\" header=\"Type\"></Column>\r\n                        </TreeTable>\r\n                    </div>\r\n                </div>\r\n\r\n                <TreeTableLazyDemoDoc />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nclass TreeTableLazyDemoDoc extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.sources = {\r\n            'class': {\r\n                tabName: 'Class Source',\r\n                content: `\r\nimport React, { Component } from 'react';\r\nimport { TreeTable } from 'primereact/treetable';\r\nimport { Column } from 'primereact/column';\r\n\r\nexport class TreeTableLazyDemo extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            nodes: [],\r\n            first: 0,\r\n            rows: 10,\r\n            totalRecords: 0,\r\n            loading: true\r\n        };\r\n\r\n        this.onPage = this.onPage.bind(this);\r\n        this.onExpand = this.onExpand.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        setTimeout(() => {\r\n            this.setState({\r\n                loading: false,\r\n                nodes: this.loadNodes(this.state.first, this.state.rows),\r\n                totalRecords: 1000\r\n            });\r\n        }, 500);\r\n    }\r\n\r\n    loadNodes(first, rows) {\r\n        let nodes = [];\r\n\r\n        for (let i = 0; i < rows; i++) {\r\n            let node = {\r\n                key: (first + i),\r\n                data: {\r\n                    name: 'Item ' + (first + i),\r\n                    size: Math.floor(Math.random() * 1000) + 1 + 'kb',\r\n                    type: 'Type ' + (first + i)\r\n                },\r\n                leaf: false\r\n            };\r\n\r\n            nodes.push(node);\r\n        }\r\n\r\n        return nodes;\r\n    }\r\n\r\n    onExpand(event) {\r\n        if (!event.node.children) {\r\n            this.setState({\r\n                loading: true\r\n            });\r\n\r\n            setTimeout(() => {\r\n                this.loading = false;\r\n                let lazyNode = { ...event.node };\r\n\r\n                lazyNode.children = [\r\n                    {\r\n                        data: {\r\n                            name: lazyNode.data.name + ' - 0',\r\n                            size: Math.floor(Math.random() * 1000) + 1 + 'kb',\r\n                            type: 'File'\r\n                        },\r\n                    },\r\n                    {\r\n                        data: {\r\n                            name: lazyNode.data.name + ' - 1',\r\n                            size: Math.floor(Math.random() * 1000) + 1 + 'kb',\r\n                            type: 'File'\r\n                        }\r\n                    }\r\n                ];\r\n\r\n                let nodes = this.state.nodes.map(node => {\r\n                    if (node.key === event.node.key) {\r\n                        node = lazyNode;\r\n                    }\r\n\r\n                    return node;\r\n                });\r\n\r\n                this.setState({\r\n                    loading: false,\r\n                    nodes: nodes\r\n                });\r\n            }, 250);\r\n        }\r\n    }\r\n\r\n    onPage(event) {\r\n        this.setState({\r\n            loading: true\r\n        });\r\n\r\n        //imitate delay of a backend call\r\n        setTimeout(() => {\r\n            this.setState({\r\n                first: event.first,\r\n                rows: event.rows,\r\n                nodes: this.loadNodes(event.first, event.rows),\r\n                loading: false\r\n            });\r\n        }, 500);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div className=\"card\">\r\n                    <TreeTable value={this.state.nodes} lazy paginator totalRecords={this.state.totalRecords}\r\n                        first={this.state.first} rows={this.state.rows} onPage={this.onPage} onExpand={this.onExpand} loading={this.state.loading}>\r\n                        <Column field=\"name\" header=\"Name\" expander></Column>\r\n                        <Column field=\"size\" header=\"Size\"></Column>\r\n                        <Column field=\"type\" header=\"Type\"></Column>\r\n                    </TreeTable>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n                `\r\n            },\r\n            'hooks': {\r\n                tabName: 'Hooks Source',\r\n                content: `\r\nimport React, { useState, useEffect } from 'react';\r\nimport { TreeTable } from 'primereact/treetable';\r\nimport { Column } from 'primereact/column';\r\n\r\nconst TreeTableLazyDemo = () => {\r\n    const [nodes, setNodes] = useState([]);\r\n    const [first, setFirst] = useState(0);\r\n    const [rows, setRows] = useState(10);\r\n    const [totalRecords, setTotalRecords] = useState(0);\r\n    const [loading, setLoading] = useState(true);\r\n\r\n    useEffect(() => {\r\n        setTimeout(() => {\r\n            setLoading(false);\r\n            setNodes(loadNodes(first, rows));\r\n            setTotalRecords(1000);\r\n        }, 500);\r\n    }, []); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n    const loadNodes = (first, rows) => {\r\n        let nodes = [];\r\n\r\n        for (let i = 0; i < rows; i++) {\r\n            let node = {\r\n                key: (first + i),\r\n                data: {\r\n                    name: 'Item ' + (first + i),\r\n                    size: Math.floor(Math.random() * 1000) + 1 + 'kb',\r\n                    type: 'Type ' + (first + i)\r\n                },\r\n                leaf: false\r\n            };\r\n\r\n            nodes.push(node);\r\n        }\r\n\r\n        return nodes;\r\n    }\r\n\r\n    const onExpand = (event) => {\r\n        if (!event.node.children) {\r\n            setLoading(true);\r\n\r\n            setTimeout(() => {\r\n                this.loading = false;\r\n                let lazyNode = { ...event.node };\r\n\r\n                lazyNode.children = [\r\n                    {\r\n                        data: {\r\n                            name: lazyNode.data.name + ' - 0',\r\n                            size: Math.floor(Math.random() * 1000) + 1 + 'kb',\r\n                            type: 'File'\r\n                        },\r\n                    },\r\n                    {\r\n                        data: {\r\n                            name: lazyNode.data.name + ' - 1',\r\n                            size: Math.floor(Math.random() * 1000) + 1 + 'kb',\r\n                            type: 'File'\r\n                        }\r\n                    }\r\n                ];\r\n\r\n                let _nodes = nodes.map(node => {\r\n                    if (node.key === event.node.key) {\r\n                        node = lazyNode;\r\n                    }\r\n\r\n                    return node;\r\n                });\r\n\r\n                setLoading(false);\r\n                setNodes(_nodes);\r\n            }, 250);\r\n        }\r\n    }\r\n\r\n    const onPage = (event) => {\r\n        setLoading(true);\r\n\r\n        //imitate delay of a backend call\r\n        setTimeout(() => {\r\n            setFirst(event.first);\r\n            setRows(event.rows);\r\n            setNodes(loadNodes(event.first, event.rows));\r\n            setLoading(false);\r\n        }, 500);\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"card\">\r\n                <TreeTable value={nodes} lazy paginator totalRecords={totalRecords}\r\n                    first={first} rows={rows} onPage={onPage} onExpand={onExpand} loading={loading}>\r\n                    <Column field=\"name\" header=\"Name\" expander></Column>\r\n                    <Column field=\"size\" header=\"Size\"></Column>\r\n                    <Column field=\"type\" header=\"Type\"></Column>\r\n                </TreeTable>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n                `\r\n            },\r\n            'ts': {\r\n                tabName: 'TS Source',\r\n                content: `\r\nimport React, { useState, useEffect } from 'react';\r\nimport { TreeTable } from 'primereact/treetable';\r\nimport { Column } from 'primereact/column';\r\n\r\nconst TreeTableLazyDemo = () => {\r\n    const [nodes, setNodes] = useState([]);\r\n    const [first, setFirst] = useState(0);\r\n    const [rows, setRows] = useState(10);\r\n    const [totalRecords, setTotalRecords] = useState(0);\r\n    const [loading, setLoading] = useState(true);\r\n\r\n    useEffect(() => {\r\n        setTimeout(() => {\r\n            setLoading(false);\r\n            setNodes(loadNodes(first, rows));\r\n            setTotalRecords(1000);\r\n        }, 500);\r\n    }, []); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n    const loadNodes = (first, rows) => {\r\n        let nodes = [];\r\n\r\n        for (let i = 0; i < rows; i++) {\r\n            let node = {\r\n                key: (first + i),\r\n                data: {\r\n                    name: 'Item ' + (first + i),\r\n                    size: Math.floor(Math.random() * 1000) + 1 + 'kb',\r\n                    type: 'Type ' + (first + i)\r\n                },\r\n                leaf: false\r\n            };\r\n\r\n            nodes.push(node);\r\n        }\r\n\r\n        return nodes;\r\n    }\r\n\r\n    const onExpand = (event) => {\r\n        if (!event.node.children) {\r\n            setLoading(true);\r\n\r\n            setTimeout(() => {\r\n                this.loading = false;\r\n                let lazyNode = { ...event.node };\r\n\r\n                lazyNode.children = [\r\n                    {\r\n                        data: {\r\n                            name: lazyNode.data.name + ' - 0',\r\n                            size: Math.floor(Math.random() * 1000) + 1 + 'kb',\r\n                            type: 'File'\r\n                        },\r\n                    },\r\n                    {\r\n                        data: {\r\n                            name: lazyNode.data.name + ' - 1',\r\n                            size: Math.floor(Math.random() * 1000) + 1 + 'kb',\r\n                            type: 'File'\r\n                        }\r\n                    }\r\n                ];\r\n\r\n                let _nodes = nodes.map(node => {\r\n                    if (node.key === event.node.key) {\r\n                        node = lazyNode;\r\n                    }\r\n\r\n                    return node;\r\n                });\r\n\r\n                setLoading(false);\r\n                setNodes(_nodes);\r\n            }, 250);\r\n        }\r\n    }\r\n\r\n    const onPage = (event) => {\r\n        setLoading(true);\r\n\r\n        //imitate delay of a backend call\r\n        setTimeout(() => {\r\n            setFirst(event.first);\r\n            setRows(event.rows);\r\n            setNodes(loadNodes(event.first, event.rows));\r\n            setLoading(false);\r\n        }, 500);\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"card\">\r\n                <TreeTable value={nodes} lazy paginator totalRecords={totalRecords}\r\n                    first={first} rows={rows} onPage={onPage} onExpand={onExpand} loading={loading}>\r\n                    <Column field=\"name\" header=\"Name\" expander></Column>\r\n                    <Column field=\"size\" header=\"Size\"></Column>\r\n                    <Column field=\"type\" header=\"Type\"></Column>\r\n                </TreeTable>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n                `\r\n            }\r\n        }\r\n    }\r\n\r\n    shouldComponentUpdate() {\r\n        return false;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"content-section documentation\">\r\n                <TabView>\r\n                    {\r\n                        useLiveEditorTabs({ name: 'TreeTableLazyDemo', sources: this.sources, service: 'NodeService', data: 'treetablenodes' })\r\n                    }\r\n                </TabView>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}