{"ast":null,"code":"import _classCallCheck from\"C:\\\\Users\\\\zura.ph\\\\WebstormProjects\\\\slotmaster-dashboard\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";import _createClass from\"C:\\\\Users\\\\zura.ph\\\\WebstormProjects\\\\slotmaster-dashboard\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";import _inherits from\"C:\\\\Users\\\\zura.ph\\\\WebstormProjects\\\\slotmaster-dashboard\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";import _createSuper from\"C:\\\\Users\\\\zura.ph\\\\WebstormProjects\\\\slotmaster-dashboard\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createSuper\";import React,{Component}from'react';import{Link}from'react-router-dom';import{TabView,TabPanel}from'../../components/tabview/TabView';import{CodeHighlight}from'../codehighlight/CodeHighlight';import{useLiveEditorTabs}from'../liveeditor/LiveEditor';export var ToastDoc=/*#__PURE__*/function(_Component){_inherits(ToastDoc,_Component);var _super=_createSuper(ToastDoc);function ToastDoc(props){var _this;_classCallCheck(this,ToastDoc);_this=_super.call(this,props);_this.sources={'class':{tabName:'Class Source',content:\"\\nimport React, { Component } from 'react';\\nimport { Toast } from 'primereact/toast';\\nimport { Button } from 'primereact/button';\\nimport './ToastDemo.css';\\n\\nexport class ToastDemo extends Component {\\n\\n    constructor(props) {\\n        super(props);\\n        this.showSuccess = this.showSuccess.bind(this);\\n        this.showInfo = this.showInfo.bind(this);\\n        this.showWarn = this.showWarn.bind(this);\\n        this.showError = this.showError.bind(this);\\n        this.showTopLeft = this.showTopLeft.bind(this);\\n        this.showBottomLeft = this.showBottomLeft.bind(this);\\n        this.showBottomRight = this.showBottomRight.bind(this);\\n        this.showMultiple = this.showMultiple.bind(this);\\n        this.showSticky = this.showSticky.bind(this);\\n        this.showConfirm = this.showConfirm.bind(this);\\n        this.clear = this.clear.bind(this);\\n    }\\n\\n    showSuccess() {\\n        this.toast.show({severity:'success', summary: 'Success Message', detail:'Message Content', life: 3000});\\n    }\\n\\n    showInfo() {\\n        this.toast.show({severity:'info', summary: 'Info Message', detail:'Message Content', life: 3000});\\n    }\\n\\n    showWarn() {\\n        this.toast.show({severity:'warn', summary: 'Warn Message', detail:'Message Content', life: 3000});\\n    }\\n\\n    showError() {\\n        this.toast.show({severity:'error', summary: 'Error Message', detail:'Message Content', life: 3000});\\n    }\\n\\n    showTopLeft() {\\n        this.toastTL.show({severity: 'info', summary: 'Info Message', detail: 'Message Content', life: 3000});\\n    }\\n\\n    showBottomLeft() {\\n        this.toastBL.show({severity:'warn', summary: 'Warn Message', detail:'Message Content', life: 3000});\\n    }\\n\\n    showBottomRight() {\\n        this.toastBR.show({severity:'success', summary: 'Success Message', detail:'Message Content', life: 3000});\\n    }\\n\\n    showSticky() {\\n        this.toast.show({severity: 'info', summary: 'Sticky Message', detail: 'Message Content', sticky: true});\\n    }\\n\\n    showConfirm() {\\n        this.toastBC.show({ severity: 'warn', sticky: true, content: (\\n            <div className=\\\"p-flex p-flex-column\\\" style={{flex: '1'}}>\\n                <div className=\\\"p-text-center\\\">\\n                    <i className=\\\"pi pi-exclamation-triangle\\\" style={{fontSize: '3rem'}}></i>\\n                    <h4>Are you sure?</h4>\\n                    <p>Confirm to proceed</p>\\n                </div>\\n                <div className=\\\"p-grid p-fluid\\\">\\n                    <div className=\\\"p-col-6\\\">\\n                        <Button type=\\\"button\\\" label=\\\"Yes\\\" className=\\\"p-button-success\\\" />\\n                    </div>\\n                    <div className=\\\"p-col-6\\\">\\n                        <Button type=\\\"button\\\" label=\\\"No\\\" className=\\\"p-button-secondary\\\" />\\n                    </div>\\n                </div>\\n            </div>\\n        ) });\\n    }\\n\\n    showMultiple() {\\n        this.toast.show([\\n            {severity:'info', summary:'Message 1', detail:'Message 1 Content', life: 3000},\\n            {severity:'info', summary:'Message 2', detail:'Message 2 Content', life: 3000},\\n            {severity:'info', summary:'Message 3', detail:'Message 3 Content', life: 3000}\\n        ]);\\n    }\\n\\n    clear() {\\n        this.toast.clear();\\n    }\\n\\n    render() {\\n        return (\\n            <div>\\n                <Toast ref={(el) => this.toast = el} />\\n                <Toast ref={(el) => this.toastTL = el} position=\\\"top-left\\\" />\\n                <Toast ref={(el) => this.toastBL = el} position=\\\"bottom-left\\\" />\\n                <Toast ref={(el) => this.toastBR = el} position=\\\"bottom-right\\\" />\\n                <Toast ref={(el) => this.toastBC = el} position=\\\"bottom-center\\\" />\\n\\n                <div className=\\\"card toast-demo\\\">\\n                    <h5>Severities</h5>\\n                    <Button label=\\\"Success\\\" className=\\\"p-button-success\\\" onClick={this.showSuccess} />\\n                    <Button label=\\\"Info\\\" className=\\\"p-button-info\\\" onClick={this.showInfo} />\\n                    <Button label=\\\"Warn\\\" className=\\\"p-button-warning\\\" onClick={this.showWarn} />\\n                    <Button label=\\\"Error\\\" className=\\\"p-button-danger\\\" onClick={this.showError} />\\n\\n                    <h5>Positions</h5>\\n                    <Button label=\\\"Top Left\\\" className=\\\"p-mr-2\\\" onClick={this.showTopLeft} />\\n                    <Button label=\\\"Bottom Left\\\" className=\\\"p-button-warning\\\" onClick={this.showBottomLeft} />\\n                    <Button label=\\\"Bottom Right\\\" className=\\\"p-button-success\\\" onClick={this.showBottomRight} />\\n\\n                    <h5>Options</h5>\\n                    <Button onClick={this.showMultiple} label=\\\"Multiple\\\" className=\\\"p-button-warning\\\" />\\n                    <Button onClick={this.showSticky} label=\\\"Sticky\\\" />\\n\\n                    <h5>Clear</h5>\\n                    <Button onClick={this.clear} label=\\\"Clear\\\" />\\n\\n                    <h5>Custom</h5>\\n                    <Button type=\\\"button\\\" onClick={this.showConfirm} label=\\\"Confirm\\\" className=\\\"ui-button-warning\\\" />\\n                </div>\\n            </div>\\n        )\\n    }\\n}\\n                \"},'hooks':{tabName:'Hooks Source',content:\"\\nimport React, { useRef } from 'react';\\nimport { Toast } from 'primereact/toast';\\nimport { Button } from 'primereact/button';\\nimport './ToastDemo.css';\\n\\nconst ToastDemo = () => {\\n    const toast = useRef(null);\\n    const toastTL = useRef(null);\\n    const toastBL = useRef(null);\\n    const toastBR = useRef(null);\\n    const toastBC = useRef(null);\\n\\n    const showSuccess = () => {\\n        toast.current.show({severity:'success', summary: 'Success Message', detail:'Message Content', life: 3000});\\n    }\\n\\n    const showInfo = () => {\\n        toast.current.show({severity:'info', summary: 'Info Message', detail:'Message Content', life: 3000});\\n    }\\n\\n    const showWarn = () => {\\n        toast.current.show({severity:'warn', summary: 'Warn Message', detail:'Message Content', life: 3000});\\n    }\\n\\n    const showError = () => {\\n        toast.current.show({severity:'error', summary: 'Error Message', detail:'Message Content', life: 3000});\\n    }\\n\\n    const showTopLeft = () => {\\n        toastTL.current.show({severity: 'info', summary: 'Info Message', detail: 'Message Content', life: 3000});\\n    }\\n\\n    const showBottomLeft = () => {\\n        toastBL.current.show({severity:'warn', summary: 'Warn Message', detail:'Message Content', life: 3000});\\n    }\\n\\n    const showBottomRight = () => {\\n        toastBR.current.show({severity:'success', summary: 'Success Message', detail:'Message Content', life: 3000});\\n    }\\n\\n    const showSticky = () => {\\n        toast.current.show({severity: 'info', summary: 'Sticky Message', detail: 'Message Content', sticky: true});\\n    }\\n\\n    const showConfirm = () => {\\n        toastBC.current.show({ severity: 'warn', sticky: true, content: (\\n            <div className=\\\"p-flex p-flex-column\\\" style={{flex: '1'}}>\\n                <div className=\\\"p-text-center\\\">\\n                    <i className=\\\"pi pi-exclamation-triangle\\\" style={{fontSize: '3rem'}}></i>\\n                    <h4>Are you sure?</h4>\\n                    <p>Confirm to proceed</p>\\n                </div>\\n                <div className=\\\"p-grid p-fluid\\\">\\n                    <div className=\\\"p-col-6\\\">\\n                        <Button type=\\\"button\\\" label=\\\"Yes\\\" className=\\\"p-button-success\\\" />\\n                    </div>\\n                    <div className=\\\"p-col-6\\\">\\n                        <Button type=\\\"button\\\" label=\\\"No\\\" className=\\\"p-button-secondary\\\" />\\n                    </div>\\n                </div>\\n            </div>\\n        ) });\\n    }\\n\\n    const showMultiple = () => {\\n        toast.current.show([\\n            {severity:'info', summary:'Message 1', detail:'Message 1 Content', life: 3000},\\n            {severity:'info', summary:'Message 2', detail:'Message 2 Content', life: 3000},\\n            {severity:'info', summary:'Message 3', detail:'Message 3 Content', life: 3000}\\n        ]);\\n    }\\n\\n    const clear = () => {\\n        toast.current.clear();\\n    }\\n\\n    return (\\n        <div>\\n            <Toast ref={toast} />\\n            <Toast ref={toastTL} position=\\\"top-left\\\" />\\n            <Toast ref={toastBL} position=\\\"bottom-left\\\" />\\n            <Toast ref={toastBR} position=\\\"bottom-right\\\" />\\n            <Toast ref={toastBC} position=\\\"bottom-center\\\" />\\n\\n            <div className=\\\"card toast-demo\\\">\\n                <h5>Severities</h5>\\n                <Button label=\\\"Success\\\" className=\\\"p-button-success\\\" onClick={showSuccess} />\\n                <Button label=\\\"Info\\\" className=\\\"p-button-info\\\" onClick={showInfo} />\\n                <Button label=\\\"Warn\\\" className=\\\"p-button-warning\\\" onClick={showWarn} />\\n                <Button label=\\\"Error\\\" className=\\\"p-button-danger\\\" onClick={showError} />\\n\\n                <h5>Positions</h5>\\n                <Button label=\\\"Top Left\\\" className=\\\"p-mr-2\\\" onClick={showTopLeft} />\\n                <Button label=\\\"Bottom Left\\\" className=\\\"p-button-warning\\\" onClick={showBottomLeft} />\\n                <Button label=\\\"Bottom Right\\\" className=\\\"p-button-success\\\" onClick={showBottomRight} />\\n\\n                <h5>Options</h5>\\n                <Button onClick={showMultiple} label=\\\"Multiple\\\" className=\\\"p-button-warning\\\" />\\n                <Button onClick={showSticky} label=\\\"Sticky\\\" />\\n\\n                <h5>Clear</h5>\\n                <Button onClick={clear} label=\\\"Clear\\\" />\\n\\n                <h5>Custom</h5>\\n                <Button type=\\\"button\\\" onClick={showConfirm} label=\\\"Confirm\\\" className=\\\"ui-button-warning\\\" />\\n            </div>\\n        </div>\\n    )\\n}\\n                \"},'ts':{tabName:'TS Source',content:\"\\nimport React, { useRef } from 'react';\\nimport { Toast } from 'primereact/toast';\\nimport { Button } from 'primereact/button';\\nimport './ToastDemo.css';\\n\\nconst ToastDemo = () => {\\n    const toast = useRef(null);\\n    const toastTL = useRef(null);\\n    const toastBL = useRef(null);\\n    const toastBR = useRef(null);\\n    const toastBC = useRef(null);\\n\\n    const showSuccess = () => {\\n        toast.current.show({severity:'success', summary: 'Success Message', detail:'Message Content', life: 3000});\\n    }\\n\\n    const showInfo = () => {\\n        toast.current.show({severity:'info', summary: 'Info Message', detail:'Message Content', life: 3000});\\n    }\\n\\n    const showWarn = () => {\\n        toast.current.show({severity:'warn', summary: 'Warn Message', detail:'Message Content', life: 3000});\\n    }\\n\\n    const showError = () => {\\n        toast.current.show({severity:'error', summary: 'Error Message', detail:'Message Content', life: 3000});\\n    }\\n\\n    const showTopLeft = () => {\\n        toastTL.current.show({severity: 'info', summary: 'Info Message', detail: 'Message Content', life: 3000});\\n    }\\n\\n    const showBottomLeft = () => {\\n        toastBL.current.show({severity:'warn', summary: 'Warn Message', detail:'Message Content', life: 3000});\\n    }\\n\\n    const showBottomRight = () => {\\n        toastBR.current.show({severity:'success', summary: 'Success Message', detail:'Message Content', life: 3000});\\n    }\\n\\n    const showSticky = () => {\\n        toast.current.show({severity: 'info', summary: 'Sticky Message', detail: 'Message Content', sticky: true});\\n    }\\n\\n    const showConfirm = () => {\\n        toastBC.current.show({ severity: 'warn', sticky: true, content: (\\n            <div className=\\\"p-flex p-flex-column\\\" style={{flex: '1'}}>\\n                <div className=\\\"p-text-center\\\">\\n                    <i className=\\\"pi pi-exclamation-triangle\\\" style={{fontSize: '3rem'}}></i>\\n                    <h4>Are you sure?</h4>\\n                    <p>Confirm to proceed</p>\\n                </div>\\n                <div className=\\\"p-grid p-fluid\\\">\\n                    <div className=\\\"p-col-6\\\">\\n                        <Button type=\\\"button\\\" label=\\\"Yes\\\" className=\\\"p-button-success\\\" />\\n                    </div>\\n                    <div className=\\\"p-col-6\\\">\\n                        <Button type=\\\"button\\\" label=\\\"No\\\" className=\\\"p-button-secondary\\\" />\\n                    </div>\\n                </div>\\n            </div>\\n        ) });\\n    }\\n\\n    const showMultiple = () => {\\n        toast.current.show([\\n            {severity:'info', summary:'Message 1', detail:'Message 1 Content', life: 3000},\\n            {severity:'info', summary:'Message 2', detail:'Message 2 Content', life: 3000},\\n            {severity:'info', summary:'Message 3', detail:'Message 3 Content', life: 3000}\\n        ]);\\n    }\\n\\n    const clear = () => {\\n        toast.current.clear();\\n    }\\n\\n    return (\\n        <div>\\n            <Toast ref={toast} />\\n            <Toast ref={toastTL} position=\\\"top-left\\\" />\\n            <Toast ref={toastBL} position=\\\"bottom-left\\\" />\\n            <Toast ref={toastBR} position=\\\"bottom-right\\\" />\\n            <Toast ref={toastBC} position=\\\"bottom-center\\\" />\\n\\n            <div className=\\\"card toast-demo\\\">\\n                <h5>Severities</h5>\\n                <Button label=\\\"Success\\\" className=\\\"p-button-success\\\" onClick={showSuccess} />\\n                <Button label=\\\"Info\\\" className=\\\"p-button-info\\\" onClick={showInfo} />\\n                <Button label=\\\"Warn\\\" className=\\\"p-button-warning\\\" onClick={showWarn} />\\n                <Button label=\\\"Error\\\" className=\\\"p-button-danger\\\" onClick={showError} />\\n\\n                <h5>Positions</h5>\\n                <Button label=\\\"Top Left\\\" className=\\\"p-mr-2\\\" onClick={showTopLeft} />\\n                <Button label=\\\"Bottom Left\\\" className=\\\"p-button-warning\\\" onClick={showBottomLeft} />\\n                <Button label=\\\"Bottom Right\\\" className=\\\"p-button-success\\\" onClick={showBottomRight} />\\n\\n                <h5>Options</h5>\\n                <Button onClick={showMultiple} label=\\\"Multiple\\\" className=\\\"p-button-warning\\\" />\\n                <Button onClick={showSticky} label=\\\"Sticky\\\" />\\n\\n                <h5>Clear</h5>\\n                <Button onClick={clear} label=\\\"Clear\\\" />\\n\\n                <h5>Custom</h5>\\n                <Button type=\\\"button\\\" onClick={showConfirm} label=\\\"Confirm\\\" className=\\\"ui-button-warning\\\" />\\n            </div>\\n        </div>\\n    )\\n}\\n                \"}};_this.extFiles={'src/demo/ToastDemo.css':{content:\"\\n.toast-demo button {\\n    min-width: 10rem;\\n    margin-right: .5rem;\\n}\\n\\n@media screen and (max-width: 960px) {\\n    .toast-demo button {\\n        width: 100%;\\n        margin-bottom: .5rem;\\n    }\\n}\\n                \"}};return _this;}_createClass(ToastDoc,[{key:\"shouldComponentUpdate\",value:function shouldComponentUpdate(){return false;}},{key:\"render\",value:function render(){return/*#__PURE__*/React.createElement(\"div\",{className:\"content-section documentation\"},/*#__PURE__*/React.createElement(TabView,null,/*#__PURE__*/React.createElement(TabPanel,{header:\"Documentation\"},/*#__PURE__*/React.createElement(\"h5\",null,\"Import\"),/*#__PURE__*/React.createElement(CodeHighlight,{lang:\"js\"},\"\\nimport { Toast } from 'primereact/toast';\\n\"),/*#__PURE__*/React.createElement(\"h5\",null,\"Getting Started\"),/*#__PURE__*/React.createElement(\"p\",null,\"A single message is represented by the Message interface in PrimeReact that defines various properties such as severity, summary and detail. Messages are displayed by using the \",/*#__PURE__*/React.createElement(\"i\",null,\"show\"),\" method on the ref of the Toast instance.\"),/*#__PURE__*/React.createElement(\"p\",null,\"Note that for animations, toast requires react-transition-group package.\"),/*#__PURE__*/React.createElement(CodeHighlight,null,\"\\n<Toast ref={toast} />\\n\"),/*#__PURE__*/React.createElement(CodeHighlight,{lang:\"js\"},\"\\ntoast.current.show({severity: 'success', summary: 'Success Message', detail: 'Order submitted'});\\n\"),/*#__PURE__*/React.createElement(\"h5\",null,\"Message API\"),/*#__PURE__*/React.createElement(\"div\",{className:\"doc-tablewrapper\"},/*#__PURE__*/React.createElement(\"table\",{className:\"doc-table\"},/*#__PURE__*/React.createElement(\"thead\",null,/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"th\",null,\"Name\"),/*#__PURE__*/React.createElement(\"th\",null,\"Type\"),/*#__PURE__*/React.createElement(\"th\",null,\"Default\"),/*#__PURE__*/React.createElement(\"th\",null,\"Description\"))),/*#__PURE__*/React.createElement(\"tbody\",null,/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"td\",null,\"severity\"),/*#__PURE__*/React.createElement(\"td\",null,\"string\"),/*#__PURE__*/React.createElement(\"td\",null,\"null\"),/*#__PURE__*/React.createElement(\"td\",null,\"Severity of the message.\")),/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"td\",null,\"summary\"),/*#__PURE__*/React.createElement(\"td\",null,\"element/string\"),/*#__PURE__*/React.createElement(\"td\",null,\"null\"),/*#__PURE__*/React.createElement(\"td\",null,\"Summary content of the message.\")),/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"td\",null,\"detail\"),/*#__PURE__*/React.createElement(\"td\",null,\"element/string\"),/*#__PURE__*/React.createElement(\"td\",null,\"null\"),/*#__PURE__*/React.createElement(\"td\",null,\"Detail content of the message.\")),/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"td\",null,\"content\"),/*#__PURE__*/React.createElement(\"td\",null,\"any\"),/*#__PURE__*/React.createElement(\"td\",null,\"null\"),/*#__PURE__*/React.createElement(\"td\",null,\"Custom content of the message. If enabled, summary and details properties are ignored.\")),/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"td\",null,\"closable\"),/*#__PURE__*/React.createElement(\"td\",null,\"boolean\"),/*#__PURE__*/React.createElement(\"td\",null,\"true\"),/*#__PURE__*/React.createElement(\"td\",null,\"Whether the message can be closed manually using the close icon.\")),/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"td\",null,\"sticky\"),/*#__PURE__*/React.createElement(\"td\",null,\"element\"),/*#__PURE__*/React.createElement(\"td\",null,\"null\"),/*#__PURE__*/React.createElement(\"td\",null,\"When enabled, message is not removed automatically.\")),/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"td\",null,\"life\"),/*#__PURE__*/React.createElement(\"td\",null,\"number\"),/*#__PURE__*/React.createElement(\"td\",null,\"3000\"),/*#__PURE__*/React.createElement(\"td\",null,\"Delay in milliseconds to close the message automatically.\"))))),/*#__PURE__*/React.createElement(\"h5\",null,\"Severities\"),/*#__PURE__*/React.createElement(\"p\",null,\"There are four possible values for the severity of a message.\"),/*#__PURE__*/React.createElement(\"ul\",null,/*#__PURE__*/React.createElement(\"li\",null,\"success\"),/*#__PURE__*/React.createElement(\"li\",null,\"info\"),/*#__PURE__*/React.createElement(\"li\",null,\"warn\"),/*#__PURE__*/React.createElement(\"li\",null,\"error\")),/*#__PURE__*/React.createElement(\"h5\",null,\"Showing Messages\"),/*#__PURE__*/React.createElement(\"p\",null,\"Show method accepts either a single message or an array of messages.\"),/*#__PURE__*/React.createElement(CodeHighlight,null,\"\\n<Toast ref={toast}></Toast>\\n\\n<Button onClick={showSuccess} label=\\\"Success\\\" className=\\\"p-button-success\\\" />\\n<Button onClick={showInfo} label=\\\"Info\\\" className=\\\"p-button-info\\\" />\\n<Button onClick={showWarn} label=\\\"Warn\\\" className=\\\"p-button-warning\\\" />\\n<Button onClick={showError} label=\\\"Error\\\" className=\\\"p-button-danger\\\" />\\n<Button onClick={showMultiple} label=\\\"Multiple\\\" />\\n\"),/*#__PURE__*/React.createElement(CodeHighlight,{lang:\"js\"},\"\\nshowSuccess() {\\n    toast.current.show({severity: 'success', summary: 'Success Message', detail: 'Order submitted'});\\n}\\n\\nshowInfo() {\\n    toast.current.show({severity: 'info', summary: 'Info Message', detail: 'PrimeReact rocks'});\\n}\\n\\nshowWarn() {\\n    toast.current.show({severity: 'warn', summary: 'Warn Message', detail: 'There are unsaved changes'});\\n}\\n\\nshowError() {\\n    toast.current.show({severity: 'error', summary: 'Error Message', detail: 'Validation failed'});\\n}\\n\\nshowMultiple() {\\n    toast.current.show([\\n        {severity:'info', summary:'Message 1', detail:'PrimeReact rocks'},\\n        {severity:'info', summary:'Message 2', detail:'PrimeReact rocks'},\\n        {severity:'info', summary:'Message 3', detail:'PrimeFaces rocks'}\\n    ]);\\n}\\n\"),/*#__PURE__*/React.createElement(\"h5\",null,\"Closable\"),/*#__PURE__*/React.createElement(\"p\",null,\"Toasts are closable by default resulting in a close icon being displayed on top right corner. In order to disable closable messages, set closable to false.\"),/*#__PURE__*/React.createElement(CodeHighlight,{lang:\"js\"},\"\\ntoast.current.show({closable: false, severity: 'error', summary: 'Error Message', detail: 'Validation failed'});\\n\"),/*#__PURE__*/React.createElement(\"h5\",null,\"Sticky\"),/*#__PURE__*/React.createElement(\"p\",null,\"Messages are cleared automatically after the timeout defined by \",/*#__PURE__*/React.createElement(\"i\",null,\"life\"),\" property which is 3 seconds by default. Use \",/*#__PURE__*/React.createElement(\"i\",null,\"sticky\"),\" mode to make them stay until they are manually removed.\"),/*#__PURE__*/React.createElement(CodeHighlight,{lang:\"js\"},\"\\n//sticky\\ntoast.current.show({sticky: true, severity: 'error', summary: 'Error Message', detail: 'Validation failed'});\\n\\n//automatically removed after 5 seconds\\ntoast.current.show({life: 5000, severity: 'error', summary: 'Error Message', detail: 'Validation failed'});\\n\"),/*#__PURE__*/React.createElement(\"h5\",null,\"Position\"),/*#__PURE__*/React.createElement(\"p\",null,\"There are four positions available for the toast container defined by the \",/*#__PURE__*/React.createElement(\"i\",null,\"position\"),\" property that defaults to \\\"top-right\\\". Other valid values are \\\"top-left\\\", \\\"bottom-left\\\" and \\\"bottom-right\\\"\"),/*#__PURE__*/React.createElement(CodeHighlight,null,\"\\n<Toast ref={toast} position=\\\"top-left\\\"></Toast>\\n\"),/*#__PURE__*/React.createElement(\"h5\",null,\"Clearing Messages\"),/*#__PURE__*/React.createElement(\"p\",null,/*#__PURE__*/React.createElement(\"i\",null,\"clear()\"),\" method removes all messages from Toast.\"),/*#__PURE__*/React.createElement(CodeHighlight,null,\"\\n    toast.current.clear();\\n\"),/*#__PURE__*/React.createElement(\"h5\",null,\"Properties\"),/*#__PURE__*/React.createElement(\"div\",{className:\"doc-tablewrapper\"},/*#__PURE__*/React.createElement(\"table\",{className:\"doc-table\"},/*#__PURE__*/React.createElement(\"thead\",null,/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"th\",null,\"Name\"),/*#__PURE__*/React.createElement(\"th\",null,\"Type\"),/*#__PURE__*/React.createElement(\"th\",null,\"Default\"),/*#__PURE__*/React.createElement(\"th\",null,\"Description\"))),/*#__PURE__*/React.createElement(\"tbody\",null,/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"td\",null,\"id\"),/*#__PURE__*/React.createElement(\"td\",null,\"string\"),/*#__PURE__*/React.createElement(\"td\",null,\"null\"),/*#__PURE__*/React.createElement(\"td\",null,\"Unique identifier of the element.\")),/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"td\",null,\"className\"),/*#__PURE__*/React.createElement(\"td\",null,\"string\"),/*#__PURE__*/React.createElement(\"td\",null,\"null\"),/*#__PURE__*/React.createElement(\"td\",null,\"Style class of the element.\")),/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"td\",null,\"style\"),/*#__PURE__*/React.createElement(\"td\",null,\"string\"),/*#__PURE__*/React.createElement(\"td\",null,\"null\"),/*#__PURE__*/React.createElement(\"td\",null,\"Inline style of the element.\")),/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"td\",null,\"baseZIndex\"),/*#__PURE__*/React.createElement(\"td\",null,\"number\"),/*#__PURE__*/React.createElement(\"td\",null,\"0\"),/*#__PURE__*/React.createElement(\"td\",null,\"Base zIndex value to add to initial layering of PrimeReact components which start from 1000.\")),/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"td\",null,\"position\"),/*#__PURE__*/React.createElement(\"td\",null,\"string\"),/*#__PURE__*/React.createElement(\"td\",null,\"topright\"),/*#__PURE__*/React.createElement(\"td\",null,\"Position of the toast in viewport, valid values are \\\"top-right\\\", \\\"top-left\\\", \\\"bottom-left\\\" and \\\"bottom-right\\\".\"))))),/*#__PURE__*/React.createElement(\"h5\",null,\"Events\"),/*#__PURE__*/React.createElement(\"div\",{className:\"doc-tablewrapper\"},/*#__PURE__*/React.createElement(\"table\",{className:\"doc-table\"},/*#__PURE__*/React.createElement(\"thead\",null,/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"th\",null,\"Name\"),/*#__PURE__*/React.createElement(\"th\",null,\"Parameters\"),/*#__PURE__*/React.createElement(\"th\",null,\"Description\"))),/*#__PURE__*/React.createElement(\"tbody\",null,/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"td\",null,\"onRemove\"),/*#__PURE__*/React.createElement(\"td\",null,\"message: Removed message \"),/*#__PURE__*/React.createElement(\"td\",null,\"Callback to invoke when a message is removed.\")),/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"td\",null,\"onClick\"),/*#__PURE__*/React.createElement(\"td\",null,\"message: Clicked message \"),/*#__PURE__*/React.createElement(\"td\",null,\"Callback to invoke when a message gets clicked.\"))))),/*#__PURE__*/React.createElement(\"h5\",null,\"Styling\"),/*#__PURE__*/React.createElement(\"p\",null,\"Following is the list of structural style classes, for theming classes visit \",/*#__PURE__*/React.createElement(Link,{to:\"/theming\"},\" theming\"),\" page.\"),/*#__PURE__*/React.createElement(\"div\",{className:\"doc-tablewrapper\"},/*#__PURE__*/React.createElement(\"table\",{className:\"doc-table\"},/*#__PURE__*/React.createElement(\"thead\",null,/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"th\",null,\"Name\"),/*#__PURE__*/React.createElement(\"th\",null,\"Element\"))),/*#__PURE__*/React.createElement(\"tbody\",null,/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"td\",null,\"p-toast\"),/*#__PURE__*/React.createElement(\"td\",null,\"Main container element.\")),/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"td\",null,\"p-toast-container\"),/*#__PURE__*/React.createElement(\"td\",null,\"Container of a message item.\")),/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"td\",null,\"p-toast-item\"),/*#__PURE__*/React.createElement(\"td\",null,\"Message element.\")),/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"td\",null,\"p-toast-icon-close\"),/*#__PURE__*/React.createElement(\"td\",null,\"Close icon of a message.\")),/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"td\",null,\"p-toast-image\"),/*#__PURE__*/React.createElement(\"td\",null,\"Severity icon.\")),/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"td\",null,\"p-toast-message\"),/*#__PURE__*/React.createElement(\"td\",null,\"Container of message texts.\")),/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"td\",null,\"p-toast-title\"),/*#__PURE__*/React.createElement(\"td\",null,\"Summary of the message.\")))),/*#__PURE__*/React.createElement(\"h5\",null,\"Dependencies\"),/*#__PURE__*/React.createElement(\"ul\",null,/*#__PURE__*/React.createElement(\"li\",null,\"react-transition-group\")))),useLiveEditorTabs({name:'ToastDemo',sources:this.sources,extFiles:this.extFiles})));}}]);return ToastDoc;}(Component);","map":{"version":3,"sources":["C:/Users/zura.ph/WebstormProjects/slotmaster-dashboard/src/showcase/toast/ToastDoc.js"],"names":["React","Component","Link","TabView","TabPanel","CodeHighlight","useLiveEditorTabs","ToastDoc","props","sources","tabName","content","extFiles","name"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { TabView, TabPanel } from '../../components/tabview/TabView';\r\nimport { CodeHighlight } from '../codehighlight/CodeHighlight';\r\nimport { useLiveEditorTabs }from '../liveeditor/LiveEditor';\r\n\r\nexport class ToastDoc extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.sources = {\r\n            'class': {\r\n                tabName: 'Class Source',\r\n                content: `\r\nimport React, { Component } from 'react';\r\nimport { Toast } from 'primereact/toast';\r\nimport { Button } from 'primereact/button';\r\nimport './ToastDemo.css';\r\n\r\nexport class ToastDemo extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.showSuccess = this.showSuccess.bind(this);\r\n        this.showInfo = this.showInfo.bind(this);\r\n        this.showWarn = this.showWarn.bind(this);\r\n        this.showError = this.showError.bind(this);\r\n        this.showTopLeft = this.showTopLeft.bind(this);\r\n        this.showBottomLeft = this.showBottomLeft.bind(this);\r\n        this.showBottomRight = this.showBottomRight.bind(this);\r\n        this.showMultiple = this.showMultiple.bind(this);\r\n        this.showSticky = this.showSticky.bind(this);\r\n        this.showConfirm = this.showConfirm.bind(this);\r\n        this.clear = this.clear.bind(this);\r\n    }\r\n\r\n    showSuccess() {\r\n        this.toast.show({severity:'success', summary: 'Success Message', detail:'Message Content', life: 3000});\r\n    }\r\n\r\n    showInfo() {\r\n        this.toast.show({severity:'info', summary: 'Info Message', detail:'Message Content', life: 3000});\r\n    }\r\n\r\n    showWarn() {\r\n        this.toast.show({severity:'warn', summary: 'Warn Message', detail:'Message Content', life: 3000});\r\n    }\r\n\r\n    showError() {\r\n        this.toast.show({severity:'error', summary: 'Error Message', detail:'Message Content', life: 3000});\r\n    }\r\n\r\n    showTopLeft() {\r\n        this.toastTL.show({severity: 'info', summary: 'Info Message', detail: 'Message Content', life: 3000});\r\n    }\r\n\r\n    showBottomLeft() {\r\n        this.toastBL.show({severity:'warn', summary: 'Warn Message', detail:'Message Content', life: 3000});\r\n    }\r\n\r\n    showBottomRight() {\r\n        this.toastBR.show({severity:'success', summary: 'Success Message', detail:'Message Content', life: 3000});\r\n    }\r\n\r\n    showSticky() {\r\n        this.toast.show({severity: 'info', summary: 'Sticky Message', detail: 'Message Content', sticky: true});\r\n    }\r\n\r\n    showConfirm() {\r\n        this.toastBC.show({ severity: 'warn', sticky: true, content: (\r\n            <div className=\"p-flex p-flex-column\" style={{flex: '1'}}>\r\n                <div className=\"p-text-center\">\r\n                    <i className=\"pi pi-exclamation-triangle\" style={{fontSize: '3rem'}}></i>\r\n                    <h4>Are you sure?</h4>\r\n                    <p>Confirm to proceed</p>\r\n                </div>\r\n                <div className=\"p-grid p-fluid\">\r\n                    <div className=\"p-col-6\">\r\n                        <Button type=\"button\" label=\"Yes\" className=\"p-button-success\" />\r\n                    </div>\r\n                    <div className=\"p-col-6\">\r\n                        <Button type=\"button\" label=\"No\" className=\"p-button-secondary\" />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        ) });\r\n    }\r\n\r\n    showMultiple() {\r\n        this.toast.show([\r\n            {severity:'info', summary:'Message 1', detail:'Message 1 Content', life: 3000},\r\n            {severity:'info', summary:'Message 2', detail:'Message 2 Content', life: 3000},\r\n            {severity:'info', summary:'Message 3', detail:'Message 3 Content', life: 3000}\r\n        ]);\r\n    }\r\n\r\n    clear() {\r\n        this.toast.clear();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Toast ref={(el) => this.toast = el} />\r\n                <Toast ref={(el) => this.toastTL = el} position=\"top-left\" />\r\n                <Toast ref={(el) => this.toastBL = el} position=\"bottom-left\" />\r\n                <Toast ref={(el) => this.toastBR = el} position=\"bottom-right\" />\r\n                <Toast ref={(el) => this.toastBC = el} position=\"bottom-center\" />\r\n\r\n                <div className=\"card toast-demo\">\r\n                    <h5>Severities</h5>\r\n                    <Button label=\"Success\" className=\"p-button-success\" onClick={this.showSuccess} />\r\n                    <Button label=\"Info\" className=\"p-button-info\" onClick={this.showInfo} />\r\n                    <Button label=\"Warn\" className=\"p-button-warning\" onClick={this.showWarn} />\r\n                    <Button label=\"Error\" className=\"p-button-danger\" onClick={this.showError} />\r\n\r\n                    <h5>Positions</h5>\r\n                    <Button label=\"Top Left\" className=\"p-mr-2\" onClick={this.showTopLeft} />\r\n                    <Button label=\"Bottom Left\" className=\"p-button-warning\" onClick={this.showBottomLeft} />\r\n                    <Button label=\"Bottom Right\" className=\"p-button-success\" onClick={this.showBottomRight} />\r\n\r\n                    <h5>Options</h5>\r\n                    <Button onClick={this.showMultiple} label=\"Multiple\" className=\"p-button-warning\" />\r\n                    <Button onClick={this.showSticky} label=\"Sticky\" />\r\n\r\n                    <h5>Clear</h5>\r\n                    <Button onClick={this.clear} label=\"Clear\" />\r\n\r\n                    <h5>Custom</h5>\r\n                    <Button type=\"button\" onClick={this.showConfirm} label=\"Confirm\" className=\"ui-button-warning\" />\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n                `\r\n            },\r\n            'hooks': {\r\n                tabName: 'Hooks Source',\r\n                content: `\r\nimport React, { useRef } from 'react';\r\nimport { Toast } from 'primereact/toast';\r\nimport { Button } from 'primereact/button';\r\nimport './ToastDemo.css';\r\n\r\nconst ToastDemo = () => {\r\n    const toast = useRef(null);\r\n    const toastTL = useRef(null);\r\n    const toastBL = useRef(null);\r\n    const toastBR = useRef(null);\r\n    const toastBC = useRef(null);\r\n\r\n    const showSuccess = () => {\r\n        toast.current.show({severity:'success', summary: 'Success Message', detail:'Message Content', life: 3000});\r\n    }\r\n\r\n    const showInfo = () => {\r\n        toast.current.show({severity:'info', summary: 'Info Message', detail:'Message Content', life: 3000});\r\n    }\r\n\r\n    const showWarn = () => {\r\n        toast.current.show({severity:'warn', summary: 'Warn Message', detail:'Message Content', life: 3000});\r\n    }\r\n\r\n    const showError = () => {\r\n        toast.current.show({severity:'error', summary: 'Error Message', detail:'Message Content', life: 3000});\r\n    }\r\n\r\n    const showTopLeft = () => {\r\n        toastTL.current.show({severity: 'info', summary: 'Info Message', detail: 'Message Content', life: 3000});\r\n    }\r\n\r\n    const showBottomLeft = () => {\r\n        toastBL.current.show({severity:'warn', summary: 'Warn Message', detail:'Message Content', life: 3000});\r\n    }\r\n\r\n    const showBottomRight = () => {\r\n        toastBR.current.show({severity:'success', summary: 'Success Message', detail:'Message Content', life: 3000});\r\n    }\r\n\r\n    const showSticky = () => {\r\n        toast.current.show({severity: 'info', summary: 'Sticky Message', detail: 'Message Content', sticky: true});\r\n    }\r\n\r\n    const showConfirm = () => {\r\n        toastBC.current.show({ severity: 'warn', sticky: true, content: (\r\n            <div className=\"p-flex p-flex-column\" style={{flex: '1'}}>\r\n                <div className=\"p-text-center\">\r\n                    <i className=\"pi pi-exclamation-triangle\" style={{fontSize: '3rem'}}></i>\r\n                    <h4>Are you sure?</h4>\r\n                    <p>Confirm to proceed</p>\r\n                </div>\r\n                <div className=\"p-grid p-fluid\">\r\n                    <div className=\"p-col-6\">\r\n                        <Button type=\"button\" label=\"Yes\" className=\"p-button-success\" />\r\n                    </div>\r\n                    <div className=\"p-col-6\">\r\n                        <Button type=\"button\" label=\"No\" className=\"p-button-secondary\" />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        ) });\r\n    }\r\n\r\n    const showMultiple = () => {\r\n        toast.current.show([\r\n            {severity:'info', summary:'Message 1', detail:'Message 1 Content', life: 3000},\r\n            {severity:'info', summary:'Message 2', detail:'Message 2 Content', life: 3000},\r\n            {severity:'info', summary:'Message 3', detail:'Message 3 Content', life: 3000}\r\n        ]);\r\n    }\r\n\r\n    const clear = () => {\r\n        toast.current.clear();\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Toast ref={toast} />\r\n            <Toast ref={toastTL} position=\"top-left\" />\r\n            <Toast ref={toastBL} position=\"bottom-left\" />\r\n            <Toast ref={toastBR} position=\"bottom-right\" />\r\n            <Toast ref={toastBC} position=\"bottom-center\" />\r\n\r\n            <div className=\"card toast-demo\">\r\n                <h5>Severities</h5>\r\n                <Button label=\"Success\" className=\"p-button-success\" onClick={showSuccess} />\r\n                <Button label=\"Info\" className=\"p-button-info\" onClick={showInfo} />\r\n                <Button label=\"Warn\" className=\"p-button-warning\" onClick={showWarn} />\r\n                <Button label=\"Error\" className=\"p-button-danger\" onClick={showError} />\r\n\r\n                <h5>Positions</h5>\r\n                <Button label=\"Top Left\" className=\"p-mr-2\" onClick={showTopLeft} />\r\n                <Button label=\"Bottom Left\" className=\"p-button-warning\" onClick={showBottomLeft} />\r\n                <Button label=\"Bottom Right\" className=\"p-button-success\" onClick={showBottomRight} />\r\n\r\n                <h5>Options</h5>\r\n                <Button onClick={showMultiple} label=\"Multiple\" className=\"p-button-warning\" />\r\n                <Button onClick={showSticky} label=\"Sticky\" />\r\n\r\n                <h5>Clear</h5>\r\n                <Button onClick={clear} label=\"Clear\" />\r\n\r\n                <h5>Custom</h5>\r\n                <Button type=\"button\" onClick={showConfirm} label=\"Confirm\" className=\"ui-button-warning\" />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n                `\r\n            },\r\n            'ts': {\r\n                tabName: 'TS Source',\r\n                content: `\r\nimport React, { useRef } from 'react';\r\nimport { Toast } from 'primereact/toast';\r\nimport { Button } from 'primereact/button';\r\nimport './ToastDemo.css';\r\n\r\nconst ToastDemo = () => {\r\n    const toast = useRef(null);\r\n    const toastTL = useRef(null);\r\n    const toastBL = useRef(null);\r\n    const toastBR = useRef(null);\r\n    const toastBC = useRef(null);\r\n\r\n    const showSuccess = () => {\r\n        toast.current.show({severity:'success', summary: 'Success Message', detail:'Message Content', life: 3000});\r\n    }\r\n\r\n    const showInfo = () => {\r\n        toast.current.show({severity:'info', summary: 'Info Message', detail:'Message Content', life: 3000});\r\n    }\r\n\r\n    const showWarn = () => {\r\n        toast.current.show({severity:'warn', summary: 'Warn Message', detail:'Message Content', life: 3000});\r\n    }\r\n\r\n    const showError = () => {\r\n        toast.current.show({severity:'error', summary: 'Error Message', detail:'Message Content', life: 3000});\r\n    }\r\n\r\n    const showTopLeft = () => {\r\n        toastTL.current.show({severity: 'info', summary: 'Info Message', detail: 'Message Content', life: 3000});\r\n    }\r\n\r\n    const showBottomLeft = () => {\r\n        toastBL.current.show({severity:'warn', summary: 'Warn Message', detail:'Message Content', life: 3000});\r\n    }\r\n\r\n    const showBottomRight = () => {\r\n        toastBR.current.show({severity:'success', summary: 'Success Message', detail:'Message Content', life: 3000});\r\n    }\r\n\r\n    const showSticky = () => {\r\n        toast.current.show({severity: 'info', summary: 'Sticky Message', detail: 'Message Content', sticky: true});\r\n    }\r\n\r\n    const showConfirm = () => {\r\n        toastBC.current.show({ severity: 'warn', sticky: true, content: (\r\n            <div className=\"p-flex p-flex-column\" style={{flex: '1'}}>\r\n                <div className=\"p-text-center\">\r\n                    <i className=\"pi pi-exclamation-triangle\" style={{fontSize: '3rem'}}></i>\r\n                    <h4>Are you sure?</h4>\r\n                    <p>Confirm to proceed</p>\r\n                </div>\r\n                <div className=\"p-grid p-fluid\">\r\n                    <div className=\"p-col-6\">\r\n                        <Button type=\"button\" label=\"Yes\" className=\"p-button-success\" />\r\n                    </div>\r\n                    <div className=\"p-col-6\">\r\n                        <Button type=\"button\" label=\"No\" className=\"p-button-secondary\" />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        ) });\r\n    }\r\n\r\n    const showMultiple = () => {\r\n        toast.current.show([\r\n            {severity:'info', summary:'Message 1', detail:'Message 1 Content', life: 3000},\r\n            {severity:'info', summary:'Message 2', detail:'Message 2 Content', life: 3000},\r\n            {severity:'info', summary:'Message 3', detail:'Message 3 Content', life: 3000}\r\n        ]);\r\n    }\r\n\r\n    const clear = () => {\r\n        toast.current.clear();\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Toast ref={toast} />\r\n            <Toast ref={toastTL} position=\"top-left\" />\r\n            <Toast ref={toastBL} position=\"bottom-left\" />\r\n            <Toast ref={toastBR} position=\"bottom-right\" />\r\n            <Toast ref={toastBC} position=\"bottom-center\" />\r\n\r\n            <div className=\"card toast-demo\">\r\n                <h5>Severities</h5>\r\n                <Button label=\"Success\" className=\"p-button-success\" onClick={showSuccess} />\r\n                <Button label=\"Info\" className=\"p-button-info\" onClick={showInfo} />\r\n                <Button label=\"Warn\" className=\"p-button-warning\" onClick={showWarn} />\r\n                <Button label=\"Error\" className=\"p-button-danger\" onClick={showError} />\r\n\r\n                <h5>Positions</h5>\r\n                <Button label=\"Top Left\" className=\"p-mr-2\" onClick={showTopLeft} />\r\n                <Button label=\"Bottom Left\" className=\"p-button-warning\" onClick={showBottomLeft} />\r\n                <Button label=\"Bottom Right\" className=\"p-button-success\" onClick={showBottomRight} />\r\n\r\n                <h5>Options</h5>\r\n                <Button onClick={showMultiple} label=\"Multiple\" className=\"p-button-warning\" />\r\n                <Button onClick={showSticky} label=\"Sticky\" />\r\n\r\n                <h5>Clear</h5>\r\n                <Button onClick={clear} label=\"Clear\" />\r\n\r\n                <h5>Custom</h5>\r\n                <Button type=\"button\" onClick={showConfirm} label=\"Confirm\" className=\"ui-button-warning\" />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n                `\r\n            }\r\n        };\r\n\r\n        this.extFiles = {\r\n            'src/demo/ToastDemo.css': {\r\n                content: `\r\n.toast-demo button {\r\n    min-width: 10rem;\r\n    margin-right: .5rem;\r\n}\r\n\r\n@media screen and (max-width: 960px) {\r\n    .toast-demo button {\r\n        width: 100%;\r\n        margin-bottom: .5rem;\r\n    }\r\n}\r\n                `\r\n            }\r\n        }\r\n    }\r\n\r\n    shouldComponentUpdate() {\r\n        return false;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"content-section documentation\">\r\n                <TabView>\r\n                    <TabPanel header=\"Documentation\">\r\n                        <h5>Import</h5>\r\n<CodeHighlight lang=\"js\">\r\n{`\r\nimport { Toast } from 'primereact/toast';\r\n`}\r\n</CodeHighlight>\r\n\r\n                        <h5>Getting Started</h5>\r\n                        <p>A single message is represented by the Message interface in PrimeReact that defines various properties such as severity,\r\n               summary and detail. Messages are displayed by using the <i>show</i> method on the ref of the Toast instance.</p>\r\n\r\n                        <p>Note that for animations, toast requires react-transition-group package.</p>\r\n\r\n<CodeHighlight>\r\n{`\r\n<Toast ref={toast} />\r\n`}\r\n</CodeHighlight>\r\n\r\n<CodeHighlight lang=\"js\">\r\n{`\r\ntoast.current.show({severity: 'success', summary: 'Success Message', detail: 'Order submitted'});\r\n`}\r\n</CodeHighlight>\r\n\r\n                        <h5>Message API</h5>\r\n                        <div className=\"doc-tablewrapper\">\r\n                            <table className=\"doc-table\">\r\n                                <thead>\r\n                                    <tr>\r\n                                        <th>Name</th>\r\n                                        <th>Type</th>\r\n                                        <th>Default</th>\r\n                                        <th>Description</th>\r\n                                    </tr>\r\n                                </thead>\r\n                                <tbody>\r\n                                    <tr>\r\n                                        <td>severity</td>\r\n                                        <td>string</td>\r\n                                        <td>null</td>\r\n                                        <td>Severity of the message.</td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>summary</td>\r\n                                        <td>element/string</td>\r\n                                        <td>null</td>\r\n                                        <td>Summary content of the message.</td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>detail</td>\r\n                                        <td>element/string</td>\r\n                                        <td>null</td>\r\n                                        <td>Detail content of the message.</td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>content</td>\r\n                                        <td>any</td>\r\n                                        <td>null</td>\r\n                                        <td>Custom content of the message. If enabled, summary and details properties are ignored.</td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>closable</td>\r\n                                        <td>boolean</td>\r\n                                        <td>true</td>\r\n                                        <td>Whether the message can be closed manually using the close icon.</td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>sticky</td>\r\n                                        <td>element</td>\r\n                                        <td>null</td>\r\n                                        <td>When enabled, message is not removed automatically.</td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>life</td>\r\n                                        <td>number</td>\r\n                                        <td>3000</td>\r\n                                        <td>Delay in milliseconds to close the message automatically.</td>\r\n                                    </tr>\r\n                                </tbody>\r\n                            </table>\r\n                        </div>\r\n\r\n                        <h5>Severities</h5>\r\n                        <p>There are four possible values for the severity of a message.</p>\r\n\r\n                        <ul>\r\n                            <li>success</li>\r\n                            <li>info</li>\r\n                            <li>warn</li>\r\n                            <li>error</li>\r\n                        </ul>\r\n\r\n                        <h5>Showing Messages</h5>\r\n                        <p>Show method accepts either a single message or an array of messages.</p>\r\n\r\n<CodeHighlight>\r\n{`\r\n<Toast ref={toast}></Toast>\r\n\r\n<Button onClick={showSuccess} label=\"Success\" className=\"p-button-success\" />\r\n<Button onClick={showInfo} label=\"Info\" className=\"p-button-info\" />\r\n<Button onClick={showWarn} label=\"Warn\" className=\"p-button-warning\" />\r\n<Button onClick={showError} label=\"Error\" className=\"p-button-danger\" />\r\n<Button onClick={showMultiple} label=\"Multiple\" />\r\n`}\r\n</CodeHighlight>\r\n\r\n<CodeHighlight lang=\"js\">\r\n{`\r\nshowSuccess() {\r\n    toast.current.show({severity: 'success', summary: 'Success Message', detail: 'Order submitted'});\r\n}\r\n\r\nshowInfo() {\r\n    toast.current.show({severity: 'info', summary: 'Info Message', detail: 'PrimeReact rocks'});\r\n}\r\n\r\nshowWarn() {\r\n    toast.current.show({severity: 'warn', summary: 'Warn Message', detail: 'There are unsaved changes'});\r\n}\r\n\r\nshowError() {\r\n    toast.current.show({severity: 'error', summary: 'Error Message', detail: 'Validation failed'});\r\n}\r\n\r\nshowMultiple() {\r\n    toast.current.show([\r\n        {severity:'info', summary:'Message 1', detail:'PrimeReact rocks'},\r\n        {severity:'info', summary:'Message 2', detail:'PrimeReact rocks'},\r\n        {severity:'info', summary:'Message 3', detail:'PrimeFaces rocks'}\r\n    ]);\r\n}\r\n`}\r\n</CodeHighlight>\r\n\r\n                        <h5>Closable</h5>\r\n                        <p>Toasts are closable by default resulting in a close icon being displayed on top right corner. In order to disable closable messages, set closable to false.</p>\r\n\r\n<CodeHighlight lang=\"js\">\r\n{`\r\ntoast.current.show({closable: false, severity: 'error', summary: 'Error Message', detail: 'Validation failed'});\r\n`}\r\n</CodeHighlight>\r\n\r\n                        <h5>Sticky</h5>\r\n                        <p>Messages are cleared automatically after the timeout defined by <i>life</i> property which is 3 seconds by default. Use <i>sticky</i> mode to make them stay until\r\n            they are manually removed.</p>\r\n\r\n<CodeHighlight lang=\"js\">\r\n{`\r\n//sticky\r\ntoast.current.show({sticky: true, severity: 'error', summary: 'Error Message', detail: 'Validation failed'});\r\n\r\n//automatically removed after 5 seconds\r\ntoast.current.show({life: 5000, severity: 'error', summary: 'Error Message', detail: 'Validation failed'});\r\n`}\r\n</CodeHighlight>\r\n\r\n                        <h5>Position</h5>\r\n                        <p>There are four positions available for the toast container defined by the <i>position</i> property that defaults to \"top-right\". Other\r\n                valid values are \"top-left\", \"bottom-left\" and \"bottom-right\"\r\n            </p>\r\n\r\n<CodeHighlight>\r\n{`\r\n<Toast ref={toast} position=\"top-left\"></Toast>\r\n`}\r\n</CodeHighlight>\r\n\r\n                        <h5>Clearing Messages</h5>\r\n                        <p><i>clear()</i> method removes all messages from Toast.</p>\r\n\r\n<CodeHighlight>\r\n{`\r\n    toast.current.clear();\r\n`}\r\n</CodeHighlight>\r\n\r\n                        <h5>Properties</h5>\r\n                        <div className=\"doc-tablewrapper\">\r\n                            <table className=\"doc-table\">\r\n                                <thead>\r\n                                    <tr>\r\n                                        <th>Name</th>\r\n                                        <th>Type</th>\r\n                                        <th>Default</th>\r\n                                        <th>Description</th>\r\n                                    </tr>\r\n                                </thead>\r\n                                <tbody>\r\n                                    <tr>\r\n                                        <td>id</td>\r\n                                        <td>string</td>\r\n                                        <td>null</td>\r\n                                        <td>Unique identifier of the element.</td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>className</td>\r\n                                        <td>string</td>\r\n                                        <td>null</td>\r\n                                        <td>Style class of the element.</td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>style</td>\r\n                                        <td>string</td>\r\n                                        <td>null</td>\r\n                                        <td>Inline style of the element.</td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>baseZIndex</td>\r\n                                        <td>number</td>\r\n                                        <td>0</td>\r\n                                        <td>Base zIndex value to add to initial layering of PrimeReact components which start from 1000.</td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>position</td>\r\n                                        <td>string</td>\r\n                                        <td>topright</td>\r\n                                        <td>Position of the toast in viewport, valid values are \"top-right\", \"top-left\", \"bottom-left\" and \"bottom-right\".</td>\r\n                                    </tr>\r\n                                </tbody>\r\n                            </table>\r\n                        </div>\r\n\r\n                        <h5>Events</h5>\r\n                        <div className=\"doc-tablewrapper\">\r\n                            <table className=\"doc-table\">\r\n                                <thead>\r\n                                    <tr>\r\n                                        <th>Name</th>\r\n                                        <th>Parameters</th>\r\n                                        <th>Description</th>\r\n                                    </tr>\r\n                                </thead>\r\n                                <tbody>\r\n                                    <tr>\r\n                                        <td>onRemove</td>\r\n                                        <td>message: Removed message </td>\r\n                                        <td>Callback to invoke when a message is removed.</td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>onClick</td>\r\n                                        <td>message: Clicked message </td>\r\n                                        <td>Callback to invoke when a message gets clicked.</td>\r\n                                    </tr>\r\n                                </tbody>\r\n                            </table>\r\n                        </div>\r\n\r\n                        <h5>Styling</h5>\r\n                        <p>Following is the list of structural style classes, for theming classes visit <Link to=\"/theming\"> theming</Link> page.</p>\r\n                        <div className=\"doc-tablewrapper\">\r\n                            <table className=\"doc-table\">\r\n                                <thead>\r\n                                    <tr>\r\n                                        <th>Name</th>\r\n                                        <th>Element</th>\r\n                                    </tr>\r\n                                </thead>\r\n                                <tbody>\r\n                                    <tr>\r\n                                        <td>p-toast</td>\r\n                                        <td>Main container element.</td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>p-toast-container</td>\r\n                                        <td>Container of a message item.</td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>p-toast-item</td>\r\n                                        <td>Message element.</td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>p-toast-icon-close</td>\r\n                                        <td>Close icon of a message.</td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>p-toast-image</td>\r\n                                        <td>Severity icon.</td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>p-toast-message</td>\r\n                                        <td>Container of message texts.</td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>p-toast-title</td>\r\n                                        <td>Summary of the message.</td>\r\n                                    </tr>\r\n                                </tbody>\r\n                            </table>\r\n\r\n                            <h5>Dependencies</h5>\r\n                            <ul>\r\n                                <li>react-transition-group</li>\r\n                            </ul>\r\n                        </div>\r\n\r\n                    </TabPanel>\r\n\r\n                    {\r\n                        useLiveEditorTabs({ name: 'ToastDemo', sources: this.sources, extFiles: this.extFiles })\r\n                    }\r\n                </TabView>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}