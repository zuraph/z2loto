{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\zura.ph\\\\WebstormProjects\\\\zloto\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\zura.ph\\\\WebstormProjects\\\\zloto\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"C:\\\\Users\\\\zura.ph\\\\WebstormProjects\\\\zloto\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"C:\\\\Users\\\\zura.ph\\\\WebstormProjects\\\\zloto\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _createSuper from \"C:\\\\Users\\\\zura.ph\\\\WebstormProjects\\\\zloto\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"C:\\\\Users\\\\zura.ph\\\\WebstormProjects\\\\zloto\\\\src\\\\components\\\\panel\\\\Panel.js\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { CSSTransition } from 'react-transition-group';\nimport { classNames } from '../utils/ClassNames';\nimport UniqueComponentId from '../utils/UniqueComponentId';\nimport ObjectUtils from '../utils/ObjectUtils';\nimport { Ripple } from '../ripple/Ripple';\nexport var Panel = /*#__PURE__*/function (_Component) {\n  _inherits(Panel, _Component);\n\n  var _super = _createSuper(Panel);\n\n  function Panel(props) {\n    var _this;\n\n    _classCallCheck(this, Panel);\n\n    _this = _super.call(this, props);\n\n    if (!_this.props.onToggle) {\n      _this.state = {\n        collapsed: _this.props.collapsed\n      };\n    }\n\n    _this.toggle = _this.toggle.bind(_assertThisInitialized(_this));\n    _this.id = _this.props.id || UniqueComponentId();\n    _this.contentRef = React.createRef();\n    return _this;\n  }\n\n  _createClass(Panel, [{\n    key: \"toggle\",\n    value: function toggle(event) {\n      if (this.props.toggleable) {\n        var collapsed = this.props.onToggle ? this.props.collapsed : this.state.collapsed;\n        if (collapsed) this.expand(event);else this.collapse(event);\n\n        if (this.props.onToggle) {\n          this.props.onToggle({\n            originalEvent: event,\n            value: !collapsed\n          });\n        }\n      }\n\n      event.preventDefault();\n    }\n  }, {\n    key: \"expand\",\n    value: function expand(event) {\n      if (!this.props.onToggle) {\n        this.setState({\n          collapsed: false\n        });\n      }\n\n      if (this.props.onExpand) {\n        this.props.onExpand(event);\n      }\n    }\n  }, {\n    key: \"collapse\",\n    value: function collapse(event) {\n      if (!this.props.onToggle) {\n        this.setState({\n          collapsed: true\n        });\n      }\n\n      if (this.props.onCollapse) {\n        this.props.onCollapse(event);\n      }\n    }\n  }, {\n    key: \"isCollapsed\",\n    value: function isCollapsed() {\n      return this.props.toggleable ? this.props.onToggle ? this.props.collapsed : this.state.collapsed : false;\n    }\n  }, {\n    key: \"renderToggleIcon\",\n    value: function renderToggleIcon(collapsed) {\n      if (this.props.toggleable) {\n        var id = this.id + '_label';\n        var ariaControls = this.id + '_content';\n        var toggleIcon = collapsed ? this.props.expandIcon : this.props.collapseIcon;\n        return /*#__PURE__*/React.createElement(\"button\", {\n          className: \"p-panel-header-icon p-panel-toggler p-link\",\n          onClick: this.toggle,\n          id: id,\n          \"aria-controls\": ariaControls,\n          \"aria-expanded\": !collapsed,\n          role: \"tab\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 105,\n            columnNumber: 17\n          }\n        }, /*#__PURE__*/React.createElement(\"span\", {\n          className: toggleIcon,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 107,\n            columnNumber: 21\n          }\n        }), /*#__PURE__*/React.createElement(Ripple, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 108,\n            columnNumber: 21\n          }\n        }));\n      }\n\n      return null;\n    }\n  }, {\n    key: \"renderHeader\",\n    value: function renderHeader(collapsed) {\n      if (this.props.header || this.props.toggleable) {\n        var header = ObjectUtils.getJSXElement(this.props.header, this.props);\n        var icons = ObjectUtils.getJSXElement(this.props.icons, this.props);\n        var toggleIcon = this.renderToggleIcon(collapsed);\n        return /*#__PURE__*/React.createElement(\"div\", {\n          className: \"p-panel-header\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 123,\n            columnNumber: 17\n          }\n        }, /*#__PURE__*/React.createElement(\"span\", {\n          className: \"p-panel-title\",\n          \"aria-label\": this.id + '_header',\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 124,\n            columnNumber: 21\n          }\n        }, header), /*#__PURE__*/React.createElement(\"div\", {\n          className: \"p-panel-icons\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 125,\n            columnNumber: 21\n          }\n        }, icons, toggleIcon));\n      }\n\n      return null;\n    }\n  }, {\n    key: \"renderContent\",\n    value: function renderContent(collapsed) {\n      var id = this.id + '_content';\n      return /*#__PURE__*/React.createElement(CSSTransition, {\n        nodeRef: this.contentRef,\n        classNames: \"p-toggleable-content\",\n        timeout: {\n          enter: 1000,\n          exit: 450\n        },\n        in: !collapsed,\n        unmountOnExit: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 140,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        ref: this.contentRef,\n        className: \"p-toggleable-content\",\n        \"aria-hidden\": collapsed,\n        role: \"region\",\n        id: id,\n        \"aria-labelledby\": this.id + '_header',\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"p-panel-content\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 21\n        }\n      }, this.props.children)));\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var className = classNames('p-panel p-component', {\n        'p-panel-toggleable': this.props.toggleable\n      }, this.props.className);\n      var collapsed = this.isCollapsed();\n      var header = this.renderHeader(collapsed);\n      var content = this.renderContent(collapsed);\n      return /*#__PURE__*/React.createElement(\"div\", {\n        id: this.props.id,\n        className: className,\n        style: this.props.style,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 157,\n          columnNumber: 13\n        }\n      }, header, content);\n    }\n  }]);\n\n  return Panel;\n}(Component);\nPanel.defaultProps = {\n  id: null,\n  header: null,\n  toggleable: null,\n  style: null,\n  className: null,\n  collapsed: null,\n  expandIcon: 'pi pi-plus',\n  collapseIcon: 'pi pi-minus',\n  icons: null,\n  onExpand: null,\n  onCollapse: null,\n  onToggle: null\n};\nPanel.propTypes = {\n  id: PropTypes.string,\n  header: PropTypes.any,\n  toggleable: PropTypes.bool,\n  style: PropTypes.object,\n  className: PropTypes.string,\n  collapsed: PropTypes.bool,\n  expandIcon: PropTypes.string,\n  collapseIcon: PropTypes.string,\n  icons: PropTypes.any,\n  onExpand: PropTypes.func,\n  onCollapse: PropTypes.func,\n  onToggle: PropTypes.func\n};","map":{"version":3,"sources":["C:/Users/zura.ph/WebstormProjects/zloto/src/components/panel/Panel.js"],"names":["React","Component","PropTypes","CSSTransition","classNames","UniqueComponentId","ObjectUtils","Ripple","Panel","props","onToggle","state","collapsed","toggle","bind","id","contentRef","createRef","event","toggleable","expand","collapse","originalEvent","value","preventDefault","setState","onExpand","onCollapse","ariaControls","toggleIcon","expandIcon","collapseIcon","header","getJSXElement","icons","renderToggleIcon","enter","exit","children","className","isCollapsed","renderHeader","content","renderContent","style","defaultProps","propTypes","string","any","bool","object","func"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { CSSTransition } from 'react-transition-group';\r\nimport { classNames } from '../utils/ClassNames';\r\nimport UniqueComponentId from '../utils/UniqueComponentId';\r\nimport ObjectUtils from '../utils/ObjectUtils';\r\nimport { Ripple } from '../ripple/Ripple';\r\n\r\nexport class Panel extends Component {\r\n\r\n    static defaultProps = {\r\n        id: null,\r\n        header: null,\r\n        toggleable: null,\r\n        style: null,\r\n        className: null,\r\n        collapsed: null,\r\n        expandIcon: 'pi pi-plus',\r\n        collapseIcon: 'pi pi-minus',\r\n        icons: null,\r\n        onExpand: null,\r\n        onCollapse: null,\r\n        onToggle: null\r\n    }\r\n\r\n    static propTypes = {\r\n        id: PropTypes.string,\r\n        header: PropTypes.any,\r\n        toggleable: PropTypes.bool,\r\n        style: PropTypes.object,\r\n        className: PropTypes.string,\r\n        collapsed: PropTypes.bool,\r\n        expandIcon: PropTypes.string,\r\n        collapseIcon: PropTypes.string,\r\n        icons: PropTypes.any,\r\n        onExpand: PropTypes.func,\r\n        onCollapse: PropTypes.func,\r\n        onToggle: PropTypes.func\r\n    };\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        if (!this.props.onToggle) {\r\n            this.state = {\r\n                collapsed: this.props.collapsed\r\n            };\r\n        }\r\n\r\n        this.toggle = this.toggle.bind(this);\r\n        this.id = this.props.id || UniqueComponentId();\r\n        this.contentRef = React.createRef();\r\n    }\r\n\r\n    toggle(event) {\r\n        if (this.props.toggleable) {\r\n            const collapsed = this.props.onToggle ? this.props.collapsed : this.state.collapsed;\r\n\r\n            if (collapsed)\r\n                this.expand(event);\r\n            else\r\n                this.collapse(event);\r\n\r\n            if (this.props.onToggle) {\r\n                this.props.onToggle({\r\n                    originalEvent: event,\r\n                    value: !collapsed\r\n                });\r\n            }\r\n        }\r\n\r\n        event.preventDefault();\r\n    }\r\n\r\n    expand(event) {\r\n        if (!this.props.onToggle) {\r\n            this.setState({ collapsed: false });\r\n        }\r\n\r\n        if (this.props.onExpand) {\r\n            this.props.onExpand(event);\r\n        }\r\n    }\r\n\r\n    collapse(event) {\r\n        if (!this.props.onToggle) {\r\n            this.setState({ collapsed: true });\r\n        }\r\n\r\n        if (this.props.onCollapse) {\r\n            this.props.onCollapse(event);\r\n        }\r\n    }\r\n\r\n    isCollapsed() {\r\n        return this.props.toggleable ? (this.props.onToggle ? this.props.collapsed : this.state.collapsed) : false;\r\n    }\r\n\r\n    renderToggleIcon(collapsed) {\r\n        if (this.props.toggleable) {\r\n            const id = this.id + '_label';\r\n            const ariaControls = this.id + '_content';\r\n            const toggleIcon = collapsed ? this.props.expandIcon : this.props.collapseIcon;\r\n\r\n            return (\r\n                <button className=\"p-panel-header-icon p-panel-toggler p-link\" onClick={this.toggle}\r\n                    id={id} aria-controls={ariaControls} aria-expanded={!collapsed} role=\"tab\">\r\n                    <span className={toggleIcon}></span>\r\n                    <Ripple />\r\n                </button>\r\n            );\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    renderHeader(collapsed) {\r\n        if (this.props.header || this.props.toggleable) {\r\n            const header = ObjectUtils.getJSXElement(this.props.header, this.props);\r\n            const icons = ObjectUtils.getJSXElement(this.props.icons, this.props);\r\n            const toggleIcon = this.renderToggleIcon(collapsed);\r\n\r\n            return (\r\n                <div className=\"p-panel-header\">\r\n                    <span className=\"p-panel-title\" aria-label={this.id + '_header'}>{header}</span>\r\n                    <div className=\"p-panel-icons\">\r\n                        {icons}\r\n                        {toggleIcon}\r\n                    </div>\r\n                </div>\r\n            );\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    renderContent(collapsed) {\r\n        const id = this.id + '_content';\r\n\r\n        return (\r\n            <CSSTransition nodeRef={this.contentRef} classNames=\"p-toggleable-content\" timeout={{ enter: 1000, exit: 450 }} in={!collapsed} unmountOnExit>\r\n                <div ref={this.contentRef} className=\"p-toggleable-content\" aria-hidden={collapsed} role=\"region\" id={id} aria-labelledby={this.id + '_header'}>\r\n                    <div className=\"p-panel-content\">\r\n                        {this.props.children}\r\n                    </div>\r\n                </div>\r\n            </CSSTransition>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        const className = classNames('p-panel p-component', { 'p-panel-toggleable': this.props.toggleable }, this.props.className);\r\n        const collapsed = this.isCollapsed();\r\n        const header = this.renderHeader(collapsed);\r\n        const content = this.renderContent(collapsed);\r\n\r\n        return (\r\n            <div id={this.props.id} className={className} style={this.props.style}>\r\n                {header}\r\n                {content}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}