{"ast":null,"code":"import _classCallCheck from\"C:\\\\Users\\\\zura.ph\\\\WebstormProjects\\\\slotmaster-dashboard\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";import _createClass from\"C:\\\\Users\\\\zura.ph\\\\WebstormProjects\\\\slotmaster-dashboard\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";import _assertThisInitialized from\"C:\\\\Users\\\\zura.ph\\\\WebstormProjects\\\\slotmaster-dashboard\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/assertThisInitialized\";import _inherits from\"C:\\\\Users\\\\zura.ph\\\\WebstormProjects\\\\slotmaster-dashboard\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";import _createSuper from\"C:\\\\Users\\\\zura.ph\\\\WebstormProjects\\\\slotmaster-dashboard\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createSuper\";import React,{Component}from'react';import{TreeTable}from'../../components/treetable/TreeTable';import{Column}from'../../components/column/Column';import{InputText}from'../../components/inputtext/InputText';import{NodeService}from'../service/NodeService';import{TabView}from'../../components/tabview/TabView';import{useLiveEditorTabs}from'../liveeditor/LiveEditor';import{AppInlineHeader}from'../../AppInlineHeader';import'./TreeTableDemo.scss';export var TreeTableEditDemo=/*#__PURE__*/function(_Component){_inherits(TreeTableEditDemo,_Component);var _super=_createSuper(TreeTableEditDemo);function TreeTableEditDemo(props){var _this;_classCallCheck(this,TreeTableEditDemo);_this=_super.call(this,props);_this.state={nodes:[]};_this.nodeservice=new NodeService();_this.sizeEditor=_this.sizeEditor.bind(_assertThisInitialized(_this));_this.typeEditor=_this.typeEditor.bind(_assertThisInitialized(_this));_this.requiredValidator=_this.requiredValidator.bind(_assertThisInitialized(_this));return _this;}_createClass(TreeTableEditDemo,[{key:\"componentDidMount\",value:function componentDidMount(){var _this2=this;this.nodeservice.getTreeTableNodes().then(function(data){return _this2.setState({nodes:data});});}},{key:\"onEditorValueChange\",value:function onEditorValueChange(props,value){var newNodes=JSON.parse(JSON.stringify(this.state.nodes));var editedNode=this.findNodeByKey(newNodes,props.node.key);editedNode.data[props.field]=value;this.setState({nodes:newNodes});}},{key:\"findNodeByKey\",value:function findNodeByKey(nodes,key){var path=key.split('-');var node;while(path.length){var list=node?node.children:nodes;node=list[parseInt(path[0],10)];path.shift();}return node;}},{key:\"inputTextEditor\",value:function inputTextEditor(props,field){var _this3=this;return/*#__PURE__*/React.createElement(InputText,{type:\"text\",value:props.node.data[field],onChange:function onChange(e){return _this3.onEditorValueChange(props,e.target.value);}});}},{key:\"sizeEditor\",value:function sizeEditor(props){return this.inputTextEditor(props,'size');}},{key:\"typeEditor\",value:function typeEditor(props){return this.inputTextEditor(props,'type');}},{key:\"requiredValidator\",value:function requiredValidator(e){var props=e.columnProps;var value=props.node.data[props.field];return value&&value.length>0;}},{key:\"render\",value:function render(){return/*#__PURE__*/React.createElement(\"div\",null,/*#__PURE__*/React.createElement(\"div\",{className:\"content-section introduction\"},/*#__PURE__*/React.createElement(AppInlineHeader,{changelogText:\"treeTable\"},/*#__PURE__*/React.createElement(\"h1\",null,\"TreeTable \",/*#__PURE__*/React.createElement(\"span\",null,\"Edit\")),/*#__PURE__*/React.createElement(\"p\",null,\"Incell editing provides a quick and user friendly way to manipulate data.\"))),/*#__PURE__*/React.createElement(\"div\",{className:\"content-section implementation treetable-editing-demo\"},/*#__PURE__*/React.createElement(\"div\",{className:\"card\"},/*#__PURE__*/React.createElement(TreeTable,{value:this.state.nodes},/*#__PURE__*/React.createElement(Column,{field:\"name\",header:\"Name\",expander:true,style:{height:'3.5em'}}),/*#__PURE__*/React.createElement(Column,{field:\"size\",header:\"Size\",editor:this.sizeEditor,editorValidator:this.requiredValidator,style:{height:'3.5em'}}),/*#__PURE__*/React.createElement(Column,{field:\"type\",header:\"Type\",editor:this.typeEditor,style:{height:'3.5em'}})))),/*#__PURE__*/React.createElement(TreeTableEditDemoDoc,null));}}]);return TreeTableEditDemo;}(Component);var TreeTableEditDemoDoc=/*#__PURE__*/function(_Component2){_inherits(TreeTableEditDemoDoc,_Component2);var _super2=_createSuper(TreeTableEditDemoDoc);function TreeTableEditDemoDoc(props){var _this4;_classCallCheck(this,TreeTableEditDemoDoc);_this4=_super2.call(this,props);_this4.sources={'class':{tabName:'Class Source',content:\"\\nimport React, { Component } from 'react';\\nimport { TreeTable } from 'primereact/treetable';\\nimport { Column } from 'primereact/column';\\nimport { InputText } from 'primereact/inputtext';\\nimport { NodeService } from '../service/NodeService';\\nimport './TreeTableDemo.css';\\n\\nexport class TreeTableEditDemo extends Component {\\n\\n    constructor(props) {\\n        super(props);\\n        this.state = {\\n            nodes: []\\n        };\\n        this.nodeservice = new NodeService();\\n\\n        this.sizeEditor = this.sizeEditor.bind(this);\\n        this.typeEditor = this.typeEditor.bind(this);\\n        this.requiredValidator = this.requiredValidator.bind(this);\\n    }\\n\\n    componentDidMount() {\\n        this.nodeservice.getTreeTableNodes().then(data => this.setState({ nodes: data }));\\n    }\\n\\n    onEditorValueChange(props, value) {\\n        let newNodes = JSON.parse(JSON.stringify(this.state.nodes));\\n        let editedNode = this.findNodeByKey(newNodes, props.node.key);\\n        editedNode.data[props.field] = value;\\n\\n        this.setState({\\n            nodes: newNodes\\n        });\\n    }\\n\\n    findNodeByKey(nodes, key) {\\n        let path = key.split('-');\\n        let node;\\n\\n        while (path.length) {\\n            let list = node ? node.children : nodes;\\n            node = list[parseInt(path[0], 10)];\\n            path.shift();\\n        }\\n\\n        return node;\\n    }\\n\\n    inputTextEditor(props, field) {\\n        return (\\n            <InputText type=\\\"text\\\" value={props.node.data[field]}\\n                onChange={(e) => this.onEditorValueChange(props, e.target.value)} />\\n        );\\n    }\\n\\n    sizeEditor(props) {\\n        return this.inputTextEditor(props, 'size');\\n    }\\n\\n    typeEditor(props) {\\n        return this.inputTextEditor(props, 'type');\\n    }\\n\\n    requiredValidator(e) {\\n        let props = e.columnProps;\\n        let value = props.node.data[props.field];\\n\\n        return value && value.length > 0;\\n    }\\n\\n    render() {\\n        return (\\n            <div>\\n                <div className=\\\"card\\\">\\n                    <TreeTable value={this.state.nodes}>\\n                        <Column field=\\\"name\\\" header=\\\"Name\\\" expander style={{ height: '3.5em' }}></Column>\\n                        <Column field=\\\"size\\\" header=\\\"Size\\\" editor={this.sizeEditor} editorValidator={this.requiredValidator} style={{ height: '3.5em' }}></Column>\\n                        <Column field=\\\"type\\\" header=\\\"Type\\\" editor={this.typeEditor} style={{ height: '3.5em' }}></Column>\\n                    </TreeTable>\\n                </div>\\n            </div>\\n        )\\n    }\\n}\\n                \"},'hooks':{tabName:'Hooks Source',content:\"\\nimport React, { useState, useEffect } from 'react';\\nimport { TreeTable } from 'primereact/treetable';\\nimport { Column } from 'primereact/column';\\nimport { InputText } from 'primereact/inputtext';\\nimport { NodeService } from '../service/NodeService';\\nimport './TreeTableDemo.css';\\n\\nconst TreeTableEditDemo = () => {\\n    const [nodes, setNodes] = useState([]);\\n    const nodeservice = new NodeService();\\n\\n    useEffect(() => {\\n        nodeservice.getTreeTableNodes().then(data => setNodes(data));\\n    }, []); // eslint-disable-line react-hooks/exhaustive-deps\\n\\n    const onEditorValueChange = (props, value) => {\\n        let newNodes = JSON.parse(JSON.stringify(nodes));\\n        let editedNode = findNodeByKey(newNodes, props.node.key);\\n        editedNode.data[props.field] = value;\\n\\n        setNodes(newNodes);\\n    }\\n\\n    const findNodeByKey = (nodes, key) => {\\n        let path = key.split('-');\\n        let node;\\n\\n        while (path.length) {\\n            let list = node ? node.children : nodes;\\n            node = list[parseInt(path[0], 10)];\\n            path.shift();\\n        }\\n\\n        return node;\\n    }\\n\\n    const inputTextEditor = (props, field) => {\\n        return (\\n            <InputText type=\\\"text\\\" value={props.node.data[field]}\\n                onChange={(e) => onEditorValueChange(props, e.target.value)} />\\n        );\\n    }\\n\\n    const sizeEditor = (props) => {\\n        return inputTextEditor(props, 'size');\\n    }\\n\\n    const typeEditor = (props) => {\\n        return inputTextEditor(props, 'type');\\n    }\\n\\n    const requiredValidator = (e) => {\\n        let props = e.columnProps;\\n        let value = props.node.data[props.field];\\n\\n        return value && value.length > 0;\\n    }\\n\\n    return (\\n        <div>\\n            <div className=\\\"card\\\">\\n                <TreeTable value={nodes}>\\n                    <Column field=\\\"name\\\" header=\\\"Name\\\" expander style={{ height: '3.5em' }}></Column>\\n                    <Column field=\\\"size\\\" header=\\\"Size\\\" editor={sizeEditor} editorValidator={requiredValidator} style={{ height: '3.5em' }}></Column>\\n                    <Column field=\\\"type\\\" header=\\\"Type\\\" editor={typeEditor} style={{ height: '3.5em' }}></Column>\\n                </TreeTable>\\n            </div>\\n        </div>\\n    );\\n}\\n                \"},'ts':{tabName:'TS Source',content:\"\\nimport React, { useState, useEffect } from 'react';\\nimport { TreeTable } from 'primereact/treetable';\\nimport { Column } from 'primereact/column';\\nimport { InputText } from 'primereact/inputtext';\\nimport { NodeService } from '../service/NodeService';\\nimport './TreeTableDemo.css';\\n\\nconst TreeTableEditDemo = () => {\\n    const [nodes, setNodes] = useState([]);\\n    const nodeservice = new NodeService();\\n\\n    useEffect(() => {\\n        nodeservice.getTreeTableNodes().then(data => setNodes(data));\\n    }, []); // eslint-disable-line react-hooks/exhaustive-deps\\n\\n    const onEditorValueChange = (props, value) => {\\n        let newNodes = JSON.parse(JSON.stringify(nodes));\\n        let editedNode = findNodeByKey(newNodes, props.node.key);\\n        editedNode.data[props.field] = value;\\n\\n        setNodes(newNodes);\\n    }\\n\\n    const findNodeByKey = (nodes, key) => {\\n        let path = key.split('-');\\n        let node;\\n\\n        while (path.length) {\\n            let list = node ? node.children : nodes;\\n            node = list[parseInt(path[0], 10)];\\n            path.shift();\\n        }\\n\\n        return node;\\n    }\\n\\n    const inputTextEditor = (props, field) => {\\n        return (\\n            <InputText type=\\\"text\\\" value={props.node.data[field]}\\n                onChange={(e) => onEditorValueChange(props, e.target.value)} />\\n        );\\n    }\\n\\n    const sizeEditor = (props) => {\\n        return inputTextEditor(props, 'size');\\n    }\\n\\n    const typeEditor = (props) => {\\n        return inputTextEditor(props, 'type');\\n    }\\n\\n    const requiredValidator = (e) => {\\n        let props = e.columnProps;\\n        let value = props.node.data[props.field];\\n\\n        return value && value.length > 0;\\n    }\\n\\n    return (\\n        <div>\\n            <div className=\\\"card\\\">\\n                <TreeTable value={nodes}>\\n                    <Column field=\\\"name\\\" header=\\\"Name\\\" expander style={{ height: '3.5em' }}></Column>\\n                    <Column field=\\\"size\\\" header=\\\"Size\\\" editor={sizeEditor} editorValidator={requiredValidator} style={{ height: '3.5em' }}></Column>\\n                    <Column field=\\\"type\\\" header=\\\"Type\\\" editor={typeEditor} style={{ height: '3.5em' }}></Column>\\n                </TreeTable>\\n            </div>\\n        </div>\\n    );\\n}\\n                \"}};_this4.extFiles={'src/demo/TreeTableDemo.css':{content:\"\\n.treetable-editing-demo .p-treetable .p-treetable-tbody > tr > td.p-cell-editing {\\n    padding-top: 0;\\n    padding-bottom: 0;\\n}\\n                \"}};return _this4;}_createClass(TreeTableEditDemoDoc,[{key:\"shouldComponentUpdate\",value:function shouldComponentUpdate(){return false;}},{key:\"render\",value:function render(){return/*#__PURE__*/React.createElement(\"div\",{className:\"content-section documentation\"},/*#__PURE__*/React.createElement(TabView,null,useLiveEditorTabs({name:'TreeTableEditDemo',sources:this.sources,service:'NodeService',data:'treetablenodes',extFiles:this.extFiles})));}}]);return TreeTableEditDemoDoc;}(Component);","map":{"version":3,"sources":["C:/Users/zura.ph/WebstormProjects/slotmaster-dashboard/src/showcase/treetable/TreeTableEditDemo.js"],"names":["React","Component","TreeTable","Column","InputText","NodeService","TabView","useLiveEditorTabs","AppInlineHeader","TreeTableEditDemo","props","state","nodes","nodeservice","sizeEditor","bind","typeEditor","requiredValidator","getTreeTableNodes","then","data","setState","value","newNodes","JSON","parse","stringify","editedNode","findNodeByKey","node","key","field","path","split","length","list","children","parseInt","shift","e","onEditorValueChange","target","inputTextEditor","columnProps","height","TreeTableEditDemoDoc","sources","tabName","content","extFiles","name","service"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { TreeTable } from '../../components/treetable/TreeTable';\r\nimport { Column } from '../../components/column/Column';\r\nimport { InputText } from '../../components/inputtext/InputText';\r\nimport { NodeService } from '../service/NodeService';\r\nimport { TabView } from '../../components/tabview/TabView';\r\nimport { useLiveEditorTabs }from '../liveeditor/LiveEditor';\r\nimport { AppInlineHeader } from '../../AppInlineHeader';\r\nimport './TreeTableDemo.scss';\r\n\r\nexport class TreeTableEditDemo extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            nodes: []\r\n        };\r\n        this.nodeservice = new NodeService();\r\n\r\n        this.sizeEditor = this.sizeEditor.bind(this);\r\n        this.typeEditor = this.typeEditor.bind(this);\r\n        this.requiredValidator = this.requiredValidator.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.nodeservice.getTreeTableNodes().then(data => this.setState({ nodes: data }));\r\n    }\r\n\r\n    onEditorValueChange(props, value) {\r\n        let newNodes = JSON.parse(JSON.stringify(this.state.nodes));\r\n        let editedNode = this.findNodeByKey(newNodes, props.node.key);\r\n        editedNode.data[props.field] = value;\r\n\r\n        this.setState({\r\n            nodes: newNodes\r\n        });\r\n    }\r\n\r\n    findNodeByKey(nodes, key) {\r\n        let path = key.split('-');\r\n        let node;\r\n\r\n        while (path.length) {\r\n            let list = node ? node.children : nodes;\r\n            node = list[parseInt(path[0], 10)];\r\n            path.shift();\r\n        }\r\n\r\n        return node;\r\n    }\r\n\r\n    inputTextEditor(props, field) {\r\n        return (\r\n            <InputText type=\"text\" value={props.node.data[field]}\r\n                onChange={(e) => this.onEditorValueChange(props, e.target.value)} />\r\n        );\r\n    }\r\n\r\n    sizeEditor(props) {\r\n        return this.inputTextEditor(props, 'size');\r\n    }\r\n\r\n    typeEditor(props) {\r\n        return this.inputTextEditor(props, 'type');\r\n    }\r\n\r\n    requiredValidator(e) {\r\n        let props = e.columnProps;\r\n        let value = props.node.data[props.field];\r\n\r\n        return value && value.length > 0;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div className=\"content-section introduction\">\r\n                    <AppInlineHeader changelogText=\"treeTable\">\r\n                        <h1>TreeTable <span>Edit</span></h1>\r\n                        <p>Incell editing provides a quick and user friendly way to manipulate data.</p>\r\n                    </AppInlineHeader>\r\n                </div>\r\n\r\n                <div className=\"content-section implementation treetable-editing-demo\">\r\n                    <div className=\"card\">\r\n                        <TreeTable value={this.state.nodes}>\r\n                            <Column field=\"name\" header=\"Name\" expander style={{ height: '3.5em' }}></Column>\r\n                            <Column field=\"size\" header=\"Size\" editor={this.sizeEditor} editorValidator={this.requiredValidator} style={{ height: '3.5em' }}></Column>\r\n                            <Column field=\"type\" header=\"Type\" editor={this.typeEditor} style={{ height: '3.5em' }}></Column>\r\n                        </TreeTable>\r\n                    </div>\r\n                </div>\r\n\r\n                <TreeTableEditDemoDoc />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nclass TreeTableEditDemoDoc extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.sources = {\r\n            'class': {\r\n                tabName: 'Class Source',\r\n                content: `\r\nimport React, { Component } from 'react';\r\nimport { TreeTable } from 'primereact/treetable';\r\nimport { Column } from 'primereact/column';\r\nimport { InputText } from 'primereact/inputtext';\r\nimport { NodeService } from '../service/NodeService';\r\nimport './TreeTableDemo.css';\r\n\r\nexport class TreeTableEditDemo extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            nodes: []\r\n        };\r\n        this.nodeservice = new NodeService();\r\n\r\n        this.sizeEditor = this.sizeEditor.bind(this);\r\n        this.typeEditor = this.typeEditor.bind(this);\r\n        this.requiredValidator = this.requiredValidator.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.nodeservice.getTreeTableNodes().then(data => this.setState({ nodes: data }));\r\n    }\r\n\r\n    onEditorValueChange(props, value) {\r\n        let newNodes = JSON.parse(JSON.stringify(this.state.nodes));\r\n        let editedNode = this.findNodeByKey(newNodes, props.node.key);\r\n        editedNode.data[props.field] = value;\r\n\r\n        this.setState({\r\n            nodes: newNodes\r\n        });\r\n    }\r\n\r\n    findNodeByKey(nodes, key) {\r\n        let path = key.split('-');\r\n        let node;\r\n\r\n        while (path.length) {\r\n            let list = node ? node.children : nodes;\r\n            node = list[parseInt(path[0], 10)];\r\n            path.shift();\r\n        }\r\n\r\n        return node;\r\n    }\r\n\r\n    inputTextEditor(props, field) {\r\n        return (\r\n            <InputText type=\"text\" value={props.node.data[field]}\r\n                onChange={(e) => this.onEditorValueChange(props, e.target.value)} />\r\n        );\r\n    }\r\n\r\n    sizeEditor(props) {\r\n        return this.inputTextEditor(props, 'size');\r\n    }\r\n\r\n    typeEditor(props) {\r\n        return this.inputTextEditor(props, 'type');\r\n    }\r\n\r\n    requiredValidator(e) {\r\n        let props = e.columnProps;\r\n        let value = props.node.data[props.field];\r\n\r\n        return value && value.length > 0;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div className=\"card\">\r\n                    <TreeTable value={this.state.nodes}>\r\n                        <Column field=\"name\" header=\"Name\" expander style={{ height: '3.5em' }}></Column>\r\n                        <Column field=\"size\" header=\"Size\" editor={this.sizeEditor} editorValidator={this.requiredValidator} style={{ height: '3.5em' }}></Column>\r\n                        <Column field=\"type\" header=\"Type\" editor={this.typeEditor} style={{ height: '3.5em' }}></Column>\r\n                    </TreeTable>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n                `\r\n            },\r\n            'hooks': {\r\n                tabName: 'Hooks Source',\r\n                content: `\r\nimport React, { useState, useEffect } from 'react';\r\nimport { TreeTable } from 'primereact/treetable';\r\nimport { Column } from 'primereact/column';\r\nimport { InputText } from 'primereact/inputtext';\r\nimport { NodeService } from '../service/NodeService';\r\nimport './TreeTableDemo.css';\r\n\r\nconst TreeTableEditDemo = () => {\r\n    const [nodes, setNodes] = useState([]);\r\n    const nodeservice = new NodeService();\r\n\r\n    useEffect(() => {\r\n        nodeservice.getTreeTableNodes().then(data => setNodes(data));\r\n    }, []); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n    const onEditorValueChange = (props, value) => {\r\n        let newNodes = JSON.parse(JSON.stringify(nodes));\r\n        let editedNode = findNodeByKey(newNodes, props.node.key);\r\n        editedNode.data[props.field] = value;\r\n\r\n        setNodes(newNodes);\r\n    }\r\n\r\n    const findNodeByKey = (nodes, key) => {\r\n        let path = key.split('-');\r\n        let node;\r\n\r\n        while (path.length) {\r\n            let list = node ? node.children : nodes;\r\n            node = list[parseInt(path[0], 10)];\r\n            path.shift();\r\n        }\r\n\r\n        return node;\r\n    }\r\n\r\n    const inputTextEditor = (props, field) => {\r\n        return (\r\n            <InputText type=\"text\" value={props.node.data[field]}\r\n                onChange={(e) => onEditorValueChange(props, e.target.value)} />\r\n        );\r\n    }\r\n\r\n    const sizeEditor = (props) => {\r\n        return inputTextEditor(props, 'size');\r\n    }\r\n\r\n    const typeEditor = (props) => {\r\n        return inputTextEditor(props, 'type');\r\n    }\r\n\r\n    const requiredValidator = (e) => {\r\n        let props = e.columnProps;\r\n        let value = props.node.data[props.field];\r\n\r\n        return value && value.length > 0;\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"card\">\r\n                <TreeTable value={nodes}>\r\n                    <Column field=\"name\" header=\"Name\" expander style={{ height: '3.5em' }}></Column>\r\n                    <Column field=\"size\" header=\"Size\" editor={sizeEditor} editorValidator={requiredValidator} style={{ height: '3.5em' }}></Column>\r\n                    <Column field=\"type\" header=\"Type\" editor={typeEditor} style={{ height: '3.5em' }}></Column>\r\n                </TreeTable>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n                `\r\n            },\r\n            'ts': {\r\n                tabName: 'TS Source',\r\n                content: `\r\nimport React, { useState, useEffect } from 'react';\r\nimport { TreeTable } from 'primereact/treetable';\r\nimport { Column } from 'primereact/column';\r\nimport { InputText } from 'primereact/inputtext';\r\nimport { NodeService } from '../service/NodeService';\r\nimport './TreeTableDemo.css';\r\n\r\nconst TreeTableEditDemo = () => {\r\n    const [nodes, setNodes] = useState([]);\r\n    const nodeservice = new NodeService();\r\n\r\n    useEffect(() => {\r\n        nodeservice.getTreeTableNodes().then(data => setNodes(data));\r\n    }, []); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n    const onEditorValueChange = (props, value) => {\r\n        let newNodes = JSON.parse(JSON.stringify(nodes));\r\n        let editedNode = findNodeByKey(newNodes, props.node.key);\r\n        editedNode.data[props.field] = value;\r\n\r\n        setNodes(newNodes);\r\n    }\r\n\r\n    const findNodeByKey = (nodes, key) => {\r\n        let path = key.split('-');\r\n        let node;\r\n\r\n        while (path.length) {\r\n            let list = node ? node.children : nodes;\r\n            node = list[parseInt(path[0], 10)];\r\n            path.shift();\r\n        }\r\n\r\n        return node;\r\n    }\r\n\r\n    const inputTextEditor = (props, field) => {\r\n        return (\r\n            <InputText type=\"text\" value={props.node.data[field]}\r\n                onChange={(e) => onEditorValueChange(props, e.target.value)} />\r\n        );\r\n    }\r\n\r\n    const sizeEditor = (props) => {\r\n        return inputTextEditor(props, 'size');\r\n    }\r\n\r\n    const typeEditor = (props) => {\r\n        return inputTextEditor(props, 'type');\r\n    }\r\n\r\n    const requiredValidator = (e) => {\r\n        let props = e.columnProps;\r\n        let value = props.node.data[props.field];\r\n\r\n        return value && value.length > 0;\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"card\">\r\n                <TreeTable value={nodes}>\r\n                    <Column field=\"name\" header=\"Name\" expander style={{ height: '3.5em' }}></Column>\r\n                    <Column field=\"size\" header=\"Size\" editor={sizeEditor} editorValidator={requiredValidator} style={{ height: '3.5em' }}></Column>\r\n                    <Column field=\"type\" header=\"Type\" editor={typeEditor} style={{ height: '3.5em' }}></Column>\r\n                </TreeTable>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n                `\r\n            }\r\n        }\r\n\r\n        this.extFiles = {\r\n            'src/demo/TreeTableDemo.css': {\r\n                content: `\r\n.treetable-editing-demo .p-treetable .p-treetable-tbody > tr > td.p-cell-editing {\r\n    padding-top: 0;\r\n    padding-bottom: 0;\r\n}\r\n                `\r\n            }\r\n        }\r\n    }\r\n\r\n    shouldComponentUpdate() {\r\n        return false;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"content-section documentation\">\r\n                <TabView>\r\n                    {\r\n                        useLiveEditorTabs({ name: 'TreeTableEditDemo', sources: this.sources, service: 'NodeService', data: 'treetablenodes', extFiles: this.extFiles })\r\n                    }\r\n                </TabView>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}