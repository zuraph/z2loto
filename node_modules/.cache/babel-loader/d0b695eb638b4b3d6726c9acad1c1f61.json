{"ast":null,"code":"import _objectSpread from \"C:\\\\Users\\\\zura.ph\\\\WebstormProjects\\\\zz-regul\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\nimport _toConsumableArray from \"C:\\\\Users\\\\zura.ph\\\\WebstormProjects\\\\zz-regul\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"C:\\\\Users\\\\zura.ph\\\\WebstormProjects\\\\zz-regul\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\zura.ph\\\\WebstormProjects\\\\zz-regul\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"C:\\\\Users\\\\zura.ph\\\\WebstormProjects\\\\zz-regul\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"C:\\\\Users\\\\zura.ph\\\\WebstormProjects\\\\zz-regul\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _createSuper from \"C:\\\\Users\\\\zura.ph\\\\WebstormProjects\\\\zz-regul\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"C:\\\\Users\\\\zura.ph\\\\WebstormProjects\\\\zz-regul\\\\src\\\\components\\\\inputnumber\\\\InputNumber.js\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { InputText } from '../inputtext/InputText';\nimport { classNames } from '../utils/ClassNames';\nimport { tip } from '../tooltip/Tooltip';\nimport { Ripple } from '../ripple/Ripple';\nexport var InputNumber = /*#__PURE__*/function (_Component) {\n  _inherits(InputNumber, _Component);\n\n  var _super = _createSuper(InputNumber);\n\n  function InputNumber(props) {\n    var _this;\n\n    _classCallCheck(this, InputNumber);\n\n    _this = _super.call(this, props);\n    _this.state = {\n      focused: false\n    };\n\n    _this.constructParser();\n\n    _this.onInput = _this.onInput.bind(_assertThisInitialized(_this));\n    _this.onInputKeyDown = _this.onInputKeyDown.bind(_assertThisInitialized(_this));\n    _this.onInputKeyPress = _this.onInputKeyPress.bind(_assertThisInitialized(_this));\n    _this.onInputClick = _this.onInputClick.bind(_assertThisInitialized(_this));\n    _this.onInputBlur = _this.onInputBlur.bind(_assertThisInitialized(_this));\n    _this.onInputFocus = _this.onInputFocus.bind(_assertThisInitialized(_this));\n    _this.onPaste = _this.onPaste.bind(_assertThisInitialized(_this));\n    _this.onUpButtonMouseLeave = _this.onUpButtonMouseLeave.bind(_assertThisInitialized(_this));\n    _this.onUpButtonMouseDown = _this.onUpButtonMouseDown.bind(_assertThisInitialized(_this));\n    _this.onUpButtonMouseUp = _this.onUpButtonMouseUp.bind(_assertThisInitialized(_this));\n    _this.onUpButtonKeyDown = _this.onUpButtonKeyDown.bind(_assertThisInitialized(_this));\n    _this.onUpButtonKeyUp = _this.onUpButtonKeyUp.bind(_assertThisInitialized(_this));\n    _this.onDownButtonMouseLeave = _this.onDownButtonMouseLeave.bind(_assertThisInitialized(_this));\n    _this.onDownButtonMouseDown = _this.onDownButtonMouseDown.bind(_assertThisInitialized(_this));\n    _this.onDownButtonMouseUp = _this.onDownButtonMouseUp.bind(_assertThisInitialized(_this));\n    _this.onDownButtonKeyDown = _this.onDownButtonKeyDown.bind(_assertThisInitialized(_this));\n    _this.onDownButtonKeyUp = _this.onDownButtonKeyUp.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(InputNumber, [{\n    key: \"getOptions\",\n    value: function getOptions() {\n      return {\n        localeMatcher: this.props.localeMatcher,\n        style: this.props.mode,\n        currency: this.props.currency,\n        currencyDisplay: this.props.currencyDisplay,\n        useGrouping: this.props.useGrouping,\n        minimumFractionDigits: this.props.minFractionDigits,\n        maximumFractionDigits: this.props.maxFractionDigits\n      };\n    }\n  }, {\n    key: \"constructParser\",\n    value: function constructParser() {\n      this.numberFormat = new Intl.NumberFormat(this.props.locale, this.getOptions());\n\n      var numerals = _toConsumableArray(new Intl.NumberFormat(this.props.locale, {\n        useGrouping: false\n      }).format(9876543210)).reverse();\n\n      var index = new Map(numerals.map(function (d, i) {\n        return [d, i];\n      }));\n      this._numeral = new RegExp(\"[\".concat(numerals.join(''), \"]\"), 'g');\n      this._decimal = this.getDecimalExpression();\n      this._group = this.getGroupingExpression();\n      this._minusSign = this.getMinusSignExpression();\n      this._currency = this.getCurrencyExpression();\n      this._suffix = this.getSuffixExpression();\n      this._prefix = this.getPrefixExpression();\n\n      this._index = function (d) {\n        return index.get(d);\n      };\n    }\n  }, {\n    key: \"escapeRegExp\",\n    value: function escapeRegExp(text) {\n      return text.replace(/[-[\\]{}()*+?.,\\\\^$|#\\s]/g, '\\\\$&');\n    }\n  }, {\n    key: \"getDecimalExpression\",\n    value: function getDecimalExpression() {\n      var formatter = new Intl.NumberFormat(this.props.locale, {\n        useGrouping: false\n      });\n      return new RegExp(\"[\".concat(formatter.format(1.1).trim().replace(this._numeral, ''), \"]\"), 'g');\n    }\n  }, {\n    key: \"getGroupingExpression\",\n    value: function getGroupingExpression() {\n      var formatter = new Intl.NumberFormat(this.props.locale, {\n        useGrouping: true\n      });\n      this.groupChar = formatter.format(1000000).trim().replace(this._numeral, '').charAt(0);\n      return new RegExp(\"[\".concat(this.groupChar, \"]\"), 'g');\n    }\n  }, {\n    key: \"getMinusSignExpression\",\n    value: function getMinusSignExpression() {\n      var formatter = new Intl.NumberFormat(this.props.locale, {\n        useGrouping: false\n      });\n      return new RegExp(\"[\".concat(formatter.format(-1).trim().replace(this._numeral, ''), \"]\"), 'g');\n    }\n  }, {\n    key: \"getCurrencyExpression\",\n    value: function getCurrencyExpression() {\n      if (this.props.currency) {\n        var formatter = new Intl.NumberFormat(this.props.locale, {\n          style: 'currency',\n          currency: this.props.currency,\n          currencyDisplay: this.props.currencyDisplay\n        });\n        return new RegExp(\"[\".concat(formatter.format(1).replace(/\\s/g, '').replace(this._numeral, '').replace(this._decimal, '').replace(this._group, ''), \"]\"), 'g');\n      } else {\n        return new RegExp(\"[]\", 'g');\n      }\n    }\n  }, {\n    key: \"getPrefixExpression\",\n    value: function getPrefixExpression() {\n      if (this.props.prefix) {\n        this.prefixChar = this.props.prefix;\n      } else {\n        var formatter = new Intl.NumberFormat(this.props.locale, {\n          style: this.props.mode,\n          currency: this.props.currency,\n          currencyDisplay: this.props.currencyDisplay\n        });\n        this.prefixChar = formatter.format(1).split('1')[0];\n      }\n\n      return new RegExp(\"\".concat(this.escapeRegExp(this.prefixChar || '')), 'g');\n    }\n  }, {\n    key: \"getSuffixExpression\",\n    value: function getSuffixExpression() {\n      if (this.props.suffix) {\n        this.suffixChar = this.props.suffix;\n      } else {\n        var formatter = new Intl.NumberFormat(this.props.locale, {\n          style: this.props.mode,\n          currency: this.props.currency,\n          currencyDisplay: this.props.currencyDisplay,\n          minimumFractionDigits: 0,\n          maximumFractionDigits: 0\n        });\n        this.suffixChar = formatter.format(1).split('1')[1];\n      }\n\n      return new RegExp(\"\".concat(this.escapeRegExp(this.suffixChar || '')), 'g');\n    }\n  }, {\n    key: \"formatValue\",\n    value: function formatValue(value) {\n      if (value != null) {\n        if (value === '-') {\n          // Minus sign\n          return value;\n        }\n\n        if (this.props.format) {\n          var formatter = new Intl.NumberFormat(this.props.locale, this.getOptions());\n          var formattedValue = formatter.format(value);\n\n          if (this.props.prefix) {\n            formattedValue = this.props.prefix + formattedValue;\n          }\n\n          if (this.props.suffix) {\n            formattedValue = formattedValue + this.props.suffix;\n          }\n\n          return formattedValue;\n        }\n\n        return value.toString();\n      }\n\n      return '';\n    }\n  }, {\n    key: \"parseValue\",\n    value: function parseValue(text) {\n      var filteredText = text.replace(this._suffix, '').replace(this._prefix, '').trim().replace(/\\s/g, '').replace(this._currency, '').replace(this._group, '').replace(this._minusSign, '-').replace(this._decimal, '.').replace(this._numeral, this._index);\n\n      if (filteredText) {\n        if (filteredText === '-') // Minus sign\n          return filteredText;\n        var parsedValue = +filteredText;\n        return isNaN(parsedValue) ? null : parsedValue;\n      }\n\n      return null;\n    }\n  }, {\n    key: \"repeat\",\n    value: function repeat(event, interval, dir) {\n      var _this2 = this;\n\n      var i = interval || 500;\n      this.clearTimer();\n      this.timer = setTimeout(function () {\n        _this2.repeat(event, 40, dir);\n      }, i);\n      this.spin(event, dir);\n    }\n  }, {\n    key: \"spin\",\n    value: function spin(event, dir) {\n      var step = this.props.step * dir;\n      var currentValue = this.parseValue(this.inputEl.value) || 0;\n      var newValue = this.validateValue(currentValue + step);\n      this.updateInput(newValue, null, 'spin');\n      this.updateModel(event, newValue);\n      this.handleOnChange(event, currentValue, newValue);\n    }\n  }, {\n    key: \"onUpButtonMouseDown\",\n    value: function onUpButtonMouseDown(event) {\n      if (!this.props.disabled) {\n        this.inputEl.focus();\n        this.repeat(event, null, 1);\n        event.preventDefault();\n      }\n    }\n  }, {\n    key: \"onUpButtonMouseUp\",\n    value: function onUpButtonMouseUp() {\n      if (!this.props.disabled) {\n        this.clearTimer();\n      }\n    }\n  }, {\n    key: \"onUpButtonMouseLeave\",\n    value: function onUpButtonMouseLeave() {\n      if (!this.props.disabled) {\n        this.clearTimer();\n      }\n    }\n  }, {\n    key: \"onUpButtonKeyUp\",\n    value: function onUpButtonKeyUp() {\n      if (!this.props.disabled) {\n        this.clearTimer();\n      }\n    }\n  }, {\n    key: \"onUpButtonKeyDown\",\n    value: function onUpButtonKeyDown(event) {\n      if (event.keyCode === 32 || event.keyCode === 13) {\n        this.repeat(event, null, 1);\n      }\n    }\n  }, {\n    key: \"onDownButtonMouseDown\",\n    value: function onDownButtonMouseDown(event, focusInput) {\n      if (!this.props.disabled) {\n        this.inputEl.focus();\n        this.repeat(event, null, -1);\n        event.preventDefault();\n      }\n    }\n  }, {\n    key: \"onDownButtonMouseUp\",\n    value: function onDownButtonMouseUp() {\n      if (!this.props.disabled) {\n        this.clearTimer();\n      }\n    }\n  }, {\n    key: \"onDownButtonMouseLeave\",\n    value: function onDownButtonMouseLeave() {\n      if (!this.props.disabled) {\n        this.clearTimer();\n      }\n    }\n  }, {\n    key: \"onDownButtonKeyUp\",\n    value: function onDownButtonKeyUp() {\n      if (!this.props.disabled) {\n        this.clearTimer();\n      }\n    }\n  }, {\n    key: \"onDownButtonKeyDown\",\n    value: function onDownButtonKeyDown(event) {\n      if (event.keyCode === 32 || event.keyCode === 13) {\n        this.repeat(event, null, -1);\n      }\n    }\n  }, {\n    key: \"onInput\",\n    value: function onInput(event) {\n      if (this.isSpecialChar) {\n        event.target.value = this.lastValue;\n      }\n\n      this.isSpecialChar = false;\n    }\n  }, {\n    key: \"onInputKeyDown\",\n    value: function onInputKeyDown(event) {\n      this.lastValue = event.target.value;\n\n      if (event.shiftKey || event.altKey) {\n        this.isSpecialChar = true;\n        return;\n      }\n\n      var selectionStart = event.target.selectionStart;\n      var selectionEnd = event.target.selectionEnd;\n      var inputValue = event.target.value;\n      var newValueStr = null;\n\n      if (event.altKey) {\n        event.preventDefault();\n      }\n\n      switch (event.which) {\n        //up\n        case 38:\n          this.spin(event, 1);\n          event.preventDefault();\n          break;\n        //down\n\n        case 40:\n          this.spin(event, -1);\n          event.preventDefault();\n          break;\n        //left\n\n        case 37:\n          var prevChar = inputValue.charAt(selectionStart - 1);\n\n          if (!this.isNumeralChar(prevChar)) {\n            event.preventDefault();\n          }\n\n          break;\n        //right\n\n        case 39:\n          var currentChar = inputValue.charAt(selectionStart);\n\n          if (!this.isNumeralChar(currentChar)) {\n            event.preventDefault();\n          }\n\n          break;\n        //enter\n\n        case 13:\n          newValueStr = this.validateValue(this.parseValue(inputValue));\n          this.inputEl.value = this.formatValue(newValueStr);\n          this.inputEl.setAttribute('aria-valuenow', newValueStr);\n          this.updateModel(event, newValueStr);\n          break;\n        //backspace\n\n        case 8:\n          event.preventDefault();\n\n          if (selectionStart === selectionEnd) {\n            var deleteChar = inputValue.charAt(selectionStart - 1);\n            var decimalCharIndex = inputValue.search(this._decimal);\n            this._decimal.lastIndex = 0;\n\n            if (this.isNumeralChar(deleteChar)) {\n              if (this._group.test(deleteChar)) {\n                this._group.lastIndex = 0;\n                newValueStr = inputValue.slice(0, selectionStart - 2) + inputValue.slice(selectionStart - 1);\n              } else if (this._decimal.test(deleteChar)) {\n                this._decimal.lastIndex = 0;\n                this.inputEl.setSelectionRange(selectionStart - 1, selectionStart - 1);\n              } else if (decimalCharIndex > 0 && selectionStart > decimalCharIndex) {\n                newValueStr = inputValue.slice(0, selectionStart - 1) + '0' + inputValue.slice(selectionStart);\n              } else if (decimalCharIndex > 0 && decimalCharIndex === 1) {\n                newValueStr = inputValue.slice(0, selectionStart - 1) + '0' + inputValue.slice(selectionStart);\n                newValueStr = this.parseValue(newValueStr) > 0 ? newValueStr : '';\n              } else {\n                newValueStr = inputValue.slice(0, selectionStart - 1) + inputValue.slice(selectionStart);\n              }\n            }\n\n            this.updateValue(event, newValueStr, null, 'delete-single');\n          } else {\n            newValueStr = this.deleteRange(inputValue, selectionStart, selectionEnd);\n            this.updateValue(event, newValueStr, null, 'delete-range');\n          }\n\n          break;\n        // del\n\n        case 46:\n          event.preventDefault();\n\n          if (selectionStart === selectionEnd) {\n            var _deleteChar = inputValue.charAt(selectionStart);\n\n            var _decimalCharIndex = inputValue.search(this._decimal);\n\n            this._decimal.lastIndex = 0;\n\n            if (this.isNumeralChar(_deleteChar)) {\n              if (this._group.test(_deleteChar)) {\n                this._group.lastIndex = 0;\n                newValueStr = inputValue.slice(0, selectionStart) + inputValue.slice(selectionStart + 2);\n              } else if (this._decimal.test(_deleteChar)) {\n                this._decimal.lastIndex = 0;\n                this.inputEl.setSelectionRange(selectionStart + 1, selectionStart + 1);\n              } else if (_decimalCharIndex > 0 && selectionStart > _decimalCharIndex) {\n                newValueStr = inputValue.slice(0, selectionStart) + '0' + inputValue.slice(selectionStart + 1);\n              } else if (_decimalCharIndex > 0 && _decimalCharIndex === 1) {\n                newValueStr = inputValue.slice(0, selectionStart) + '0' + inputValue.slice(selectionStart + 1);\n                newValueStr = this.parseValue(newValueStr) > 0 ? newValueStr : '';\n              } else {\n                newValueStr = inputValue.slice(0, selectionStart) + inputValue.slice(selectionStart + 1);\n              }\n            }\n\n            this.updateValue(event, newValueStr, null, 'delete-back-single');\n          } else {\n            newValueStr = this.deleteRange(inputValue, selectionStart, selectionEnd);\n            this.updateValue(event, newValueStr, null, 'delete-range');\n          }\n\n          break;\n\n        default:\n          break;\n      }\n\n      if (this.props.onKeyDown) {\n        this.props.onKeyDown(event);\n      }\n    }\n  }, {\n    key: \"onInputKeyPress\",\n    value: function onInputKeyPress(event) {\n      event.preventDefault();\n      var code = event.which || event.keyCode;\n      var char = String.fromCharCode(code);\n      var isDecimalSign = this.isDecimalSign(char);\n      var isMinusSign = this.isMinusSign(char);\n\n      if (48 <= code && code <= 57 || isMinusSign || isDecimalSign) {\n        this.insert(event, char, {\n          isDecimalSign: isDecimalSign,\n          isMinusSign: isMinusSign\n        });\n      }\n    }\n  }, {\n    key: \"onPaste\",\n    value: function onPaste(event) {\n      event.preventDefault();\n      var data = (event.clipboardData || window['clipboardData']).getData('Text');\n\n      if (data) {\n        var filteredData = this.parseValue(data);\n\n        if (filteredData != null) {\n          this.insert(event, filteredData.toString());\n        }\n      }\n    }\n  }, {\n    key: \"allowMinusSign\",\n    value: function allowMinusSign() {\n      return this.props.min === null || this.props.min < 0;\n    }\n  }, {\n    key: \"isMinusSign\",\n    value: function isMinusSign(char) {\n      if (this._minusSign.test(char)) {\n        this._minusSign.lastIndex = 0;\n        return true;\n      }\n\n      return false;\n    }\n  }, {\n    key: \"isDecimalSign\",\n    value: function isDecimalSign(char) {\n      if (this._decimal.test(char)) {\n        this._decimal.lastIndex = 0;\n        return true;\n      }\n\n      return false;\n    }\n  }, {\n    key: \"insert\",\n    value: function insert(event, text) {\n      var sign = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {\n        isDecimalSign: false,\n        isMinusSign: false\n      };\n      var minusCharIndexOnText = text.search(this._minusSign);\n      this._minusSign.lastIndex = 0;\n\n      if (!this.allowMinusSign() && minusCharIndexOnText !== -1) {\n        return;\n      }\n\n      var selectionStart = this.inputEl.selectionStart;\n      var selectionEnd = this.inputEl.selectionEnd;\n      var inputValue = this.inputEl.value.trim();\n      var decimalCharIndex = inputValue.search(this._decimal);\n      this._decimal.lastIndex = 0;\n      var minusCharIndex = inputValue.search(this._minusSign);\n      this._minusSign.lastIndex = 0;\n      var newValueStr;\n\n      if (sign.isMinusSign) {\n        if (selectionStart === 0) {\n          newValueStr = inputValue;\n\n          if (minusCharIndex === -1 || selectionEnd !== 0) {\n            newValueStr = this.insertText(inputValue, text, 0, selectionEnd);\n          }\n\n          this.updateValue(event, newValueStr, text, 'insert');\n        }\n      } else if (sign.isDecimalSign) {\n        if (decimalCharIndex > 0 && selectionStart === decimalCharIndex) {\n          this.updateValue(event, inputValue, text, 'insert');\n        } else if (decimalCharIndex > selectionStart && decimalCharIndex < selectionEnd) {\n          newValueStr = this.insertText(inputValue, text, selectionStart, selectionEnd);\n          this.updateValue(event, newValueStr, text, 'insert');\n        }\n      } else {\n        var maxFractionDigits = this.numberFormat.resolvedOptions().maximumFractionDigits;\n        var operation = selectionStart !== selectionEnd ? 'range-insert' : 'insert';\n\n        if (decimalCharIndex > 0 && selectionStart > decimalCharIndex) {\n          if (selectionStart + text.length - (decimalCharIndex + 1) <= maxFractionDigits) {\n            newValueStr = inputValue.slice(0, selectionStart) + text + inputValue.slice(selectionStart + text.length);\n            this.updateValue(event, newValueStr, text, operation);\n          }\n        } else {\n          newValueStr = this.insertText(inputValue, text, selectionStart, selectionEnd);\n          this.updateValue(event, newValueStr, text, operation);\n        }\n      }\n    }\n  }, {\n    key: \"insertText\",\n    value: function insertText(value, text, start, end) {\n      var textSplit = text.split('.');\n\n      if (textSplit.length === 2) {\n        var decimalCharIndex = value.slice(start, end).search(this._decimal);\n        this._decimal.lastIndex = 0;\n        return decimalCharIndex > 0 ? value.slice(0, start) + this.formatValue(text) + value.slice(end) : value || this.formatValue(text);\n      } else if (end - start === value.length) {\n        return this.formatValue(text);\n      } else if (start === 0) {\n        return text + value.slice(end);\n      } else if (end === value.length) {\n        return value.slice(0, start) + text;\n      } else {\n        return value.slice(0, start) + text + value.slice(end);\n      }\n    }\n  }, {\n    key: \"deleteRange\",\n    value: function deleteRange(value, start, end) {\n      var newValueStr;\n      if (end - start === value.length) newValueStr = '';else if (start === 0) newValueStr = value.slice(end);else if (end === value.length) newValueStr = value.slice(0, start);else newValueStr = value.slice(0, start) + value.slice(end);\n      return newValueStr;\n    }\n  }, {\n    key: \"initCursor\",\n    value: function initCursor() {\n      var selectionStart = this.inputEl.selectionStart;\n      var inputValue = this.inputEl.value;\n      var valueLength = inputValue.length;\n      var index = null;\n      var char = inputValue.charAt(selectionStart);\n\n      if (this.isNumeralChar(char)) {\n        return;\n      } //left\n\n\n      var i = selectionStart - 1;\n\n      while (i >= 0) {\n        char = inputValue.charAt(i);\n\n        if (this.isNumeralChar(char)) {\n          index = i;\n          break;\n        } else {\n          i--;\n        }\n      }\n\n      if (index !== null) {\n        this.inputEl.setSelectionRange(index + 1, index + 1);\n      } else {\n        i = selectionStart + 1;\n\n        while (i < valueLength) {\n          char = inputValue.charAt(i);\n\n          if (this.isNumeralChar(char)) {\n            index = i;\n            break;\n          } else {\n            i++;\n          }\n        }\n\n        if (index !== null) {\n          this.inputEl.setSelectionRange(index, index);\n        }\n      }\n    }\n  }, {\n    key: \"onInputClick\",\n    value: function onInputClick() {\n      this.initCursor();\n    }\n  }, {\n    key: \"isNumeralChar\",\n    value: function isNumeralChar(char) {\n      if (char.length === 1 && (this._numeral.test(char) || this._decimal.test(char) || this._group.test(char) || this._minusSign.test(char))) {\n        this.resetRegex();\n        return true;\n      } else {\n        return false;\n      }\n    }\n  }, {\n    key: \"resetRegex\",\n    value: function resetRegex() {\n      this._numeral.lastIndex = 0;\n      this._decimal.lastIndex = 0;\n      this._group.lastIndex = 0;\n      this._minusSign.lastIndex = 0;\n    }\n  }, {\n    key: \"updateValue\",\n    value: function updateValue(event, valueStr, insertedValueStr, operation) {\n      var currentValue = this.inputEl.value;\n      var newValue = null;\n\n      if (valueStr != null) {\n        newValue = this.parseValue(valueStr);\n        this.updateInput(newValue, insertedValueStr, operation);\n      }\n\n      this.handleOnChange(event, currentValue, newValue);\n    }\n  }, {\n    key: \"handleOnChange\",\n    value: function handleOnChange(event, currentValue, newValue) {\n      if (this.props.onChange && this.isValueChanged(currentValue, newValue)) {\n        this.props.onChange({\n          originalEvent: event,\n          value: newValue\n        });\n      }\n    }\n  }, {\n    key: \"isValueChanged\",\n    value: function isValueChanged(currentValue, newValue) {\n      if (newValue === null && currentValue !== null) {\n        return true;\n      }\n\n      if (newValue != null) {\n        var parsedCurrentValue = typeof currentValue === 'string' ? this.parseValue(currentValue) : currentValue;\n        return newValue !== parsedCurrentValue;\n      }\n\n      return false;\n    }\n  }, {\n    key: \"validateValue\",\n    value: function validateValue(value) {\n      if (this.props.min !== null && value < this.props.min) {\n        return this.props.min;\n      }\n\n      if (this.props.max !== null && value > this.props.max) {\n        return this.props.max;\n      }\n\n      if (value === '-') {\n        // Minus sign\n        return null;\n      }\n\n      return value;\n    }\n  }, {\n    key: \"updateInput\",\n    value: function updateInput(value, insertedValueStr, operation) {\n      insertedValueStr = insertedValueStr || '';\n      var inputValue = this.inputEl.value;\n      var newValue = this.formatValue(value);\n      var currentLength = inputValue.length;\n\n      if (currentLength === 0) {\n        this.inputEl.value = newValue;\n        this.inputEl.setSelectionRange(0, 0);\n        this.initCursor();\n        var prefixLength = (this.prefixChar || '').length;\n        var selectionEnd = prefixLength + insertedValueStr.length;\n        this.inputEl.setSelectionRange(selectionEnd, selectionEnd);\n      } else {\n        var selectionStart = this.inputEl.selectionStart;\n        var _selectionEnd = this.inputEl.selectionEnd;\n        this.inputEl.value = newValue;\n        var newLength = newValue.length;\n\n        if (operation === 'range-insert') {\n          var startValue = this.parseValue((inputValue || '').slice(0, selectionStart));\n          var startValueStr = startValue !== null ? startValue.toString() : '';\n          var startExpr = startValueStr.split('').join(\"(\".concat(this.groupChar, \")?\"));\n          var sRegex = new RegExp(startExpr, 'g');\n          sRegex.test(newValue);\n          var tExpr = insertedValueStr.split('').join(\"(\".concat(this.groupChar, \")?\"));\n          var tRegex = new RegExp(tExpr, 'g');\n          tRegex.test(newValue.slice(sRegex.lastIndex));\n          _selectionEnd = sRegex.lastIndex + tRegex.lastIndex;\n          this.inputEl.setSelectionRange(_selectionEnd, _selectionEnd);\n        } else if (newLength === currentLength) {\n          if (operation === 'insert' || operation === 'delete-back-single') this.inputEl.setSelectionRange(_selectionEnd + 1, _selectionEnd + 1);else if (operation === 'delete-single') this.inputEl.setSelectionRange(_selectionEnd - 1, _selectionEnd - 1);else if (operation === 'delete-range' || operation === 'spin') this.inputEl.setSelectionRange(_selectionEnd, _selectionEnd);\n        } else if (operation === 'delete-back-single') {\n          var prevChar = inputValue.charAt(_selectionEnd - 1);\n          var nextChar = inputValue.charAt(_selectionEnd);\n          var diff = currentLength - newLength;\n\n          var isGroupChar = this._group.test(nextChar);\n\n          if (isGroupChar && diff === 1) {\n            _selectionEnd += 1;\n          } else if (!isGroupChar && this.isNumeralChar(prevChar)) {\n            _selectionEnd += -1 * diff + 1;\n          }\n\n          this._group.lastIndex = 0;\n          this.inputEl.setSelectionRange(_selectionEnd, _selectionEnd);\n        } else if (inputValue === '-' && operation === 'insert') {\n          this.inputEl.setSelectionRange(_selectionEnd + 1, _selectionEnd + 1);\n        } else {\n          _selectionEnd = _selectionEnd + (newLength - currentLength);\n          this.inputEl.setSelectionRange(_selectionEnd, _selectionEnd);\n        }\n      }\n\n      this.inputEl.setAttribute('aria-valuenow', value);\n    }\n  }, {\n    key: \"updateInputValue\",\n    value: function updateInputValue(newValue) {\n      this.inputEl.value = this.formatValue(newValue);\n      this.inputEl.setAttribute('aria-valuenow', newValue);\n    }\n  }, {\n    key: \"updateModel\",\n    value: function updateModel(event, value) {\n      if (this.props.onValueChange) {\n        this.props.onValueChange({\n          originalEvent: event,\n          value: value,\n          stopPropagation: function stopPropagation() {},\n          preventDefault: function preventDefault() {},\n          target: {\n            name: this.props.name,\n            id: this.props.id,\n            value: value\n          }\n        });\n      }\n    }\n  }, {\n    key: \"onInputFocus\",\n    value: function onInputFocus(event) {\n      var _this3 = this;\n\n      event.persist();\n      this.setState({\n        focused: true\n      }, function () {\n        if (_this3.props.onFocus) {\n          _this3.props.onFocus(event);\n        }\n      });\n    }\n  }, {\n    key: \"onInputBlur\",\n    value: function onInputBlur(event) {\n      var _this4 = this;\n\n      event.persist();\n      this.setState({\n        focused: false\n      }, function () {\n        var newValue = _this4.validateValue(_this4.parseValue(_this4.inputEl.value));\n\n        _this4.updateInputValue(newValue);\n\n        _this4.updateModel(event, newValue);\n\n        if (_this4.props.onBlur) {\n          _this4.props.onBlur(event);\n        }\n      });\n    }\n  }, {\n    key: \"clearTimer\",\n    value: function clearTimer() {\n      if (this.timer) {\n        clearInterval(this.timer);\n      }\n    }\n  }, {\n    key: \"isStacked\",\n    value: function isStacked() {\n      return this.props.showButtons && this.props.buttonLayout === 'stacked';\n    }\n  }, {\n    key: \"isHorizontal\",\n    value: function isHorizontal() {\n      return this.props.showButtons && this.props.buttonLayout === 'horizontal';\n    }\n  }, {\n    key: \"isVertical\",\n    value: function isVertical() {\n      return this.props.showButtons && this.props.buttonLayout === 'vertical';\n    }\n  }, {\n    key: \"getInputMode\",\n    value: function getInputMode() {\n      return this.props.inputMode || (this.props.mode === 'decimal' && !this.props.minFractionDigits ? 'numeric' : 'decimal');\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      if (this.props.tooltip) {\n        this.renderTooltip();\n      }\n\n      var newValue = this.validateValue(this.props.value);\n\n      if (this.props.value !== newValue) {\n        this.updateModel(null, newValue);\n      }\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      if (prevProps.tooltip !== this.props.tooltip || prevProps.tooltipOptions !== this.props.tooltipOptions) {\n        if (this.tooltip) this.tooltip.update(_objectSpread({\n          content: this.props.tooltip\n        }, this.props.tooltipOptions || {}));else this.renderTooltip();\n      }\n\n      var isOptionChanged = this.isOptionChanged(prevProps);\n\n      if (isOptionChanged) {\n        this.constructParser();\n      }\n\n      if (prevProps.value !== this.props.value || isOptionChanged) {\n        var newValue = this.validateValue(this.props.value);\n        this.updateInputValue(newValue);\n\n        if (this.props.value !== newValue) {\n          this.updateModel(null, newValue);\n        }\n      }\n    }\n  }, {\n    key: \"isOptionChanged\",\n    value: function isOptionChanged(prevProps) {\n      var _this5 = this;\n\n      var optionProps = ['locale', 'localeMatcher', 'mode', 'currency', 'currencyDisplay', 'useGrouping', 'minFractionDigits', 'maxFractionDigits', 'suffix', 'prefix'];\n      return optionProps.some(function (option) {\n        return prevProps[option] !== _this5.props[option];\n      });\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      if (this.tooltip) {\n        this.tooltip.destroy();\n        this.tooltip = null;\n      }\n    }\n  }, {\n    key: \"renderTooltip\",\n    value: function renderTooltip() {\n      this.tooltip = tip({\n        target: this.element,\n        content: this.props.tooltip,\n        options: this.props.tooltipOptions\n      });\n    }\n  }, {\n    key: \"renderInputElement\",\n    value: function renderInputElement() {\n      var _this6 = this;\n\n      var className = classNames('p-inputnumber-input', this.props.inputClassName);\n      var valueToRender = this.formatValue(this.props.value);\n      return /*#__PURE__*/React.createElement(InputText, {\n        ref: function ref(el) {\n          return _this6.inputEl = el;\n        },\n        id: this.props.inputId,\n        style: this.props.inputStyle,\n        role: \"spinbutton\",\n        className: className,\n        defaultValue: valueToRender,\n        type: this.props.type,\n        size: this.props.size,\n        tabIndex: this.props.tabIndex,\n        inputMode: this.getInputMode(),\n        maxLength: this.props.maxlength,\n        disabled: this.props.disabled,\n        required: this.props.required,\n        pattern: this.props.pattern,\n        placeholder: this.props.placeholder,\n        readOnly: this.props.readOnly,\n        name: this.props.name,\n        autoFocus: this.props.autoFocus,\n        onKeyDown: this.onInputKeyDown,\n        onKeyPress: this.onInputKeyPress,\n        onInput: this.onInput,\n        onClick: this.onInputClick,\n        onBlur: this.onInputBlur,\n        onFocus: this.onInputFocus,\n        onPaste: this.onPaste,\n        min: this.props.min,\n        max: this.props.max,\n        \"aria-valuemin\": this.props.min,\n        \"aria-valuemax\": this.props.max,\n        \"aria-valuenow\": this.props.value,\n        \"aria-labelledby\": this.props.ariaLabelledBy,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 946,\n          columnNumber: 13\n        }\n      });\n    }\n  }, {\n    key: \"renderUpButton\",\n    value: function renderUpButton() {\n      var className = classNames('p-inputnumber-button p-inputnumber-button-up p-button p-button-icon-only p-component', {\n        'p-disabled': this.props.disabled\n      }, this.props.incrementButtonClassName);\n      var icon = classNames('p-button-icon', this.props.incrementButtonIcon);\n      return /*#__PURE__*/React.createElement(\"button\", {\n        type: \"button\",\n        className: className,\n        onMouseLeave: this.onUpButtonMouseLeave,\n        onMouseDown: this.onUpButtonMouseDown,\n        onMouseUp: this.onUpButtonMouseUp,\n        onKeyDown: this.onUpButtonKeyDown,\n        onKeyUp: this.onUpButtonKeyUp,\n        disabled: this.props.disabled,\n        tabIndex: -1,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 963,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        className: icon,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 965,\n          columnNumber: 17\n        }\n      }), /*#__PURE__*/React.createElement(Ripple, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 966,\n          columnNumber: 17\n        }\n      }));\n    }\n  }, {\n    key: \"renderDownButton\",\n    value: function renderDownButton() {\n      var className = classNames('p-inputnumber-button p-inputnumber-button-down p-button p-button-icon-only p-component', {\n        'p-disabled': this.props.disabled\n      }, this.props.decrementButtonClassName);\n      var icon = classNames('p-button-icon', this.props.decrementButtonIcon);\n      return /*#__PURE__*/React.createElement(\"button\", {\n        type: \"button\",\n        className: className,\n        onMouseLeave: this.onDownButtonMouseLeave,\n        onMouseDown: this.onDownButtonMouseDown,\n        onMouseUp: this.onDownButtonMouseUp,\n        onKeyDown: this.onDownButtonKeyDown,\n        onKeyUp: this.onDownButtonKeyUp,\n        disabled: this.props.disabled,\n        tabIndex: -1,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 978,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        className: icon,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 980,\n          columnNumber: 17\n        }\n      }), /*#__PURE__*/React.createElement(Ripple, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 981,\n          columnNumber: 17\n        }\n      }));\n    }\n  }, {\n    key: \"renderButtonGroup\",\n    value: function renderButtonGroup() {\n      var upButton = this.props.showButtons && this.renderUpButton();\n      var downButton = this.props.showButtons && this.renderDownButton();\n\n      if (this.isStacked()) {\n        return /*#__PURE__*/React.createElement(\"span\", {\n          className: \"p-inputnumber-button-group\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 992,\n            columnNumber: 17\n          }\n        }, upButton, downButton);\n      }\n\n      return /*#__PURE__*/React.createElement(React.Fragment, null, upButton, downButton);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this7 = this;\n\n      var className = classNames('p-inputnumber p-component', this.props.className, {\n        'p-inputwrapper-filled': this.props.value != null && this.props.value.toString().length > 0,\n        'p-inputwrapper-focus': this.state.focused,\n        'p-inputnumber-buttons-stacked': this.isStacked(),\n        'p-inputnumber-buttons-horizontal': this.isHorizontal(),\n        'p-inputnumber-buttons-vertical': this.isVertical()\n      });\n      var inputElement = this.renderInputElement();\n      var buttonGroup = this.renderButtonGroup();\n      return /*#__PURE__*/React.createElement(\"span\", {\n        ref: function ref(el) {\n          return _this7.element = el;\n        },\n        id: this.props.id,\n        className: className,\n        style: this.props.style,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1019,\n          columnNumber: 13\n        }\n      }, inputElement, buttonGroup);\n    }\n  }]);\n\n  return InputNumber;\n}(Component);\nInputNumber.defaultProps = {\n  value: null,\n  format: true,\n  showButtons: false,\n  buttonLayout: 'stacked',\n  incrementButtonClassName: null,\n  decrementButtonClassName: null,\n  incrementButtonIcon: 'pi pi-angle-up',\n  decrementButtonIcon: 'pi pi-angle-down',\n  locale: undefined,\n  localeMatcher: undefined,\n  mode: 'decimal',\n  suffix: null,\n  prefix: null,\n  currency: undefined,\n  currencyDisplay: undefined,\n  useGrouping: true,\n  minFractionDigits: undefined,\n  maxFractionDigits: undefined,\n  id: null,\n  name: null,\n  type: 'text',\n  step: 1,\n  min: null,\n  max: null,\n  disabled: false,\n  required: false,\n  tabIndex: null,\n  pattern: null,\n  inputMode: null,\n  placeholder: null,\n  readOnly: false,\n  size: null,\n  style: null,\n  className: null,\n  inputId: null,\n  autoFocus: false,\n  inputStyle: null,\n  inputClassName: null,\n  tooltip: null,\n  tooltipOptions: null,\n  ariaLabelledBy: null,\n  onValueChange: null,\n  onChange: null,\n  onBlur: null,\n  onFocus: null,\n  onKeyDown: null\n};\nInputNumber.propTypes = {\n  value: PropTypes.number,\n  format: PropTypes.bool,\n  showButtons: PropTypes.bool,\n  buttonLayout: PropTypes.string,\n  incrementButtonClassName: PropTypes.string,\n  decrementButtonClassName: PropTypes.string,\n  incrementButtonIcon: PropTypes.string,\n  decrementButtonIcon: PropTypes.string,\n  locale: PropTypes.string,\n  localeMatcher: PropTypes.string,\n  mode: PropTypes.string,\n  suffix: PropTypes.string,\n  prefix: PropTypes.string,\n  currency: PropTypes.string,\n  currencyDisplay: PropTypes.string,\n  useGrouping: PropTypes.bool,\n  minFractionDigits: PropTypes.number,\n  maxFractionDigits: PropTypes.number,\n  id: PropTypes.string,\n  name: PropTypes.string,\n  type: PropTypes.string,\n  step: PropTypes.number,\n  min: PropTypes.number,\n  max: PropTypes.number,\n  disabled: PropTypes.bool,\n  required: PropTypes.bool,\n  tabIndex: PropTypes.number,\n  pattern: PropTypes.string,\n  inputMode: PropTypes.string,\n  placeholder: PropTypes.string,\n  readOnly: PropTypes.bool,\n  size: PropTypes.number,\n  style: PropTypes.object,\n  className: PropTypes.string,\n  inputId: PropTypes.string,\n  autoFocus: PropTypes.bool,\n  inputStyle: PropTypes.object,\n  inputClassName: PropTypes.string,\n  tooltip: PropTypes.string,\n  tooltipOptions: PropTypes.object,\n  ariaLabelledBy: PropTypes.string,\n  onValueChange: PropTypes.func,\n  onChange: PropTypes.func,\n  onBlur: PropTypes.func,\n  onFocus: PropTypes.func,\n  onKeyDown: PropTypes.func\n};","map":{"version":3,"sources":["C:/Users/zura.ph/WebstormProjects/zz-regul/src/components/inputnumber/InputNumber.js"],"names":["React","Component","PropTypes","InputText","classNames","tip","Ripple","InputNumber","props","state","focused","constructParser","onInput","bind","onInputKeyDown","onInputKeyPress","onInputClick","onInputBlur","onInputFocus","onPaste","onUpButtonMouseLeave","onUpButtonMouseDown","onUpButtonMouseUp","onUpButtonKeyDown","onUpButtonKeyUp","onDownButtonMouseLeave","onDownButtonMouseDown","onDownButtonMouseUp","onDownButtonKeyDown","onDownButtonKeyUp","localeMatcher","style","mode","currency","currencyDisplay","useGrouping","minimumFractionDigits","minFractionDigits","maximumFractionDigits","maxFractionDigits","numberFormat","Intl","NumberFormat","locale","getOptions","numerals","format","reverse","index","Map","map","d","i","_numeral","RegExp","join","_decimal","getDecimalExpression","_group","getGroupingExpression","_minusSign","getMinusSignExpression","_currency","getCurrencyExpression","_suffix","getSuffixExpression","_prefix","getPrefixExpression","_index","get","text","replace","formatter","trim","groupChar","charAt","prefix","prefixChar","split","escapeRegExp","suffix","suffixChar","value","formattedValue","toString","filteredText","parsedValue","isNaN","event","interval","dir","clearTimer","timer","setTimeout","repeat","spin","step","currentValue","parseValue","inputEl","newValue","validateValue","updateInput","updateModel","handleOnChange","disabled","focus","preventDefault","keyCode","focusInput","isSpecialChar","target","lastValue","shiftKey","altKey","selectionStart","selectionEnd","inputValue","newValueStr","which","prevChar","isNumeralChar","currentChar","formatValue","setAttribute","deleteChar","decimalCharIndex","search","lastIndex","test","slice","setSelectionRange","updateValue","deleteRange","onKeyDown","code","char","String","fromCharCode","isDecimalSign","isMinusSign","insert","data","clipboardData","window","getData","filteredData","min","sign","minusCharIndexOnText","allowMinusSign","minusCharIndex","insertText","resolvedOptions","operation","length","start","end","textSplit","valueLength","initCursor","resetRegex","valueStr","insertedValueStr","onChange","isValueChanged","originalEvent","parsedCurrentValue","max","currentLength","prefixLength","newLength","startValue","startValueStr","startExpr","sRegex","tExpr","tRegex","nextChar","diff","isGroupChar","onValueChange","stopPropagation","name","id","persist","setState","onFocus","updateInputValue","onBlur","clearInterval","showButtons","buttonLayout","inputMode","tooltip","renderTooltip","prevProps","tooltipOptions","update","content","isOptionChanged","optionProps","some","option","destroy","element","options","className","inputClassName","valueToRender","el","inputId","inputStyle","type","size","tabIndex","getInputMode","maxlength","required","pattern","placeholder","readOnly","autoFocus","ariaLabelledBy","incrementButtonClassName","icon","incrementButtonIcon","decrementButtonClassName","decrementButtonIcon","upButton","renderUpButton","downButton","renderDownButton","isStacked","isHorizontal","isVertical","inputElement","renderInputElement","buttonGroup","renderButtonGroup","defaultProps","undefined","propTypes","number","bool","string","object","func"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport {InputText} from '../inputtext/InputText';\r\nimport { classNames } from '../utils/ClassNames';\r\nimport { tip } from '../tooltip/Tooltip';\r\nimport { Ripple } from '../ripple/Ripple';\r\n\r\nexport class InputNumber extends Component {\r\n\r\n    static defaultProps = {\r\n        value: null,\r\n        format: true,\r\n        showButtons: false,\r\n        buttonLayout: 'stacked',\r\n        incrementButtonClassName: null,\r\n        decrementButtonClassName: null,\r\n        incrementButtonIcon: 'pi pi-angle-up',\r\n        decrementButtonIcon: 'pi pi-angle-down',\r\n        locale: undefined,\r\n        localeMatcher: undefined,\r\n        mode: 'decimal',\r\n        suffix: null,\r\n        prefix: null,\r\n        currency: undefined,\r\n        currencyDisplay: undefined,\r\n        useGrouping: true,\r\n        minFractionDigits: undefined,\r\n        maxFractionDigits: undefined,\r\n        id: null,\r\n        name: null,\r\n        type: 'text',\r\n        step: 1,\r\n        min: null,\r\n        max: null,\r\n        disabled: false,\r\n        required: false,\r\n        tabIndex: null,\r\n        pattern: null,\r\n        inputMode: null,\r\n        placeholder: null,\r\n        readOnly: false,\r\n        size: null,\r\n        style: null,\r\n        className: null,\r\n        inputId: null,\r\n        autoFocus: false,\r\n        inputStyle: null,\r\n        inputClassName: null,\r\n        tooltip: null,\r\n        tooltipOptions: null,\r\n        ariaLabelledBy: null,\r\n        onValueChange: null,\r\n        onChange: null,\r\n        onBlur: null,\r\n        onFocus: null,\r\n        onKeyDown: null\r\n    }\r\n\r\n    static propTypes = {\r\n        value: PropTypes.number,\r\n        format: PropTypes.bool,\r\n        showButtons: PropTypes.bool,\r\n        buttonLayout: PropTypes.string,\r\n        incrementButtonClassName: PropTypes.string,\r\n        decrementButtonClassName: PropTypes.string,\r\n        incrementButtonIcon: PropTypes.string,\r\n        decrementButtonIcon: PropTypes.string,\r\n        locale: PropTypes.string,\r\n        localeMatcher: PropTypes.string,\r\n        mode: PropTypes.string,\r\n        suffix: PropTypes.string,\r\n        prefix: PropTypes.string,\r\n        currency: PropTypes.string,\r\n        currencyDisplay: PropTypes.string,\r\n        useGrouping: PropTypes.bool,\r\n        minFractionDigits: PropTypes.number,\r\n        maxFractionDigits: PropTypes.number,\r\n        id: PropTypes.string,\r\n        name: PropTypes.string,\r\n        type: PropTypes.string,\r\n        step: PropTypes.number,\r\n        min: PropTypes.number,\r\n        max: PropTypes.number,\r\n        disabled: PropTypes.bool,\r\n        required: PropTypes.bool,\r\n        tabIndex: PropTypes.number,\r\n        pattern: PropTypes.string,\r\n        inputMode: PropTypes.string,\r\n        placeholder: PropTypes.string,\r\n        readOnly: PropTypes.bool,\r\n        size: PropTypes.number,\r\n        style: PropTypes.object,\r\n        className: PropTypes.string,\r\n        inputId: PropTypes.string,\r\n        autoFocus: PropTypes.bool,\r\n        inputStyle: PropTypes.object,\r\n        inputClassName: PropTypes.string,\r\n        tooltip: PropTypes.string,\r\n        tooltipOptions: PropTypes.object,\r\n        ariaLabelledBy: PropTypes.string,\r\n        onValueChange: PropTypes.func,\r\n        onChange: PropTypes.func,\r\n        onBlur: PropTypes.func,\r\n        onFocus: PropTypes.func,\r\n        onKeyDown: PropTypes.func\r\n    }\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            focused: false\r\n        };\r\n\r\n        this.constructParser();\r\n\r\n        this.onInput = this.onInput.bind(this);\r\n        this.onInputKeyDown = this.onInputKeyDown.bind(this);\r\n        this.onInputKeyPress = this.onInputKeyPress.bind(this);\r\n        this.onInputClick = this.onInputClick.bind(this);\r\n        this.onInputBlur = this.onInputBlur.bind(this);\r\n        this.onInputFocus = this.onInputFocus.bind(this);\r\n        this.onPaste = this.onPaste.bind(this);\r\n\r\n        this.onUpButtonMouseLeave = this.onUpButtonMouseLeave.bind(this);\r\n        this.onUpButtonMouseDown = this.onUpButtonMouseDown.bind(this);\r\n        this.onUpButtonMouseUp = this.onUpButtonMouseUp.bind(this);\r\n        this.onUpButtonKeyDown = this.onUpButtonKeyDown.bind(this);\r\n        this.onUpButtonKeyUp = this.onUpButtonKeyUp.bind(this);\r\n\r\n        this.onDownButtonMouseLeave = this.onDownButtonMouseLeave.bind(this);\r\n        this.onDownButtonMouseDown = this.onDownButtonMouseDown.bind(this);\r\n        this.onDownButtonMouseUp = this.onDownButtonMouseUp.bind(this);\r\n        this.onDownButtonKeyDown = this.onDownButtonKeyDown.bind(this);\r\n        this.onDownButtonKeyUp = this.onDownButtonKeyUp.bind(this);\r\n    }\r\n\r\n    getOptions() {\r\n        return {\r\n            localeMatcher: this.props.localeMatcher,\r\n            style: this.props.mode,\r\n            currency: this.props.currency,\r\n            currencyDisplay: this.props.currencyDisplay,\r\n            useGrouping: this.props.useGrouping,\r\n            minimumFractionDigits: this.props.minFractionDigits,\r\n            maximumFractionDigits: this.props.maxFractionDigits\r\n        };\r\n    }\r\n\r\n    constructParser() {\r\n        this.numberFormat = new Intl.NumberFormat(this.props.locale, this.getOptions());\r\n        const numerals = [...new Intl.NumberFormat(this.props.locale, {useGrouping: false}).format(9876543210)].reverse();\r\n        const index = new Map(numerals.map((d, i) => [d, i]));\r\n        this._numeral = new RegExp(`[${numerals.join('')}]`, 'g');\r\n        this._decimal = this.getDecimalExpression();\r\n        this._group = this.getGroupingExpression();\r\n        this._minusSign = this.getMinusSignExpression();\r\n        this._currency = this.getCurrencyExpression();\r\n        this._suffix = this.getSuffixExpression();\r\n        this._prefix = this.getPrefixExpression();\r\n        this._index = d => index.get(d);\r\n    }\r\n\r\n    escapeRegExp(text) {\r\n        return text.replace(/[-[\\]{}()*+?.,\\\\^$|#\\s]/g, '\\\\$&');\r\n    }\r\n\r\n    getDecimalExpression() {\r\n        const formatter = new Intl.NumberFormat(this.props.locale, {useGrouping: false});\r\n        return new RegExp(`[${formatter.format(1.1).trim().replace(this._numeral, '')}]`, 'g');\r\n    }\r\n\r\n    getGroupingExpression() {\r\n        const formatter = new Intl.NumberFormat(this.props.locale, {useGrouping: true});\r\n        this.groupChar = formatter.format(1000000).trim().replace(this._numeral, '').charAt(0);\r\n        return new RegExp(`[${this.groupChar}]`, 'g');\r\n    }\r\n\r\n    getMinusSignExpression() {\r\n        const formatter = new Intl.NumberFormat(this.props.locale, {useGrouping: false});\r\n        return new RegExp(`[${formatter.format(-1).trim().replace(this._numeral, '')}]`, 'g');\r\n    }\r\n\r\n    getCurrencyExpression() {\r\n        if (this.props.currency) {\r\n            const formatter = new Intl.NumberFormat(this.props.locale, {style: 'currency', currency: this.props.currency, currencyDisplay: this.props.currencyDisplay});\r\n            return new RegExp(`[${formatter.format(1).replace(/\\s/g, '').replace(this._numeral, '').replace(this._decimal, '').replace(this._group, '')}]`, 'g');\r\n        }\r\n        else {\r\n            return new RegExp(`[]`,'g');\r\n        }\r\n    }\r\n\r\n    getPrefixExpression() {\r\n        if (this.props.prefix) {\r\n            this.prefixChar = this.props.prefix;\r\n        }\r\n        else {\r\n            const formatter = new Intl.NumberFormat(this.props.locale, {style: this.props.mode, currency: this.props.currency, currencyDisplay: this.props.currencyDisplay});\r\n            this.prefixChar = formatter.format(1).split('1')[0];\r\n        }\r\n\r\n        return new RegExp(`${this.escapeRegExp(this.prefixChar||'')}`, 'g');\r\n    }\r\n\r\n    getSuffixExpression() {\r\n        if (this.props.suffix) {\r\n            this.suffixChar = this.props.suffix;\r\n        }\r\n        else {\r\n            const formatter = new Intl.NumberFormat(this.props.locale, {style: this.props.mode, currency: this.props.currency, currencyDisplay: this.props.currencyDisplay,\r\n                minimumFractionDigits: 0, maximumFractionDigits: 0});\r\n            this.suffixChar = formatter.format(1).split('1')[1];\r\n        }\r\n\r\n        return new RegExp(`${this.escapeRegExp(this.suffixChar||'')}`, 'g');\r\n    }\r\n\r\n    formatValue(value) {\r\n        if (value != null) {\r\n            if (value === '-') { // Minus sign\r\n                return value;\r\n            }\r\n\r\n            if (this.props.format) {\r\n                let formatter = new Intl.NumberFormat(this.props.locale, this.getOptions());\r\n                let formattedValue = formatter.format(value);\r\n                if (this.props.prefix) {\r\n                    formattedValue = this.props.prefix + formattedValue;\r\n                }\r\n\r\n                if (this.props.suffix) {\r\n                    formattedValue = formattedValue + this.props.suffix;\r\n                }\r\n\r\n                return formattedValue;\r\n            }\r\n\r\n            return value.toString();\r\n        }\r\n\r\n        return '';\r\n    }\r\n\r\n    parseValue(text) {\r\n        let filteredText = text\r\n                            .replace(this._suffix, '')\r\n                            .replace(this._prefix, '')\r\n                            .trim()\r\n                            .replace(/\\s/g, '')\r\n                            .replace(this._currency, '')\r\n                            .replace(this._group, '')\r\n                            .replace(this._minusSign, '-')\r\n                            .replace(this._decimal, '.')\r\n                            .replace(this._numeral, this._index);\r\n\r\n        if (filteredText) {\r\n            if (filteredText === '-') // Minus sign\r\n                return filteredText;\r\n\r\n            let parsedValue = +filteredText;\r\n            return isNaN(parsedValue) ? null : parsedValue;\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    repeat(event, interval, dir) {\r\n        let i = interval || 500;\r\n\r\n        this.clearTimer();\r\n        this.timer = setTimeout(() => {\r\n            this.repeat(event, 40, dir);\r\n        }, i);\r\n\r\n        this.spin(event, dir);\r\n    }\r\n\r\n    spin(event, dir) {\r\n        let step = this.props.step * dir;\r\n        let currentValue = this.parseValue(this.inputEl.value) || 0;\r\n        let newValue = this.validateValue(currentValue + step);\r\n\r\n        this.updateInput(newValue, null, 'spin');\r\n        this.updateModel(event, newValue);\r\n\r\n        this.handleOnChange(event, currentValue, newValue);\r\n    }\r\n\r\n    onUpButtonMouseDown(event) {\r\n        if (!this.props.disabled) {\r\n            this.inputEl.focus();\r\n            this.repeat(event, null, 1);\r\n            event.preventDefault();\r\n        }\r\n    }\r\n\r\n    onUpButtonMouseUp() {\r\n        if (!this.props.disabled) {\r\n            this.clearTimer();\r\n        }\r\n    }\r\n\r\n    onUpButtonMouseLeave() {\r\n        if (!this.props.disabled) {\r\n            this.clearTimer();\r\n        }\r\n    }\r\n\r\n    onUpButtonKeyUp() {\r\n        if (!this.props.disabled) {\r\n            this.clearTimer();\r\n        }\r\n    }\r\n\r\n    onUpButtonKeyDown(event) {\r\n        if (event.keyCode === 32 || event.keyCode === 13) {\r\n            this.repeat(event, null, 1);\r\n        }\r\n    }\r\n\r\n    onDownButtonMouseDown(event, focusInput) {\r\n        if (!this.props.disabled) {\r\n            this.inputEl.focus();\r\n            this.repeat(event, null, -1);\r\n\r\n            event.preventDefault();\r\n        }\r\n    }\r\n\r\n    onDownButtonMouseUp() {\r\n        if (!this.props.disabled) {\r\n            this.clearTimer();\r\n        }\r\n    }\r\n\r\n    onDownButtonMouseLeave() {\r\n        if (!this.props.disabled) {\r\n            this.clearTimer();\r\n        }\r\n    }\r\n\r\n    onDownButtonKeyUp() {\r\n        if (!this.props.disabled) {\r\n            this.clearTimer();\r\n        }\r\n    }\r\n\r\n    onDownButtonKeyDown(event) {\r\n        if (event.keyCode === 32 || event.keyCode === 13) {\r\n            this.repeat(event, null, -1);\r\n        }\r\n    }\r\n\r\n    onInput(event) {\r\n        if (this.isSpecialChar) {\r\n            event.target.value = this.lastValue;\r\n        }\r\n        this.isSpecialChar = false;\r\n    }\r\n\r\n    onInputKeyDown(event) {\r\n        this.lastValue = event.target.value;\r\n        if (event.shiftKey || event.altKey) {\r\n            this.isSpecialChar = true;\r\n            return;\r\n        }\r\n\r\n        let selectionStart = event.target.selectionStart;\r\n        let selectionEnd = event.target.selectionEnd;\r\n        let inputValue = event.target.value;\r\n        let newValueStr = null;\r\n\r\n        if (event.altKey) {\r\n            event.preventDefault();\r\n        }\r\n\r\n        switch (event.which) {\r\n            //up\r\n            case 38:\r\n                this.spin(event, 1);\r\n                event.preventDefault();\r\n            break;\r\n\r\n            //down\r\n            case 40:\r\n                this.spin(event, -1);\r\n                event.preventDefault();\r\n            break;\r\n\r\n            //left\r\n            case 37:\r\n                let prevChar = inputValue.charAt(selectionStart - 1);\r\n                if (!this.isNumeralChar(prevChar)) {\r\n                    event.preventDefault();\r\n                }\r\n            break;\r\n\r\n            //right\r\n            case 39:\r\n                let currentChar = inputValue.charAt(selectionStart);\r\n                if (!this.isNumeralChar(currentChar)) {\r\n                    event.preventDefault();\r\n                }\r\n            break;\r\n\r\n            //enter\r\n            case 13:\r\n                newValueStr = this.validateValue(this.parseValue(inputValue));\r\n                this.inputEl.value = this.formatValue(newValueStr);\r\n                this.inputEl.setAttribute('aria-valuenow', newValueStr);\r\n                this.updateModel(event, newValueStr);\r\n            break;\r\n\r\n            //backspace\r\n            case 8:\r\n                event.preventDefault();\r\n\r\n                if (selectionStart === selectionEnd) {\r\n                    let deleteChar = inputValue.charAt(selectionStart - 1);\r\n                    let decimalCharIndex = inputValue.search(this._decimal);\r\n                    this._decimal.lastIndex = 0;\r\n\r\n                    if (this.isNumeralChar(deleteChar)) {\r\n                        if (this._group.test(deleteChar)) {\r\n                            this._group.lastIndex = 0;\r\n                            newValueStr = inputValue.slice(0, selectionStart - 2) + inputValue.slice(selectionStart - 1);\r\n                        }\r\n                        else if (this._decimal.test(deleteChar)) {\r\n                            this._decimal.lastIndex = 0;\r\n                            this.inputEl.setSelectionRange(selectionStart - 1, selectionStart - 1);\r\n                        }\r\n                        else if (decimalCharIndex > 0 && selectionStart > decimalCharIndex) {\r\n                            newValueStr = inputValue.slice(0, selectionStart - 1) + '0' + inputValue.slice(selectionStart);\r\n                        }\r\n                        else if (decimalCharIndex > 0 && decimalCharIndex === 1) {\r\n                            newValueStr = inputValue.slice(0, selectionStart - 1) + '0' + inputValue.slice(selectionStart);\r\n                            newValueStr = this.parseValue(newValueStr) > 0 ? newValueStr : '';\r\n                        }\r\n                        else {\r\n                            newValueStr = inputValue.slice(0, selectionStart - 1) + inputValue.slice(selectionStart);\r\n                        }\r\n                    }\r\n\r\n                    this.updateValue(event, newValueStr, null, 'delete-single');\r\n                }\r\n                else {\r\n                    newValueStr = this.deleteRange(inputValue, selectionStart, selectionEnd);\r\n                    this.updateValue(event, newValueStr, null, 'delete-range');\r\n                }\r\n            break;\r\n\r\n            // del\r\n            case 46:\r\n                event.preventDefault();\r\n\r\n                if (selectionStart === selectionEnd) {\r\n                    let deleteChar = inputValue.charAt(selectionStart);\r\n                    let decimalCharIndex = inputValue.search(this._decimal);\r\n                    this._decimal.lastIndex = 0;\r\n\r\n                    if (this.isNumeralChar(deleteChar)) {\r\n                        if (this._group.test(deleteChar)) {\r\n                            this._group.lastIndex = 0;\r\n                            newValueStr = inputValue.slice(0, selectionStart) + inputValue.slice(selectionStart + 2);\r\n                        }\r\n                        else if (this._decimal.test(deleteChar)) {\r\n                            this._decimal.lastIndex = 0;\r\n                            this.inputEl.setSelectionRange(selectionStart + 1, selectionStart + 1);\r\n                        }\r\n                        else if (decimalCharIndex > 0 && selectionStart > decimalCharIndex) {\r\n                            newValueStr = inputValue.slice(0, selectionStart) + '0' + inputValue.slice(selectionStart + 1);\r\n                        }\r\n                        else if (decimalCharIndex > 0 && decimalCharIndex === 1) {\r\n                            newValueStr = inputValue.slice(0, selectionStart) + '0' + inputValue.slice(selectionStart + 1);\r\n                            newValueStr = this.parseValue(newValueStr) > 0 ? newValueStr : '';\r\n                        }\r\n                        else {\r\n                            newValueStr = inputValue.slice(0, selectionStart) + inputValue.slice(selectionStart + 1);\r\n                        }\r\n                    }\r\n\r\n                    this.updateValue(event, newValueStr, null, 'delete-back-single');\r\n                }\r\n                else {\r\n                    newValueStr = this.deleteRange(inputValue, selectionStart, selectionEnd);\r\n                    this.updateValue(event, newValueStr, null, 'delete-range');\r\n                }\r\n            break;\r\n\r\n            default:\r\n            break;\r\n        }\r\n\r\n        if (this.props.onKeyDown) {\r\n            this.props.onKeyDown(event);\r\n        }\r\n    }\r\n\r\n    onInputKeyPress(event) {\r\n        event.preventDefault();\r\n        let code = event.which || event.keyCode;\r\n        let char = String.fromCharCode(code);\r\n        const isDecimalSign = this.isDecimalSign(char);\r\n        const isMinusSign = this.isMinusSign(char);\r\n\r\n        if ((48 <= code && code <= 57) || isMinusSign || isDecimalSign) {\r\n            this.insert(event, char, { isDecimalSign, isMinusSign });\r\n        }\r\n    }\r\n\r\n    onPaste(event) {\r\n        event.preventDefault();\r\n        let data = (event.clipboardData || window['clipboardData']).getData('Text');\r\n        if (data) {\r\n            let filteredData = this.parseValue(data);\r\n            if (filteredData != null) {\r\n                this.insert(event, filteredData.toString());\r\n            }\r\n        }\r\n    }\r\n\r\n    allowMinusSign() {\r\n        return this.props.min === null || this.props.min < 0;\r\n    }\r\n\r\n    isMinusSign(char) {\r\n        if (this._minusSign.test(char)) {\r\n            this._minusSign.lastIndex = 0;\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    isDecimalSign(char) {\r\n        if (this._decimal.test(char)) {\r\n            this._decimal.lastIndex = 0;\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    insert(event, text, sign = { isDecimalSign: false, isMinusSign: false }) {\r\n        const minusCharIndexOnText = text.search(this._minusSign);\r\n        this._minusSign.lastIndex = 0;\r\n        if (!this.allowMinusSign() && minusCharIndexOnText !== -1) {\r\n            return;\r\n        }\r\n\r\n        const selectionStart = this.inputEl.selectionStart;\r\n        const selectionEnd = this.inputEl.selectionEnd;\r\n        let inputValue = this.inputEl.value.trim();\r\n        const decimalCharIndex = inputValue.search(this._decimal);\r\n        this._decimal.lastIndex = 0;\r\n        const minusCharIndex = inputValue.search(this._minusSign);\r\n        this._minusSign.lastIndex = 0;\r\n        let newValueStr;\r\n\r\n        if (sign.isMinusSign) {\r\n            if (selectionStart === 0) {\r\n                newValueStr = inputValue;\r\n                if (minusCharIndex === -1 || selectionEnd !== 0) {\r\n                    newValueStr = this.insertText(inputValue, text, 0, selectionEnd);\r\n                }\r\n\r\n                this.updateValue(event, newValueStr, text, 'insert');\r\n            }\r\n        }\r\n        else if (sign.isDecimalSign) {\r\n            if (decimalCharIndex > 0 && selectionStart === decimalCharIndex) {\r\n                this.updateValue(event, inputValue, text, 'insert');\r\n            }\r\n            else if (decimalCharIndex > selectionStart && decimalCharIndex < selectionEnd) {\r\n                newValueStr = this.insertText(inputValue, text, selectionStart, selectionEnd);\r\n                this.updateValue(event, newValueStr, text, 'insert');\r\n            }\r\n        }\r\n        else {\r\n            const maxFractionDigits = this.numberFormat.resolvedOptions().maximumFractionDigits;\r\n            const operation = selectionStart !== selectionEnd ? 'range-insert' : 'insert';\r\n\r\n            if (decimalCharIndex > 0 && selectionStart > decimalCharIndex) {\r\n                if ((selectionStart + text.length - (decimalCharIndex + 1)) <= maxFractionDigits) {\r\n                    newValueStr = inputValue.slice(0, selectionStart) + text + inputValue.slice(selectionStart + text.length);\r\n                    this.updateValue(event, newValueStr, text, operation);\r\n                }\r\n            }\r\n            else {\r\n                newValueStr = this.insertText(inputValue, text, selectionStart, selectionEnd);\r\n                this.updateValue(event, newValueStr, text, operation);\r\n            }\r\n        }\r\n    }\r\n\r\n    insertText(value, text, start, end) {\r\n        let textSplit = text.split('.');\r\n\r\n        if (textSplit.length === 2) {\r\n            const decimalCharIndex = value.slice(start, end).search(this._decimal);\r\n            this._decimal.lastIndex = 0;\r\n            return (decimalCharIndex > 0) ? value.slice(0, start) + this.formatValue(text) + value.slice(end) : (value || this.formatValue(text));\r\n        }\r\n        else if ((end - start) === value.length) {\r\n            return this.formatValue(text);\r\n        }\r\n        else if (start === 0) {\r\n            return text + value.slice(end);\r\n        }\r\n        else if (end === value.length) {\r\n            return value.slice(0, start) + text;\r\n        }\r\n        else {\r\n            return value.slice(0, start) + text + value.slice(end);\r\n        }\r\n    }\r\n\r\n    deleteRange(value, start, end) {\r\n        let newValueStr;\r\n\r\n        if ((end - start) === value.length)\r\n            newValueStr = '';\r\n        else if (start === 0)\r\n            newValueStr = value.slice(end);\r\n        else if (end === value.length)\r\n            newValueStr = value.slice(0, start);\r\n        else\r\n            newValueStr = value.slice(0, start) + value.slice(end);\r\n\r\n        return newValueStr;\r\n    }\r\n\r\n    initCursor() {\r\n        let selectionStart = this.inputEl.selectionStart;\r\n        let inputValue = this.inputEl.value;\r\n        let valueLength = inputValue.length;\r\n        let index = null;\r\n\r\n        let char = inputValue.charAt(selectionStart);\r\n        if (this.isNumeralChar(char)) {\r\n            return;\r\n        }\r\n\r\n        //left\r\n        let i = selectionStart - 1;\r\n        while (i >= 0) {\r\n            char = inputValue.charAt(i);\r\n            if (this.isNumeralChar(char)) {\r\n                index = i;\r\n                break;\r\n            }\r\n            else {\r\n                i--;\r\n            }\r\n        }\r\n\r\n        if (index !== null) {\r\n            this.inputEl.setSelectionRange(index + 1, index + 1);\r\n        }\r\n        else {\r\n            i = selectionStart + 1;\r\n            while (i < valueLength) {\r\n                char = inputValue.charAt(i);\r\n                if (this.isNumeralChar(char)) {\r\n                    index = i;\r\n                    break;\r\n                }\r\n                else {\r\n                    i++;\r\n                }\r\n            }\r\n\r\n            if (index !== null) {\r\n                this.inputEl.setSelectionRange(index, index);\r\n            }\r\n        }\r\n    }\r\n\r\n    onInputClick() {\r\n        this.initCursor();\r\n    }\r\n\r\n    isNumeralChar(char) {\r\n        if (char.length === 1 && (this._numeral.test(char) || this._decimal.test(char) || this._group.test(char) || this._minusSign.test(char))) {\r\n            this.resetRegex();\r\n            return true;\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    resetRegex() {\r\n        this._numeral.lastIndex =  0;\r\n        this._decimal.lastIndex =  0;\r\n        this._group.lastIndex =  0;\r\n        this._minusSign.lastIndex =  0;\r\n    }\r\n\r\n    updateValue(event, valueStr, insertedValueStr, operation) {\r\n        let currentValue = this.inputEl.value;\r\n        let newValue = null;\r\n\r\n        if (valueStr != null) {\r\n            newValue = this.parseValue(valueStr);\r\n            this.updateInput(newValue, insertedValueStr, operation);\r\n        }\r\n\r\n        this.handleOnChange(event, currentValue, newValue);\r\n    }\r\n\r\n    handleOnChange(event, currentValue, newValue) {\r\n        if (this.props.onChange && this.isValueChanged(currentValue, newValue)) {\r\n            this.props.onChange({\r\n                originalEvent: event,\r\n                value: newValue\r\n            });\r\n        }\r\n    }\r\n\r\n    isValueChanged(currentValue, newValue) {\r\n        if (newValue === null && currentValue !== null) {\r\n            return true;\r\n        }\r\n\r\n        if (newValue != null) {\r\n            let parsedCurrentValue = (typeof currentValue === 'string') ? this.parseValue(currentValue) : currentValue;\r\n            return newValue !== parsedCurrentValue;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    validateValue(value) {\r\n        if (this.props.min !== null && value < this.props.min) {\r\n            return this.props.min;\r\n        }\r\n\r\n        if (this.props.max !== null && value > this.props.max) {\r\n            return this.props.max;\r\n        }\r\n\r\n        if (value === '-') { // Minus sign\r\n            return null;\r\n        }\r\n\r\n        return value;\r\n    }\r\n\r\n    updateInput(value, insertedValueStr, operation) {\r\n        insertedValueStr = insertedValueStr || '';\r\n\r\n        let inputValue = this.inputEl.value;\r\n        let newValue = this.formatValue(value);\r\n        let currentLength = inputValue.length;\r\n\r\n        if (currentLength === 0) {\r\n            this.inputEl.value = newValue;\r\n            this.inputEl.setSelectionRange(0, 0);\r\n            this.initCursor();\r\n            const prefixLength = (this.prefixChar || '').length;\r\n            const selectionEnd = prefixLength + insertedValueStr.length;\r\n            this.inputEl.setSelectionRange(selectionEnd, selectionEnd);\r\n        }\r\n        else {\r\n            let selectionStart = this.inputEl.selectionStart;\r\n            let selectionEnd = this.inputEl.selectionEnd;\r\n            this.inputEl.value = newValue;\r\n            let newLength = newValue.length;\r\n\r\n            if (operation === 'range-insert') {\r\n                const startValue = this.parseValue((inputValue || '').slice(0, selectionStart));\r\n                const startValueStr = startValue !== null ? startValue.toString() : '';\r\n                const startExpr = startValueStr.split('').join(`(${this.groupChar})?`);\r\n                const sRegex = new RegExp(startExpr, 'g');\r\n                sRegex.test(newValue);\r\n\r\n                const tExpr = insertedValueStr.split('').join(`(${this.groupChar})?`);\r\n                const tRegex = new RegExp(tExpr, 'g');\r\n                tRegex.test(newValue.slice(sRegex.lastIndex));\r\n\r\n                selectionEnd = sRegex.lastIndex + tRegex.lastIndex;\r\n                this.inputEl.setSelectionRange(selectionEnd, selectionEnd);\r\n            }\r\n            else if (newLength === currentLength) {\r\n                if (operation === 'insert' || operation === 'delete-back-single')\r\n                    this.inputEl.setSelectionRange(selectionEnd + 1, selectionEnd + 1);\r\n                else if (operation === 'delete-single')\r\n                    this.inputEl.setSelectionRange(selectionEnd - 1, selectionEnd - 1);\r\n                else if (operation === 'delete-range' || operation === 'spin')\r\n                    this.inputEl.setSelectionRange(selectionEnd, selectionEnd);\r\n            }\r\n            else if (operation === 'delete-back-single') {\r\n                let prevChar = inputValue.charAt(selectionEnd - 1);\r\n                let nextChar = inputValue.charAt(selectionEnd);\r\n                let diff = currentLength - newLength;\r\n                let isGroupChar = this._group.test(nextChar);\r\n\r\n                if (isGroupChar && diff === 1) {\r\n                    selectionEnd += 1;\r\n                }\r\n                else if (!isGroupChar && this.isNumeralChar(prevChar)) {\r\n                    selectionEnd += (-1 * diff) + 1;\r\n                }\r\n\r\n                this._group.lastIndex = 0;\r\n                this.inputEl.setSelectionRange(selectionEnd, selectionEnd);\r\n            }\r\n            else if (inputValue === '-' && operation === 'insert') {\r\n                this.inputEl.setSelectionRange(selectionEnd + 1, selectionEnd + 1);\r\n            }\r\n            else {\r\n                selectionEnd = selectionEnd + (newLength - currentLength);\r\n                this.inputEl.setSelectionRange(selectionEnd, selectionEnd);\r\n            }\r\n        }\r\n\r\n        this.inputEl.setAttribute('aria-valuenow', value);\r\n    }\r\n\r\n    updateInputValue(newValue) {\r\n        this.inputEl.value = this.formatValue(newValue);\r\n        this.inputEl.setAttribute('aria-valuenow', newValue);\r\n    }\r\n\r\n    updateModel(event, value) {\r\n        if (this.props.onValueChange) {\r\n            this.props.onValueChange({\r\n                originalEvent: event,\r\n                value: value,\r\n                stopPropagation : () =>{},\r\n                preventDefault : () =>{},\r\n                target: {\r\n                    name: this.props.name,\r\n                    id: this.props.id,\r\n                    value: value\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    onInputFocus(event) {\r\n        event.persist();\r\n        this.setState({ focused: true }, () => {\r\n            if (this.props.onFocus) {\r\n                this.props.onFocus(event);\r\n            }\r\n        });\r\n    }\r\n\r\n    onInputBlur(event) {\r\n        event.persist();\r\n        this.setState({ focused: false }, () => {\r\n            let newValue = this.validateValue(this.parseValue(this.inputEl.value));\r\n            this.updateInputValue(newValue);\r\n            this.updateModel(event, newValue);\r\n\r\n            if (this.props.onBlur) {\r\n                this.props.onBlur(event);\r\n            }\r\n        });\r\n    }\r\n\r\n    clearTimer() {\r\n        if (this.timer) {\r\n            clearInterval(this.timer);\r\n        }\r\n    }\r\n\r\n    isStacked() {\r\n        return this.props.showButtons && this.props.buttonLayout === 'stacked';\r\n    }\r\n\r\n    isHorizontal() {\r\n        return this.props.showButtons && this.props.buttonLayout === 'horizontal';\r\n    }\r\n\r\n    isVertical() {\r\n        return this.props.showButtons && this.props.buttonLayout === 'vertical';\r\n    }\r\n\r\n    getInputMode() {\r\n        return this.props.inputMode || ((this.props.mode === 'decimal' && !this.props.minFractionDigits) ? 'numeric' : 'decimal');\r\n    }\r\n\r\n    componentDidMount() {\r\n        if (this.props.tooltip) {\r\n            this.renderTooltip();\r\n        }\r\n\r\n        const newValue = this.validateValue(this.props.value);\r\n        if (this.props.value !== newValue) {\r\n            this.updateModel(null, newValue);\r\n        }\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if (prevProps.tooltip !== this.props.tooltip || prevProps.tooltipOptions !== this.props.tooltipOptions) {\r\n            if (this.tooltip)\r\n                this.tooltip.update({ content: this.props.tooltip, ...(this.props.tooltipOptions || {}) });\r\n            else\r\n                this.renderTooltip();\r\n        }\r\n\r\n        const isOptionChanged = this.isOptionChanged(prevProps);\r\n        if (isOptionChanged) {\r\n            this.constructParser();\r\n        }\r\n\r\n        if (prevProps.value !== this.props.value || isOptionChanged) {\r\n            const newValue = this.validateValue(this.props.value);\r\n            this.updateInputValue(newValue);\r\n\r\n            if (this.props.value !== newValue) {\r\n                this.updateModel(null, newValue);\r\n            }\r\n        }\r\n    }\r\n\r\n    isOptionChanged(prevProps) {\r\n        const optionProps = ['locale', 'localeMatcher', 'mode', 'currency', 'currencyDisplay', 'useGrouping', 'minFractionDigits', 'maxFractionDigits', 'suffix', 'prefix'];\r\n        return optionProps.some((option) => prevProps[option] !== this.props[option]);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        if (this.tooltip) {\r\n            this.tooltip.destroy();\r\n            this.tooltip = null;\r\n        }\r\n    }\r\n\r\n    renderTooltip() {\r\n        this.tooltip = tip({\r\n            target: this.element,\r\n            content: this.props.tooltip,\r\n            options: this.props.tooltipOptions\r\n        });\r\n    }\r\n\r\n    renderInputElement() {\r\n        const className = classNames('p-inputnumber-input', this.props.inputClassName);\r\n        const valueToRender = this.formatValue(this.props.value);\r\n\r\n        return (\r\n            <InputText ref={(el) => this.inputEl = el} id={this.props.inputId} style={this.props.inputStyle} role=\"spinbutton\"\r\n                       className={className} defaultValue={valueToRender} type={this.props.type} size={this.props.size} tabIndex={this.props.tabIndex} inputMode={this.getInputMode()}\r\n                       maxLength={this.props.maxlength} disabled={this.props.disabled} required={this.props.required} pattern={this.props.pattern}\r\n                       placeholder={this.props.placeholder} readOnly={this.props.readOnly} name={this.props.name} autoFocus={this.props.autoFocus}\r\n                       onKeyDown={this.onInputKeyDown} onKeyPress={this.onInputKeyPress} onInput={this.onInput} onClick={this.onInputClick}\r\n                       onBlur={this.onInputBlur} onFocus={this.onInputFocus} onPaste={this.onPaste} min={this.props.min} max={this.props.max}\r\n                       aria-valuemin={this.props.min} aria-valuemax={this.props.max} aria-valuenow={this.props.value} aria-labelledby={this.props.ariaLabelledBy} />\r\n        );\r\n    }\r\n\r\n    renderUpButton() {\r\n        const className = classNames('p-inputnumber-button p-inputnumber-button-up p-button p-button-icon-only p-component', {\r\n            'p-disabled': this.props.disabled\r\n        }, this.props.incrementButtonClassName);\r\n        const icon = classNames('p-button-icon', this.props.incrementButtonIcon);\r\n\r\n        return (\r\n            <button type=\"button\" className={className} onMouseLeave={this.onUpButtonMouseLeave} onMouseDown={this.onUpButtonMouseDown} onMouseUp={this.onUpButtonMouseUp}\r\n                onKeyDown={this.onUpButtonKeyDown} onKeyUp={this.onUpButtonKeyUp} disabled={this.props.disabled} tabIndex={-1}>\r\n                <span className={icon}></span>\r\n                <Ripple />\r\n            </button>\r\n        );\r\n    }\r\n\r\n    renderDownButton() {\r\n        const className = classNames('p-inputnumber-button p-inputnumber-button-down p-button p-button-icon-only p-component', {\r\n            'p-disabled': this.props.disabled\r\n        }, this.props.decrementButtonClassName);\r\n        const icon = classNames('p-button-icon', this.props.decrementButtonIcon);\r\n\r\n        return (\r\n            <button type=\"button\" className={className} onMouseLeave={this.onDownButtonMouseLeave} onMouseDown={this.onDownButtonMouseDown} onMouseUp={this.onDownButtonMouseUp}\r\n                onKeyDown={this.onDownButtonKeyDown} onKeyUp={this.onDownButtonKeyUp} disabled={this.props.disabled} tabIndex={-1}>\r\n                <span className={icon}></span>\r\n                <Ripple />\r\n            </button>\r\n        );\r\n    }\r\n\r\n    renderButtonGroup() {\r\n        const upButton = this.props.showButtons && this.renderUpButton();\r\n        const downButton = this.props.showButtons && this.renderDownButton();\r\n\r\n        if (this.isStacked()) {\r\n            return (\r\n                <span className=\"p-inputnumber-button-group\">\r\n                    {upButton}\r\n                    {downButton}\r\n                </span>\r\n            )\r\n        }\r\n\r\n        return (\r\n            <>\r\n                {upButton}\r\n                {downButton}\r\n            </>\r\n        )\r\n    }\r\n\r\n    render() {\r\n        const className = classNames('p-inputnumber p-component', this.props.className, {\r\n                'p-inputwrapper-filled': this.props.value != null && this.props.value.toString().length > 0,\r\n                'p-inputwrapper-focus': this.state.focused,\r\n                'p-inputnumber-buttons-stacked': this.isStacked(),\r\n                'p-inputnumber-buttons-horizontal': this.isHorizontal(),\r\n                'p-inputnumber-buttons-vertical': this.isVertical()\r\n        });\r\n        const inputElement = this.renderInputElement();\r\n        const buttonGroup = this.renderButtonGroup();\r\n\r\n        return (\r\n            <span ref={(el) => this.element = el} id={this.props.id} className={className} style={this.props.style}>\r\n                {inputElement}\r\n                {buttonGroup}\r\n            </span>\r\n        );\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}