{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\zura.ph\\\\WebstormProjects\\\\zz-regul\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\zura.ph\\\\WebstormProjects\\\\zz-regul\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _inherits from \"C:\\\\Users\\\\zura.ph\\\\WebstormProjects\\\\zz-regul\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _createSuper from \"C:\\\\Users\\\\zura.ph\\\\WebstormProjects\\\\zz-regul\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"C:\\\\Users\\\\zura.ph\\\\WebstormProjects\\\\zz-regul\\\\src\\\\showcase\\\\gmap\\\\GMapDoc.js\";\nimport React, { Component } from 'react';\nimport { TabView, TabPanel } from '../../components/tabview/TabView';\nimport { CodeHighlight } from '../codehighlight/CodeHighlight';\nexport var GMapDoc = /*#__PURE__*/function (_Component) {\n  _inherits(GMapDoc, _Component);\n\n  var _super = _createSuper(GMapDoc);\n\n  function GMapDoc() {\n    _classCallCheck(this, GMapDoc);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(GMapDoc, [{\n    key: \"shouldComponentUpdate\",\n    value: function shouldComponentUpdate() {\n      return false;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"content-section documentation\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 13,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(TabView, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 14,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(TabPanel, {\n        header: \"Documentation\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 15,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(\"h5\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 16,\n          columnNumber: 25\n        }\n      }, \"Import\"), /*#__PURE__*/React.createElement(CodeHighlight, {\n        lang: \"js\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 17,\n          columnNumber: 1\n        }\n      }, \"\\nimport { GMap } from 'primereact/gmap';\\n\"), /*#__PURE__*/React.createElement(\"h5\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 23,\n          columnNumber: 13\n        }\n      }, \"Getting Started\"), /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 24,\n          columnNumber: 13\n        }\n      }, \"A map is initialized with options and dimensions. Refer to the google maps api for the list of available options.\"), /*#__PURE__*/React.createElement(CodeHighlight, {\n        lang: \"js\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 26,\n          columnNumber: 1\n        }\n      }, \"\\nconst options = {\\n    center: {lat: 36.890257, lng: 30.707417},\\n    zoom: 12\\n};\\n\\nreturn (\\n    <GMap options={options} style={{width: '100%', minHeight: '320px'}} />\\n)\\n\"), /*#__PURE__*/React.createElement(\"h5\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 13\n        }\n      }, \"Overlays\"), /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 13\n        }\n      }, \"GMap can display any type of overlay such as markers, polygons and circles. Overlay instances are bound using the overlays property array. Overlays are aware of binding so whenever the array changes, gmap updates itself.\"), /*#__PURE__*/React.createElement(CodeHighlight, {\n        lang: \"js\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 1\n        }\n      }, \"\\nconst options = {\\n    center: {lat: 36.890257, lng: 30.707417},\\n    zoom: 12\\n};\\n\\nconst overlays = [\\n            new google.maps.Marker({position: {lat: 36.879466, lng: 30.667648}, title:\\\"Konyaalti\\\"}),\\n            new google.maps.Marker({position: {lat: 36.883707, lng: 30.689216}, title:\\\"Ataturk Park\\\"}),\\n            new google.maps.Marker({position: {lat: 36.885233, lng: 30.702323}, title:\\\"Oldtown\\\"}),\\n            new google.maps.Polygon({paths: [\\n                {lat: 36.9177, lng: 30.7854},{lat: 36.8851, lng: 30.7802},{lat: 36.8829, lng: 30.8111},{lat: 36.9177, lng: 30.8159}\\n            ], strokeOpacity: 0.5, strokeWeight: 1, fillColor: '#1976D2', fillOpacity: 0.35\\n            }),\\n            new google.maps.Circle({center: {lat: 36.90707, lng: 30.56533}, fillColor: '#1976D2', fillOpacity: 0.35, strokeWeight: 1, radius: 1500}),\\n            new google.maps.Polyline({path: [{lat: 36.86149, lng: 30.63743},{lat: 36.86341, lng: 30.72463}], geodesic: true, strokeColor: '#FF0000', strokeOpacity: 0.5, strokeWeight: 2})\\n        ];\\n\\nreturn (\\n    <GMap overlays={overlays} options={options} style={{width: '100%', minHeight: '320px'}} />\\n)\\n\"), /*#__PURE__*/React.createElement(\"h5\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 13\n        }\n      }, \"Events\"), /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 13\n        }\n      }, \"GMap provides common callbacks to hook into events including map click, overlay click and overlay dragging.\"), /*#__PURE__*/React.createElement(CodeHighlight, {\n        lang: \"js\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 1\n        }\n      }, \"\\nconst onMapClick = (event) => {\\n    //event: MouseEvent of Google Maps api\\n}\\n\\nconst onMapReady = (map) => {\\n    //map: Map instance\\n}\\n\\nconst options = {\\n    center: {lat: 36.890257, lng: 30.707417},\\n    zoom: 12\\n};\\n\\nlet overlays = [\\n            new google.maps.Marker({position: {lat: 36.879466, lng: 30.667648}, title:\\\"Konyaalti\\\"}),\\n            new google.maps.Marker({position: {lat: 36.883707, lng: 30.689216}, title:\\\"Ataturk Park\\\"}),\\n            new google.maps.Marker({position: {lat: 36.885233, lng: 30.702323}, title:\\\"Oldtown\\\"}),\\n            new google.maps.Polygon({paths: [\\n                {lat: 36.9177, lng: 30.7854},{lat: 36.8851, lng: 30.7802},{lat: 36.8829, lng: 30.8111},{lat: 36.9177, lng: 30.8159}\\n            ], strokeOpacity: 0.5, strokeWeight: 1, fillColor: '#1976D2', fillOpacity: 0.35\\n            }),\\n            new google.maps.Circle({center: {lat: 36.90707, lng: 30.56533}, fillColor: '#1976D2', fillOpacity: 0.35, strokeWeight: 1, radius: 1500}),\\n            new google.maps.Polyline({path: [{lat: 36.86149, lng: 30.63743},{lat: 36.86341, lng: 30.72463}], geodesic: true, strokeColor: '#FF0000', strokeOpacity: 0.5, strokeWeight: 2})\\n        ]\\n\\nreturn (\\n    <GMap overlays={overlays} options={options} style={{width: '100%', minHeight: '320px'}} onMapReady={onMapReady} onMapClick={onMapClick} />\\n)\\n\"), /*#__PURE__*/React.createElement(\"h5\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 13\n        }\n      }, \"Google Maps API\"), /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 13\n        }\n      }, \"In case you need to access the map instance directly, use the getMap() method. In the following example, this.gmap.getMap() will provide the map instance. Alternative is using onMapReady event as it passes the map instance as a parameter.\"), /*#__PURE__*/React.createElement(CodeHighlight, {\n        lang: \"js\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 1\n        }\n      }, \"\\nconst options = {\\n    center: {lat: 36.890257, lng: 30.707417},\\n    zoom: 12\\n};\\n\\nreturn (\\n    <GMap ref={gmap} options={options} style={{width: '100%', minHeight: '320px'}} />\\n)\\n\"), /*#__PURE__*/React.createElement(\"h5\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 13\n        }\n      }, \"Properties\"), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"doc-tablewrapper\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"table\", {\n        className: \"doc-table\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"thead\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(\"tr\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(\"th\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 25\n        }\n      }, \"Name\"), /*#__PURE__*/React.createElement(\"th\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 25\n        }\n      }, \"Type\"), /*#__PURE__*/React.createElement(\"th\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 25\n        }\n      }, \"Default\"), /*#__PURE__*/React.createElement(\"th\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 25\n        }\n      }, \"Description\"))), /*#__PURE__*/React.createElement(\"tbody\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(\"tr\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 29\n        }\n      }, \"options\"), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 29\n        }\n      }, \"object\"), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 29\n        }\n      }, \"null\"), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 29\n        }\n      }, \"Google Maps API configuration object.\")), /*#__PURE__*/React.createElement(\"tr\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 140,\n          columnNumber: 29\n        }\n      }, \"overlays\"), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 29\n        }\n      }, \"array\"), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 29\n        }\n      }, \"null\"), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 29\n        }\n      }, \"An array of overlays to display.\")), /*#__PURE__*/React.createElement(\"tr\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 29\n        }\n      }, \"style\"), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 29\n        }\n      }, \"string\"), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 148,\n          columnNumber: 29\n        }\n      }, \"null\"), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 29\n        }\n      }, \"Inline style of the component.\")), /*#__PURE__*/React.createElement(\"tr\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 151,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 29\n        }\n      }, \"className\"), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 29\n        }\n      }, \"string\"), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 154,\n          columnNumber: 29\n        }\n      }, \"null\"), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 29\n        }\n      }, \"Style class of the component.\"))))), /*#__PURE__*/React.createElement(\"h5\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 161,\n          columnNumber: 13\n        }\n      }, \"Events\"), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"doc-tablewrapper\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 162,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"table\", {\n        className: \"doc-table\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 163,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"thead\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 164,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(\"tr\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 165,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(\"th\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 166,\n          columnNumber: 29\n        }\n      }, \"Name\"), /*#__PURE__*/React.createElement(\"th\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 167,\n          columnNumber: 29\n        }\n      }, \"Parameters\"), /*#__PURE__*/React.createElement(\"th\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 168,\n          columnNumber: 29\n        }\n      }, \"Description\"))), /*#__PURE__*/React.createElement(\"tbody\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 171,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(\"tr\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 172,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 173,\n          columnNumber: 29\n        }\n      }, \"onMapClick\"), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 174,\n          columnNumber: 29\n        }\n      }, \"event: Google Maps MouseEvent\"), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 175,\n          columnNumber: 29\n        }\n      }, \"Callback to invoke when map is clicked except markers.\")), /*#__PURE__*/React.createElement(\"tr\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 177,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 178,\n          columnNumber: 29\n        }\n      }, \"onMapDragEnd\"), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 179,\n          columnNumber: 29\n        }\n      }, \"-\"), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 180,\n          columnNumber: 29\n        }\n      }, \"Callback to invoke when map drag (i.e. pan) has ended.\")), /*#__PURE__*/React.createElement(\"tr\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 182,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 183,\n          columnNumber: 29\n        }\n      }, \"onMapReady\"), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 184,\n          columnNumber: 29\n        }\n      }, \"event.map: Google Maps Instance\"), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 185,\n          columnNumber: 29\n        }\n      }, \"Callback to invoke when the map is ready to be used.\")), /*#__PURE__*/React.createElement(\"tr\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 187,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 188,\n          columnNumber: 29\n        }\n      }, \"onOverlayClick\"), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 189,\n          columnNumber: 29\n        }\n      }, \"originalEvent: Google Maps MouseEvent \", /*#__PURE__*/React.createElement(\"br\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 189,\n          columnNumber: 71\n        }\n      }), \"overlay: Clicked overlay \", /*#__PURE__*/React.createElement(\"br\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 190,\n          columnNumber: 58\n        }\n      }), \"map: Map instance \", /*#__PURE__*/React.createElement(\"br\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 191,\n          columnNumber: 51\n        }\n      })), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 192,\n          columnNumber: 29\n        }\n      }, \"Callback to invoke when an overlay is clicked.\")), /*#__PURE__*/React.createElement(\"tr\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 194,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 195,\n          columnNumber: 29\n        }\n      }, \"onOverlayDragStart\"), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 196,\n          columnNumber: 29\n        }\n      }, \"event: Google Maps MouseEvent\"), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 197,\n          columnNumber: 29\n        }\n      }, \"Callback to invoke when an overlay drag starts.\")), /*#__PURE__*/React.createElement(\"tr\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 199,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 200,\n          columnNumber: 29\n        }\n      }, \"onOverlayDrag\"), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 201,\n          columnNumber: 29\n        }\n      }, \"event: Google Maps MouseEvent\"), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 202,\n          columnNumber: 29\n        }\n      }, \"Callback to invoke when an overlay is being dragged.\")), /*#__PURE__*/React.createElement(\"tr\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 204,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 205,\n          columnNumber: 29\n        }\n      }, \"onOverlayDragEnd\"), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 206,\n          columnNumber: 29\n        }\n      }, \"event: Google Maps MouseEvent\"), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 207,\n          columnNumber: 29\n        }\n      }, \"Callback to invoke when an overlay drag ends.\")), /*#__PURE__*/React.createElement(\"tr\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 209,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 210,\n          columnNumber: 29\n        }\n      }, \"onZoomChanged\"), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 211,\n          columnNumber: 29\n        }\n      }, \"-\"), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 212,\n          columnNumber: 29\n        }\n      }, \"Callback to invoke when zoom level has changed.\"))))), /*#__PURE__*/React.createElement(\"h5\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 218,\n          columnNumber: 13\n        }\n      }, \"Styling\"), /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 219,\n          columnNumber: 13\n        }\n      }, \"Component does not apply any styling.\"), /*#__PURE__*/React.createElement(\"h5\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 222,\n          columnNumber: 13\n        }\n      }, \"Dependencies\"), /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 223,\n          columnNumber: 13\n        }\n      }, \"Google Maps script.\")), /*#__PURE__*/React.createElement(TabPanel, {\n        header: \"Source\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 227,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(CodeHighlight, {\n        lang: \"js\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 228,\n          columnNumber: 1\n        }\n      }, \"\\n/*global google*/\\nimport React, { Component } from 'react';\\nimport { GMap } from 'primereact/gmap';\\nimport { Dialog } from 'primereact/dialog';\\nimport { InputText } from 'primereact/inputtext';\\nimport { Button } from 'primereact/button';\\nimport { Checkbox } from 'primereact/checkbox';\\nimport { Toast } from 'primereact/toast';\\nimport { loadGoogleMaps, removeGoogleMaps } from '../load/GoogleMaps';\\n\\nexport class GMapDemo extends Component {\\n\\n    constructor(props) {\\n        super(props);\\n\\n        this.state = {\\n            googleMapsReady: false,\\n            dialogVisible: false,\\n            markerTitle: '',\\n            draggableMarker: false,\\n            overlays: null,\\n            selectedPosition: null\\n        };\\n\\n        this.onMapClick = this.onMapClick.bind(this);\\n        this.onOverlayClick = this.onOverlayClick.bind(this);\\n        this.handleDragEnd = this.handleDragEnd.bind(this);\\n        this.onMapReady = this.onMapReady.bind(this);\\n        this.onHide = this.onHide.bind(this);\\n        this.addMarker = this.addMarker.bind(this);\\n    }\\n\\n    componentDidMount() {\\n        loadGoogleMaps(() => {\\n            this.setState({ googleMapsReady: true });\\n        });\\n    }\\n\\n    componentWillUnmount() {\\n        removeGoogleMaps();\\n    }\\n\\n    onMapClick(event) {\\n        this.setState({\\n            dialogVisible: true,\\n            selectedPosition: event.latLng\\n        });\\n    }\\n\\n    onOverlayClick(event) {\\n        let isMarker = event.overlay.getTitle !== undefined;\\n\\n        if(isMarker) {\\n            let title = event.overlay.getTitle();\\n            this.infoWindow = this.infoWindow||new google.maps.InfoWindow();\\n            this.infoWindow.setContent('<div>' + title + '</div>');\\n            this.infoWindow.open(event.map, event.overlay);\\n            event.map.setCenter(event.overlay.getPosition());\\n\\n            this.toast.show({severity:'info', summary:'Marker Selected', detail: title});\\n        }\\n        else {\\n            this.toast.show({severity:'info', summary:'Shape Selected', detail: ''});\\n        }\\n    }\\n\\n    handleDragEnd(event) {\\n        this.toast.show({severity:'info', summary:'Marker Dragged', detail: event.overlay.getTitle()});\\n    }\\n\\n    addMarker() {\\n        let newMarker = new google.maps.Marker({\\n                            position: {\\n                                lat: this.state.selectedPosition.lat(),\\n                                lng: this.state.selectedPosition.lng()\\n                            },\\n                            title: this.state.markerTitle,\\n                            draggable: this.state.draggableMarker\\n                        });\\n\\n        this.setState({\\n            overlays: [...this.state.overlays, newMarker],\\n            dialogVisible: false,\\n            draggableMarker: false,\\n            markerTitle: ''\\n        });\\n    }\\n\\n    onMapReady(event) {\\n        this.setState({\\n            overlays: [\\n                new google.maps.Marker({position: {lat: 36.879466, lng: 30.667648}, title:\\\"Konyaalti\\\"}),\\n                new google.maps.Marker({position: {lat: 36.883707, lng: 30.689216}, title:\\\"Ataturk Park\\\"}),\\n                new google.maps.Marker({position: {lat: 36.885233, lng: 30.702323}, title:\\\"Oldtown\\\"}),\\n                new google.maps.Polygon({paths: [\\n                    {lat: 36.9177, lng: 30.7854},{lat: 36.8851, lng: 30.7802},{lat: 36.8829, lng: 30.8111},{lat: 36.9177, lng: 30.8159}\\n                ], strokeOpacity: 0.5, strokeWeight: 1, fillColor: '#1976D2', fillOpacity: 0.35\\n                }),\\n                new google.maps.Circle({center: {lat: 36.90707, lng: 30.56533}, fillColor: '#1976D2', fillOpacity: 0.35, strokeWeight: 1, radius: 1500}),\\n                new google.maps.Polyline({path: [{lat: 36.86149, lng: 30.63743},{lat: 36.86341, lng: 30.72463}], geodesic: true, strokeColor: '#FF0000', strokeOpacity: 0.5, strokeWeight: 2})\\n            ]\\n        })\\n    }\\n\\n    onHide(event) {\\n        this.setState({dialogVisible: false});\\n    }\\n\\n    render() {\\n        const options = {\\n            center: {lat: 36.890257, lng: 30.707417},\\n            zoom: 12\\n        };\\n\\n        const footer = <div>\\n            <Button label=\\\"Yes\\\" icon=\\\"pi pi-check\\\" onClick={this.addMarker} />\\n            <Button label=\\\"No\\\" icon=\\\"pi pi-times\\\" onClick={this.onHide} />\\n        </div>;\\n\\n        return (\\n            <div>\\n                <Toast ref={(el) => { this.toast = el; }}></Toast>\\n\\n                {\\n                    this.state.googleMapsReady && (\\n                        <div className=\\\"card\\\">\\n                            <GMap overlays={this.state.overlays} options={options} style={{width: '100%', minHeight: '320px'}} onMapReady={this.onMapReady}\\n                                onMapClick={this.onMapClick} onOverlayClick={this.onOverlayClick} onOverlayDragEnd={this.handleDragEnd} />\\n                        </div>\\n                    )\\n                }\\n\\n                <Dialog header=\\\"New Location\\\" visible={this.state.dialogVisible} width=\\\"300px\\\" modal footer={footer} onHide={this.onHide}>\\n                    <div className=\\\"p-grid p-fluid\\\">\\n                        <div className=\\\"p-col-2\\\" style={{paddingTop:'.75em'}}><label htmlFor=\\\"title\\\">Label</label></div>\\n                        <div className=\\\"p-col-10\\\"><InputText type=\\\"text\\\" id=\\\"title\\\" value={this.state.markerTitle} onChange={(e) => this.setState({markerTitle: e.target.value})} /></div>\\n\\n                        <div className=\\\"p-col-2\\\" style={{paddingTop:'.75em'}}>Lat</div>\\n                        <div className=\\\"p-col-10\\\"><InputText readOnly value={this.state.selectedPosition ? this.state.selectedPosition.lat() : ''} /></div>\\n\\n                        <div className=\\\"p-col-2\\\" style={{paddingTop:'.75em'}}>Lng</div>\\n                        <div className=\\\"p-col-10\\\"><InputText readOnly value={this.state.selectedPosition ? this.state.selectedPosition.lng() : ''} /></div>\\n\\n                        <div className=\\\"p-col-2\\\" style={{paddingTop:'.75em'}}><label htmlFor=\\\"drg\\\">Drag</label></div>\\n                        <div className=\\\"p-col-10\\\"><Checkbox checked={this.state.draggableMarker} onChange={(event) => this.setState({draggableMarker: event.checked})}/></div>\\n                    </div>\\n                </Dialog>\\n            </div>\\n        );\\n    }\\n}\\n\"))));\n    }\n  }]);\n\n  return GMapDoc;\n}(Component);","map":{"version":3,"sources":["C:/Users/zura.ph/WebstormProjects/zz-regul/src/showcase/gmap/GMapDoc.js"],"names":["React","Component","TabView","TabPanel","CodeHighlight","GMapDoc"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\r\nimport { TabView, TabPanel } from '../../components/tabview/TabView';\r\nimport { CodeHighlight } from '../codehighlight/CodeHighlight';\r\n\r\nexport class GMapDoc extends Component {\r\n\r\n    shouldComponentUpdate(){\r\n        return false;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"content-section documentation\">\r\n                <TabView>\r\n                    <TabPanel header=\"Documentation\">\r\n                        <h5>Import</h5>\r\n<CodeHighlight lang=\"js\">\r\n{`\r\nimport { GMap } from 'primereact/gmap';\r\n`}\r\n</CodeHighlight>\r\n\r\n            <h5>Getting Started</h5>\r\n            <p>A map is initialized with options and dimensions. Refer to the google maps api for the list of available options.</p>\r\n\r\n<CodeHighlight lang=\"js\">\r\n{`\r\nconst options = {\r\n    center: {lat: 36.890257, lng: 30.707417},\r\n    zoom: 12\r\n};\r\n\r\nreturn (\r\n    <GMap options={options} style={{width: '100%', minHeight: '320px'}} />\r\n)\r\n`}\r\n</CodeHighlight>\r\n\r\n            <h5>Overlays</h5>\r\n            <p>GMap can display any type of overlay such as markers, polygons and circles. Overlay instances are bound using the overlays property array. Overlays are aware\r\n            of binding so whenever the array changes, gmap updates itself.</p>\r\n\r\n<CodeHighlight lang=\"js\">\r\n{`\r\nconst options = {\r\n    center: {lat: 36.890257, lng: 30.707417},\r\n    zoom: 12\r\n};\r\n\r\nconst overlays = [\r\n            new google.maps.Marker({position: {lat: 36.879466, lng: 30.667648}, title:\"Konyaalti\"}),\r\n            new google.maps.Marker({position: {lat: 36.883707, lng: 30.689216}, title:\"Ataturk Park\"}),\r\n            new google.maps.Marker({position: {lat: 36.885233, lng: 30.702323}, title:\"Oldtown\"}),\r\n            new google.maps.Polygon({paths: [\r\n                {lat: 36.9177, lng: 30.7854},{lat: 36.8851, lng: 30.7802},{lat: 36.8829, lng: 30.8111},{lat: 36.9177, lng: 30.8159}\r\n            ], strokeOpacity: 0.5, strokeWeight: 1, fillColor: '#1976D2', fillOpacity: 0.35\r\n            }),\r\n            new google.maps.Circle({center: {lat: 36.90707, lng: 30.56533}, fillColor: '#1976D2', fillOpacity: 0.35, strokeWeight: 1, radius: 1500}),\r\n            new google.maps.Polyline({path: [{lat: 36.86149, lng: 30.63743},{lat: 36.86341, lng: 30.72463}], geodesic: true, strokeColor: '#FF0000', strokeOpacity: 0.5, strokeWeight: 2})\r\n        ];\r\n\r\nreturn (\r\n    <GMap overlays={overlays} options={options} style={{width: '100%', minHeight: '320px'}} />\r\n)\r\n`}\r\n</CodeHighlight>\r\n\r\n            <h5>Events</h5>\r\n            <p>GMap provides common callbacks to hook into events including map click, overlay click and overlay dragging.</p>\r\n<CodeHighlight lang=\"js\">\r\n{`\r\nconst onMapClick = (event) => {\r\n    //event: MouseEvent of Google Maps api\r\n}\r\n\r\nconst onMapReady = (map) => {\r\n    //map: Map instance\r\n}\r\n\r\nconst options = {\r\n    center: {lat: 36.890257, lng: 30.707417},\r\n    zoom: 12\r\n};\r\n\r\nlet overlays = [\r\n            new google.maps.Marker({position: {lat: 36.879466, lng: 30.667648}, title:\"Konyaalti\"}),\r\n            new google.maps.Marker({position: {lat: 36.883707, lng: 30.689216}, title:\"Ataturk Park\"}),\r\n            new google.maps.Marker({position: {lat: 36.885233, lng: 30.702323}, title:\"Oldtown\"}),\r\n            new google.maps.Polygon({paths: [\r\n                {lat: 36.9177, lng: 30.7854},{lat: 36.8851, lng: 30.7802},{lat: 36.8829, lng: 30.8111},{lat: 36.9177, lng: 30.8159}\r\n            ], strokeOpacity: 0.5, strokeWeight: 1, fillColor: '#1976D2', fillOpacity: 0.35\r\n            }),\r\n            new google.maps.Circle({center: {lat: 36.90707, lng: 30.56533}, fillColor: '#1976D2', fillOpacity: 0.35, strokeWeight: 1, radius: 1500}),\r\n            new google.maps.Polyline({path: [{lat: 36.86149, lng: 30.63743},{lat: 36.86341, lng: 30.72463}], geodesic: true, strokeColor: '#FF0000', strokeOpacity: 0.5, strokeWeight: 2})\r\n        ]\r\n\r\nreturn (\r\n    <GMap overlays={overlays} options={options} style={{width: '100%', minHeight: '320px'}} onMapReady={onMapReady} onMapClick={onMapClick} />\r\n)\r\n`}\r\n</CodeHighlight>\r\n\r\n            <h5>Google Maps API</h5>\r\n            <p>In case you need to access the map instance directly, use the getMap() method. In the following example, this.gmap.getMap() will provide the map instance. Alternative\r\n            is using onMapReady event as it passes the map instance as a parameter.</p>\r\n\r\n<CodeHighlight lang=\"js\">\r\n{`\r\nconst options = {\r\n    center: {lat: 36.890257, lng: 30.707417},\r\n    zoom: 12\r\n};\r\n\r\nreturn (\r\n    <GMap ref={gmap} options={options} style={{width: '100%', minHeight: '320px'}} />\r\n)\r\n`}\r\n</CodeHighlight>\r\n\r\n\r\n            <h5>Properties</h5>\r\n            <div className=\"doc-tablewrapper\">\r\n                <table className=\"doc-table\">\r\n                    <thead>\r\n                    <tr>\r\n                        <th>Name</th>\r\n                        <th>Type</th>\r\n                        <th>Default</th>\r\n                        <th>Description</th>\r\n                    </tr>\r\n                    </thead>\r\n                        <tbody>\r\n                        <tr>\r\n                            <td>options</td>\r\n                            <td>object</td>\r\n                            <td>null</td>\r\n                            <td>Google Maps API configuration object.</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>overlays</td>\r\n                            <td>array</td>\r\n                            <td>null</td>\r\n                            <td>An array of overlays to display.</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>style</td>\r\n                            <td>string</td>\r\n                            <td>null</td>\r\n                            <td>Inline style of the component.</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>className</td>\r\n                            <td>string</td>\r\n                            <td>null</td>\r\n                            <td>Style class of the component.</td>\r\n                        </tr>\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n\r\n            <h5>Events</h5>\r\n            <div className=\"doc-tablewrapper\">\r\n                <table className=\"doc-table\">\r\n                    <thead>\r\n                        <tr>\r\n                            <th>Name</th>\r\n                            <th>Parameters</th>\r\n                            <th>Description</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        <tr>\r\n                            <td>onMapClick</td>\r\n                            <td>event: Google Maps MouseEvent</td>\r\n                            <td>Callback to invoke when map is clicked except markers.</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>onMapDragEnd</td>\r\n                            <td>-</td>\r\n                            <td>Callback to invoke when map drag (i.e. pan) has ended.</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>onMapReady</td>\r\n                            <td>event.map: Google Maps Instance</td>\r\n                            <td>Callback to invoke when the map is ready to be used.</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>onOverlayClick</td>\r\n                            <td>originalEvent: Google Maps MouseEvent <br />\r\n                                overlay: Clicked overlay <br />\r\n                                map: Map instance <br /></td>\r\n                            <td>Callback to invoke when an overlay is clicked.</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>onOverlayDragStart</td>\r\n                            <td>event: Google Maps MouseEvent</td>\r\n                            <td>Callback to invoke when an overlay drag starts.</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>onOverlayDrag</td>\r\n                            <td>event: Google Maps MouseEvent</td>\r\n                            <td>Callback to invoke when an overlay is being dragged.</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>onOverlayDragEnd</td>\r\n                            <td>event: Google Maps MouseEvent</td>\r\n                            <td>Callback to invoke when an overlay drag ends.</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>onZoomChanged</td>\r\n                            <td>-</td>\r\n                            <td>Callback to invoke when zoom level has changed.</td>\r\n                        </tr>\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n\r\n            <h5>Styling</h5>\r\n            <p>Component does not apply any styling.</p>\r\n\r\n\r\n            <h5>Dependencies</h5>\r\n            <p>Google Maps script.</p>\r\n\r\n            </TabPanel>\r\n\r\n            <TabPanel header=\"Source\">\r\n<CodeHighlight lang=\"js\">\r\n{`\r\n/*global google*/\r\nimport React, { Component } from 'react';\r\nimport { GMap } from 'primereact/gmap';\r\nimport { Dialog } from 'primereact/dialog';\r\nimport { InputText } from 'primereact/inputtext';\r\nimport { Button } from 'primereact/button';\r\nimport { Checkbox } from 'primereact/checkbox';\r\nimport { Toast } from 'primereact/toast';\r\nimport { loadGoogleMaps, removeGoogleMaps } from '../load/GoogleMaps';\r\n\r\nexport class GMapDemo extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            googleMapsReady: false,\r\n            dialogVisible: false,\r\n            markerTitle: '',\r\n            draggableMarker: false,\r\n            overlays: null,\r\n            selectedPosition: null\r\n        };\r\n\r\n        this.onMapClick = this.onMapClick.bind(this);\r\n        this.onOverlayClick = this.onOverlayClick.bind(this);\r\n        this.handleDragEnd = this.handleDragEnd.bind(this);\r\n        this.onMapReady = this.onMapReady.bind(this);\r\n        this.onHide = this.onHide.bind(this);\r\n        this.addMarker = this.addMarker.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        loadGoogleMaps(() => {\r\n            this.setState({ googleMapsReady: true });\r\n        });\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        removeGoogleMaps();\r\n    }\r\n\r\n    onMapClick(event) {\r\n        this.setState({\r\n            dialogVisible: true,\r\n            selectedPosition: event.latLng\r\n        });\r\n    }\r\n\r\n    onOverlayClick(event) {\r\n        let isMarker = event.overlay.getTitle !== undefined;\r\n\r\n        if(isMarker) {\r\n            let title = event.overlay.getTitle();\r\n            this.infoWindow = this.infoWindow||new google.maps.InfoWindow();\r\n            this.infoWindow.setContent('<div>' + title + '</div>');\r\n            this.infoWindow.open(event.map, event.overlay);\r\n            event.map.setCenter(event.overlay.getPosition());\r\n\r\n            this.toast.show({severity:'info', summary:'Marker Selected', detail: title});\r\n        }\r\n        else {\r\n            this.toast.show({severity:'info', summary:'Shape Selected', detail: ''});\r\n        }\r\n    }\r\n\r\n    handleDragEnd(event) {\r\n        this.toast.show({severity:'info', summary:'Marker Dragged', detail: event.overlay.getTitle()});\r\n    }\r\n\r\n    addMarker() {\r\n        let newMarker = new google.maps.Marker({\r\n                            position: {\r\n                                lat: this.state.selectedPosition.lat(),\r\n                                lng: this.state.selectedPosition.lng()\r\n                            },\r\n                            title: this.state.markerTitle,\r\n                            draggable: this.state.draggableMarker\r\n                        });\r\n\r\n        this.setState({\r\n            overlays: [...this.state.overlays, newMarker],\r\n            dialogVisible: false,\r\n            draggableMarker: false,\r\n            markerTitle: ''\r\n        });\r\n    }\r\n\r\n    onMapReady(event) {\r\n        this.setState({\r\n            overlays: [\r\n                new google.maps.Marker({position: {lat: 36.879466, lng: 30.667648}, title:\"Konyaalti\"}),\r\n                new google.maps.Marker({position: {lat: 36.883707, lng: 30.689216}, title:\"Ataturk Park\"}),\r\n                new google.maps.Marker({position: {lat: 36.885233, lng: 30.702323}, title:\"Oldtown\"}),\r\n                new google.maps.Polygon({paths: [\r\n                    {lat: 36.9177, lng: 30.7854},{lat: 36.8851, lng: 30.7802},{lat: 36.8829, lng: 30.8111},{lat: 36.9177, lng: 30.8159}\r\n                ], strokeOpacity: 0.5, strokeWeight: 1, fillColor: '#1976D2', fillOpacity: 0.35\r\n                }),\r\n                new google.maps.Circle({center: {lat: 36.90707, lng: 30.56533}, fillColor: '#1976D2', fillOpacity: 0.35, strokeWeight: 1, radius: 1500}),\r\n                new google.maps.Polyline({path: [{lat: 36.86149, lng: 30.63743},{lat: 36.86341, lng: 30.72463}], geodesic: true, strokeColor: '#FF0000', strokeOpacity: 0.5, strokeWeight: 2})\r\n            ]\r\n        })\r\n    }\r\n\r\n    onHide(event) {\r\n        this.setState({dialogVisible: false});\r\n    }\r\n\r\n    render() {\r\n        const options = {\r\n            center: {lat: 36.890257, lng: 30.707417},\r\n            zoom: 12\r\n        };\r\n\r\n        const footer = <div>\r\n            <Button label=\"Yes\" icon=\"pi pi-check\" onClick={this.addMarker} />\r\n            <Button label=\"No\" icon=\"pi pi-times\" onClick={this.onHide} />\r\n        </div>;\r\n\r\n        return (\r\n            <div>\r\n                <Toast ref={(el) => { this.toast = el; }}></Toast>\r\n\r\n                {\r\n                    this.state.googleMapsReady && (\r\n                        <div className=\"card\">\r\n                            <GMap overlays={this.state.overlays} options={options} style={{width: '100%', minHeight: '320px'}} onMapReady={this.onMapReady}\r\n                                onMapClick={this.onMapClick} onOverlayClick={this.onOverlayClick} onOverlayDragEnd={this.handleDragEnd} />\r\n                        </div>\r\n                    )\r\n                }\r\n\r\n                <Dialog header=\"New Location\" visible={this.state.dialogVisible} width=\"300px\" modal footer={footer} onHide={this.onHide}>\r\n                    <div className=\"p-grid p-fluid\">\r\n                        <div className=\"p-col-2\" style={{paddingTop:'.75em'}}><label htmlFor=\"title\">Label</label></div>\r\n                        <div className=\"p-col-10\"><InputText type=\"text\" id=\"title\" value={this.state.markerTitle} onChange={(e) => this.setState({markerTitle: e.target.value})} /></div>\r\n\r\n                        <div className=\"p-col-2\" style={{paddingTop:'.75em'}}>Lat</div>\r\n                        <div className=\"p-col-10\"><InputText readOnly value={this.state.selectedPosition ? this.state.selectedPosition.lat() : ''} /></div>\r\n\r\n                        <div className=\"p-col-2\" style={{paddingTop:'.75em'}}>Lng</div>\r\n                        <div className=\"p-col-10\"><InputText readOnly value={this.state.selectedPosition ? this.state.selectedPosition.lng() : ''} /></div>\r\n\r\n                        <div className=\"p-col-2\" style={{paddingTop:'.75em'}}><label htmlFor=\"drg\">Drag</label></div>\r\n                        <div className=\"p-col-10\"><Checkbox checked={this.state.draggableMarker} onChange={(event) => this.setState({draggableMarker: event.checked})}/></div>\r\n                    </div>\r\n                </Dialog>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n`}\r\n</CodeHighlight>\r\n                    </TabPanel>\r\n                </TabView>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}