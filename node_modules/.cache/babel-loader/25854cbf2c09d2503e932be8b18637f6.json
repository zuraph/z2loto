{"ast":null,"code":"import _classCallCheck from\"C:\\\\Users\\\\zura.ph\\\\WebstormProjects\\\\zz-regul\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";import _createClass from\"C:\\\\Users\\\\zura.ph\\\\WebstormProjects\\\\zz-regul\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";import _assertThisInitialized from\"C:\\\\Users\\\\zura.ph\\\\WebstormProjects\\\\zz-regul\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/assertThisInitialized\";import _inherits from\"C:\\\\Users\\\\zura.ph\\\\WebstormProjects\\\\zz-regul\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";import _createSuper from\"C:\\\\Users\\\\zura.ph\\\\WebstormProjects\\\\zz-regul\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createSuper\";import React,{Component}from'react';import{Tree}from'../../components/tree/Tree';import{NodeService}from'../service/NodeService';import{TabView}from'../../components/tabview/TabView';import{Toast}from'../../components/toast/Toast';import{useLiveEditorTabs}from'../liveeditor/LiveEditor';import{AppInlineHeader}from'../../AppInlineHeader';export var TreeSelectionDemo=/*#__PURE__*/function(_Component){_inherits(TreeSelectionDemo,_Component);var _super=_createSuper(TreeSelectionDemo);function TreeSelectionDemo(props){var _this;_classCallCheck(this,TreeSelectionDemo);_this=_super.call(this,props);_this.state={nodes:null,selectedKey:null,selectedKeys1:null,selectedKeys2:null,selectedKeys3:null};_this.nodeService=new NodeService();_this.onNodeSelect=_this.onNodeSelect.bind(_assertThisInitialized(_this));_this.onNodeUnselect=_this.onNodeUnselect.bind(_assertThisInitialized(_this));return _this;}_createClass(TreeSelectionDemo,[{key:\"componentDidMount\",value:function componentDidMount(){var _this2=this;this.nodeService.getTreeNodes().then(function(data){return _this2.setState({nodes:data});});}},{key:\"onNodeSelect\",value:function onNodeSelect(node){this.toast.show({severity:'success',summary:'Node Selected',detail:node.label,life:3000});}},{key:\"onNodeUnselect\",value:function onNodeUnselect(node){this.toast.show({severity:'success',summary:'Node Unselected',detail:node.label,life:3000});}},{key:\"render\",value:function render(){var _this3=this;return/*#__PURE__*/React.createElement(\"div\",null,/*#__PURE__*/React.createElement(\"div\",{className:\"content-section introduction\"},/*#__PURE__*/React.createElement(AppInlineHeader,{changelogText:\"tree\"},/*#__PURE__*/React.createElement(\"h1\",null,\"Tree \",/*#__PURE__*/React.createElement(\"span\",null,\"Selection\")),/*#__PURE__*/React.createElement(\"p\",null,\"Tree supports \\\"single\\\", \\\"multiple\\\" and \\\"checkbox\\\" as selection modes.\"))),/*#__PURE__*/React.createElement(\"div\",{className:\"content-section implementation\"},/*#__PURE__*/React.createElement(Toast,{ref:function ref(el){return _this3.toast=el;}}),/*#__PURE__*/React.createElement(\"div\",{className:\"card\"},/*#__PURE__*/React.createElement(\"h5\",null,\"Single Selection\"),/*#__PURE__*/React.createElement(Tree,{value:this.state.nodes,selectionMode:\"single\",selectionKeys:this.state.selectedKey,onSelectionChange:function onSelectionChange(e){return _this3.setState({selectedKey:e.value});},onSelect:this.onNodeSelect,onUnselect:this.onNodeUnselect}),/*#__PURE__*/React.createElement(\"h5\",null,\"Multiple Selection with MetaKey\"),/*#__PURE__*/React.createElement(Tree,{value:this.state.nodes,selectionMode:\"multiple\",selectionKeys:this.state.selectedKeys1,onSelectionChange:function onSelectionChange(e){return _this3.setState({selectedKeys1:e.value});}}),/*#__PURE__*/React.createElement(\"h5\",null,\"Multiple Selection without MetaKey\"),/*#__PURE__*/React.createElement(Tree,{value:this.state.nodes,selectionMode:\"multiple\",metaKeySelection:false,selectionKeys:this.state.selectedKeys2,onSelectionChange:function onSelectionChange(e){return _this3.setState({selectedKeys2:e.value});}}),/*#__PURE__*/React.createElement(\"h5\",null,\"Checkbox Selection\"),/*#__PURE__*/React.createElement(Tree,{value:this.state.nodes,selectionMode:\"checkbox\",selectionKeys:this.state.selectedKeys3,onSelectionChange:function onSelectionChange(e){return _this3.setState({selectedKeys3:e.value});}}))),/*#__PURE__*/React.createElement(TreeSelectionDemoDoc,null));}}]);return TreeSelectionDemo;}(Component);export var TreeSelectionDemoDoc=/*#__PURE__*/function(_Component2){_inherits(TreeSelectionDemoDoc,_Component2);var _super2=_createSuper(TreeSelectionDemoDoc);function TreeSelectionDemoDoc(props){var _this4;_classCallCheck(this,TreeSelectionDemoDoc);_this4=_super2.call(this,props);_this4.sources={'class':{tabName:'Class Source',content:\"\\nimport React, { Component } from 'react';\\nimport { Tree } from 'primereact/tree';\\nimport { Toast } from 'primereact/toast';\\nimport { NodeService } from '../service/NodeService';\\n\\nexport class TreeSelectionDemo extends Component {\\n\\n    constructor(props) {\\n        super(props);\\n        this.state = {\\n            nodes: null,\\n            selectedKey: null,\\n            selectedKeys1: null,\\n            selectedKeys2: null,\\n            selectedKeys3: null\\n        };\\n\\n        this.nodeService = new NodeService();\\n        this.onNodeSelect = this.onNodeSelect.bind(this);\\n        this.onNodeUnselect = this.onNodeUnselect.bind(this);\\n    }\\n\\n    componentDidMount() {\\n        this.nodeService.getTreeNodes().then(data => this.setState({ nodes: data }));\\n    }\\n\\n    onNodeSelect(node) {\\n        this.toast.show({ severity: 'success', summary: 'Node Selected', detail: node.label, life: 3000 });\\n    }\\n\\n    onNodeUnselect(node) {\\n        this.toast.show({ severity: 'success', summary: 'Node Unselected', detail: node.label, life: 3000 });\\n    }\\n\\n    render() {\\n        return (\\n            <div>\\n                <Toast ref={(el) => this.toast = el} />\\n                <div className=\\\"card\\\">\\n                    <h5>Single Selection</h5>\\n                    <Tree value={this.state.nodes} selectionMode=\\\"single\\\" selectionKeys={this.state.selectedKey} onSelectionChange={e => this.setState({ selectedKey: e.value })} onSelect={this.onNodeSelect} onUnselect={this.onNodeUnselect}/>\\n\\n                    <h5>Multiple Selection with MetaKey</h5>\\n                    <Tree value={this.state.nodes} selectionMode=\\\"multiple\\\" selectionKeys={this.state.selectedKeys1} onSelectionChange={e => this.setState({ selectedKeys1: e.value })} />\\n\\n                    <h5>Multiple Selection without MetaKey</h5>\\n                    <Tree value={this.state.nodes} selectionMode=\\\"multiple\\\" metaKeySelection={false} selectionKeys={this.state.selectedKeys2} onSelectionChange={e => this.setState({ selectedKeys2: e.value })} />\\n\\n                    <h5>Checkbox Selection</h5>\\n                    <Tree value={this.state.nodes} selectionMode=\\\"checkbox\\\" selectionKeys={this.state.selectedKeys3} onSelectionChange={e => this.setState({ selectedKeys3: e.value })} />\\n                </div>\\n            </div>\\n        )\\n    }\\n}\\n                \"},'hooks':{tabName:'Hooks Source',content:\"\\nimport React, { useState, useEffect, useRef } from 'react';\\nimport { Tree } from 'primereact/tree';\\nimport { Toast } from 'primereact/toast';\\nimport { NodeService } from '../service/NodeService';\\n\\nconst TreeSelectionDemo = () => {\\n    const [nodes, setNodes] = useState(null);\\n    const [selectedKey, setSelectedKey] = useState(null);\\n    const [selectedKeys1, setSelectedKeys1] = useState(null);\\n    const [selectedKeys2, setSelectedKeys2] = useState(null);\\n    const [selectedKeys3, setSelectedKeys3] = useState(null);\\n    const toast = useRef(null);\\n    const nodeService = new NodeService();\\n\\n    useEffect(() => {\\n        nodeService.getTreeNodes().then(data => setNodes(data));\\n    }, []); // eslint-disable-line react-hooks/exhaustive-deps\\n\\n    const onNodeSelect = (node) => {\\n        toast.current.show({ severity: 'success', summary: 'Node Selected', detail: node.label, life: 3000 });\\n    }\\n\\n    const onNodeUnselect = (node) => {\\n        toast.current.show({ severity: 'success', summary: 'Node Unselected', detail: node.label, life: 3000 });\\n    }\\n\\n    return (\\n        <div>\\n            <Toast ref={toast} />\\n            <div className=\\\"card\\\">\\n                <h5>Single Selection</h5>\\n                <Tree value={nodes} selectionMode=\\\"single\\\" selectionKeys={selectedKey} onSelectionChange={e => setSelectedKey(e.value)} onSelect={onNodeSelect} onUnselect={onNodeUnselect}/>\\n\\n                <h5>Multiple Selection with MetaKey</h5>\\n                <Tree value={nodes} selectionMode=\\\"multiple\\\" selectionKeys={selectedKeys1} onSelectionChange={e => setSelectedKeys1(e.value)} />\\n\\n                <h5>Multiple Selection without MetaKey</h5>\\n                <Tree value={nodes} selectionMode=\\\"multiple\\\" metaKeySelection={false} selectionKeys={selectedKeys2} onSelectionChange={e => setSelectedKeys2(e.value)} />\\n\\n                <h5>Checkbox Selection</h5>\\n                <Tree value={nodes} selectionMode=\\\"checkbox\\\" selectionKeys={selectedKeys3} onSelectionChange={e => setSelectedKeys3(e.value)} />\\n            </div>\\n        </div>\\n    )\\n}\\n                \"},'ts':{tabName:'TS Source',content:\"\\nimport React, { useState, useEffect, useRef } from 'react';\\nimport { Tree } from 'primereact/tree';\\nimport { Toast } from 'primereact/toast';\\nimport { NodeService } from '../service/NodeService';\\n\\nconst TreeSelectionDemo = () => {\\n    const [nodes, setNodes] = useState(null);\\n    const [selectedKey, setSelectedKey] = useState(null);\\n    const [selectedKeys1, setSelectedKeys1] = useState(null);\\n    const [selectedKeys2, setSelectedKeys2] = useState(null);\\n    const [selectedKeys3, setSelectedKeys3] = useState(null);\\n    const toast = useRef(null);\\n    const nodeService = new NodeService();\\n\\n    useEffect(() => {\\n        nodeService.getTreeNodes().then(data => setNodes(data));\\n    }, []); // eslint-disable-line react-hooks/exhaustive-deps\\n\\n    const onNodeSelect = (node) => {\\n        toast.current.show({ severity: 'success', summary: 'Node Selected', detail: node.label, life: 3000 });\\n    }\\n\\n    const onNodeUnselect = (node) => {\\n        toast.current.show({ severity: 'success', summary: 'Node Unselected', detail: node.label, life: 3000 });\\n    }\\n\\n    return (\\n        <div>\\n            <Toast ref={toast} />\\n            <div className=\\\"card\\\">\\n                <h5>Single Selection</h5>\\n                <Tree value={nodes} selectionMode=\\\"single\\\" selectionKeys={selectedKey} onSelectionChange={e => setSelectedKey(e.value)} onSelect={onNodeSelect} onUnselect={onNodeUnselect}/>\\n\\n                <h5>Multiple Selection with MetaKey</h5>\\n                <Tree value={nodes} selectionMode=\\\"multiple\\\" selectionKeys={selectedKeys1} onSelectionChange={e => setSelectedKeys1(e.value)} />\\n\\n                <h5>Multiple Selection without MetaKey</h5>\\n                <Tree value={nodes} selectionMode=\\\"multiple\\\" metaKeySelection={false} selectionKeys={selectedKeys2} onSelectionChange={e => setSelectedKeys2(e.value)} />\\n\\n                <h5>Checkbox Selection</h5>\\n                <Tree value={nodes} selectionMode=\\\"checkbox\\\" selectionKeys={selectedKeys3} onSelectionChange={e => setSelectedKeys3(e.value)} />\\n            </div>\\n        </div>\\n    )\\n}\\n                \"}};return _this4;}_createClass(TreeSelectionDemoDoc,[{key:\"shouldComponentUpdate\",value:function shouldComponentUpdate(){return false;}},{key:\"render\",value:function render(){return/*#__PURE__*/React.createElement(\"div\",{className:\"content-section documentation\"},/*#__PURE__*/React.createElement(TabView,null,useLiveEditorTabs({name:'TreeSelectionDemo',sources:this.sources,service:'NodeService',data:'treenodes'})));}}]);return TreeSelectionDemoDoc;}(Component);","map":{"version":3,"sources":["C:/Users/zura.ph/WebstormProjects/zz-regul/src/showcase/tree/TreeSelectionDemo.js"],"names":["React","Component","Tree","NodeService","TabView","Toast","useLiveEditorTabs","AppInlineHeader","TreeSelectionDemo","props","state","nodes","selectedKey","selectedKeys1","selectedKeys2","selectedKeys3","nodeService","onNodeSelect","bind","onNodeUnselect","getTreeNodes","then","data","setState","node","toast","show","severity","summary","detail","label","life","el","e","value","TreeSelectionDemoDoc","sources","tabName","content","name","service"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { Tree } from '../../components/tree/Tree';\r\nimport { NodeService } from '../service/NodeService';\r\nimport { TabView } from '../../components/tabview/TabView';\r\nimport { Toast } from '../../components/toast/Toast';\r\nimport { useLiveEditorTabs }from '../liveeditor/LiveEditor';\r\nimport { AppInlineHeader } from '../../AppInlineHeader';\r\n\r\nexport class TreeSelectionDemo extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            nodes: null,\r\n            selectedKey: null,\r\n            selectedKeys1: null,\r\n            selectedKeys2: null,\r\n            selectedKeys3: null\r\n        };\r\n\r\n        this.nodeService = new NodeService();\r\n        this.onNodeSelect = this.onNodeSelect.bind(this);\r\n        this.onNodeUnselect = this.onNodeUnselect.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.nodeService.getTreeNodes().then(data => this.setState({ nodes: data }));\r\n    }\r\n\r\n    onNodeSelect(node) {\r\n        this.toast.show({ severity: 'success', summary: 'Node Selected', detail: node.label, life: 3000 });\r\n    }\r\n\r\n    onNodeUnselect(node) {\r\n        this.toast.show({ severity: 'success', summary: 'Node Unselected', detail: node.label, life: 3000 });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div className=\"content-section introduction\">\r\n                    <AppInlineHeader changelogText=\"tree\">\r\n                        <h1>Tree <span>Selection</span></h1>\r\n                        <p>Tree supports \"single\", \"multiple\" and \"checkbox\" as selection modes.</p>\r\n                    </AppInlineHeader>\r\n                </div>\r\n\r\n                <div className=\"content-section implementation\">\r\n                    <Toast ref={(el) => this.toast = el} />\r\n                    <div className=\"card\">\r\n                        <h5>Single Selection</h5>\r\n                        <Tree value={this.state.nodes} selectionMode=\"single\" selectionKeys={this.state.selectedKey} onSelectionChange={e => this.setState({ selectedKey: e.value })} onSelect={this.onNodeSelect} onUnselect={this.onNodeUnselect}/>\r\n\r\n                        <h5>Multiple Selection with MetaKey</h5>\r\n                        <Tree value={this.state.nodes} selectionMode=\"multiple\" selectionKeys={this.state.selectedKeys1} onSelectionChange={e => this.setState({ selectedKeys1: e.value })} />\r\n\r\n                        <h5>Multiple Selection without MetaKey</h5>\r\n                        <Tree value={this.state.nodes} selectionMode=\"multiple\" metaKeySelection={false} selectionKeys={this.state.selectedKeys2} onSelectionChange={e => this.setState({ selectedKeys2: e.value })} />\r\n\r\n                        <h5>Checkbox Selection</h5>\r\n                        <Tree value={this.state.nodes} selectionMode=\"checkbox\" selectionKeys={this.state.selectedKeys3} onSelectionChange={e => this.setState({ selectedKeys3: e.value })} />\r\n                    </div>\r\n                </div>\r\n                <TreeSelectionDemoDoc />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport class TreeSelectionDemoDoc extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.sources = {\r\n            'class': {\r\n                tabName: 'Class Source',\r\n                content: `\r\nimport React, { Component } from 'react';\r\nimport { Tree } from 'primereact/tree';\r\nimport { Toast } from 'primereact/toast';\r\nimport { NodeService } from '../service/NodeService';\r\n\r\nexport class TreeSelectionDemo extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            nodes: null,\r\n            selectedKey: null,\r\n            selectedKeys1: null,\r\n            selectedKeys2: null,\r\n            selectedKeys3: null\r\n        };\r\n\r\n        this.nodeService = new NodeService();\r\n        this.onNodeSelect = this.onNodeSelect.bind(this);\r\n        this.onNodeUnselect = this.onNodeUnselect.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.nodeService.getTreeNodes().then(data => this.setState({ nodes: data }));\r\n    }\r\n\r\n    onNodeSelect(node) {\r\n        this.toast.show({ severity: 'success', summary: 'Node Selected', detail: node.label, life: 3000 });\r\n    }\r\n\r\n    onNodeUnselect(node) {\r\n        this.toast.show({ severity: 'success', summary: 'Node Unselected', detail: node.label, life: 3000 });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Toast ref={(el) => this.toast = el} />\r\n                <div className=\"card\">\r\n                    <h5>Single Selection</h5>\r\n                    <Tree value={this.state.nodes} selectionMode=\"single\" selectionKeys={this.state.selectedKey} onSelectionChange={e => this.setState({ selectedKey: e.value })} onSelect={this.onNodeSelect} onUnselect={this.onNodeUnselect}/>\r\n\r\n                    <h5>Multiple Selection with MetaKey</h5>\r\n                    <Tree value={this.state.nodes} selectionMode=\"multiple\" selectionKeys={this.state.selectedKeys1} onSelectionChange={e => this.setState({ selectedKeys1: e.value })} />\r\n\r\n                    <h5>Multiple Selection without MetaKey</h5>\r\n                    <Tree value={this.state.nodes} selectionMode=\"multiple\" metaKeySelection={false} selectionKeys={this.state.selectedKeys2} onSelectionChange={e => this.setState({ selectedKeys2: e.value })} />\r\n\r\n                    <h5>Checkbox Selection</h5>\r\n                    <Tree value={this.state.nodes} selectionMode=\"checkbox\" selectionKeys={this.state.selectedKeys3} onSelectionChange={e => this.setState({ selectedKeys3: e.value })} />\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n                `\r\n            },\r\n            'hooks': {\r\n                tabName: 'Hooks Source',\r\n                content: `\r\nimport React, { useState, useEffect, useRef } from 'react';\r\nimport { Tree } from 'primereact/tree';\r\nimport { Toast } from 'primereact/toast';\r\nimport { NodeService } from '../service/NodeService';\r\n\r\nconst TreeSelectionDemo = () => {\r\n    const [nodes, setNodes] = useState(null);\r\n    const [selectedKey, setSelectedKey] = useState(null);\r\n    const [selectedKeys1, setSelectedKeys1] = useState(null);\r\n    const [selectedKeys2, setSelectedKeys2] = useState(null);\r\n    const [selectedKeys3, setSelectedKeys3] = useState(null);\r\n    const toast = useRef(null);\r\n    const nodeService = new NodeService();\r\n\r\n    useEffect(() => {\r\n        nodeService.getTreeNodes().then(data => setNodes(data));\r\n    }, []); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n    const onNodeSelect = (node) => {\r\n        toast.current.show({ severity: 'success', summary: 'Node Selected', detail: node.label, life: 3000 });\r\n    }\r\n\r\n    const onNodeUnselect = (node) => {\r\n        toast.current.show({ severity: 'success', summary: 'Node Unselected', detail: node.label, life: 3000 });\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Toast ref={toast} />\r\n            <div className=\"card\">\r\n                <h5>Single Selection</h5>\r\n                <Tree value={nodes} selectionMode=\"single\" selectionKeys={selectedKey} onSelectionChange={e => setSelectedKey(e.value)} onSelect={onNodeSelect} onUnselect={onNodeUnselect}/>\r\n\r\n                <h5>Multiple Selection with MetaKey</h5>\r\n                <Tree value={nodes} selectionMode=\"multiple\" selectionKeys={selectedKeys1} onSelectionChange={e => setSelectedKeys1(e.value)} />\r\n\r\n                <h5>Multiple Selection without MetaKey</h5>\r\n                <Tree value={nodes} selectionMode=\"multiple\" metaKeySelection={false} selectionKeys={selectedKeys2} onSelectionChange={e => setSelectedKeys2(e.value)} />\r\n\r\n                <h5>Checkbox Selection</h5>\r\n                <Tree value={nodes} selectionMode=\"checkbox\" selectionKeys={selectedKeys3} onSelectionChange={e => setSelectedKeys3(e.value)} />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n                `\r\n            },\r\n            'ts': {\r\n                tabName: 'TS Source',\r\n                content: `\r\nimport React, { useState, useEffect, useRef } from 'react';\r\nimport { Tree } from 'primereact/tree';\r\nimport { Toast } from 'primereact/toast';\r\nimport { NodeService } from '../service/NodeService';\r\n\r\nconst TreeSelectionDemo = () => {\r\n    const [nodes, setNodes] = useState(null);\r\n    const [selectedKey, setSelectedKey] = useState(null);\r\n    const [selectedKeys1, setSelectedKeys1] = useState(null);\r\n    const [selectedKeys2, setSelectedKeys2] = useState(null);\r\n    const [selectedKeys3, setSelectedKeys3] = useState(null);\r\n    const toast = useRef(null);\r\n    const nodeService = new NodeService();\r\n\r\n    useEffect(() => {\r\n        nodeService.getTreeNodes().then(data => setNodes(data));\r\n    }, []); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n    const onNodeSelect = (node) => {\r\n        toast.current.show({ severity: 'success', summary: 'Node Selected', detail: node.label, life: 3000 });\r\n    }\r\n\r\n    const onNodeUnselect = (node) => {\r\n        toast.current.show({ severity: 'success', summary: 'Node Unselected', detail: node.label, life: 3000 });\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Toast ref={toast} />\r\n            <div className=\"card\">\r\n                <h5>Single Selection</h5>\r\n                <Tree value={nodes} selectionMode=\"single\" selectionKeys={selectedKey} onSelectionChange={e => setSelectedKey(e.value)} onSelect={onNodeSelect} onUnselect={onNodeUnselect}/>\r\n\r\n                <h5>Multiple Selection with MetaKey</h5>\r\n                <Tree value={nodes} selectionMode=\"multiple\" selectionKeys={selectedKeys1} onSelectionChange={e => setSelectedKeys1(e.value)} />\r\n\r\n                <h5>Multiple Selection without MetaKey</h5>\r\n                <Tree value={nodes} selectionMode=\"multiple\" metaKeySelection={false} selectionKeys={selectedKeys2} onSelectionChange={e => setSelectedKeys2(e.value)} />\r\n\r\n                <h5>Checkbox Selection</h5>\r\n                <Tree value={nodes} selectionMode=\"checkbox\" selectionKeys={selectedKeys3} onSelectionChange={e => setSelectedKeys3(e.value)} />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n                `\r\n            }\r\n        }\r\n    }\r\n\r\n    shouldComponentUpdate() {\r\n        return false;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"content-section documentation\">\r\n                <TabView>\r\n                    {\r\n                        useLiveEditorTabs({ name: 'TreeSelectionDemo', sources: this.sources, service: 'NodeService', data: 'treenodes' })\r\n                    }\r\n                </TabView>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}