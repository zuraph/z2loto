{"ast":null,"code":"import _classCallCheck from\"C:\\\\Users\\\\zura.ph\\\\WebstormProjects\\\\zz-regul\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";import _createClass from\"C:\\\\Users\\\\zura.ph\\\\WebstormProjects\\\\zz-regul\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";import _assertThisInitialized from\"C:\\\\Users\\\\zura.ph\\\\WebstormProjects\\\\zz-regul\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/assertThisInitialized\";import _inherits from\"C:\\\\Users\\\\zura.ph\\\\WebstormProjects\\\\zz-regul\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";import _createSuper from\"C:\\\\Users\\\\zura.ph\\\\WebstormProjects\\\\zz-regul\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createSuper\";import React,{Component}from'react';import{TreeTable}from'../../components/treetable/TreeTable';import{Toast}from'../../components/toast/Toast';import{Column}from'../../components/column/Column';import{NodeService}from'../service/NodeService';import{TabView}from'../../components/tabview/TabView';import{useLiveEditorTabs}from'../liveeditor/LiveEditor';import{AppInlineHeader}from'../../AppInlineHeader';export var TreeTableSelectionDemo=/*#__PURE__*/function(_Component){_inherits(TreeTableSelectionDemo,_Component);var _super=_createSuper(TreeTableSelectionDemo);function TreeTableSelectionDemo(props){var _this;_classCallCheck(this,TreeTableSelectionDemo);_this=_super.call(this,props);_this.state={nodes:[],selectedNodeKey1:null,selectedNodeKey2:null,selectedNodeKeys1:[],selectedNodeKeys2:[],selectedNodeKeys3:[]};_this.nodeservice=new NodeService();_this.onSelect=_this.onSelect.bind(_assertThisInitialized(_this));_this.onUnselect=_this.onUnselect.bind(_assertThisInitialized(_this));return _this;}_createClass(TreeTableSelectionDemo,[{key:\"onSelect\",value:function onSelect(event){this.toast.show({severity:'info',summary:'Node Selected',detail:event.node.data.name});}},{key:\"onUnselect\",value:function onUnselect(event){this.toast.show({severity:'info',summary:'Node Unselected',detail:event.node.data.name});}},{key:\"componentDidMount\",value:function componentDidMount(){var _this2=this;this.nodeservice.getTreeTableNodes().then(function(data){return _this2.setState({nodes:data});});}},{key:\"render\",value:function render(){var _this3=this;return/*#__PURE__*/React.createElement(\"div\",null,/*#__PURE__*/React.createElement(\"div\",{className:\"content-section introduction\"},/*#__PURE__*/React.createElement(AppInlineHeader,{changelogText:\"treeTable\"},/*#__PURE__*/React.createElement(\"h1\",null,\"TreeTable \",/*#__PURE__*/React.createElement(\"span\",null,\"Selection\")),/*#__PURE__*/React.createElement(\"p\",null,\"TreeTable supports single, multiple and checkbox based selection modes.\"))),/*#__PURE__*/React.createElement(\"div\",{className:\"content-section implementation\"},/*#__PURE__*/React.createElement(Toast,{ref:function ref(el){return _this3.toast=el;}}),/*#__PURE__*/React.createElement(\"div\",{className:\"card\"},/*#__PURE__*/React.createElement(\"h5\",null,\"Single\"),/*#__PURE__*/React.createElement(TreeTable,{value:this.state.nodes,selectionMode:\"single\",selectionKeys:this.state.selectedNodeKey1,onSelectionChange:function onSelectionChange(e){return _this3.setState({selectedNodeKey1:e.value});}},/*#__PURE__*/React.createElement(Column,{field:\"name\",header:\"Name\",expander:true}),/*#__PURE__*/React.createElement(Column,{field:\"size\",header:\"Size\"}),/*#__PURE__*/React.createElement(Column,{field:\"type\",header:\"Type\"}))),/*#__PURE__*/React.createElement(\"div\",{className:\"card\"},/*#__PURE__*/React.createElement(\"h5\",null,\"Multiple\"),/*#__PURE__*/React.createElement(TreeTable,{value:this.state.nodes,selectionMode:\"multiple\",selectionKeys:this.state.selectedNodeKeys1,onSelectionChange:function onSelectionChange(e){return _this3.setState({selectedNodeKeys1:e.value});},metaKeySelection:false},/*#__PURE__*/React.createElement(Column,{field:\"name\",header:\"Name\",expander:true}),/*#__PURE__*/React.createElement(Column,{field:\"size\",header:\"Size\"}),/*#__PURE__*/React.createElement(Column,{field:\"type\",header:\"Type\"}))),/*#__PURE__*/React.createElement(\"div\",{className:\"card\"},/*#__PURE__*/React.createElement(\"h5\",null,\"Multiple with MetaKey\"),/*#__PURE__*/React.createElement(TreeTable,{value:this.state.nodes,selectionMode:\"multiple\",selectionKeys:this.state.selectedNodeKeys2,onSelectionChange:function onSelectionChange(e){return _this3.setState({selectedNodeKeys2:e.value});},metaKeySelection:true},/*#__PURE__*/React.createElement(Column,{field:\"name\",header:\"Name\",expander:true}),/*#__PURE__*/React.createElement(Column,{field:\"size\",header:\"Size\"}),/*#__PURE__*/React.createElement(Column,{field:\"type\",header:\"Type\"}))),/*#__PURE__*/React.createElement(\"div\",{className:\"card\"},/*#__PURE__*/React.createElement(\"h5\",null,\"Events\"),/*#__PURE__*/React.createElement(TreeTable,{value:this.state.nodes,selectionMode:\"single\",selectionKeys:this.state.selectedNodeKey2,onSelectionChange:function onSelectionChange(e){return _this3.setState({selectedNodeKey2:e.value});},onSelect:this.onSelect,onUnselect:this.onUnselect},/*#__PURE__*/React.createElement(Column,{field:\"name\",header:\"Name\",expander:true}),/*#__PURE__*/React.createElement(Column,{field:\"size\",header:\"Size\"}),/*#__PURE__*/React.createElement(Column,{field:\"type\",header:\"Type\"}))),/*#__PURE__*/React.createElement(\"div\",{className:\"card\"},/*#__PURE__*/React.createElement(\"h5\",null,\"Checkbox\"),/*#__PURE__*/React.createElement(TreeTable,{value:this.state.nodes,selectionMode:\"checkbox\",selectionKeys:this.state.selectedNodeKeys3,onSelectionChange:function onSelectionChange(e){return _this3.setState({selectedNodeKeys3:e.value});}},/*#__PURE__*/React.createElement(Column,{field:\"name\",header:\"Name\",expander:true}),/*#__PURE__*/React.createElement(Column,{field:\"size\",header:\"Size\"}),/*#__PURE__*/React.createElement(Column,{field:\"type\",header:\"Type\"})))),/*#__PURE__*/React.createElement(TreeTableSelectionDemoDoc,null));}}]);return TreeTableSelectionDemo;}(Component);var TreeTableSelectionDemoDoc=/*#__PURE__*/function(_Component2){_inherits(TreeTableSelectionDemoDoc,_Component2);var _super2=_createSuper(TreeTableSelectionDemoDoc);function TreeTableSelectionDemoDoc(props){var _this4;_classCallCheck(this,TreeTableSelectionDemoDoc);_this4=_super2.call(this,props);_this4.sources={'class':{tabName:'Class Source',content:\"\\nimport React, { Component } from 'react';\\nimport { TreeTable } from 'primereact/treetable';\\nimport { Toast } from 'primereact/toast';\\nimport { Column } from 'primereact/column';\\nimport { NodeService } from '../service/NodeService';\\n\\nexport class TreeTableSelectionDemo extends Component {\\n\\n    constructor(props) {\\n        super(props);\\n        this.state = {\\n            nodes: [],\\n            selectedNodeKey1: null,\\n            selectedNodeKey2: null,\\n            selectedNodeKeys1: [],\\n            selectedNodeKeys2: [],\\n            selectedNodeKeys3: []\\n        };\\n\\n        this.nodeservice = new NodeService();\\n        this.onSelect = this.onSelect.bind(this);\\n        this.onUnselect = this.onUnselect.bind(this);\\n    }\\n\\n    onSelect(event) {\\n        this.toast.show({ severity: 'info', summary: 'Node Selected', detail: event.node.data.name });\\n    }\\n\\n    onUnselect(event) {\\n        this.toast.show({ severity: 'info', summary: 'Node Unselected', detail: event.node.data.name });\\n    }\\n\\n    componentDidMount() {\\n        this.nodeservice.getTreeTableNodes().then(data => this.setState({ nodes: data }));\\n    }\\n\\n    render() {\\n        return (\\n            <div>\\n                <Toast ref={(el) => this.toast = el} />\\n\\n                <div className=\\\"card\\\">\\n                    <h5>Single</h5>\\n                    <TreeTable value={this.state.nodes} selectionMode=\\\"single\\\" selectionKeys={this.state.selectedNodeKey1} onSelectionChange={e => this.setState({ selectedNodeKey1: e.value })}>\\n                        <Column field=\\\"name\\\" header=\\\"Name\\\" expander></Column>\\n                        <Column field=\\\"size\\\" header=\\\"Size\\\"></Column>\\n                        <Column field=\\\"type\\\" header=\\\"Type\\\"></Column>\\n                    </TreeTable>\\n                </div>\\n\\n                <div className=\\\"card\\\">\\n                    <h5>Multiple</h5>\\n                    <TreeTable value={this.state.nodes} selectionMode=\\\"multiple\\\" selectionKeys={this.state.selectedNodeKeys1} onSelectionChange={e => this.setState({ selectedNodeKeys1: e.value })} metaKeySelection={false}>\\n                        <Column field=\\\"name\\\" header=\\\"Name\\\" expander></Column>\\n                        <Column field=\\\"size\\\" header=\\\"Size\\\"></Column>\\n                        <Column field=\\\"type\\\" header=\\\"Type\\\"></Column>\\n                    </TreeTable>\\n                </div>\\n\\n                <div className=\\\"card\\\">\\n                    <h5>Multiple with MetaKey</h5>\\n                    <TreeTable value={this.state.nodes} selectionMode=\\\"multiple\\\" selectionKeys={this.state.selectedNodeKeys2} onSelectionChange={e => this.setState({ selectedNodeKeys2: e.value })} metaKeySelection>\\n                        <Column field=\\\"name\\\" header=\\\"Name\\\" expander></Column>\\n                        <Column field=\\\"size\\\" header=\\\"Size\\\"></Column>\\n                        <Column field=\\\"type\\\" header=\\\"Type\\\"></Column>\\n                    </TreeTable>\\n                </div>\\n\\n                <div className=\\\"card\\\">\\n                    <h5>Events</h5>\\n                    <TreeTable value={this.state.nodes} selectionMode=\\\"single\\\" selectionKeys={this.state.selectedNodeKey2} onSelectionChange={e => this.setState({ selectedNodeKey2: e.value })}\\n                        onSelect={this.onSelect} onUnselect={this.onUnselect}>\\n                        <Column field=\\\"name\\\" header=\\\"Name\\\" expander></Column>\\n                        <Column field=\\\"size\\\" header=\\\"Size\\\"></Column>\\n                        <Column field=\\\"type\\\" header=\\\"Type\\\"></Column>\\n                    </TreeTable>\\n                </div>\\n\\n                <div className=\\\"card\\\">\\n                    <h5>Checkbox</h5>\\n                    <TreeTable value={this.state.nodes} selectionMode=\\\"checkbox\\\" selectionKeys={this.state.selectedNodeKeys3} onSelectionChange={e => this.setState({ selectedNodeKeys3: e.value })}>\\n                        <Column field=\\\"name\\\" header=\\\"Name\\\" expander></Column>\\n                        <Column field=\\\"size\\\" header=\\\"Size\\\"></Column>\\n                        <Column field=\\\"type\\\" header=\\\"Type\\\"></Column>\\n                    </TreeTable>\\n                </div>\\n            </div>\\n        )\\n    }\\n}\\n                \"},'hooks':{tabName:'Hooks Source',content:\"\\nimport React, { useState, useEffect, useRef } from 'react';\\nimport { TreeTable } from 'primereact/treetable';\\nimport { Toast } from 'primereact/toast';\\nimport { Column } from 'primereact/column';\\nimport { NodeService } from '../service/NodeService';\\n\\nconst TreeTableSelectionDemo = () => {\\n    const [nodes, setNodes] = useState([]);\\n    const [selectedNodeKey1, setSelectedNodeKey1] = useState(null);\\n    const [selectedNodeKey2, setSelectedNodeKey2] = useState(null);\\n    const [selectedNodeKeys1, setSelectedNodeKeys1] = useState([]);\\n    const [selectedNodeKeys2, setSelectedNodeKeys2] = useState([]);\\n    const [selectedNodeKeys3, setSelectedNodeKeys3] = useState([]);\\n    const toast = useRef(null);\\n    const nodeservice = new NodeService();\\n\\n    const onSelect = (event) => {\\n        toast.current.show({ severity: 'info', summary: 'Node Selected', detail: event.node.data.name });\\n    }\\n\\n    const onUnselect = (event) => {\\n        toast.current.show({ severity: 'info', summary: 'Node Unselected', detail: event.node.data.name });\\n    }\\n\\n    useEffect(() => {\\n        nodeservice.getTreeTableNodes().then(data => setNodes(data));\\n    }, []); // eslint-disable-line react-hooks/exhaustive-deps\\n\\n    return (\\n        <div>\\n            <Toast ref={toast} />\\n\\n            <div className=\\\"card\\\">\\n                <h5>Single</h5>\\n                <TreeTable value={nodes} selectionMode=\\\"single\\\" selectionKeys={selectedNodeKey1} onSelectionChange={e => setSelectedNodeKey1(e.value)}>\\n                    <Column field=\\\"name\\\" header=\\\"Name\\\" expander></Column>\\n                    <Column field=\\\"size\\\" header=\\\"Size\\\"></Column>\\n                    <Column field=\\\"type\\\" header=\\\"Type\\\"></Column>\\n                </TreeTable>\\n            </div>\\n\\n            <div className=\\\"card\\\">\\n                <h5>Multiple</h5>\\n                <TreeTable value={nodes} selectionMode=\\\"multiple\\\" selectionKeys={selectedNodeKeys1} onSelectionChange={e => setSelectedNodeKeys1(e.value)} metaKeySelection={false}>\\n                    <Column field=\\\"name\\\" header=\\\"Name\\\" expander></Column>\\n                    <Column field=\\\"size\\\" header=\\\"Size\\\"></Column>\\n                    <Column field=\\\"type\\\" header=\\\"Type\\\"></Column>\\n                </TreeTable>\\n            </div>\\n\\n            <div className=\\\"card\\\">\\n                <h5>Multiple with MetaKey</h5>\\n                <TreeTable value={nodes} selectionMode=\\\"multiple\\\" selectionKeys={selectedNodeKeys2} onSelectionChange={e => setSelectedNodeKeys2(e.value)} metaKeySelection>\\n                    <Column field=\\\"name\\\" header=\\\"Name\\\" expander></Column>\\n                    <Column field=\\\"size\\\" header=\\\"Size\\\"></Column>\\n                    <Column field=\\\"type\\\" header=\\\"Type\\\"></Column>\\n                </TreeTable>\\n            </div>\\n\\n            <div className=\\\"card\\\">\\n                <h5>Events</h5>\\n                <TreeTable value={nodes} selectionMode=\\\"single\\\" selectionKeys={selectedNodeKey2} onSelectionChange={e => setSelectedNodeKey2(e.value)}\\n                    onSelect={onSelect} onUnselect={onUnselect}>\\n                    <Column field=\\\"name\\\" header=\\\"Name\\\" expander></Column>\\n                    <Column field=\\\"size\\\" header=\\\"Size\\\"></Column>\\n                    <Column field=\\\"type\\\" header=\\\"Type\\\"></Column>\\n                </TreeTable>\\n            </div>\\n\\n            <div className=\\\"card\\\">\\n                <h5>Checkbox</h5>\\n                <TreeTable value={nodes} selectionMode=\\\"checkbox\\\" selectionKeys={selectedNodeKeys3} onSelectionChange={e => setSelectedNodeKeys3(e.value)}>\\n                    <Column field=\\\"name\\\" header=\\\"Name\\\" expander></Column>\\n                    <Column field=\\\"size\\\" header=\\\"Size\\\"></Column>\\n                    <Column field=\\\"type\\\" header=\\\"Type\\\"></Column>\\n                </TreeTable>\\n            </div>\\n        </div>\\n    )\\n}\\n                \"},'ts':{tabName:'TS Source',content:\"\\nimport React, { useState, useEffect, useRef } from 'react';\\nimport { TreeTable } from 'primereact/treetable';\\nimport { Toast } from 'primereact/toast';\\nimport { Column } from 'primereact/column';\\nimport { NodeService } from '../service/NodeService';\\n\\nconst TreeTableSelectionDemo = () => {\\n    const [nodes, setNodes] = useState([]);\\n    const [selectedNodeKey1, setSelectedNodeKey1] = useState(null);\\n    const [selectedNodeKey2, setSelectedNodeKey2] = useState(null);\\n    const [selectedNodeKeys1, setSelectedNodeKeys1] = useState([]);\\n    const [selectedNodeKeys2, setSelectedNodeKeys2] = useState([]);\\n    const [selectedNodeKeys3, setSelectedNodeKeys3] = useState([]);\\n    const toast = useRef(null);\\n    const nodeservice = new NodeService();\\n\\n    const onSelect = (event) => {\\n        toast.current.show({ severity: 'info', summary: 'Node Selected', detail: event.node.data.name });\\n    }\\n\\n    const onUnselect = (event) => {\\n        toast.current.show({ severity: 'info', summary: 'Node Unselected', detail: event.node.data.name });\\n    }\\n\\n    useEffect(() => {\\n        nodeservice.getTreeTableNodes().then(data => setNodes(data));\\n    }, []); // eslint-disable-line react-hooks/exhaustive-deps\\n\\n    return (\\n        <div>\\n            <Toast ref={toast} />\\n\\n            <div className=\\\"card\\\">\\n                <h5>Single</h5>\\n                <TreeTable value={nodes} selectionMode=\\\"single\\\" selectionKeys={selectedNodeKey1} onSelectionChange={e => setSelectedNodeKey1(e.value)}>\\n                    <Column field=\\\"name\\\" header=\\\"Name\\\" expander></Column>\\n                    <Column field=\\\"size\\\" header=\\\"Size\\\"></Column>\\n                    <Column field=\\\"type\\\" header=\\\"Type\\\"></Column>\\n                </TreeTable>\\n            </div>\\n\\n            <div className=\\\"card\\\">\\n                <h5>Multiple</h5>\\n                <TreeTable value={nodes} selectionMode=\\\"multiple\\\" selectionKeys={selectedNodeKeys1} onSelectionChange={e => setSelectedNodeKeys1(e.value)} metaKeySelection={false}>\\n                    <Column field=\\\"name\\\" header=\\\"Name\\\" expander></Column>\\n                    <Column field=\\\"size\\\" header=\\\"Size\\\"></Column>\\n                    <Column field=\\\"type\\\" header=\\\"Type\\\"></Column>\\n                </TreeTable>\\n            </div>\\n\\n            <div className=\\\"card\\\">\\n                <h5>Multiple with MetaKey</h5>\\n                <TreeTable value={nodes} selectionMode=\\\"multiple\\\" selectionKeys={selectedNodeKeys2} onSelectionChange={e => setSelectedNodeKeys2(e.value)} metaKeySelection>\\n                    <Column field=\\\"name\\\" header=\\\"Name\\\" expander></Column>\\n                    <Column field=\\\"size\\\" header=\\\"Size\\\"></Column>\\n                    <Column field=\\\"type\\\" header=\\\"Type\\\"></Column>\\n                </TreeTable>\\n            </div>\\n\\n            <div className=\\\"card\\\">\\n                <h5>Events</h5>\\n                <TreeTable value={nodes} selectionMode=\\\"single\\\" selectionKeys={selectedNodeKey2} onSelectionChange={e => setSelectedNodeKey2(e.value)}\\n                    onSelect={onSelect} onUnselect={onUnselect}>\\n                    <Column field=\\\"name\\\" header=\\\"Name\\\" expander></Column>\\n                    <Column field=\\\"size\\\" header=\\\"Size\\\"></Column>\\n                    <Column field=\\\"type\\\" header=\\\"Type\\\"></Column>\\n                </TreeTable>\\n            </div>\\n\\n            <div className=\\\"card\\\">\\n                <h5>Checkbox</h5>\\n                <TreeTable value={nodes} selectionMode=\\\"checkbox\\\" selectionKeys={selectedNodeKeys3} onSelectionChange={e => setSelectedNodeKeys3(e.value)}>\\n                    <Column field=\\\"name\\\" header=\\\"Name\\\" expander></Column>\\n                    <Column field=\\\"size\\\" header=\\\"Size\\\"></Column>\\n                    <Column field=\\\"type\\\" header=\\\"Type\\\"></Column>\\n                </TreeTable>\\n            </div>\\n        </div>\\n    )\\n}\\n                \"}};return _this4;}_createClass(TreeTableSelectionDemoDoc,[{key:\"shouldComponentUpdate\",value:function shouldComponentUpdate(){return false;}},{key:\"render\",value:function render(){return/*#__PURE__*/React.createElement(\"div\",{className:\"content-section documentation\"},/*#__PURE__*/React.createElement(TabView,null,useLiveEditorTabs({name:'TreeTableSelectionDemo',sources:this.sources,service:'NodeService',data:'treetablenodes'})));}}]);return TreeTableSelectionDemoDoc;}(Component);","map":{"version":3,"sources":["C:/Users/zura.ph/WebstormProjects/zz-regul/src/showcase/treetable/TreeTableSelectionDemo.js"],"names":["React","Component","TreeTable","Toast","Column","NodeService","TabView","useLiveEditorTabs","AppInlineHeader","TreeTableSelectionDemo","props","state","nodes","selectedNodeKey1","selectedNodeKey2","selectedNodeKeys1","selectedNodeKeys2","selectedNodeKeys3","nodeservice","onSelect","bind","onUnselect","event","toast","show","severity","summary","detail","node","data","name","getTreeTableNodes","then","setState","el","e","value","TreeTableSelectionDemoDoc","sources","tabName","content","service"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { TreeTable } from '../../components/treetable/TreeTable';\r\nimport { Toast } from '../../components/toast/Toast';\r\nimport { Column } from '../../components/column/Column';\r\nimport { NodeService } from '../service/NodeService';\r\nimport { TabView } from '../../components/tabview/TabView';\r\nimport { useLiveEditorTabs }from '../liveeditor/LiveEditor';\r\nimport { AppInlineHeader } from '../../AppInlineHeader';\r\n\r\nexport class TreeTableSelectionDemo extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            nodes: [],\r\n            selectedNodeKey1: null,\r\n            selectedNodeKey2: null,\r\n            selectedNodeKeys1: [],\r\n            selectedNodeKeys2: [],\r\n            selectedNodeKeys3: []\r\n        };\r\n\r\n        this.nodeservice = new NodeService();\r\n        this.onSelect = this.onSelect.bind(this);\r\n        this.onUnselect = this.onUnselect.bind(this);\r\n    }\r\n\r\n    onSelect(event) {\r\n        this.toast.show({ severity: 'info', summary: 'Node Selected', detail: event.node.data.name });\r\n    }\r\n\r\n    onUnselect(event) {\r\n        this.toast.show({ severity: 'info', summary: 'Node Unselected', detail: event.node.data.name });\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.nodeservice.getTreeTableNodes().then(data => this.setState({ nodes: data }));\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div className=\"content-section introduction\">\r\n                    <AppInlineHeader changelogText=\"treeTable\">\r\n                        <h1>TreeTable <span>Selection</span></h1>\r\n                        <p>TreeTable supports single, multiple and checkbox based selection modes.</p>\r\n                    </AppInlineHeader>\r\n                </div>\r\n\r\n                <div className=\"content-section implementation\">\r\n                    <Toast ref={(el) => this.toast = el} />\r\n\r\n                    <div className=\"card\">\r\n                        <h5>Single</h5>\r\n                        <TreeTable value={this.state.nodes} selectionMode=\"single\" selectionKeys={this.state.selectedNodeKey1} onSelectionChange={e => this.setState({ selectedNodeKey1: e.value })}>\r\n                            <Column field=\"name\" header=\"Name\" expander></Column>\r\n                            <Column field=\"size\" header=\"Size\"></Column>\r\n                            <Column field=\"type\" header=\"Type\"></Column>\r\n                        </TreeTable>\r\n                    </div>\r\n\r\n                    <div className=\"card\">\r\n                        <h5>Multiple</h5>\r\n                        <TreeTable value={this.state.nodes} selectionMode=\"multiple\" selectionKeys={this.state.selectedNodeKeys1} onSelectionChange={e => this.setState({ selectedNodeKeys1: e.value })} metaKeySelection={false}>\r\n                            <Column field=\"name\" header=\"Name\" expander></Column>\r\n                            <Column field=\"size\" header=\"Size\"></Column>\r\n                            <Column field=\"type\" header=\"Type\"></Column>\r\n                        </TreeTable>\r\n                    </div>\r\n\r\n                    <div className=\"card\">\r\n                        <h5>Multiple with MetaKey</h5>\r\n                        <TreeTable value={this.state.nodes} selectionMode=\"multiple\" selectionKeys={this.state.selectedNodeKeys2} onSelectionChange={e => this.setState({ selectedNodeKeys2: e.value })} metaKeySelection>\r\n                            <Column field=\"name\" header=\"Name\" expander></Column>\r\n                            <Column field=\"size\" header=\"Size\"></Column>\r\n                            <Column field=\"type\" header=\"Type\"></Column>\r\n                        </TreeTable>\r\n                    </div>\r\n\r\n                    <div className=\"card\">\r\n                        <h5>Events</h5>\r\n                        <TreeTable value={this.state.nodes} selectionMode=\"single\" selectionKeys={this.state.selectedNodeKey2} onSelectionChange={e => this.setState({ selectedNodeKey2: e.value })}\r\n                            onSelect={this.onSelect} onUnselect={this.onUnselect}>\r\n                            <Column field=\"name\" header=\"Name\" expander></Column>\r\n                            <Column field=\"size\" header=\"Size\"></Column>\r\n                            <Column field=\"type\" header=\"Type\"></Column>\r\n                        </TreeTable>\r\n                    </div>\r\n\r\n                    <div className=\"card\">\r\n                        <h5>Checkbox</h5>\r\n                        <TreeTable value={this.state.nodes} selectionMode=\"checkbox\" selectionKeys={this.state.selectedNodeKeys3} onSelectionChange={e => this.setState({ selectedNodeKeys3: e.value })}>\r\n                            <Column field=\"name\" header=\"Name\" expander></Column>\r\n                            <Column field=\"size\" header=\"Size\"></Column>\r\n                            <Column field=\"type\" header=\"Type\"></Column>\r\n                        </TreeTable>\r\n                    </div>\r\n                </div>\r\n\r\n                <TreeTableSelectionDemoDoc />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nclass TreeTableSelectionDemoDoc extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.sources = {\r\n            'class': {\r\n                tabName: 'Class Source',\r\n                content: `\r\nimport React, { Component } from 'react';\r\nimport { TreeTable } from 'primereact/treetable';\r\nimport { Toast } from 'primereact/toast';\r\nimport { Column } from 'primereact/column';\r\nimport { NodeService } from '../service/NodeService';\r\n\r\nexport class TreeTableSelectionDemo extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            nodes: [],\r\n            selectedNodeKey1: null,\r\n            selectedNodeKey2: null,\r\n            selectedNodeKeys1: [],\r\n            selectedNodeKeys2: [],\r\n            selectedNodeKeys3: []\r\n        };\r\n\r\n        this.nodeservice = new NodeService();\r\n        this.onSelect = this.onSelect.bind(this);\r\n        this.onUnselect = this.onUnselect.bind(this);\r\n    }\r\n\r\n    onSelect(event) {\r\n        this.toast.show({ severity: 'info', summary: 'Node Selected', detail: event.node.data.name });\r\n    }\r\n\r\n    onUnselect(event) {\r\n        this.toast.show({ severity: 'info', summary: 'Node Unselected', detail: event.node.data.name });\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.nodeservice.getTreeTableNodes().then(data => this.setState({ nodes: data }));\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Toast ref={(el) => this.toast = el} />\r\n\r\n                <div className=\"card\">\r\n                    <h5>Single</h5>\r\n                    <TreeTable value={this.state.nodes} selectionMode=\"single\" selectionKeys={this.state.selectedNodeKey1} onSelectionChange={e => this.setState({ selectedNodeKey1: e.value })}>\r\n                        <Column field=\"name\" header=\"Name\" expander></Column>\r\n                        <Column field=\"size\" header=\"Size\"></Column>\r\n                        <Column field=\"type\" header=\"Type\"></Column>\r\n                    </TreeTable>\r\n                </div>\r\n\r\n                <div className=\"card\">\r\n                    <h5>Multiple</h5>\r\n                    <TreeTable value={this.state.nodes} selectionMode=\"multiple\" selectionKeys={this.state.selectedNodeKeys1} onSelectionChange={e => this.setState({ selectedNodeKeys1: e.value })} metaKeySelection={false}>\r\n                        <Column field=\"name\" header=\"Name\" expander></Column>\r\n                        <Column field=\"size\" header=\"Size\"></Column>\r\n                        <Column field=\"type\" header=\"Type\"></Column>\r\n                    </TreeTable>\r\n                </div>\r\n\r\n                <div className=\"card\">\r\n                    <h5>Multiple with MetaKey</h5>\r\n                    <TreeTable value={this.state.nodes} selectionMode=\"multiple\" selectionKeys={this.state.selectedNodeKeys2} onSelectionChange={e => this.setState({ selectedNodeKeys2: e.value })} metaKeySelection>\r\n                        <Column field=\"name\" header=\"Name\" expander></Column>\r\n                        <Column field=\"size\" header=\"Size\"></Column>\r\n                        <Column field=\"type\" header=\"Type\"></Column>\r\n                    </TreeTable>\r\n                </div>\r\n\r\n                <div className=\"card\">\r\n                    <h5>Events</h5>\r\n                    <TreeTable value={this.state.nodes} selectionMode=\"single\" selectionKeys={this.state.selectedNodeKey2} onSelectionChange={e => this.setState({ selectedNodeKey2: e.value })}\r\n                        onSelect={this.onSelect} onUnselect={this.onUnselect}>\r\n                        <Column field=\"name\" header=\"Name\" expander></Column>\r\n                        <Column field=\"size\" header=\"Size\"></Column>\r\n                        <Column field=\"type\" header=\"Type\"></Column>\r\n                    </TreeTable>\r\n                </div>\r\n\r\n                <div className=\"card\">\r\n                    <h5>Checkbox</h5>\r\n                    <TreeTable value={this.state.nodes} selectionMode=\"checkbox\" selectionKeys={this.state.selectedNodeKeys3} onSelectionChange={e => this.setState({ selectedNodeKeys3: e.value })}>\r\n                        <Column field=\"name\" header=\"Name\" expander></Column>\r\n                        <Column field=\"size\" header=\"Size\"></Column>\r\n                        <Column field=\"type\" header=\"Type\"></Column>\r\n                    </TreeTable>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n                `\r\n            },\r\n            'hooks': {\r\n                tabName: 'Hooks Source',\r\n                content: `\r\nimport React, { useState, useEffect, useRef } from 'react';\r\nimport { TreeTable } from 'primereact/treetable';\r\nimport { Toast } from 'primereact/toast';\r\nimport { Column } from 'primereact/column';\r\nimport { NodeService } from '../service/NodeService';\r\n\r\nconst TreeTableSelectionDemo = () => {\r\n    const [nodes, setNodes] = useState([]);\r\n    const [selectedNodeKey1, setSelectedNodeKey1] = useState(null);\r\n    const [selectedNodeKey2, setSelectedNodeKey2] = useState(null);\r\n    const [selectedNodeKeys1, setSelectedNodeKeys1] = useState([]);\r\n    const [selectedNodeKeys2, setSelectedNodeKeys2] = useState([]);\r\n    const [selectedNodeKeys3, setSelectedNodeKeys3] = useState([]);\r\n    const toast = useRef(null);\r\n    const nodeservice = new NodeService();\r\n\r\n    const onSelect = (event) => {\r\n        toast.current.show({ severity: 'info', summary: 'Node Selected', detail: event.node.data.name });\r\n    }\r\n\r\n    const onUnselect = (event) => {\r\n        toast.current.show({ severity: 'info', summary: 'Node Unselected', detail: event.node.data.name });\r\n    }\r\n\r\n    useEffect(() => {\r\n        nodeservice.getTreeTableNodes().then(data => setNodes(data));\r\n    }, []); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n    return (\r\n        <div>\r\n            <Toast ref={toast} />\r\n\r\n            <div className=\"card\">\r\n                <h5>Single</h5>\r\n                <TreeTable value={nodes} selectionMode=\"single\" selectionKeys={selectedNodeKey1} onSelectionChange={e => setSelectedNodeKey1(e.value)}>\r\n                    <Column field=\"name\" header=\"Name\" expander></Column>\r\n                    <Column field=\"size\" header=\"Size\"></Column>\r\n                    <Column field=\"type\" header=\"Type\"></Column>\r\n                </TreeTable>\r\n            </div>\r\n\r\n            <div className=\"card\">\r\n                <h5>Multiple</h5>\r\n                <TreeTable value={nodes} selectionMode=\"multiple\" selectionKeys={selectedNodeKeys1} onSelectionChange={e => setSelectedNodeKeys1(e.value)} metaKeySelection={false}>\r\n                    <Column field=\"name\" header=\"Name\" expander></Column>\r\n                    <Column field=\"size\" header=\"Size\"></Column>\r\n                    <Column field=\"type\" header=\"Type\"></Column>\r\n                </TreeTable>\r\n            </div>\r\n\r\n            <div className=\"card\">\r\n                <h5>Multiple with MetaKey</h5>\r\n                <TreeTable value={nodes} selectionMode=\"multiple\" selectionKeys={selectedNodeKeys2} onSelectionChange={e => setSelectedNodeKeys2(e.value)} metaKeySelection>\r\n                    <Column field=\"name\" header=\"Name\" expander></Column>\r\n                    <Column field=\"size\" header=\"Size\"></Column>\r\n                    <Column field=\"type\" header=\"Type\"></Column>\r\n                </TreeTable>\r\n            </div>\r\n\r\n            <div className=\"card\">\r\n                <h5>Events</h5>\r\n                <TreeTable value={nodes} selectionMode=\"single\" selectionKeys={selectedNodeKey2} onSelectionChange={e => setSelectedNodeKey2(e.value)}\r\n                    onSelect={onSelect} onUnselect={onUnselect}>\r\n                    <Column field=\"name\" header=\"Name\" expander></Column>\r\n                    <Column field=\"size\" header=\"Size\"></Column>\r\n                    <Column field=\"type\" header=\"Type\"></Column>\r\n                </TreeTable>\r\n            </div>\r\n\r\n            <div className=\"card\">\r\n                <h5>Checkbox</h5>\r\n                <TreeTable value={nodes} selectionMode=\"checkbox\" selectionKeys={selectedNodeKeys3} onSelectionChange={e => setSelectedNodeKeys3(e.value)}>\r\n                    <Column field=\"name\" header=\"Name\" expander></Column>\r\n                    <Column field=\"size\" header=\"Size\"></Column>\r\n                    <Column field=\"type\" header=\"Type\"></Column>\r\n                </TreeTable>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n                `\r\n            },\r\n            'ts': {\r\n                tabName: 'TS Source',\r\n                content: `\r\nimport React, { useState, useEffect, useRef } from 'react';\r\nimport { TreeTable } from 'primereact/treetable';\r\nimport { Toast } from 'primereact/toast';\r\nimport { Column } from 'primereact/column';\r\nimport { NodeService } from '../service/NodeService';\r\n\r\nconst TreeTableSelectionDemo = () => {\r\n    const [nodes, setNodes] = useState([]);\r\n    const [selectedNodeKey1, setSelectedNodeKey1] = useState(null);\r\n    const [selectedNodeKey2, setSelectedNodeKey2] = useState(null);\r\n    const [selectedNodeKeys1, setSelectedNodeKeys1] = useState([]);\r\n    const [selectedNodeKeys2, setSelectedNodeKeys2] = useState([]);\r\n    const [selectedNodeKeys3, setSelectedNodeKeys3] = useState([]);\r\n    const toast = useRef(null);\r\n    const nodeservice = new NodeService();\r\n\r\n    const onSelect = (event) => {\r\n        toast.current.show({ severity: 'info', summary: 'Node Selected', detail: event.node.data.name });\r\n    }\r\n\r\n    const onUnselect = (event) => {\r\n        toast.current.show({ severity: 'info', summary: 'Node Unselected', detail: event.node.data.name });\r\n    }\r\n\r\n    useEffect(() => {\r\n        nodeservice.getTreeTableNodes().then(data => setNodes(data));\r\n    }, []); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n    return (\r\n        <div>\r\n            <Toast ref={toast} />\r\n\r\n            <div className=\"card\">\r\n                <h5>Single</h5>\r\n                <TreeTable value={nodes} selectionMode=\"single\" selectionKeys={selectedNodeKey1} onSelectionChange={e => setSelectedNodeKey1(e.value)}>\r\n                    <Column field=\"name\" header=\"Name\" expander></Column>\r\n                    <Column field=\"size\" header=\"Size\"></Column>\r\n                    <Column field=\"type\" header=\"Type\"></Column>\r\n                </TreeTable>\r\n            </div>\r\n\r\n            <div className=\"card\">\r\n                <h5>Multiple</h5>\r\n                <TreeTable value={nodes} selectionMode=\"multiple\" selectionKeys={selectedNodeKeys1} onSelectionChange={e => setSelectedNodeKeys1(e.value)} metaKeySelection={false}>\r\n                    <Column field=\"name\" header=\"Name\" expander></Column>\r\n                    <Column field=\"size\" header=\"Size\"></Column>\r\n                    <Column field=\"type\" header=\"Type\"></Column>\r\n                </TreeTable>\r\n            </div>\r\n\r\n            <div className=\"card\">\r\n                <h5>Multiple with MetaKey</h5>\r\n                <TreeTable value={nodes} selectionMode=\"multiple\" selectionKeys={selectedNodeKeys2} onSelectionChange={e => setSelectedNodeKeys2(e.value)} metaKeySelection>\r\n                    <Column field=\"name\" header=\"Name\" expander></Column>\r\n                    <Column field=\"size\" header=\"Size\"></Column>\r\n                    <Column field=\"type\" header=\"Type\"></Column>\r\n                </TreeTable>\r\n            </div>\r\n\r\n            <div className=\"card\">\r\n                <h5>Events</h5>\r\n                <TreeTable value={nodes} selectionMode=\"single\" selectionKeys={selectedNodeKey2} onSelectionChange={e => setSelectedNodeKey2(e.value)}\r\n                    onSelect={onSelect} onUnselect={onUnselect}>\r\n                    <Column field=\"name\" header=\"Name\" expander></Column>\r\n                    <Column field=\"size\" header=\"Size\"></Column>\r\n                    <Column field=\"type\" header=\"Type\"></Column>\r\n                </TreeTable>\r\n            </div>\r\n\r\n            <div className=\"card\">\r\n                <h5>Checkbox</h5>\r\n                <TreeTable value={nodes} selectionMode=\"checkbox\" selectionKeys={selectedNodeKeys3} onSelectionChange={e => setSelectedNodeKeys3(e.value)}>\r\n                    <Column field=\"name\" header=\"Name\" expander></Column>\r\n                    <Column field=\"size\" header=\"Size\"></Column>\r\n                    <Column field=\"type\" header=\"Type\"></Column>\r\n                </TreeTable>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n                `\r\n            }\r\n        }\r\n    }\r\n\r\n    shouldComponentUpdate() {\r\n        return false;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"content-section documentation\">\r\n                <TabView>\r\n                    {\r\n                        useLiveEditorTabs({ name: 'TreeTableSelectionDemo', sources: this.sources, service: 'NodeService', data: 'treetablenodes' })\r\n                    }\r\n                </TabView>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}