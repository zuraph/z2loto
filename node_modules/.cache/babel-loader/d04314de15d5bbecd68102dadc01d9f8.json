{"ast":null,"code":"import _toConsumableArray from\"C:\\\\Users\\\\zura.ph\\\\WebstormProjects\\\\slotmaster-dashboard\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";import _objectSpread from\"C:\\\\Users\\\\zura.ph\\\\WebstormProjects\\\\slotmaster-dashboard\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";import _defineProperty from\"C:\\\\Users\\\\zura.ph\\\\WebstormProjects\\\\slotmaster-dashboard\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";import _classCallCheck from\"C:\\\\Users\\\\zura.ph\\\\WebstormProjects\\\\slotmaster-dashboard\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";import _createClass from\"C:\\\\Users\\\\zura.ph\\\\WebstormProjects\\\\slotmaster-dashboard\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";import _assertThisInitialized from\"C:\\\\Users\\\\zura.ph\\\\WebstormProjects\\\\slotmaster-dashboard\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/assertThisInitialized\";import _inherits from\"C:\\\\Users\\\\zura.ph\\\\WebstormProjects\\\\slotmaster-dashboard\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";import _createSuper from\"C:\\\\Users\\\\zura.ph\\\\WebstormProjects\\\\slotmaster-dashboard\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createSuper\";import React,{Component}from'react';import{DataTable}from'../../components/datatable/DataTable';import{Column}from'../../components/column/Column';import{InputText}from'../../components/inputtext/InputText';import{InputNumber}from'../../components/inputnumber/InputNumber';import{Dropdown}from'../../components/dropdown/Dropdown';import{Toast}from'../../components/toast/Toast';import ProductService from'../service/ProductService';import{TabView}from'../../components/tabview/TabView';import{useLiveEditorTabs}from'../liveeditor/LiveEditor';import{AppInlineHeader}from'../../AppInlineHeader';import'./DataTableDemo.scss';export var DataTableEditDemo=/*#__PURE__*/function(_Component){_inherits(DataTableEditDemo,_Component);var _super=_createSuper(DataTableEditDemo);function DataTableEditDemo(props){var _this;_classCallCheck(this,DataTableEditDemo);_this=_super.call(this,props);_this.state={products1:null,products2:null,products3:null};_this.columns=[{field:'code',header:'Code'},{field:'name',header:'Name'},{field:'quantity',header:'Quantity'},{field:'price',header:'Price'}];_this.statuses=[{label:'In Stock',value:'INSTOCK'},{label:'Low Stock',value:'LOWSTOCK'},{label:'Out of Stock',value:'OUTOFSTOCK'}];_this.editingCellRows={};_this.originalRows={};_this.productService=new ProductService();_this.onRowEditInit=_this.onRowEditInit.bind(_assertThisInitialized(_this));_this.onRowEditCancel=_this.onRowEditCancel.bind(_assertThisInitialized(_this));_this.onEditorInit=_this.onEditorInit.bind(_assertThisInitialized(_this));_this.onEditorCancel=_this.onEditorCancel.bind(_assertThisInitialized(_this));_this.onEditorSubmit=_this.onEditorSubmit.bind(_assertThisInitialized(_this));_this.statusBodyTemplate=_this.statusBodyTemplate.bind(_assertThisInitialized(_this));_this.priceBodyTemplate=_this.priceBodyTemplate.bind(_assertThisInitialized(_this));_this.positiveIntegerValidator=_this.positiveIntegerValidator.bind(_assertThisInitialized(_this));_this.emptyValueValidator=_this.emptyValueValidator.bind(_assertThisInitialized(_this));return _this;}_createClass(DataTableEditDemo,[{key:\"componentDidMount\",value:function componentDidMount(){this.fetchProductData('products1');this.fetchProductData('products2');this.fetchProductData('products3');}},{key:\"fetchProductData\",value:function fetchProductData(productStateKey){var _this2=this;this.productService.getProductsSmall().then(function(data){return _this2.setState(_defineProperty({},\"\".concat(productStateKey),data));});}},{key:\"positiveIntegerValidator\",value:function positiveIntegerValidator(e){var _e$columnProps=e.columnProps,rowData=_e$columnProps.rowData,field=_e$columnProps.field;return this.isPositiveInteger(rowData[field]);}},{key:\"emptyValueValidator\",value:function emptyValueValidator(e){var _e$columnProps2=e.columnProps,rowData=_e$columnProps2.rowData,field=_e$columnProps2.field;return rowData[field].trim().length>0;}},{key:\"isPositiveInteger\",value:function isPositiveInteger(val){var str=String(val);str=str.trim();if(!str){return false;}str=str.replace(/^0+/,\"\")||\"0\";var n=Math.floor(Number(str));return n!==Infinity&&String(n)===str&&n>=0;}},{key:\"onEditorInit\",value:function onEditorInit(e){var _e$columnProps3=e.columnProps,index=_e$columnProps3.rowIndex,field=_e$columnProps3.field,rowData=_e$columnProps3.rowData;if(!this.editingCellRows[index]){this.editingCellRows[index]=_objectSpread({},rowData);}this.editingCellRows[index][field]=this.state.products2[index][field];}},{key:\"onEditorCancel\",value:function onEditorCancel(e){var _e$columnProps4=e.columnProps,index=_e$columnProps4.rowIndex,field=_e$columnProps4.field;var products=_toConsumableArray(this.state.products2);products[index][field]=this.editingCellRows[index][field];delete this.editingCellRows[index][field];this.setState({products2:products});}},{key:\"onEditorSubmit\",value:function onEditorSubmit(e){var _e$columnProps5=e.columnProps,index=_e$columnProps5.rowIndex,field=_e$columnProps5.field;delete this.editingCellRows[index][field];}},{key:\"onRowEditInit\",value:function onRowEditInit(event){this.originalRows[event.index]=_objectSpread({},this.state.products3[event.index]);}},{key:\"onRowEditCancel\",value:function onRowEditCancel(event){var products=_toConsumableArray(this.state.products3);products[event.index]=this.originalRows[event.index];delete this.originalRows[event.index];this.setState({products3:products});}},{key:\"getStatusLabel\",value:function getStatusLabel(status){switch(status){case'INSTOCK':return'In Stock';case'LOWSTOCK':return'Low Stock';case'OUTOFSTOCK':return'Out of Stock';default:return'NA';}}},{key:\"onEditorValueChange\",value:function onEditorValueChange(productKey,props,value){var updatedProducts=_toConsumableArray(props.value);updatedProducts[props.rowIndex][props.field]=value;this.setState(_defineProperty({},\"\".concat(productKey),updatedProducts));}},{key:\"inputTextEditor\",value:function inputTextEditor(productKey,props,field){var _this3=this;return/*#__PURE__*/React.createElement(InputText,{type:\"text\",value:props.rowData[field],onChange:function onChange(e){return _this3.onEditorValueChange(productKey,props,e.target.value);}});}},{key:\"codeEditor\",value:function codeEditor(productKey,props){return this.inputTextEditor(productKey,props,'code');}},{key:\"nameEditor\",value:function nameEditor(productKey,props){return this.inputTextEditor(productKey,props,'name');}},{key:\"priceEditor\",value:function priceEditor(productKey,props){var _this4=this;return/*#__PURE__*/React.createElement(InputNumber,{value:props.rowData['price'],onValueChange:function onValueChange(e){return _this4.onEditorValueChange(productKey,props,e.value);},mode:\"currency\",currency:\"USD\",locale:\"en-US\"});}},{key:\"statusEditor\",value:function statusEditor(productKey,props){var _this5=this;return/*#__PURE__*/React.createElement(Dropdown,{value:props.rowData['inventoryStatus'],options:this.statuses,optionLabel:\"label\",optionValue:\"value\",onChange:function onChange(e){return _this5.onEditorValueChange(productKey,props,e.value);},style:{width:'100%'},placeholder:\"Select a Status\",itemTemplate:function itemTemplate(option){return/*#__PURE__*/React.createElement(\"span\",{className:\"product-badge status-\".concat(option.value.toLowerCase())},option.label);}});}},{key:\"statusBodyTemplate\",value:function statusBodyTemplate(rowData){return this.getStatusLabel(rowData.inventoryStatus);}},{key:\"priceBodyTemplate\",value:function priceBodyTemplate(rowData){return new Intl.NumberFormat('en-US',{style:'currency',currency:'USD'}).format(rowData.price);}},{key:\"render\",value:function render(){var _this6=this;return/*#__PURE__*/React.createElement(\"div\",null,/*#__PURE__*/React.createElement(\"div\",{className:\"content-section introduction\"},/*#__PURE__*/React.createElement(AppInlineHeader,{changelogText:\"dataTable\"},/*#__PURE__*/React.createElement(\"h1\",null,\"DataTable \",/*#__PURE__*/React.createElement(\"span\",null,\"Edit\")),/*#__PURE__*/React.createElement(\"p\",null,\"Cell and Row editing provides a rapid and user friendly way to manipulate data.\"))),/*#__PURE__*/React.createElement(\"div\",{className:\"content-section implementation datatable-editing-demo\"},/*#__PURE__*/React.createElement(Toast,{ref:function ref(el){return _this6.toast=el;}}),/*#__PURE__*/React.createElement(\"div\",{className:\"card\"},/*#__PURE__*/React.createElement(\"h5\",null,\"Basic Cell Editing\"),/*#__PURE__*/React.createElement(DataTable,{value:this.state.products1,editMode:\"cell\",className:\"editable-cells-table\"},/*#__PURE__*/React.createElement(Column,{field:\"code\",header:\"Code\",editor:function editor(props){return _this6.codeEditor('products1',props);}}),/*#__PURE__*/React.createElement(Column,{field:\"name\",header:\"Name\",editor:function editor(props){return _this6.nameEditor('products1',props);}}),/*#__PURE__*/React.createElement(Column,{field:\"inventoryStatus\",header:\"Status\",body:this.statusBodyTemplate,editor:function editor(props){return _this6.statusEditor('products1',props);}}),/*#__PURE__*/React.createElement(Column,{field:\"price\",header:\"Price\",body:this.priceBodyTemplate,editor:function editor(props){return _this6.priceEditor('products1',props);}}))),/*#__PURE__*/React.createElement(\"div\",{className:\"card\"},/*#__PURE__*/React.createElement(\"h5\",null,\"Advanced Cell Editing\"),/*#__PURE__*/React.createElement(\"p\",null,\"Custom implementation with validations, dynamic columns and reverting values with the escape key.\"),/*#__PURE__*/React.createElement(DataTable,{value:this.state.products2,editMode:\"cell\",className:\"editable-cells-table\"},this.columns.map(function(col){var field=col.field,header=col.header;var validator=field==='quantity'||field==='price'?_this6.positiveIntegerValidator:_this6.emptyValueValidator;return/*#__PURE__*/React.createElement(Column,{key:field,field:field,header:header,body:field==='price'&&_this6.priceBodyTemplate,editor:function editor(props){return _this6.inputTextEditor('products2',props,field);},editorValidator:validator,onEditorInit:_this6.onEditorInit,onEditorCancel:_this6.onEditorCancel,onEditorSubmit:_this6.onEditorSubmit});}))),/*#__PURE__*/React.createElement(\"div\",{className:\"card\"},/*#__PURE__*/React.createElement(\"h5\",null,\"Row Editing\"),/*#__PURE__*/React.createElement(DataTable,{value:this.state.products3,editMode:\"row\",dataKey:\"id\",onRowEditInit:this.onRowEditInit,onRowEditCancel:this.onRowEditCancel},/*#__PURE__*/React.createElement(Column,{field:\"code\",header:\"Code\",editor:function editor(props){return _this6.codeEditor('products3',props);}}),/*#__PURE__*/React.createElement(Column,{field:\"name\",header:\"Name\",editor:function editor(props){return _this6.nameEditor('products3',props);}}),/*#__PURE__*/React.createElement(Column,{field:\"inventoryStatus\",header:\"Status\",body:this.statusBodyTemplate,editor:function editor(props){return _this6.statusEditor('products3',props);}}),/*#__PURE__*/React.createElement(Column,{field:\"price\",header:\"Price\",body:this.priceBodyTemplate,editor:function editor(props){return _this6.priceEditor('products3',props);}}),/*#__PURE__*/React.createElement(Column,{rowEditor:true,headerStyle:{width:'7rem'},bodyStyle:{textAlign:'center'}})))),/*#__PURE__*/React.createElement(DataTableEditDemoDoc,null));}}]);return DataTableEditDemo;}(Component);export var DataTableEditDemoDoc=/*#__PURE__*/function(_Component2){_inherits(DataTableEditDemoDoc,_Component2);var _super2=_createSuper(DataTableEditDemoDoc);function DataTableEditDemoDoc(props){var _this7;_classCallCheck(this,DataTableEditDemoDoc);_this7=_super2.call(this,props);_this7.sources={'class':{tabName:'Class Source',content:\"\\nimport React, { Component } from 'react';\\nimport { DataTable } from 'primereact/datatable';\\nimport { Column } from 'primereact/column';\\nimport { InputText } from 'primereact/inputtext';\\nimport { InputNumber } from 'primereact/inputnumber';\\nimport { Dropdown } from 'primereact/dropdown';\\nimport { Toast } from 'primereact/toast';\\nimport ProductService from '../service/ProductService';\\nimport './DataTableDemo.css';\\n\\nexport class DataTableEditDemo extends Component {\\n\\n    constructor(props) {\\n        super(props);\\n\\n        this.state = {\\n            products1: null,\\n            products2: null,\\n            products3: null\\n        };\\n\\n        this.columns = [\\n            { field: 'code', header: 'Code' },\\n            { field: 'name', header: 'Name' },\\n            { field: 'quantity', header: 'Quantity' },\\n            { field: 'price', header: 'Price' }\\n        ];\\n\\n        this.statuses = [\\n            { label: 'In Stock', value: 'INSTOCK' },\\n            { label: 'Low Stock', value: 'LOWSTOCK' },\\n            { label: 'Out of Stock', value: 'OUTOFSTOCK' }\\n        ];\\n\\n        this.editingCellRows = {};\\n        this.originalRows = {};\\n\\n        this.productService = new ProductService();\\n        this.onRowEditInit = this.onRowEditInit.bind(this);\\n        this.onRowEditCancel = this.onRowEditCancel.bind(this);\\n        this.onEditorInit = this.onEditorInit.bind(this);\\n        this.onEditorCancel = this.onEditorCancel.bind(this);\\n        this.onEditorSubmit = this.onEditorSubmit.bind(this);\\n        this.statusBodyTemplate = this.statusBodyTemplate.bind(this);\\n        this.positiveIntegerValidator = this.positiveIntegerValidator.bind(this);\\n        this.emptyValueValidator = this.emptyValueValidator.bind(this);\\n    }\\n\\n    componentDidMount() {\\n        this.fetchProductData('products1');\\n        this.fetchProductData('products2');\\n        this.fetchProductData('products3');\\n    }\\n\\n    fetchProductData(productStateKey) {\\n        this.productService.getProductsSmall().then(data => this.setState({ [`${productStateKey}`]: data }));\\n    }\\n\\n    positiveIntegerValidator(e) {\\n        const { rowData, field } = e.columnProps;\\n        return this.isPositiveInteger(rowData[field]);\\n    }\\n\\n    emptyValueValidator(e) {\\n        const { rowData, field } = e.columnProps;\\n        return rowData[field].trim().length > 0;\\n    }\\n\\n    isPositiveInteger(val) {\\n        let str = String(val);\\n        str = str.trim();\\n        if (!str) {\\n            return false;\\n        }\\n        str = str.replace(/^0+/, \\\"\\\") || \\\"0\\\";\\n        let n = Math.floor(Number(str));\\n        return n !== Infinity && String(n) === str && n >= 0;\\n    }\\n\\n    onEditorInit(e) {\\n        const { rowIndex: index, field, rowData } = e.columnProps;\\n        if (!this.editingCellRows[index]) {\\n            this.editingCellRows[index] = {...rowData};\\n        }\\n        this.editingCellRows[index][field] = this.state.products2[index][field];\\n    }\\n\\n    onEditorCancel(e) {\\n        const { rowIndex: index, field } = e.columnProps;\\n        let products = [...this.state.products2];\\n        products[index][field] = this.editingCellRows[index][field];\\n        delete this.editingCellRows[index][field];\\n\\n        this.setState({\\n            products2: products\\n        });\\n    }\\n\\n    onEditorSubmit(e) {\\n        const { rowIndex: index, field } = e.columnProps;\\n        delete this.editingCellRows[index][field];\\n    }\\n\\n    onRowEditInit(event) {\\n        this.originalRows[event.index] = { ...this.state.products3[event.index] };\\n    }\\n\\n    onRowEditCancel(event) {\\n        let products = [...this.state.products3];\\n        products[event.index] = this.originalRows[event.index];\\n        delete this.originalRows[event.index];\\n\\n        this.setState({ products3: products });\\n    }\\n\\n    getStatusLabel(status) {\\n        switch (status) {\\n            case 'INSTOCK':\\n                return 'In Stock';\\n\\n            case 'LOWSTOCK':\\n                return 'Low Stock';\\n\\n            case 'OUTOFSTOCK':\\n                return 'Out of Stock';\\n\\n            default:\\n                return 'NA';\\n        }\\n    }\\n\\n    onEditorValueChange(productKey, props, value) {\\n        let updatedProducts = [...props.value];\\n        updatedProducts[props.rowIndex][props.field] = value;\\n        this.setState({ [`${productKey}`]: updatedProducts });\\n    }\\n\\n    inputTextEditor(productKey, props, field) {\\n        return <InputText type=\\\"text\\\" value={props.rowData[field]} onChange={(e) => this.onEditorValueChange(productKey, props, e.target.value)} />;\\n    }\\n\\n    codeEditor(productKey, props) {\\n        return this.inputTextEditor(productKey, props, 'code');\\n    }\\n\\n    nameEditor(productKey, props) {\\n        return this.inputTextEditor(productKey, props, 'name');\\n    }\\n\\n    priceEditor(productKey, props) {\\n        return <InputNumber value={props.rowData['price']} onValueChange={(e) => this.onEditorValueChange(productKey, props, e.value)} mode=\\\"currency\\\" currency=\\\"USD\\\" locale=\\\"en-US\\\" />\\n    }\\n\\n    statusEditor(productKey, props) {\\n        return (\\n            <Dropdown value={props.rowData['inventoryStatus']} options={this.statuses} optionLabel=\\\"label\\\" optionValue=\\\"value\\\"\\n                onChange={(e) => this.onEditorValueChange(productKey, props, e.value)} style={{ width: '100%' }} placeholder=\\\"Select a Status\\\"\\n                itemTemplate={(option) => {\\n                    return <span className={`product-badge status-${option.value.toLowerCase()}`}>{option.label}</span>\\n                }} />\\n        );\\n    }\\n\\n    statusBodyTemplate(rowData) {\\n        return this.getStatusLabel(rowData.inventoryStatus);\\n    }\\n\\n    priceBodyTemplate(rowData) {\\n        return new Intl.NumberFormat('en-US', {style: 'currency', currency: 'USD'}).format(rowData.price);\\n    }\\n\\n    render() {\\n        return (\\n            <div className=\\\"datatable-editing-demo\\\">\\n                <Toast ref={(el) => this.toast = el} />\\n\\n                <div className=\\\"card\\\">\\n                    <h5>Basic Cell Editing</h5>\\n                    <DataTable value={this.state.products1} editMode=\\\"cell\\\" className=\\\"editable-cells-table\\\">\\n                        <Column field=\\\"code\\\" header=\\\"Code\\\" editor={(props) => this.codeEditor('products1', props)}></Column>\\n                        <Column field=\\\"name\\\" header=\\\"Name\\\" editor={(props) => this.nameEditor('products1', props)}></Column>\\n                        <Column field=\\\"inventoryStatus\\\" header=\\\"Status\\\" body={this.statusBodyTemplate} editor={(props) => this.statusEditor('products1', props)}></Column>\\n                        <Column field=\\\"price\\\" header=\\\"Price\\\" body={this.priceBodyTemplate} editor={(props) => this.priceEditor('products1', props)}></Column>\\n                    </DataTable>\\n                </div>\\n\\n                <div className=\\\"card\\\">\\n                    <h5>Advanced Cell Editing</h5>\\n                    <p>Custom implementation with validations, dynamic columns and reverting values with the escape key.</p>\\n                    <DataTable value={this.state.products2} editMode=\\\"cell\\\" className=\\\"editable-cells-table\\\">\\n                        {\\n                            this.columns.map(col => {\\n                                const { field, header } = col;\\n                                const validator = (field === 'quantity' || field === 'price') ? this.positiveIntegerValidator : this.emptyValueValidator;\\n                                return <Column key={field} field={field} header={header} body={field === 'price' && this.priceBodyTemplate}\\n                                    editor={(props) => this.inputTextEditor('products2', props, field)} editorValidator={validator}\\n                                    onEditorInit={this.onEditorInit} onEditorCancel={this.onEditorCancel} onEditorSubmit={this.onEditorSubmit} />\\n                            })\\n                        }\\n                    </DataTable>\\n                </div>\\n\\n                <div className=\\\"card\\\">\\n                    <h5>Row Editing</h5>\\n                    <DataTable value={this.state.products3} editMode=\\\"row\\\" dataKey=\\\"id\\\" onRowEditInit={this.onRowEditInit} onRowEditCancel={this.onRowEditCancel}>\\n                        <Column field=\\\"code\\\" header=\\\"Code\\\" editor={(props) => this.codeEditor('products3', props)}></Column>\\n                        <Column field=\\\"name\\\" header=\\\"Name\\\" editor={(props) => this.nameEditor('products3', props)}></Column>\\n                        <Column field=\\\"inventoryStatus\\\" header=\\\"Status\\\" body={this.statusBodyTemplate} editor={(props) => this.statusEditor('products3', props)}></Column>\\n                        <Column field=\\\"price\\\" header=\\\"Price\\\" body={this.priceBodyTemplate} editor={(props) => this.priceEditor('products3', props)}></Column>\\n                        <Column rowEditor headerStyle={{ width: '7rem' }} bodyStyle={{ textAlign: 'center' }}></Column>\\n                    </DataTable>\\n                </div>\\n            </div>\\n        );\\n    }\\n}\\n                \"},'hooks':{tabName:'Hooks Source',content:\"\\nimport React, { useState, useEffect, useRef } from 'react';\\nimport { DataTable } from 'primereact/datatable';\\nimport { Column } from 'primereact/column';\\nimport { InputText } from 'primereact/inputtext';\\nimport { InputNumber } from 'primereact/inputnumber';\\nimport { Dropdown } from 'primereact/dropdown';\\nimport { Toast } from 'primereact/toast';\\nimport ProductService from '../service/ProductService';\\nimport './DataTableDemo.css';\\n\\nconst DataTableEditDemo = () => {\\n    const [products1, setProducts1] = useState(null);\\n    const [products2, setProducts2] = useState(null);\\n    const [products3, setProducts3] = useState(null);\\n    const toast = useRef(null);\\n    const columns = [\\n        { field: 'code', header: 'Code' },\\n        { field: 'name', header: 'Name' },\\n        { field: 'quantity', header: 'Quantity' },\\n        { field: 'price', header: 'Price' }\\n    ];\\n\\n    const statuses = [\\n        { label: 'In Stock', value: 'INSTOCK' },\\n        { label: 'Low Stock', value: 'LOWSTOCK' },\\n        { label: 'Out of Stock', value: 'OUTOFSTOCK' }\\n    ];\\n\\n    let editingCellRows = {};\\n    let originalRows = {};\\n\\n    const dataTableFuncMap = {\\n        'products1': setProducts1,\\n        'products2': setProducts2,\\n        'products3': setProducts3\\n    };\\n\\n    const productService = new ProductService();\\n\\n    useEffect(() => {\\n        fetchProductData('products1');\\n        fetchProductData('products2');\\n        fetchProductData('products3');\\n    }, []); // eslint-disable-line react-hooks/exhaustive-deps\\n\\n    const fetchProductData = (productStateKey) => {\\n        productService.getProductsSmall().then(data => dataTableFuncMap[`${productStateKey}`](data));\\n    }\\n\\n    const positiveIntegerValidator = (e) => {\\n        const { rowData, field } = e.columnProps;\\n        return isPositiveInteger(rowData[field]);\\n    }\\n\\n    const emptyValueValidator = (e) => {\\n        const { rowData, field } = e.columnProps;\\n        return rowData[field].trim().length > 0;\\n    }\\n\\n    const isPositiveInteger = (val) => {\\n        let str = String(val);\\n        str = str.trim();\\n        if (!str) {\\n            return false;\\n        }\\n        str = str.replace(/^0+/, \\\"\\\") || \\\"0\\\";\\n        let n = Math.floor(Number(str));\\n        return n !== Infinity && String(n) === str && n >= 0;\\n    }\\n\\n    const onEditorInit = (e) => {\\n        const { rowIndex: index, field, rowData } = e.columnProps;\\n        if (!editingCellRows[index]) {\\n            editingCellRows[index] = {...rowData};\\n        }\\n        editingCellRows[index][field] = products2[index][field];\\n    }\\n\\n    const onEditorCancel = (e) => {\\n        const { rowIndex: index, field } = e.columnProps;\\n        let products = [...products2];\\n        products[index][field] = editingCellRows[index][field];\\n        delete editingCellRows[index][field];\\n\\n        setProducts2(products);\\n    }\\n\\n    const onEditorSubmit = (e) => {\\n        const { rowIndex: index, field } = e.columnProps;\\n        delete editingCellRows[index][field];\\n    }\\n\\n    const onRowEditInit = (event) => {\\n        originalRows[event.index] = { ...products3[event.index] };\\n    }\\n\\n    const onRowEditCancel = (event) => {\\n        let products = [...products3];\\n        products[event.index] = originalRows[event.index];\\n        delete originalRows[event.index];\\n\\n        setProducts3(products);\\n    }\\n\\n    const getStatusLabel = (status) => {\\n        switch (status) {\\n            case 'INSTOCK':\\n                return 'In Stock';\\n\\n            case 'LOWSTOCK':\\n                return 'Low Stock';\\n\\n            case 'OUTOFSTOCK':\\n                return 'Out of Stock';\\n\\n            default:\\n                return 'NA';\\n        }\\n    }\\n\\n    const onEditorValueChange = (productKey, props, value) => {\\n        let updatedProducts = [...props.value];\\n        updatedProducts[props.rowIndex][props.field] = value;\\n        dataTableFuncMap[`${productKey}`](updatedProducts);\\n    }\\n\\n    const inputTextEditor = (productKey, props, field) => {\\n        return <InputText type=\\\"text\\\" value={props.rowData[field]} onChange={(e) => onEditorValueChange(productKey, props, e.target.value)} />;\\n    }\\n\\n    const codeEditor = (productKey, props) => {\\n        return inputTextEditor(productKey, props, 'code');\\n    }\\n\\n    const nameEditor = (productKey, props) => {\\n        return inputTextEditor(productKey, props, 'name');\\n    }\\n\\n    const priceEditor = (productKey, props) => {\\n        return <InputNumber value={props.rowData['price']} onValueChange={(e) => onEditorValueChange(productKey, props, e.value)} mode=\\\"currency\\\" currency=\\\"USD\\\" locale=\\\"en-US\\\" />\\n    }\\n\\n    const statusEditor = (productKey, props) => {\\n        return (\\n            <Dropdown value={props.rowData['inventoryStatus']} options={statuses} optionLabel=\\\"label\\\" optionValue=\\\"value\\\"\\n                onChange={(e) => onEditorValueChange(productKey, props, e.value)} style={{ width: '100%' }} placeholder=\\\"Select a Status\\\"\\n                itemTemplate={(option) => {\\n                    return <span className={`product-badge status-${option.value.toLowerCase()}`}>{option.label}</span>\\n                }} />\\n        );\\n    }\\n\\n    const statusBodyTemplate = (rowData) => {\\n        return getStatusLabel(rowData.inventoryStatus);\\n    }\\n\\n    const priceBodyTemplate = (rowData) => {\\n        return new Intl.NumberFormat('en-US', {style: 'currency', currency: 'USD'}).format(rowData.price);\\n    }\\n\\n    return (\\n        <div className=\\\"datatable-editing-demo\\\">\\n            <Toast ref={toast} />\\n\\n            <div className=\\\"card\\\">\\n                <h5>Basic Cell Editing</h5>\\n                <DataTable value={products1} editMode=\\\"cell\\\" className=\\\"editable-cells-table\\\">\\n                    <Column field=\\\"code\\\" header=\\\"Code\\\" editor={(props) => codeEditor('products1', props)}></Column>\\n                    <Column field=\\\"name\\\" header=\\\"Name\\\" editor={(props) => nameEditor('products1', props)}></Column>\\n                    <Column field=\\\"inventoryStatus\\\" header=\\\"Status\\\" body={statusBodyTemplate} editor={(props) => statusEditor('products1', props)}></Column>\\n                    <Column field=\\\"price\\\" header=\\\"Price\\\" body={priceBodyTemplate} editor={(props) => priceEditor('products1', props)}></Column>\\n                </DataTable>\\n            </div>\\n\\n            <div className=\\\"card\\\">\\n                <h5>Advanced Cell Editing</h5>\\n                <p>Custom implementation with validations, dynamic columns and reverting values with the escape key.</p>\\n                <DataTable value={products2} editMode=\\\"cell\\\" className=\\\"editable-cells-table\\\">\\n                    {\\n                        columns.map(col => {\\n                            const { field, header } = col;\\n                            const validator = (field === 'quantity' || field === 'price') ? positiveIntegerValidator : emptyValueValidator;\\n                            return <Column key={field} field={field} header={header} body={field === 'price' && priceBodyTemplate}\\n                                editor={(props) => inputTextEditor('products2', props, field)} editorValidator={validator}\\n                                onEditorInit={onEditorInit} onEditorCancel={onEditorCancel} onEditorSubmit={onEditorSubmit} />\\n                        })\\n                    }\\n                </DataTable>\\n            </div>\\n\\n            <div className=\\\"card\\\">\\n                <h5>Row Editing</h5>\\n                <DataTable value={products3} editMode=\\\"row\\\" dataKey=\\\"id\\\" onRowEditInit={onRowEditInit} onRowEditCancel={onRowEditCancel}>\\n                    <Column field=\\\"code\\\" header=\\\"Code\\\" editor={(props) => codeEditor('products3', props)}></Column>\\n                    <Column field=\\\"name\\\" header=\\\"Name\\\" editor={(props) => nameEditor('products3', props)}></Column>\\n                    <Column field=\\\"inventoryStatus\\\" header=\\\"Status\\\" body={statusBodyTemplate} editor={(props) => statusEditor('products3', props)}></Column>\\n                    <Column field=\\\"price\\\" header=\\\"Price\\\" body={priceBodyTemplate} editor={(props) => priceEditor('products3', props)}></Column>\\n                    <Column rowEditor headerStyle={{ width: '7rem' }} bodyStyle={{ textAlign: 'center' }}></Column>\\n                </DataTable>\\n            </div>\\n        </div>\\n    );\\n}\\n                \"},'ts':{tabName:'TS Source',content:\"\\nimport React, { useState, useEffect, useRef } from 'react';\\nimport { DataTable } from 'primereact/datatable';\\nimport { Column } from 'primereact/column';\\nimport { InputText } from 'primereact/inputtext';\\nimport { InputNumber } from 'primereact/inputnumber';\\nimport { Dropdown } from 'primereact/dropdown';\\nimport { Toast } from 'primereact/toast';\\nimport ProductService from '../service/ProductService';\\nimport './DataTableDemo.css';\\n\\nconst DataTableEditDemo = () => {\\n    const [products1, setProducts1] = useState(null);\\n    const [products2, setProducts2] = useState(null);\\n    const [products3, setProducts3] = useState(null);\\n    const toast = useRef(null);\\n    const columns = [\\n        { field: 'code', header: 'Code' },\\n        { field: 'name', header: 'Name' },\\n        { field: 'quantity', header: 'Quantity' },\\n        { field: 'price', header: 'Price' }\\n    ];\\n\\n    const statuses = [\\n        { label: 'In Stock', value: 'INSTOCK' },\\n        { label: 'Low Stock', value: 'LOWSTOCK' },\\n        { label: 'Out of Stock', value: 'OUTOFSTOCK' }\\n    ];\\n\\n    let editingCellRows = {};\\n    let originalRows = {};\\n\\n    const dataTableFuncMap = {\\n        'products1': setProducts1,\\n        'products2': setProducts2,\\n        'products3': setProducts3\\n    };\\n\\n    const productService = new ProductService();\\n\\n    useEffect(() => {\\n        fetchProductData('products1');\\n        fetchProductData('products2');\\n        fetchProductData('products3');\\n    }, []); // eslint-disable-line react-hooks/exhaustive-deps\\n\\n    const fetchProductData = (productStateKey) => {\\n        productService.getProductsSmall().then(data => dataTableFuncMap[`${productStateKey}`](data));\\n    }\\n\\n    const positiveIntegerValidator = (e) => {\\n        const { rowData, field } = e.columnProps;\\n        return isPositiveInteger(rowData[field]);\\n    }\\n\\n    const emptyValueValidator = (e) => {\\n        const { rowData, field } = e.columnProps;\\n        return rowData[field].trim().length > 0;\\n    }\\n\\n    const isPositiveInteger = (val) => {\\n        let str = String(val);\\n        str = str.trim();\\n        if (!str) {\\n            return false;\\n        }\\n        str = str.replace(/^0+/, \\\"\\\") || \\\"0\\\";\\n        let n = Math.floor(Number(str));\\n        return n !== Infinity && String(n) === str && n >= 0;\\n    }\\n\\n    const onEditorInit = (e) => {\\n        const { rowIndex: index, field, rowData } = e.columnProps;\\n        if (!editingCellRows[index]) {\\n            editingCellRows[index] = {...rowData};\\n        }\\n        editingCellRows[index][field] = products2[index][field];\\n    }\\n\\n    const onEditorCancel = (e) => {\\n        const { rowIndex: index, field } = e.columnProps;\\n        let products = [...products2];\\n        products[index][field] = editingCellRows[index][field];\\n        delete editingCellRows[index][field];\\n\\n        setProducts2(products);\\n    }\\n\\n    const onEditorSubmit = (e) => {\\n        const { rowIndex: index, field } = e.columnProps;\\n        delete editingCellRows[index][field];\\n    }\\n\\n    const onRowEditInit = (event) => {\\n        originalRows[event.index] = { ...products3[event.index] };\\n    }\\n\\n    const onRowEditCancel = (event) => {\\n        let products = [...products3];\\n        products[event.index] = originalRows[event.index];\\n        delete originalRows[event.index];\\n\\n        setProducts3(products);\\n    }\\n\\n    const getStatusLabel = (status) => {\\n        switch (status) {\\n            case 'INSTOCK':\\n                return 'In Stock';\\n\\n            case 'LOWSTOCK':\\n                return 'Low Stock';\\n\\n            case 'OUTOFSTOCK':\\n                return 'Out of Stock';\\n\\n            default:\\n                return 'NA';\\n        }\\n    }\\n\\n    const onEditorValueChange = (productKey, props, value) => {\\n        let updatedProducts = [...props.value];\\n        updatedProducts[props.rowIndex][props.field] = value;\\n        dataTableFuncMap[`${productKey}`](updatedProducts);\\n    }\\n\\n    const inputTextEditor = (productKey, props, field) => {\\n        return <InputText type=\\\"text\\\" value={props.rowData[field]} onChange={(e) => onEditorValueChange(productKey, props, e.target.value)} />;\\n    }\\n\\n    const codeEditor = (productKey, props) => {\\n        return inputTextEditor(productKey, props, 'code');\\n    }\\n\\n    const nameEditor = (productKey, props) => {\\n        return inputTextEditor(productKey, props, 'name');\\n    }\\n\\n    const priceEditor = (productKey, props) => {\\n        return <InputNumber value={props.rowData['price']} onValueChange={(e) => onEditorValueChange(productKey, props, e.value)} mode=\\\"currency\\\" currency=\\\"USD\\\" locale=\\\"en-US\\\" />\\n    }\\n\\n    const statusEditor = (productKey, props) => {\\n        return (\\n            <Dropdown value={props.rowData['inventoryStatus']} options={statuses} optionLabel=\\\"label\\\" optionValue=\\\"value\\\"\\n                onChange={(e) => onEditorValueChange(productKey, props, e.value)} style={{ width: '100%' }} placeholder=\\\"Select a Status\\\"\\n                itemTemplate={(option) => {\\n                    return <span className={`product-badge status-${option.value.toLowerCase()}`}>{option.label}</span>\\n                }} />\\n        );\\n    }\\n\\n    const statusBodyTemplate = (rowData) => {\\n        return getStatusLabel(rowData.inventoryStatus);\\n    }\\n\\n    const priceBodyTemplate = (rowData) => {\\n        return new Intl.NumberFormat('en-US', {style: 'currency', currency: 'USD'}).format(rowData.price);\\n    }\\n\\n    return (\\n        <div className=\\\"datatable-editing-demo\\\">\\n            <Toast ref={toast} />\\n\\n            <div className=\\\"card\\\">\\n                <h5>Basic Cell Editing</h5>\\n                <DataTable value={products1} editMode=\\\"cell\\\" className=\\\"editable-cells-table\\\">\\n                    <Column field=\\\"code\\\" header=\\\"Code\\\" editor={(props) => codeEditor('products1', props)}></Column>\\n                    <Column field=\\\"name\\\" header=\\\"Name\\\" editor={(props) => nameEditor('products1', props)}></Column>\\n                    <Column field=\\\"inventoryStatus\\\" header=\\\"Status\\\" body={statusBodyTemplate} editor={(props) => statusEditor('products1', props)}></Column>\\n                    <Column field=\\\"price\\\" header=\\\"Price\\\" body={priceBodyTemplate} editor={(props) => priceEditor('products1', props)}></Column>\\n                </DataTable>\\n            </div>\\n\\n            <div className=\\\"card\\\">\\n                <h5>Advanced Cell Editing</h5>\\n                <p>Custom implementation with validations, dynamic columns and reverting values with the escape key.</p>\\n                <DataTable value={products2} editMode=\\\"cell\\\" className=\\\"editable-cells-table\\\">\\n                    {\\n                        columns.map(col => {\\n                            const { field, header } = col;\\n                            const validator = (field === 'quantity' || field === 'price') ? positiveIntegerValidator : emptyValueValidator;\\n                            return <Column key={field} field={field} header={header} body={field === 'price' && priceBodyTemplate}\\n                                editor={(props) => inputTextEditor('products2', props, field)} editorValidator={validator}\\n                                onEditorInit={onEditorInit} onEditorCancel={onEditorCancel} onEditorSubmit={onEditorSubmit} />\\n                        })\\n                    }\\n                </DataTable>\\n            </div>\\n\\n            <div className=\\\"card\\\">\\n                <h5>Row Editing</h5>\\n                <DataTable value={products3} editMode=\\\"row\\\" dataKey=\\\"id\\\" onRowEditInit={onRowEditInit} onRowEditCancel={onRowEditCancel}>\\n                    <Column field=\\\"code\\\" header=\\\"Code\\\" editor={(props) => codeEditor('products3', props)}></Column>\\n                    <Column field=\\\"name\\\" header=\\\"Name\\\" editor={(props) => nameEditor('products3', props)}></Column>\\n                    <Column field=\\\"inventoryStatus\\\" header=\\\"Status\\\" body={statusBodyTemplate} editor={(props) => statusEditor('products3', props)}></Column>\\n                    <Column field=\\\"price\\\" header=\\\"Price\\\" body={priceBodyTemplate} editor={(props) => priceEditor('products3', props)}></Column>\\n                    <Column rowEditor headerStyle={{ width: '7rem' }} bodyStyle={{ textAlign: 'center' }}></Column>\\n                </DataTable>\\n            </div>\\n        </div>\\n    );\\n}\\n                \"}};_this7.extFiles={'src/demo/DataTableDemo.css':{content:\"\\n.datatable-editing-demo .editable-cells-table td.p-cell-editing {\\n    padding-top: 0;\\n    padding-bottom: 0;\\n}\\n                \"}};return _this7;}_createClass(DataTableEditDemoDoc,[{key:\"shouldComponentUpdate\",value:function shouldComponentUpdate(){return false;}},{key:\"render\",value:function render(){return/*#__PURE__*/React.createElement(\"div\",{className:\"content-section documentation\"},/*#__PURE__*/React.createElement(TabView,null,useLiveEditorTabs({name:'DataTableEditDemo',sources:this.sources,service:'ProductService',data:'products-small',extFiles:this.extFiles})));}}]);return DataTableEditDemoDoc;}(Component);","map":{"version":3,"sources":["C:/Users/zura.ph/WebstormProjects/slotmaster-dashboard/src/showcase/datatable/DataTableEditDemo.js"],"names":["React","Component","DataTable","Column","InputText","InputNumber","Dropdown","Toast","ProductService","TabView","useLiveEditorTabs","AppInlineHeader","DataTableEditDemo","props","state","products1","products2","products3","columns","field","header","statuses","label","value","editingCellRows","originalRows","productService","onRowEditInit","bind","onRowEditCancel","onEditorInit","onEditorCancel","onEditorSubmit","statusBodyTemplate","priceBodyTemplate","positiveIntegerValidator","emptyValueValidator","fetchProductData","productStateKey","getProductsSmall","then","data","setState","e","columnProps","rowData","isPositiveInteger","trim","length","val","str","String","replace","n","Math","floor","Number","Infinity","index","rowIndex","products","event","status","productKey","updatedProducts","onEditorValueChange","target","inputTextEditor","width","option","toLowerCase","getStatusLabel","inventoryStatus","Intl","NumberFormat","style","currency","format","price","el","toast","codeEditor","nameEditor","statusEditor","priceEditor","map","col","validator","textAlign","DataTableEditDemoDoc","sources","tabName","content","extFiles","name","service"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { DataTable } from '../../components/datatable/DataTable';\r\nimport { Column } from '../../components/column/Column';\r\nimport { InputText } from '../../components/inputtext/InputText';\r\nimport { InputNumber } from '../../components/inputnumber/InputNumber';\r\nimport { Dropdown } from '../../components/dropdown/Dropdown';\r\nimport { Toast } from '../../components/toast/Toast';\r\nimport ProductService from '../service/ProductService';\r\nimport { TabView } from '../../components/tabview/TabView';\r\nimport { useLiveEditorTabs }from '../liveeditor/LiveEditor';\r\nimport { AppInlineHeader } from '../../AppInlineHeader';\r\nimport './DataTableDemo.scss';\r\n\r\nexport class DataTableEditDemo extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            products1: null,\r\n            products2: null,\r\n            products3: null\r\n        };\r\n\r\n        this.columns = [\r\n            { field: 'code', header: 'Code' },\r\n            { field: 'name', header: 'Name' },\r\n            { field: 'quantity', header: 'Quantity' },\r\n            { field: 'price', header: 'Price' }\r\n        ];\r\n\r\n        this.statuses = [\r\n            { label: 'In Stock', value: 'INSTOCK' },\r\n            { label: 'Low Stock', value: 'LOWSTOCK' },\r\n            { label: 'Out of Stock', value: 'OUTOFSTOCK' }\r\n        ];\r\n\r\n        this.editingCellRows = {};\r\n        this.originalRows = {};\r\n\r\n        this.productService = new ProductService();\r\n        this.onRowEditInit = this.onRowEditInit.bind(this);\r\n        this.onRowEditCancel = this.onRowEditCancel.bind(this);\r\n        this.onEditorInit = this.onEditorInit.bind(this);\r\n        this.onEditorCancel = this.onEditorCancel.bind(this);\r\n        this.onEditorSubmit = this.onEditorSubmit.bind(this);\r\n        this.statusBodyTemplate = this.statusBodyTemplate.bind(this);\r\n        this.priceBodyTemplate = this.priceBodyTemplate.bind(this);\r\n        this.positiveIntegerValidator = this.positiveIntegerValidator.bind(this);\r\n        this.emptyValueValidator = this.emptyValueValidator.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.fetchProductData('products1');\r\n        this.fetchProductData('products2');\r\n        this.fetchProductData('products3');\r\n    }\r\n\r\n    fetchProductData(productStateKey) {\r\n        this.productService.getProductsSmall().then(data => this.setState({ [`${productStateKey}`]: data }));\r\n    }\r\n\r\n    positiveIntegerValidator(e) {\r\n        const { rowData, field } = e.columnProps;\r\n        return this.isPositiveInteger(rowData[field]);\r\n    }\r\n\r\n    emptyValueValidator(e) {\r\n        const { rowData, field } = e.columnProps;\r\n        return rowData[field].trim().length > 0;\r\n    }\r\n\r\n    isPositiveInteger(val) {\r\n        let str = String(val);\r\n        str = str.trim();\r\n        if (!str) {\r\n            return false;\r\n        }\r\n        str = str.replace(/^0+/, \"\") || \"0\";\r\n        let n = Math.floor(Number(str));\r\n        return n !== Infinity && String(n) === str && n >= 0;\r\n    }\r\n\r\n    onEditorInit(e) {\r\n        const { rowIndex: index, field, rowData } = e.columnProps;\r\n        if (!this.editingCellRows[index]) {\r\n            this.editingCellRows[index] = {...rowData};\r\n        }\r\n        this.editingCellRows[index][field] = this.state.products2[index][field];\r\n    }\r\n\r\n    onEditorCancel(e) {\r\n        const { rowIndex: index, field } = e.columnProps;\r\n        let products = [...this.state.products2];\r\n        products[index][field] = this.editingCellRows[index][field];\r\n        delete this.editingCellRows[index][field];\r\n\r\n        this.setState({\r\n            products2: products\r\n        });\r\n    }\r\n\r\n    onEditorSubmit(e) {\r\n        const { rowIndex: index, field } = e.columnProps;\r\n        delete this.editingCellRows[index][field];\r\n    }\r\n\r\n    onRowEditInit(event) {\r\n        this.originalRows[event.index] = { ...this.state.products3[event.index] };\r\n    }\r\n\r\n    onRowEditCancel(event) {\r\n        let products = [...this.state.products3];\r\n        products[event.index] = this.originalRows[event.index];\r\n        delete this.originalRows[event.index];\r\n\r\n        this.setState({ products3: products });\r\n    }\r\n\r\n    getStatusLabel(status) {\r\n        switch (status) {\r\n            case 'INSTOCK':\r\n                return 'In Stock';\r\n\r\n            case 'LOWSTOCK':\r\n                return 'Low Stock';\r\n\r\n            case 'OUTOFSTOCK':\r\n                return 'Out of Stock';\r\n\r\n            default:\r\n                return 'NA';\r\n        }\r\n    }\r\n\r\n    onEditorValueChange(productKey, props, value) {\r\n        let updatedProducts = [...props.value];\r\n        updatedProducts[props.rowIndex][props.field] = value;\r\n        this.setState({ [`${productKey}`]: updatedProducts });\r\n    }\r\n\r\n    inputTextEditor(productKey, props, field) {\r\n        return <InputText type=\"text\" value={props.rowData[field]} onChange={(e) => this.onEditorValueChange(productKey, props, e.target.value)} />;\r\n    }\r\n\r\n    codeEditor(productKey, props) {\r\n        return this.inputTextEditor(productKey, props, 'code');\r\n    }\r\n\r\n    nameEditor(productKey, props) {\r\n        return this.inputTextEditor(productKey, props, 'name');\r\n    }\r\n\r\n    priceEditor(productKey, props) {\r\n        return <InputNumber value={props.rowData['price']} onValueChange={(e) => this.onEditorValueChange(productKey, props, e.value)} mode=\"currency\" currency=\"USD\" locale=\"en-US\" />\r\n    }\r\n\r\n    statusEditor(productKey, props) {\r\n        return (\r\n            <Dropdown value={props.rowData['inventoryStatus']} options={this.statuses} optionLabel=\"label\" optionValue=\"value\"\r\n                onChange={(e) => this.onEditorValueChange(productKey, props, e.value)} style={{ width: '100%' }} placeholder=\"Select a Status\"\r\n                itemTemplate={(option) => {\r\n                    return <span className={`product-badge status-${option.value.toLowerCase()}`}>{option.label}</span>\r\n                }} />\r\n        );\r\n    }\r\n\r\n    statusBodyTemplate(rowData) {\r\n        return this.getStatusLabel(rowData.inventoryStatus);\r\n    }\r\n\r\n    priceBodyTemplate(rowData) {\r\n        return new Intl.NumberFormat('en-US', {style: 'currency', currency: 'USD'}).format(rowData.price);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div className=\"content-section introduction\">\r\n                    <AppInlineHeader changelogText=\"dataTable\">\r\n                        <h1>DataTable <span>Edit</span></h1>\r\n                        <p>Cell and Row editing provides a rapid and user friendly way to manipulate data.</p>\r\n                    </AppInlineHeader>\r\n                </div>\r\n\r\n                <div className=\"content-section implementation datatable-editing-demo\">\r\n                    <Toast ref={(el) => this.toast = el} />\r\n\r\n                    <div className=\"card\">\r\n                        <h5>Basic Cell Editing</h5>\r\n                        <DataTable value={this.state.products1} editMode=\"cell\" className=\"editable-cells-table\">\r\n                            <Column field=\"code\" header=\"Code\" editor={(props) => this.codeEditor('products1', props)}></Column>\r\n                            <Column field=\"name\" header=\"Name\" editor={(props) => this.nameEditor('products1', props)}></Column>\r\n                            <Column field=\"inventoryStatus\" header=\"Status\" body={this.statusBodyTemplate} editor={(props) => this.statusEditor('products1', props)}></Column>\r\n                            <Column field=\"price\" header=\"Price\" body={this.priceBodyTemplate} editor={(props) => this.priceEditor('products1', props)}></Column>\r\n                        </DataTable>\r\n                    </div>\r\n\r\n                    <div className=\"card\">\r\n                        <h5>Advanced Cell Editing</h5>\r\n                        <p>Custom implementation with validations, dynamic columns and reverting values with the escape key.</p>\r\n                        <DataTable value={this.state.products2} editMode=\"cell\" className=\"editable-cells-table\">\r\n                            {\r\n                                this.columns.map(col => {\r\n                                    const { field, header } = col;\r\n                                    const validator = (field === 'quantity' || field === 'price') ? this.positiveIntegerValidator : this.emptyValueValidator;\r\n                                    return <Column key={field} field={field} header={header} body={field === 'price' && this.priceBodyTemplate}\r\n                                        editor={(props) => this.inputTextEditor('products2', props, field)} editorValidator={validator}\r\n                                        onEditorInit={this.onEditorInit} onEditorCancel={this.onEditorCancel} onEditorSubmit={this.onEditorSubmit} />\r\n                                })\r\n                            }\r\n                        </DataTable>\r\n                    </div>\r\n\r\n                    <div className=\"card\">\r\n                        <h5>Row Editing</h5>\r\n                        <DataTable value={this.state.products3} editMode=\"row\" dataKey=\"id\" onRowEditInit={this.onRowEditInit} onRowEditCancel={this.onRowEditCancel}>\r\n                            <Column field=\"code\" header=\"Code\" editor={(props) => this.codeEditor('products3', props)}></Column>\r\n                            <Column field=\"name\" header=\"Name\" editor={(props) => this.nameEditor('products3', props)}></Column>\r\n                            <Column field=\"inventoryStatus\" header=\"Status\" body={this.statusBodyTemplate} editor={(props) => this.statusEditor('products3', props)}></Column>\r\n                            <Column field=\"price\" header=\"Price\" body={this.priceBodyTemplate} editor={(props) => this.priceEditor('products3', props)}></Column>\r\n                            <Column rowEditor headerStyle={{ width: '7rem' }} bodyStyle={{ textAlign: 'center' }}></Column>\r\n                        </DataTable>\r\n                    </div>\r\n                </div>\r\n\r\n                <DataTableEditDemoDoc></DataTableEditDemoDoc>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport class DataTableEditDemoDoc extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.sources = {\r\n            'class': {\r\n                tabName: 'Class Source',\r\n                content: `\r\nimport React, { Component } from 'react';\r\nimport { DataTable } from 'primereact/datatable';\r\nimport { Column } from 'primereact/column';\r\nimport { InputText } from 'primereact/inputtext';\r\nimport { InputNumber } from 'primereact/inputnumber';\r\nimport { Dropdown } from 'primereact/dropdown';\r\nimport { Toast } from 'primereact/toast';\r\nimport ProductService from '../service/ProductService';\r\nimport './DataTableDemo.css';\r\n\r\nexport class DataTableEditDemo extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            products1: null,\r\n            products2: null,\r\n            products3: null\r\n        };\r\n\r\n        this.columns = [\r\n            { field: 'code', header: 'Code' },\r\n            { field: 'name', header: 'Name' },\r\n            { field: 'quantity', header: 'Quantity' },\r\n            { field: 'price', header: 'Price' }\r\n        ];\r\n\r\n        this.statuses = [\r\n            { label: 'In Stock', value: 'INSTOCK' },\r\n            { label: 'Low Stock', value: 'LOWSTOCK' },\r\n            { label: 'Out of Stock', value: 'OUTOFSTOCK' }\r\n        ];\r\n\r\n        this.editingCellRows = {};\r\n        this.originalRows = {};\r\n\r\n        this.productService = new ProductService();\r\n        this.onRowEditInit = this.onRowEditInit.bind(this);\r\n        this.onRowEditCancel = this.onRowEditCancel.bind(this);\r\n        this.onEditorInit = this.onEditorInit.bind(this);\r\n        this.onEditorCancel = this.onEditorCancel.bind(this);\r\n        this.onEditorSubmit = this.onEditorSubmit.bind(this);\r\n        this.statusBodyTemplate = this.statusBodyTemplate.bind(this);\r\n        this.positiveIntegerValidator = this.positiveIntegerValidator.bind(this);\r\n        this.emptyValueValidator = this.emptyValueValidator.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.fetchProductData('products1');\r\n        this.fetchProductData('products2');\r\n        this.fetchProductData('products3');\r\n    }\r\n\r\n    fetchProductData(productStateKey) {\r\n        this.productService.getProductsSmall().then(data => this.setState({ [\\`\\${productStateKey}\\`]: data }));\r\n    }\r\n\r\n    positiveIntegerValidator(e) {\r\n        const { rowData, field } = e.columnProps;\r\n        return this.isPositiveInteger(rowData[field]);\r\n    }\r\n\r\n    emptyValueValidator(e) {\r\n        const { rowData, field } = e.columnProps;\r\n        return rowData[field].trim().length > 0;\r\n    }\r\n\r\n    isPositiveInteger(val) {\r\n        let str = String(val);\r\n        str = str.trim();\r\n        if (!str) {\r\n            return false;\r\n        }\r\n        str = str.replace(/^0+/, \"\") || \"0\";\r\n        let n = Math.floor(Number(str));\r\n        return n !== Infinity && String(n) === str && n >= 0;\r\n    }\r\n\r\n    onEditorInit(e) {\r\n        const { rowIndex: index, field, rowData } = e.columnProps;\r\n        if (!this.editingCellRows[index]) {\r\n            this.editingCellRows[index] = {...rowData};\r\n        }\r\n        this.editingCellRows[index][field] = this.state.products2[index][field];\r\n    }\r\n\r\n    onEditorCancel(e) {\r\n        const { rowIndex: index, field } = e.columnProps;\r\n        let products = [...this.state.products2];\r\n        products[index][field] = this.editingCellRows[index][field];\r\n        delete this.editingCellRows[index][field];\r\n\r\n        this.setState({\r\n            products2: products\r\n        });\r\n    }\r\n\r\n    onEditorSubmit(e) {\r\n        const { rowIndex: index, field } = e.columnProps;\r\n        delete this.editingCellRows[index][field];\r\n    }\r\n\r\n    onRowEditInit(event) {\r\n        this.originalRows[event.index] = { ...this.state.products3[event.index] };\r\n    }\r\n\r\n    onRowEditCancel(event) {\r\n        let products = [...this.state.products3];\r\n        products[event.index] = this.originalRows[event.index];\r\n        delete this.originalRows[event.index];\r\n\r\n        this.setState({ products3: products });\r\n    }\r\n\r\n    getStatusLabel(status) {\r\n        switch (status) {\r\n            case 'INSTOCK':\r\n                return 'In Stock';\r\n\r\n            case 'LOWSTOCK':\r\n                return 'Low Stock';\r\n\r\n            case 'OUTOFSTOCK':\r\n                return 'Out of Stock';\r\n\r\n            default:\r\n                return 'NA';\r\n        }\r\n    }\r\n\r\n    onEditorValueChange(productKey, props, value) {\r\n        let updatedProducts = [...props.value];\r\n        updatedProducts[props.rowIndex][props.field] = value;\r\n        this.setState({ [\\`\\${productKey}\\`]: updatedProducts });\r\n    }\r\n\r\n    inputTextEditor(productKey, props, field) {\r\n        return <InputText type=\"text\" value={props.rowData[field]} onChange={(e) => this.onEditorValueChange(productKey, props, e.target.value)} />;\r\n    }\r\n\r\n    codeEditor(productKey, props) {\r\n        return this.inputTextEditor(productKey, props, 'code');\r\n    }\r\n\r\n    nameEditor(productKey, props) {\r\n        return this.inputTextEditor(productKey, props, 'name');\r\n    }\r\n\r\n    priceEditor(productKey, props) {\r\n        return <InputNumber value={props.rowData['price']} onValueChange={(e) => this.onEditorValueChange(productKey, props, e.value)} mode=\"currency\" currency=\"USD\" locale=\"en-US\" />\r\n    }\r\n\r\n    statusEditor(productKey, props) {\r\n        return (\r\n            <Dropdown value={props.rowData['inventoryStatus']} options={this.statuses} optionLabel=\"label\" optionValue=\"value\"\r\n                onChange={(e) => this.onEditorValueChange(productKey, props, e.value)} style={{ width: '100%' }} placeholder=\"Select a Status\"\r\n                itemTemplate={(option) => {\r\n                    return <span className={\\`product-badge status-\\${option.value.toLowerCase()}\\`}>{option.label}</span>\r\n                }} />\r\n        );\r\n    }\r\n\r\n    statusBodyTemplate(rowData) {\r\n        return this.getStatusLabel(rowData.inventoryStatus);\r\n    }\r\n\r\n    priceBodyTemplate(rowData) {\r\n        return new Intl.NumberFormat('en-US', {style: 'currency', currency: 'USD'}).format(rowData.price);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"datatable-editing-demo\">\r\n                <Toast ref={(el) => this.toast = el} />\r\n\r\n                <div className=\"card\">\r\n                    <h5>Basic Cell Editing</h5>\r\n                    <DataTable value={this.state.products1} editMode=\"cell\" className=\"editable-cells-table\">\r\n                        <Column field=\"code\" header=\"Code\" editor={(props) => this.codeEditor('products1', props)}></Column>\r\n                        <Column field=\"name\" header=\"Name\" editor={(props) => this.nameEditor('products1', props)}></Column>\r\n                        <Column field=\"inventoryStatus\" header=\"Status\" body={this.statusBodyTemplate} editor={(props) => this.statusEditor('products1', props)}></Column>\r\n                        <Column field=\"price\" header=\"Price\" body={this.priceBodyTemplate} editor={(props) => this.priceEditor('products1', props)}></Column>\r\n                    </DataTable>\r\n                </div>\r\n\r\n                <div className=\"card\">\r\n                    <h5>Advanced Cell Editing</h5>\r\n                    <p>Custom implementation with validations, dynamic columns and reverting values with the escape key.</p>\r\n                    <DataTable value={this.state.products2} editMode=\"cell\" className=\"editable-cells-table\">\r\n                        {\r\n                            this.columns.map(col => {\r\n                                const { field, header } = col;\r\n                                const validator = (field === 'quantity' || field === 'price') ? this.positiveIntegerValidator : this.emptyValueValidator;\r\n                                return <Column key={field} field={field} header={header} body={field === 'price' && this.priceBodyTemplate}\r\n                                    editor={(props) => this.inputTextEditor('products2', props, field)} editorValidator={validator}\r\n                                    onEditorInit={this.onEditorInit} onEditorCancel={this.onEditorCancel} onEditorSubmit={this.onEditorSubmit} />\r\n                            })\r\n                        }\r\n                    </DataTable>\r\n                </div>\r\n\r\n                <div className=\"card\">\r\n                    <h5>Row Editing</h5>\r\n                    <DataTable value={this.state.products3} editMode=\"row\" dataKey=\"id\" onRowEditInit={this.onRowEditInit} onRowEditCancel={this.onRowEditCancel}>\r\n                        <Column field=\"code\" header=\"Code\" editor={(props) => this.codeEditor('products3', props)}></Column>\r\n                        <Column field=\"name\" header=\"Name\" editor={(props) => this.nameEditor('products3', props)}></Column>\r\n                        <Column field=\"inventoryStatus\" header=\"Status\" body={this.statusBodyTemplate} editor={(props) => this.statusEditor('products3', props)}></Column>\r\n                        <Column field=\"price\" header=\"Price\" body={this.priceBodyTemplate} editor={(props) => this.priceEditor('products3', props)}></Column>\r\n                        <Column rowEditor headerStyle={{ width: '7rem' }} bodyStyle={{ textAlign: 'center' }}></Column>\r\n                    </DataTable>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n                `\r\n            },\r\n            'hooks': {\r\n                tabName: 'Hooks Source',\r\n                content: `\r\nimport React, { useState, useEffect, useRef } from 'react';\r\nimport { DataTable } from 'primereact/datatable';\r\nimport { Column } from 'primereact/column';\r\nimport { InputText } from 'primereact/inputtext';\r\nimport { InputNumber } from 'primereact/inputnumber';\r\nimport { Dropdown } from 'primereact/dropdown';\r\nimport { Toast } from 'primereact/toast';\r\nimport ProductService from '../service/ProductService';\r\nimport './DataTableDemo.css';\r\n\r\nconst DataTableEditDemo = () => {\r\n    const [products1, setProducts1] = useState(null);\r\n    const [products2, setProducts2] = useState(null);\r\n    const [products3, setProducts3] = useState(null);\r\n    const toast = useRef(null);\r\n    const columns = [\r\n        { field: 'code', header: 'Code' },\r\n        { field: 'name', header: 'Name' },\r\n        { field: 'quantity', header: 'Quantity' },\r\n        { field: 'price', header: 'Price' }\r\n    ];\r\n\r\n    const statuses = [\r\n        { label: 'In Stock', value: 'INSTOCK' },\r\n        { label: 'Low Stock', value: 'LOWSTOCK' },\r\n        { label: 'Out of Stock', value: 'OUTOFSTOCK' }\r\n    ];\r\n\r\n    let editingCellRows = {};\r\n    let originalRows = {};\r\n\r\n    const dataTableFuncMap = {\r\n        'products1': setProducts1,\r\n        'products2': setProducts2,\r\n        'products3': setProducts3\r\n    };\r\n\r\n    const productService = new ProductService();\r\n\r\n    useEffect(() => {\r\n        fetchProductData('products1');\r\n        fetchProductData('products2');\r\n        fetchProductData('products3');\r\n    }, []); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n    const fetchProductData = (productStateKey) => {\r\n        productService.getProductsSmall().then(data => dataTableFuncMap[\\`\\${productStateKey}\\`](data));\r\n    }\r\n\r\n    const positiveIntegerValidator = (e) => {\r\n        const { rowData, field } = e.columnProps;\r\n        return isPositiveInteger(rowData[field]);\r\n    }\r\n\r\n    const emptyValueValidator = (e) => {\r\n        const { rowData, field } = e.columnProps;\r\n        return rowData[field].trim().length > 0;\r\n    }\r\n\r\n    const isPositiveInteger = (val) => {\r\n        let str = String(val);\r\n        str = str.trim();\r\n        if (!str) {\r\n            return false;\r\n        }\r\n        str = str.replace(/^0+/, \"\") || \"0\";\r\n        let n = Math.floor(Number(str));\r\n        return n !== Infinity && String(n) === str && n >= 0;\r\n    }\r\n\r\n    const onEditorInit = (e) => {\r\n        const { rowIndex: index, field, rowData } = e.columnProps;\r\n        if (!editingCellRows[index]) {\r\n            editingCellRows[index] = {...rowData};\r\n        }\r\n        editingCellRows[index][field] = products2[index][field];\r\n    }\r\n\r\n    const onEditorCancel = (e) => {\r\n        const { rowIndex: index, field } = e.columnProps;\r\n        let products = [...products2];\r\n        products[index][field] = editingCellRows[index][field];\r\n        delete editingCellRows[index][field];\r\n\r\n        setProducts2(products);\r\n    }\r\n\r\n    const onEditorSubmit = (e) => {\r\n        const { rowIndex: index, field } = e.columnProps;\r\n        delete editingCellRows[index][field];\r\n    }\r\n\r\n    const onRowEditInit = (event) => {\r\n        originalRows[event.index] = { ...products3[event.index] };\r\n    }\r\n\r\n    const onRowEditCancel = (event) => {\r\n        let products = [...products3];\r\n        products[event.index] = originalRows[event.index];\r\n        delete originalRows[event.index];\r\n\r\n        setProducts3(products);\r\n    }\r\n\r\n    const getStatusLabel = (status) => {\r\n        switch (status) {\r\n            case 'INSTOCK':\r\n                return 'In Stock';\r\n\r\n            case 'LOWSTOCK':\r\n                return 'Low Stock';\r\n\r\n            case 'OUTOFSTOCK':\r\n                return 'Out of Stock';\r\n\r\n            default:\r\n                return 'NA';\r\n        }\r\n    }\r\n\r\n    const onEditorValueChange = (productKey, props, value) => {\r\n        let updatedProducts = [...props.value];\r\n        updatedProducts[props.rowIndex][props.field] = value;\r\n        dataTableFuncMap[\\`\\${productKey}\\`](updatedProducts);\r\n    }\r\n\r\n    const inputTextEditor = (productKey, props, field) => {\r\n        return <InputText type=\"text\" value={props.rowData[field]} onChange={(e) => onEditorValueChange(productKey, props, e.target.value)} />;\r\n    }\r\n\r\n    const codeEditor = (productKey, props) => {\r\n        return inputTextEditor(productKey, props, 'code');\r\n    }\r\n\r\n    const nameEditor = (productKey, props) => {\r\n        return inputTextEditor(productKey, props, 'name');\r\n    }\r\n\r\n    const priceEditor = (productKey, props) => {\r\n        return <InputNumber value={props.rowData['price']} onValueChange={(e) => onEditorValueChange(productKey, props, e.value)} mode=\"currency\" currency=\"USD\" locale=\"en-US\" />\r\n    }\r\n\r\n    const statusEditor = (productKey, props) => {\r\n        return (\r\n            <Dropdown value={props.rowData['inventoryStatus']} options={statuses} optionLabel=\"label\" optionValue=\"value\"\r\n                onChange={(e) => onEditorValueChange(productKey, props, e.value)} style={{ width: '100%' }} placeholder=\"Select a Status\"\r\n                itemTemplate={(option) => {\r\n                    return <span className={\\`product-badge status-\\${option.value.toLowerCase()}\\`}>{option.label}</span>\r\n                }} />\r\n        );\r\n    }\r\n\r\n    const statusBodyTemplate = (rowData) => {\r\n        return getStatusLabel(rowData.inventoryStatus);\r\n    }\r\n\r\n    const priceBodyTemplate = (rowData) => {\r\n        return new Intl.NumberFormat('en-US', {style: 'currency', currency: 'USD'}).format(rowData.price);\r\n    }\r\n\r\n    return (\r\n        <div className=\"datatable-editing-demo\">\r\n            <Toast ref={toast} />\r\n\r\n            <div className=\"card\">\r\n                <h5>Basic Cell Editing</h5>\r\n                <DataTable value={products1} editMode=\"cell\" className=\"editable-cells-table\">\r\n                    <Column field=\"code\" header=\"Code\" editor={(props) => codeEditor('products1', props)}></Column>\r\n                    <Column field=\"name\" header=\"Name\" editor={(props) => nameEditor('products1', props)}></Column>\r\n                    <Column field=\"inventoryStatus\" header=\"Status\" body={statusBodyTemplate} editor={(props) => statusEditor('products1', props)}></Column>\r\n                    <Column field=\"price\" header=\"Price\" body={priceBodyTemplate} editor={(props) => priceEditor('products1', props)}></Column>\r\n                </DataTable>\r\n            </div>\r\n\r\n            <div className=\"card\">\r\n                <h5>Advanced Cell Editing</h5>\r\n                <p>Custom implementation with validations, dynamic columns and reverting values with the escape key.</p>\r\n                <DataTable value={products2} editMode=\"cell\" className=\"editable-cells-table\">\r\n                    {\r\n                        columns.map(col => {\r\n                            const { field, header } = col;\r\n                            const validator = (field === 'quantity' || field === 'price') ? positiveIntegerValidator : emptyValueValidator;\r\n                            return <Column key={field} field={field} header={header} body={field === 'price' && priceBodyTemplate}\r\n                                editor={(props) => inputTextEditor('products2', props, field)} editorValidator={validator}\r\n                                onEditorInit={onEditorInit} onEditorCancel={onEditorCancel} onEditorSubmit={onEditorSubmit} />\r\n                        })\r\n                    }\r\n                </DataTable>\r\n            </div>\r\n\r\n            <div className=\"card\">\r\n                <h5>Row Editing</h5>\r\n                <DataTable value={products3} editMode=\"row\" dataKey=\"id\" onRowEditInit={onRowEditInit} onRowEditCancel={onRowEditCancel}>\r\n                    <Column field=\"code\" header=\"Code\" editor={(props) => codeEditor('products3', props)}></Column>\r\n                    <Column field=\"name\" header=\"Name\" editor={(props) => nameEditor('products3', props)}></Column>\r\n                    <Column field=\"inventoryStatus\" header=\"Status\" body={statusBodyTemplate} editor={(props) => statusEditor('products3', props)}></Column>\r\n                    <Column field=\"price\" header=\"Price\" body={priceBodyTemplate} editor={(props) => priceEditor('products3', props)}></Column>\r\n                    <Column rowEditor headerStyle={{ width: '7rem' }} bodyStyle={{ textAlign: 'center' }}></Column>\r\n                </DataTable>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n                `\r\n            },\r\n            'ts': {\r\n                tabName: 'TS Source',\r\n                content: `\r\nimport React, { useState, useEffect, useRef } from 'react';\r\nimport { DataTable } from 'primereact/datatable';\r\nimport { Column } from 'primereact/column';\r\nimport { InputText } from 'primereact/inputtext';\r\nimport { InputNumber } from 'primereact/inputnumber';\r\nimport { Dropdown } from 'primereact/dropdown';\r\nimport { Toast } from 'primereact/toast';\r\nimport ProductService from '../service/ProductService';\r\nimport './DataTableDemo.css';\r\n\r\nconst DataTableEditDemo = () => {\r\n    const [products1, setProducts1] = useState(null);\r\n    const [products2, setProducts2] = useState(null);\r\n    const [products3, setProducts3] = useState(null);\r\n    const toast = useRef(null);\r\n    const columns = [\r\n        { field: 'code', header: 'Code' },\r\n        { field: 'name', header: 'Name' },\r\n        { field: 'quantity', header: 'Quantity' },\r\n        { field: 'price', header: 'Price' }\r\n    ];\r\n\r\n    const statuses = [\r\n        { label: 'In Stock', value: 'INSTOCK' },\r\n        { label: 'Low Stock', value: 'LOWSTOCK' },\r\n        { label: 'Out of Stock', value: 'OUTOFSTOCK' }\r\n    ];\r\n\r\n    let editingCellRows = {};\r\n    let originalRows = {};\r\n\r\n    const dataTableFuncMap = {\r\n        'products1': setProducts1,\r\n        'products2': setProducts2,\r\n        'products3': setProducts3\r\n    };\r\n\r\n    const productService = new ProductService();\r\n\r\n    useEffect(() => {\r\n        fetchProductData('products1');\r\n        fetchProductData('products2');\r\n        fetchProductData('products3');\r\n    }, []); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n    const fetchProductData = (productStateKey) => {\r\n        productService.getProductsSmall().then(data => dataTableFuncMap[\\`\\${productStateKey}\\`](data));\r\n    }\r\n\r\n    const positiveIntegerValidator = (e) => {\r\n        const { rowData, field } = e.columnProps;\r\n        return isPositiveInteger(rowData[field]);\r\n    }\r\n\r\n    const emptyValueValidator = (e) => {\r\n        const { rowData, field } = e.columnProps;\r\n        return rowData[field].trim().length > 0;\r\n    }\r\n\r\n    const isPositiveInteger = (val) => {\r\n        let str = String(val);\r\n        str = str.trim();\r\n        if (!str) {\r\n            return false;\r\n        }\r\n        str = str.replace(/^0+/, \"\") || \"0\";\r\n        let n = Math.floor(Number(str));\r\n        return n !== Infinity && String(n) === str && n >= 0;\r\n    }\r\n\r\n    const onEditorInit = (e) => {\r\n        const { rowIndex: index, field, rowData } = e.columnProps;\r\n        if (!editingCellRows[index]) {\r\n            editingCellRows[index] = {...rowData};\r\n        }\r\n        editingCellRows[index][field] = products2[index][field];\r\n    }\r\n\r\n    const onEditorCancel = (e) => {\r\n        const { rowIndex: index, field } = e.columnProps;\r\n        let products = [...products2];\r\n        products[index][field] = editingCellRows[index][field];\r\n        delete editingCellRows[index][field];\r\n\r\n        setProducts2(products);\r\n    }\r\n\r\n    const onEditorSubmit = (e) => {\r\n        const { rowIndex: index, field } = e.columnProps;\r\n        delete editingCellRows[index][field];\r\n    }\r\n\r\n    const onRowEditInit = (event) => {\r\n        originalRows[event.index] = { ...products3[event.index] };\r\n    }\r\n\r\n    const onRowEditCancel = (event) => {\r\n        let products = [...products3];\r\n        products[event.index] = originalRows[event.index];\r\n        delete originalRows[event.index];\r\n\r\n        setProducts3(products);\r\n    }\r\n\r\n    const getStatusLabel = (status) => {\r\n        switch (status) {\r\n            case 'INSTOCK':\r\n                return 'In Stock';\r\n\r\n            case 'LOWSTOCK':\r\n                return 'Low Stock';\r\n\r\n            case 'OUTOFSTOCK':\r\n                return 'Out of Stock';\r\n\r\n            default:\r\n                return 'NA';\r\n        }\r\n    }\r\n\r\n    const onEditorValueChange = (productKey, props, value) => {\r\n        let updatedProducts = [...props.value];\r\n        updatedProducts[props.rowIndex][props.field] = value;\r\n        dataTableFuncMap[\\`\\${productKey}\\`](updatedProducts);\r\n    }\r\n\r\n    const inputTextEditor = (productKey, props, field) => {\r\n        return <InputText type=\"text\" value={props.rowData[field]} onChange={(e) => onEditorValueChange(productKey, props, e.target.value)} />;\r\n    }\r\n\r\n    const codeEditor = (productKey, props) => {\r\n        return inputTextEditor(productKey, props, 'code');\r\n    }\r\n\r\n    const nameEditor = (productKey, props) => {\r\n        return inputTextEditor(productKey, props, 'name');\r\n    }\r\n\r\n    const priceEditor = (productKey, props) => {\r\n        return <InputNumber value={props.rowData['price']} onValueChange={(e) => onEditorValueChange(productKey, props, e.value)} mode=\"currency\" currency=\"USD\" locale=\"en-US\" />\r\n    }\r\n\r\n    const statusEditor = (productKey, props) => {\r\n        return (\r\n            <Dropdown value={props.rowData['inventoryStatus']} options={statuses} optionLabel=\"label\" optionValue=\"value\"\r\n                onChange={(e) => onEditorValueChange(productKey, props, e.value)} style={{ width: '100%' }} placeholder=\"Select a Status\"\r\n                itemTemplate={(option) => {\r\n                    return <span className={\\`product-badge status-\\${option.value.toLowerCase()}\\`}>{option.label}</span>\r\n                }} />\r\n        );\r\n    }\r\n\r\n    const statusBodyTemplate = (rowData) => {\r\n        return getStatusLabel(rowData.inventoryStatus);\r\n    }\r\n\r\n    const priceBodyTemplate = (rowData) => {\r\n        return new Intl.NumberFormat('en-US', {style: 'currency', currency: 'USD'}).format(rowData.price);\r\n    }\r\n\r\n    return (\r\n        <div className=\"datatable-editing-demo\">\r\n            <Toast ref={toast} />\r\n\r\n            <div className=\"card\">\r\n                <h5>Basic Cell Editing</h5>\r\n                <DataTable value={products1} editMode=\"cell\" className=\"editable-cells-table\">\r\n                    <Column field=\"code\" header=\"Code\" editor={(props) => codeEditor('products1', props)}></Column>\r\n                    <Column field=\"name\" header=\"Name\" editor={(props) => nameEditor('products1', props)}></Column>\r\n                    <Column field=\"inventoryStatus\" header=\"Status\" body={statusBodyTemplate} editor={(props) => statusEditor('products1', props)}></Column>\r\n                    <Column field=\"price\" header=\"Price\" body={priceBodyTemplate} editor={(props) => priceEditor('products1', props)}></Column>\r\n                </DataTable>\r\n            </div>\r\n\r\n            <div className=\"card\">\r\n                <h5>Advanced Cell Editing</h5>\r\n                <p>Custom implementation with validations, dynamic columns and reverting values with the escape key.</p>\r\n                <DataTable value={products2} editMode=\"cell\" className=\"editable-cells-table\">\r\n                    {\r\n                        columns.map(col => {\r\n                            const { field, header } = col;\r\n                            const validator = (field === 'quantity' || field === 'price') ? positiveIntegerValidator : emptyValueValidator;\r\n                            return <Column key={field} field={field} header={header} body={field === 'price' && priceBodyTemplate}\r\n                                editor={(props) => inputTextEditor('products2', props, field)} editorValidator={validator}\r\n                                onEditorInit={onEditorInit} onEditorCancel={onEditorCancel} onEditorSubmit={onEditorSubmit} />\r\n                        })\r\n                    }\r\n                </DataTable>\r\n            </div>\r\n\r\n            <div className=\"card\">\r\n                <h5>Row Editing</h5>\r\n                <DataTable value={products3} editMode=\"row\" dataKey=\"id\" onRowEditInit={onRowEditInit} onRowEditCancel={onRowEditCancel}>\r\n                    <Column field=\"code\" header=\"Code\" editor={(props) => codeEditor('products3', props)}></Column>\r\n                    <Column field=\"name\" header=\"Name\" editor={(props) => nameEditor('products3', props)}></Column>\r\n                    <Column field=\"inventoryStatus\" header=\"Status\" body={statusBodyTemplate} editor={(props) => statusEditor('products3', props)}></Column>\r\n                    <Column field=\"price\" header=\"Price\" body={priceBodyTemplate} editor={(props) => priceEditor('products3', props)}></Column>\r\n                    <Column rowEditor headerStyle={{ width: '7rem' }} bodyStyle={{ textAlign: 'center' }}></Column>\r\n                </DataTable>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n                `\r\n            }\r\n        };\r\n\r\n        this.extFiles = {\r\n            'src/demo/DataTableDemo.css': {\r\n                content: `\r\n.datatable-editing-demo .editable-cells-table td.p-cell-editing {\r\n    padding-top: 0;\r\n    padding-bottom: 0;\r\n}\r\n                `\r\n            }\r\n        }\r\n    }\r\n\r\n    shouldComponentUpdate() {\r\n        return false;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"content-section documentation\">\r\n                <TabView>\r\n                    {\r\n                        useLiveEditorTabs({ name: 'DataTableEditDemo', sources: this.sources, service: 'ProductService', data: 'products-small', extFiles: this.extFiles })\r\n                    }\r\n                </TabView>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}